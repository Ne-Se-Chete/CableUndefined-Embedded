
Cable Undefined V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000631c  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d58  08006500  08006500  00007500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007258  08007258  0000b040  2**0
                  CONTENTS
  4 .ARM          00000008  08007258  08007258  00008258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007260  08007260  0000b040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007260  08007260  00008260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007264  08007264  00008264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00002040  20000000  08007268  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003774  20002040  080092a8  0000b040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200057b4  080092a8  0000b7b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b040  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a359  00000000  00000000  0000b069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000245b  00000000  00000000  000153c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  00017820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ac  00000000  00000000  000183d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dc98  00000000  00000000  00018c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a331  00000000  00000000  0003691c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c767  00000000  00000000  00040c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd3b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cc8  00000000  00000000  000dd3f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000e10c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20002040 	.word	0x20002040
 8000200:	00000000 	.word	0x00000000
 8000204:	080064e8 	.word	0x080064e8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20002044 	.word	0x20002044
 8000220:	080064e8 	.word	0x080064e8

08000224 <strcmp>:
 8000224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800022c:	2a01      	cmp	r2, #1
 800022e:	bf28      	it	cs
 8000230:	429a      	cmpcs	r2, r3
 8000232:	d0f7      	beq.n	8000224 <strcmp>
 8000234:	1ad0      	subs	r0, r2, r3
 8000236:	4770      	bx	lr

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	0a1b      	lsrs	r3, r3, #8
 8000256:	b29a      	uxth	r2, r3
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	611a      	str	r2, [r3, #16]
}
 800025c:	bf00      	nop
 800025e:	370c      	adds	r7, #12
 8000260:	46bd      	mov	sp, r7
 8000262:	bc80      	pop	{r7}
 8000264:	4770      	bx	lr

08000266 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000266:	b480      	push	{r7}
 8000268:	b083      	sub	sp, #12
 800026a:	af00      	add	r7, sp, #0
 800026c:	6078      	str	r0, [r7, #4]
 800026e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	0a1b      	lsrs	r3, r3, #8
 8000274:	b29a      	uxth	r2, r3
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	615a      	str	r2, [r3, #20]
}
 800027a:	bf00      	nop
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr

08000284 <FAULT_CheckAndReport>:

/**
 * @brief Check which FAULT occurred and send the appropriate message
 */
void FAULT_CheckAndReport(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
    // Only process if an interrupt was triggered and message has not been sent
    if (!fault_sent) {
 800028a:	4b21      	ldr	r3, [pc, #132]	@ (8000310 <FAULT_CheckAndReport+0x8c>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	b2db      	uxtb	r3, r3
 8000290:	2b00      	cmp	r3, #0
 8000292:	d134      	bne.n	80002fe <FAULT_CheckAndReport+0x7a>
        uint8_t fault_msg[2] = {0xFF, 0x00};  // 0xFF = start byte, 0x00 = code
 8000294:	23ff      	movs	r3, #255	@ 0xff
 8000296:	80bb      	strh	r3, [r7, #4]
		[0xFF] [0x01] for 3v3
		[0xFF] [0x02] for 5V
		[0xFF] [0x03] for both
		 */

        if (fault_3v3_triggered && fault_5v_triggered) {
 8000298:	4b1e      	ldr	r3, [pc, #120]	@ (8000314 <FAULT_CheckAndReport+0x90>)
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	b2db      	uxtb	r3, r3
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d007      	beq.n	80002b2 <FAULT_CheckAndReport+0x2e>
 80002a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000318 <FAULT_CheckAndReport+0x94>)
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d002      	beq.n	80002b2 <FAULT_CheckAndReport+0x2e>
            fault_msg[1] = 0x03; // Both
 80002ac:	2303      	movs	r3, #3
 80002ae:	717b      	strb	r3, [r7, #5]
 80002b0:	e00e      	b.n	80002d0 <FAULT_CheckAndReport+0x4c>
        } else if (fault_3v3_triggered) {
 80002b2:	4b18      	ldr	r3, [pc, #96]	@ (8000314 <FAULT_CheckAndReport+0x90>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d002      	beq.n	80002c2 <FAULT_CheckAndReport+0x3e>
            fault_msg[1] = 0x01; // 3v3 only
 80002bc:	2301      	movs	r3, #1
 80002be:	717b      	strb	r3, [r7, #5]
 80002c0:	e006      	b.n	80002d0 <FAULT_CheckAndReport+0x4c>
        } else if (fault_5v_triggered) {
 80002c2:	4b15      	ldr	r3, [pc, #84]	@ (8000318 <FAULT_CheckAndReport+0x94>)
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d01c      	beq.n	8000306 <FAULT_CheckAndReport+0x82>
            fault_msg[1] = 0x02; // 5V only
 80002cc:	2302      	movs	r3, #2
 80002ce:	717b      	strb	r3, [r7, #5]
        } else {
            return; // No fault
        }

        // Send hex-formatted message via UART1 and UART3
        if (usingESP)
 80002d0:	4b12      	ldr	r3, [pc, #72]	@ (800031c <FAULT_CheckAndReport+0x98>)
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d006      	beq.n	80002e8 <FAULT_CheckAndReport+0x64>
        	sendRawUART(USART1, fault_msg, 2);
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	2202      	movs	r2, #2
 80002de:	4619      	mov	r1, r3
 80002e0:	480f      	ldr	r0, [pc, #60]	@ (8000320 <FAULT_CheckAndReport+0x9c>)
 80002e2:	f002 fddf 	bl	8002ea4 <sendRawUART>
 80002e6:	e00a      	b.n	80002fe <FAULT_CheckAndReport+0x7a>
        else if (usingCP2102)
 80002e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000324 <FAULT_CheckAndReport+0xa0>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d005      	beq.n	80002fe <FAULT_CheckAndReport+0x7a>
        	sendRawUART(USART3, fault_msg, 2);
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	2202      	movs	r2, #2
 80002f6:	4619      	mov	r1, r3
 80002f8:	480b      	ldr	r0, [pc, #44]	@ (8000328 <FAULT_CheckAndReport+0xa4>)
 80002fa:	f002 fdd3 	bl	8002ea4 <sendRawUART>
    }

    fault_sent = 1;
 80002fe:	4b04      	ldr	r3, [pc, #16]	@ (8000310 <FAULT_CheckAndReport+0x8c>)
 8000300:	2201      	movs	r2, #1
 8000302:	701a      	strb	r2, [r3, #0]
 8000304:	e000      	b.n	8000308 <FAULT_CheckAndReport+0x84>
            return; // No fault
 8000306:	bf00      	nop
}
 8000308:	3708      	adds	r7, #8
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	2000205e 	.word	0x2000205e
 8000314:	2000205c 	.word	0x2000205c
 8000318:	2000205d 	.word	0x2000205d
 800031c:	200055e0 	.word	0x200055e0
 8000320:	40013800 	.word	0x40013800
 8000324:	200055e1 	.word	0x200055e1
 8000328:	40004800 	.word	0x40004800

0800032c <FAULT_5v_HandleInterrupt>:


/**
 * @brief Handles the 5V FAULT interrupt, only sets flags
 */
void FAULT_5v_HandleInterrupt(void) {
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
    // Set trigger flag when interrupt occurs
	fault_5v_triggered = 1;
 8000330:	4b04      	ldr	r3, [pc, #16]	@ (8000344 <FAULT_5v_HandleInterrupt+0x18>)
 8000332:	2201      	movs	r2, #1
 8000334:	701a      	strb	r2, [r3, #0]
    fault_sent = 0;  // Reset message sent flag to allow new transmission
 8000336:	4b04      	ldr	r3, [pc, #16]	@ (8000348 <FAULT_5v_HandleInterrupt+0x1c>)
 8000338:	2200      	movs	r2, #0
 800033a:	701a      	strb	r2, [r3, #0]
}
 800033c:	bf00      	nop
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr
 8000344:	2000205d 	.word	0x2000205d
 8000348:	2000205e 	.word	0x2000205e

0800034c <FAULT_3v3_HandleInterrupt>:

/**
 * @brief Handles the 5V FAULT interrupt, only sets flags
 */
void FAULT_3v3_HandleInterrupt(void) {
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
    // Set trigger flag when interrupt occurs
	fault_3v3_triggered = 1;
 8000350:	4b04      	ldr	r3, [pc, #16]	@ (8000364 <FAULT_3v3_HandleInterrupt+0x18>)
 8000352:	2201      	movs	r2, #1
 8000354:	701a      	strb	r2, [r3, #0]
    fault_sent = 0;  // Reset message sent flag to allow new transmission
 8000356:	4b04      	ldr	r3, [pc, #16]	@ (8000368 <FAULT_3v3_HandleInterrupt+0x1c>)
 8000358:	2200      	movs	r2, #0
 800035a:	701a      	strb	r2, [r3, #0]
}
 800035c:	bf00      	nop
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr
 8000364:	2000205c 	.word	0x2000205c
 8000368:	2000205e 	.word	0x2000205e

0800036c <FAULT_5v_HandleMsg>:

void FAULT_5v_HandleMsg(void){
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	printf("Reseting the protection gpio, 5V");
 8000370:	480d      	ldr	r0, [pc, #52]	@ (80003a8 <FAULT_5v_HandleMsg+0x3c>)
 8000372:	f004 fbb5 	bl	8004ae0 <iprintf>
	fflush(stdout);
 8000376:	4b0d      	ldr	r3, [pc, #52]	@ (80003ac <FAULT_5v_HandleMsg+0x40>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	689b      	ldr	r3, [r3, #8]
 800037c:	4618      	mov	r0, r3
 800037e:	f004 fad9 	bl	8004934 <fflush>

	fault_5v_triggered = 0;
 8000382:	4b0b      	ldr	r3, [pc, #44]	@ (80003b0 <FAULT_5v_HandleMsg+0x44>)
 8000384:	2200      	movs	r2, #0
 8000386:	701a      	strb	r2, [r3, #0]
    fault_sent = 0;
 8000388:	4b0a      	ldr	r3, [pc, #40]	@ (80003b4 <FAULT_5v_HandleMsg+0x48>)
 800038a:	2200      	movs	r2, #0
 800038c:	701a      	strb	r2, [r3, #0]

    LL_GPIO_ResetOutputPin(PROTECTION_GPIO, PROTECTION_PIN);
 800038e:	490a      	ldr	r1, [pc, #40]	@ (80003b8 <FAULT_5v_HandleMsg+0x4c>)
 8000390:	480a      	ldr	r0, [pc, #40]	@ (80003bc <FAULT_5v_HandleMsg+0x50>)
 8000392:	f7ff ff68 	bl	8000266 <LL_GPIO_ResetOutputPin>
    LL_mDelay(20);
 8000396:	2014      	movs	r0, #20
 8000398:	f004 f9f2 	bl	8004780 <LL_mDelay>
    LL_GPIO_SetOutputPin(PROTECTION_GPIO, PROTECTION_PIN);
 800039c:	4906      	ldr	r1, [pc, #24]	@ (80003b8 <FAULT_5v_HandleMsg+0x4c>)
 800039e:	4807      	ldr	r0, [pc, #28]	@ (80003bc <FAULT_5v_HandleMsg+0x50>)
 80003a0:	f7ff ff52 	bl	8000248 <LL_GPIO_SetOutputPin>
}
 80003a4:	bf00      	nop
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	08006500 	.word	0x08006500
 80003ac:	20001ff0 	.word	0x20001ff0
 80003b0:	2000205d 	.word	0x2000205d
 80003b4:	2000205e 	.word	0x2000205e
 80003b8:	04080008 	.word	0x04080008
 80003bc:	40011800 	.word	0x40011800

080003c0 <FAULT_3v3_HandleMsg>:

void FAULT_3v3_HandleMsg(void){
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
	printf("reseting the protection gpio, 3V3");
 80003c4:	480d      	ldr	r0, [pc, #52]	@ (80003fc <FAULT_3v3_HandleMsg+0x3c>)
 80003c6:	f004 fb8b 	bl	8004ae0 <iprintf>
	fflush(stdout);
 80003ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000400 <FAULT_3v3_HandleMsg+0x40>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	689b      	ldr	r3, [r3, #8]
 80003d0:	4618      	mov	r0, r3
 80003d2:	f004 faaf 	bl	8004934 <fflush>

	fault_3v3_triggered = 0;
 80003d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000404 <FAULT_3v3_HandleMsg+0x44>)
 80003d8:	2200      	movs	r2, #0
 80003da:	701a      	strb	r2, [r3, #0]
    fault_sent = 0;
 80003dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000408 <FAULT_3v3_HandleMsg+0x48>)
 80003de:	2200      	movs	r2, #0
 80003e0:	701a      	strb	r2, [r3, #0]

    LL_GPIO_ResetOutputPin(PROTECTION_GPIO, PROTECTION_PIN);
 80003e2:	490a      	ldr	r1, [pc, #40]	@ (800040c <FAULT_3v3_HandleMsg+0x4c>)
 80003e4:	480a      	ldr	r0, [pc, #40]	@ (8000410 <FAULT_3v3_HandleMsg+0x50>)
 80003e6:	f7ff ff3e 	bl	8000266 <LL_GPIO_ResetOutputPin>
    LL_mDelay(20);
 80003ea:	2014      	movs	r0, #20
 80003ec:	f004 f9c8 	bl	8004780 <LL_mDelay>
    LL_GPIO_SetOutputPin(PROTECTION_GPIO, PROTECTION_PIN);
 80003f0:	4906      	ldr	r1, [pc, #24]	@ (800040c <FAULT_3v3_HandleMsg+0x4c>)
 80003f2:	4807      	ldr	r0, [pc, #28]	@ (8000410 <FAULT_3v3_HandleMsg+0x50>)
 80003f4:	f7ff ff28 	bl	8000248 <LL_GPIO_SetOutputPin>
}
 80003f8:	bf00      	nop
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	08006524 	.word	0x08006524
 8000400:	20001ff0 	.word	0x20001ff0
 8000404:	2000205c 	.word	0x2000205c
 8000408:	2000205e 	.word	0x2000205e
 800040c:	04080008 	.word	0x04080008
 8000410:	40011800 	.word	0x40011800

08000414 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	3b01      	subs	r3, #1
 8000422:	4a0a      	ldr	r2, [pc, #40]	@ (800044c <LL_DMA_EnableChannel+0x38>)
 8000424:	5cd3      	ldrb	r3, [r2, r3]
 8000426:	461a      	mov	r2, r3
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4413      	add	r3, r2
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	683a      	ldr	r2, [r7, #0]
 8000430:	3a01      	subs	r2, #1
 8000432:	4906      	ldr	r1, [pc, #24]	@ (800044c <LL_DMA_EnableChannel+0x38>)
 8000434:	5c8a      	ldrb	r2, [r1, r2]
 8000436:	4611      	mov	r1, r2
 8000438:	687a      	ldr	r2, [r7, #4]
 800043a:	440a      	add	r2, r1
 800043c:	f043 0301 	orr.w	r3, r3, #1
 8000440:	6013      	str	r3, [r2, #0]
}
 8000442:	bf00      	nop
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	080070c8 	.word	0x080070c8

08000450 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	3b01      	subs	r3, #1
 800045e:	4a0a      	ldr	r2, [pc, #40]	@ (8000488 <LL_DMA_DisableChannel+0x38>)
 8000460:	5cd3      	ldrb	r3, [r2, r3]
 8000462:	461a      	mov	r2, r3
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4413      	add	r3, r2
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	683a      	ldr	r2, [r7, #0]
 800046c:	3a01      	subs	r2, #1
 800046e:	4906      	ldr	r1, [pc, #24]	@ (8000488 <LL_DMA_DisableChannel+0x38>)
 8000470:	5c8a      	ldrb	r2, [r1, r2]
 8000472:	4611      	mov	r1, r2
 8000474:	687a      	ldr	r2, [r7, #4]
 8000476:	440a      	add	r2, r1
 8000478:	f023 0301 	bic.w	r3, r3, #1
 800047c:	6013      	str	r3, [r2, #0]
}
 800047e:	bf00      	nop
 8000480:	370c      	adds	r7, #12
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr
 8000488:	080070c8 	.word	0x080070c8

0800048c <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 800048c:	b480      	push	{r7}
 800048e:	b085      	sub	sp, #20
 8000490:	af00      	add	r7, sp, #0
 8000492:	60f8      	str	r0, [r7, #12]
 8000494:	60b9      	str	r1, [r7, #8]
 8000496:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000498:	68bb      	ldr	r3, [r7, #8]
 800049a:	3b01      	subs	r3, #1
 800049c:	4a0b      	ldr	r2, [pc, #44]	@ (80004cc <LL_DMA_SetDataLength+0x40>)
 800049e:	5cd3      	ldrb	r3, [r2, r3]
 80004a0:	461a      	mov	r2, r3
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	4413      	add	r3, r2
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	0c1b      	lsrs	r3, r3, #16
 80004aa:	041b      	lsls	r3, r3, #16
 80004ac:	68ba      	ldr	r2, [r7, #8]
 80004ae:	3a01      	subs	r2, #1
 80004b0:	4906      	ldr	r1, [pc, #24]	@ (80004cc <LL_DMA_SetDataLength+0x40>)
 80004b2:	5c8a      	ldrb	r2, [r1, r2]
 80004b4:	4611      	mov	r1, r2
 80004b6:	68fa      	ldr	r2, [r7, #12]
 80004b8:	440a      	add	r2, r1
 80004ba:	4611      	mov	r1, r2
 80004bc:	687a      	ldr	r2, [r7, #4]
 80004be:	4313      	orrs	r3, r2
 80004c0:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 80004c2:	bf00      	nop
 80004c4:	3714      	adds	r7, #20
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr
 80004cc:	080070c8 	.word	0x080070c8

080004d0 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
 80004dc:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80004de:	69bb      	ldr	r3, [r7, #24]
 80004e0:	2b10      	cmp	r3, #16
 80004e2:	d114      	bne.n	800050e <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	3b01      	subs	r3, #1
 80004e8:	4a15      	ldr	r2, [pc, #84]	@ (8000540 <LL_DMA_ConfigAddresses+0x70>)
 80004ea:	5cd3      	ldrb	r3, [r2, r3]
 80004ec:	461a      	mov	r2, r3
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	4413      	add	r3, r2
 80004f2:	461a      	mov	r2, r3
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	3b01      	subs	r3, #1
 80004fc:	4a10      	ldr	r2, [pc, #64]	@ (8000540 <LL_DMA_ConfigAddresses+0x70>)
 80004fe:	5cd3      	ldrb	r3, [r2, r3]
 8000500:	461a      	mov	r2, r3
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	4413      	add	r3, r2
 8000506:	461a      	mov	r2, r3
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
  }
}
 800050c:	e013      	b.n	8000536 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	3b01      	subs	r3, #1
 8000512:	4a0b      	ldr	r2, [pc, #44]	@ (8000540 <LL_DMA_ConfigAddresses+0x70>)
 8000514:	5cd3      	ldrb	r3, [r2, r3]
 8000516:	461a      	mov	r2, r3
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4413      	add	r3, r2
 800051c:	461a      	mov	r2, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	3b01      	subs	r3, #1
 8000526:	4a06      	ldr	r2, [pc, #24]	@ (8000540 <LL_DMA_ConfigAddresses+0x70>)
 8000528:	5cd3      	ldrb	r3, [r2, r3]
 800052a:	461a      	mov	r2, r3
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	4413      	add	r3, r2
 8000530:	461a      	mov	r2, r3
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	60d3      	str	r3, [r2, #12]
}
 8000536:	bf00      	nop
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
 8000540:	080070c8 	.word	0x080070c8

08000544 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f043 0201 	orr.w	r2, r3, #1
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	601a      	str	r2, [r3, #0]
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	bc80      	pop	{r7}
 8000560:	4770      	bx	lr

08000562 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 8000562:	b480      	push	{r7}
 8000564:	b083      	sub	sp, #12
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f023 0201 	bic.w	r2, r3, #1
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	601a      	str	r2, [r3, #0]
}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr

08000580 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6a1a      	ldr	r2, [r3, #32]
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	431a      	orrs	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	621a      	str	r2, [r3, #32]
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	6a1a      	ldr	r2, [r3, #32]
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	43db      	mvns	r3, r3
 80005b2:	401a      	ands	r2, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	621a      	str	r2, [r3, #32]
}
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr

080005c2 <LL_TIM_EnableDMAReq_CC1>:
  * @rmtoll DIER         CC1DE         LL_TIM_EnableDMAReq_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableDMAReq_CC1(TIM_TypeDef *TIMx)
{
 80005c2:	b480      	push	{r7}
 80005c4:	b083      	sub	sp, #12
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1DE);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	68db      	ldr	r3, [r3, #12]
 80005ce:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	60da      	str	r2, [r3, #12]
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr

080005e0 <LL_TIM_DisableDMAReq_CC1>:
  * @rmtoll DIER         CC1DE         LL_TIM_DisableDMAReq_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableDMAReq_CC1(TIM_TypeDef *TIMx)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1DE);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	60da      	str	r2, [r3, #12]
}
 80005f4:	bf00      	nop
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bc80      	pop	{r7}
 80005fc:	4770      	bx	lr
	...

08000600 <addToPin>:

LedEntry LedList[NUM_PIXELS];
uint8_t numActiveLeds = 0;


void addToPin(uint8_t pin, RGB_t color) {
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	6039      	str	r1, [r7, #0]
 800060a:	71fb      	strb	r3, [r7, #7]
    if (pin == 0 || pin > NUM_PIXELS || numActiveLeds >= NUM_PIXELS) {
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d034      	beq.n	800067c <addToPin+0x7c>
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	2b78      	cmp	r3, #120	@ 0x78
 8000616:	d831      	bhi.n	800067c <addToPin+0x7c>
 8000618:	4b1b      	ldr	r3, [pc, #108]	@ (8000688 <addToPin+0x88>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b77      	cmp	r3, #119	@ 0x77
 800061e:	d82d      	bhi.n	800067c <addToPin+0x7c>
        return;
    }

    // Update if pin already exists
    for (uint8_t i = 0; i < numActiveLeds; i++) {
 8000620:	2300      	movs	r3, #0
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	e010      	b.n	8000648 <addToPin+0x48>
        if (LedList[i].pin == pin) {
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	4a18      	ldr	r2, [pc, #96]	@ (800068c <addToPin+0x8c>)
 800062a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800062e:	79fa      	ldrb	r2, [r7, #7]
 8000630:	429a      	cmp	r2, r3
 8000632:	d106      	bne.n	8000642 <addToPin+0x42>
            LedList[i].color = color;
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	4a15      	ldr	r2, [pc, #84]	@ (800068c <addToPin+0x8c>)
 8000638:	00db      	lsls	r3, r3, #3
 800063a:	4413      	add	r3, r2
 800063c:	683a      	ldr	r2, [r7, #0]
 800063e:	605a      	str	r2, [r3, #4]
            return;
 8000640:	e01d      	b.n	800067e <addToPin+0x7e>
    for (uint8_t i = 0; i < numActiveLeds; i++) {
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	3301      	adds	r3, #1
 8000646:	73fb      	strb	r3, [r7, #15]
 8000648:	4b0f      	ldr	r3, [pc, #60]	@ (8000688 <addToPin+0x88>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	7bfa      	ldrb	r2, [r7, #15]
 800064e:	429a      	cmp	r2, r3
 8000650:	d3e9      	bcc.n	8000626 <addToPin+0x26>
        }
    }

    // Add new entry
    LedList[numActiveLeds].pin = pin;
 8000652:	4b0d      	ldr	r3, [pc, #52]	@ (8000688 <addToPin+0x88>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	4619      	mov	r1, r3
 8000658:	4a0c      	ldr	r2, [pc, #48]	@ (800068c <addToPin+0x8c>)
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	f802 3031 	strb.w	r3, [r2, r1, lsl #3]
    LedList[numActiveLeds].color = color;
 8000660:	4b09      	ldr	r3, [pc, #36]	@ (8000688 <addToPin+0x88>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	4a09      	ldr	r2, [pc, #36]	@ (800068c <addToPin+0x8c>)
 8000666:	00db      	lsls	r3, r3, #3
 8000668:	4413      	add	r3, r2
 800066a:	683a      	ldr	r2, [r7, #0]
 800066c:	605a      	str	r2, [r3, #4]
    numActiveLeds++;
 800066e:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <addToPin+0x88>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	3301      	adds	r3, #1
 8000674:	b2da      	uxtb	r2, r3
 8000676:	4b04      	ldr	r3, [pc, #16]	@ (8000688 <addToPin+0x88>)
 8000678:	701a      	strb	r2, [r3, #0]
 800067a:	e000      	b.n	800067e <addToPin+0x7e>
        return;
 800067c:	bf00      	nop
}
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	20005304 	.word	0x20005304
 800068c:	20004f44 	.word	0x20004f44

08000690 <removeFromPin>:

void removeFromPin(uint8_t pin) {
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
//    for (uint8_t k = 0; k < numActiveLeds; k++) {
//        printf("  Index %d: Pin %d -> R:%d G:%d B:%d\n", k, LedList[k].pin,
//               LedList[k].color.color.r, LedList[k].color.color.g, LedList[k].color.color.b);
//    }

    for (uint8_t i = 0; i < numActiveLeds; i++) {
 800069a:	2300      	movs	r3, #0
 800069c:	73fb      	strb	r3, [r7, #15]
 800069e:	e034      	b.n	800070a <removeFromPin+0x7a>
        if (LedList[i].pin == pin) {
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	4a1e      	ldr	r2, [pc, #120]	@ (800071c <removeFromPin+0x8c>)
 80006a4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80006a8:	79fa      	ldrb	r2, [r7, #7]
 80006aa:	429a      	cmp	r2, r3
 80006ac:	d12a      	bne.n	8000704 <removeFromPin+0x74>
//            printf("Found pin %d at index %d, removing...\n", pin, i);
            for (uint8_t j = i; j < numActiveLeds - 1; j++) {
 80006ae:	7bfb      	ldrb	r3, [r7, #15]
 80006b0:	73bb      	strb	r3, [r7, #14]
 80006b2:	e00f      	b.n	80006d4 <removeFromPin+0x44>
//                printf("Shifting index %d -> index %d (Pin %d)\n", j + 1, j, LedList[j + 1].pin);
                LedList[j] = LedList[j + 1];
 80006b4:	7bbb      	ldrb	r3, [r7, #14]
 80006b6:	1c5a      	adds	r2, r3, #1
 80006b8:	7bbb      	ldrb	r3, [r7, #14]
 80006ba:	4818      	ldr	r0, [pc, #96]	@ (800071c <removeFromPin+0x8c>)
 80006bc:	4917      	ldr	r1, [pc, #92]	@ (800071c <removeFromPin+0x8c>)
 80006be:	00db      	lsls	r3, r3, #3
 80006c0:	4403      	add	r3, r0
 80006c2:	00d2      	lsls	r2, r2, #3
 80006c4:	440a      	add	r2, r1
 80006c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ca:	e883 0003 	stmia.w	r3, {r0, r1}
            for (uint8_t j = i; j < numActiveLeds - 1; j++) {
 80006ce:	7bbb      	ldrb	r3, [r7, #14]
 80006d0:	3301      	adds	r3, #1
 80006d2:	73bb      	strb	r3, [r7, #14]
 80006d4:	7bba      	ldrb	r2, [r7, #14]
 80006d6:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <removeFromPin+0x90>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	3b01      	subs	r3, #1
 80006dc:	429a      	cmp	r2, r3
 80006de:	dbe9      	blt.n	80006b4 <removeFromPin+0x24>
            }
            numActiveLeds--;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <removeFromPin+0x90>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	3b01      	subs	r3, #1
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000720 <removeFromPin+0x90>)
 80006ea:	701a      	strb	r2, [r3, #0]
//            printf("LED removed. Updated LED list:\n");
            for (uint8_t k = 0; k < numActiveLeds; k++) {
 80006ec:	2300      	movs	r3, #0
 80006ee:	737b      	strb	r3, [r7, #13]
 80006f0:	e002      	b.n	80006f8 <removeFromPin+0x68>
 80006f2:	7b7b      	ldrb	r3, [r7, #13]
 80006f4:	3301      	adds	r3, #1
 80006f6:	737b      	strb	r3, [r7, #13]
 80006f8:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <removeFromPin+0x90>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	7b7a      	ldrb	r2, [r7, #13]
 80006fe:	429a      	cmp	r2, r3
 8000700:	d3f7      	bcc.n	80006f2 <removeFromPin+0x62>
//                printf("  Index %d: Pin %d -> R:%d G:%d B:%d\n", k, LedList[k].pin,
//                       LedList[k].color.color.r, LedList[k].color.color.g, LedList[k].color.color.b);
            }
//            printf("Remaining active LEDs: %d\n", numActiveLeds);
            return;
 8000702:	e007      	b.n	8000714 <removeFromPin+0x84>
    for (uint8_t i = 0; i < numActiveLeds; i++) {
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	3301      	adds	r3, #1
 8000708:	73fb      	strb	r3, [r7, #15]
 800070a:	4b05      	ldr	r3, [pc, #20]	@ (8000720 <removeFromPin+0x90>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	7bfa      	ldrb	r2, [r7, #15]
 8000710:	429a      	cmp	r2, r3
 8000712:	d3c5      	bcc.n	80006a0 <removeFromPin+0x10>
        }
    }
//    printf("Pin %d not found in active list. No changes made.\n", pin);
}
 8000714:	3714      	adds	r7, #20
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr
 800071c:	20004f44 	.word	0x20004f44
 8000720:	20005304 	.word	0x20005304

08000724 <clearLeds>:




void clearLeds(void) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
	numActiveLeds = 0;
 800072a:	4b15      	ldr	r3, [pc, #84]	@ (8000780 <clearLeds+0x5c>)
 800072c:	2200      	movs	r2, #0
 800072e:	701a      	strb	r2, [r3, #0]
    uint32_t *pBuff = dmaBuffer;
 8000730:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <clearLeds+0x60>)
 8000732:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < NUM_PIXELS * 24; i++) {
 8000734:	2300      	movs	r3, #0
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	e007      	b.n	800074a <clearLeds+0x26>
        *pBuff++ = NEOPIXEL_ZERO;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	1d1a      	adds	r2, r3, #4
 800073e:	607a      	str	r2, [r7, #4]
 8000740:	221d      	movs	r2, #29
 8000742:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < NUM_PIXELS * 24; i++) {
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	3301      	adds	r3, #1
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	f5b3 6f34 	cmp.w	r3, #2880	@ 0xb40
 8000750:	dbf3      	blt.n	800073a <clearLeds+0x16>
    }

    dmaBuffer[DMA_BUFF_SIZE - 1] = 0;
 8000752:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <clearLeds+0x60>)
 8000754:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000758:	461a      	mov	r2, r3
 800075a:	2300      	movs	r3, #0
 800075c:	f8c2 3d00 	str.w	r3, [r2, #3328]	@ 0xd00

    PWM_Start_DMA(TIM2, LL_TIM_CHANNEL_CH1, dmaBuffer, DMA_BUFF_SIZE);
 8000760:	f640 3341 	movw	r3, #2881	@ 0xb41
 8000764:	4a07      	ldr	r2, [pc, #28]	@ (8000784 <clearLeds+0x60>)
 8000766:	2101      	movs	r1, #1
 8000768:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800076c:	f000 f8b6 	bl	80008dc <PWM_Start_DMA>
    LL_mDelay(10);
 8000770:	200a      	movs	r0, #10
 8000772:	f004 f805 	bl	8004780 <LL_mDelay>
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20005304 	.word	0x20005304
 8000784:	20002240 	.word	0x20002240

08000788 <sendPixelData>:

void sendPixelData() {
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0
    LL_mDelay(10);
 800078e:	200a      	movs	r0, #10
 8000790:	f003 fff6 	bl	8004780 <LL_mDelay>
    if (numActiveLeds == 0) {
 8000794:	4b4d      	ldr	r3, [pc, #308]	@ (80008cc <sendPixelData+0x144>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d102      	bne.n	80007a2 <sendPixelData+0x1a>
        clearLeds();
 800079c:	f7ff ffc2 	bl	8000724 <clearLeds>
        return;
 80007a0:	e091      	b.n	80008c6 <sendPixelData+0x13e>
    }

//     Reset pixel buffer
    for (int i = 0; i < NUM_PIXELS; i++) {
 80007a2:	2300      	movs	r3, #0
 80007a4:	61fb      	str	r3, [r7, #28]
 80007a6:	e007      	b.n	80007b8 <sendPixelData+0x30>
        pixel[i].data = 0;
 80007a8:	4a49      	ldr	r2, [pc, #292]	@ (80008d0 <sendPixelData+0x148>)
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	2100      	movs	r1, #0
 80007ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < NUM_PIXELS; i++) {
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	3301      	adds	r3, #1
 80007b6:	61fb      	str	r3, [r7, #28]
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	2b77      	cmp	r3, #119	@ 0x77
 80007bc:	ddf4      	ble.n	80007a8 <sendPixelData+0x20>
    }

    // Copy assigned LED colors
    // Copy assigned LED colors
    for (uint8_t i = 0; i < numActiveLeds; i++) {
 80007be:	2300      	movs	r3, #0
 80007c0:	76fb      	strb	r3, [r7, #27]
 80007c2:	e041      	b.n	8000848 <sendPixelData+0xc0>
        uint8_t pin = LedList[i].pin;
 80007c4:	7efb      	ldrb	r3, [r7, #27]
 80007c6:	4a43      	ldr	r2, [pc, #268]	@ (80008d4 <sendPixelData+0x14c>)
 80007c8:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80007cc:	71fb      	strb	r3, [r7, #7]
        if (pin > 0 && pin <= NUM_PIXELS) {
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d036      	beq.n	8000842 <sendPixelData+0xba>
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	2b78      	cmp	r3, #120	@ 0x78
 80007d8:	d833      	bhi.n	8000842 <sendPixelData+0xba>
            pixel[pin - 1] = LedList[i].color;
 80007da:	7efb      	ldrb	r3, [r7, #27]
 80007dc:	79fa      	ldrb	r2, [r7, #7]
 80007de:	3a01      	subs	r2, #1
 80007e0:	493b      	ldr	r1, [pc, #236]	@ (80008d0 <sendPixelData+0x148>)
 80007e2:	483c      	ldr	r0, [pc, #240]	@ (80008d4 <sendPixelData+0x14c>)
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	4403      	add	r3, r0
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
            pixel[pin - 1].color.r >>= 2;
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	3b01      	subs	r3, #1
 80007f2:	4a37      	ldr	r2, [pc, #220]	@ (80008d0 <sendPixelData+0x148>)
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	4413      	add	r3, r2
 80007f8:	785a      	ldrb	r2, [r3, #1]
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	3b01      	subs	r3, #1
 80007fe:	0892      	lsrs	r2, r2, #2
 8000800:	b2d1      	uxtb	r1, r2
 8000802:	4a33      	ldr	r2, [pc, #204]	@ (80008d0 <sendPixelData+0x148>)
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	4413      	add	r3, r2
 8000808:	460a      	mov	r2, r1
 800080a:	705a      	strb	r2, [r3, #1]
            pixel[pin - 1].color.g >>= 2;
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	3b01      	subs	r3, #1
 8000810:	4a2f      	ldr	r2, [pc, #188]	@ (80008d0 <sendPixelData+0x148>)
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	4413      	add	r3, r2
 8000816:	789a      	ldrb	r2, [r3, #2]
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	3b01      	subs	r3, #1
 800081c:	0892      	lsrs	r2, r2, #2
 800081e:	b2d1      	uxtb	r1, r2
 8000820:	4a2b      	ldr	r2, [pc, #172]	@ (80008d0 <sendPixelData+0x148>)
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	4413      	add	r3, r2
 8000826:	460a      	mov	r2, r1
 8000828:	709a      	strb	r2, [r3, #2]
            pixel[pin - 1].color.b >>= 2;
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	3b01      	subs	r3, #1
 800082e:	4a28      	ldr	r2, [pc, #160]	@ (80008d0 <sendPixelData+0x148>)
 8000830:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	3b01      	subs	r3, #1
 8000838:	0892      	lsrs	r2, r2, #2
 800083a:	b2d1      	uxtb	r1, r2
 800083c:	4a24      	ldr	r2, [pc, #144]	@ (80008d0 <sendPixelData+0x148>)
 800083e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    for (uint8_t i = 0; i < numActiveLeds; i++) {
 8000842:	7efb      	ldrb	r3, [r7, #27]
 8000844:	3301      	adds	r3, #1
 8000846:	76fb      	strb	r3, [r7, #27]
 8000848:	4b20      	ldr	r3, [pc, #128]	@ (80008cc <sendPixelData+0x144>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	7efa      	ldrb	r2, [r7, #27]
 800084e:	429a      	cmp	r2, r3
 8000850:	d3b8      	bcc.n	80007c4 <sendPixelData+0x3c>
    }



    // Transfer pixel data into DMA buffer
    uint32_t *pBuff = dmaBuffer;
 8000852:	4b21      	ldr	r3, [pc, #132]	@ (80008d8 <sendPixelData+0x150>)
 8000854:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < NUM_PIXELS; i++) {
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	e01f      	b.n	800089c <sendPixelData+0x114>
//				printf("%d", bit);
//			}
//			printf("\n");
//		}

        for (int j = 23; j >= 0; j--) {
 800085c:	2317      	movs	r3, #23
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	e016      	b.n	8000890 <sendPixelData+0x108>
        	uint32_t bit = (pixel[i].data >> j) & 0x01 ? NEOPIXEL_ONE : NEOPIXEL_ZERO;
 8000862:	4a1b      	ldr	r2, [pc, #108]	@ (80008d0 <sendPixelData+0x148>)
 8000864:	693b      	ldr	r3, [r7, #16]
 8000866:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	fa22 f303 	lsr.w	r3, r2, r3
 8000870:	f003 0301 	and.w	r3, r3, #1
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <sendPixelData+0xf4>
 8000878:	233a      	movs	r3, #58	@ 0x3a
 800087a:	e000      	b.n	800087e <sendPixelData+0xf6>
 800087c:	231d      	movs	r3, #29
 800087e:	60bb      	str	r3, [r7, #8]

        	*pBuff++ = bit;
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	1d1a      	adds	r2, r3, #4
 8000884:	617a      	str	r2, [r7, #20]
 8000886:	68ba      	ldr	r2, [r7, #8]
 8000888:	601a      	str	r2, [r3, #0]
        for (int j = 23; j >= 0; j--) {
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	3b01      	subs	r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	2b00      	cmp	r3, #0
 8000894:	dae5      	bge.n	8000862 <sendPixelData+0xda>
    for (int i = 0; i < NUM_PIXELS; i++) {
 8000896:	693b      	ldr	r3, [r7, #16]
 8000898:	3301      	adds	r3, #1
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]
 800089e:	2b77      	cmp	r3, #119	@ 0x77
 80008a0:	dddc      	ble.n	800085c <sendPixelData+0xd4>
//        	dmaBuffer[i * 24 + j] = bit;
        }
    }

    dmaBuffer[DMA_BUFF_SIZE - 1] = 0;
 80008a2:	4b0d      	ldr	r3, [pc, #52]	@ (80008d8 <sendPixelData+0x150>)
 80008a4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80008a8:	461a      	mov	r2, r3
 80008aa:	2300      	movs	r3, #0
 80008ac:	f8c2 3d00 	str.w	r3, [r2, #3328]	@ 0xd00
  	PWM_Start_DMA(TIM2, LL_TIM_CHANNEL_CH1, dmaBuffer, DMA_BUFF_SIZE);
 80008b0:	f640 3341 	movw	r3, #2881	@ 0xb41
 80008b4:	4a08      	ldr	r2, [pc, #32]	@ (80008d8 <sendPixelData+0x150>)
 80008b6:	2101      	movs	r1, #1
 80008b8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80008bc:	f000 f80e 	bl	80008dc <PWM_Start_DMA>

    LL_mDelay(10);
 80008c0:	200a      	movs	r0, #10
 80008c2:	f003 ff5d 	bl	8004780 <LL_mDelay>
}
 80008c6:	3720      	adds	r7, #32
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20005304 	.word	0x20005304
 80008d0:	20002060 	.word	0x20002060
 80008d4:	20004f44 	.word	0x20004f44
 80008d8:	20002240 	.word	0x20002240

080008dc <PWM_Start_DMA>:




void PWM_Start_DMA(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t *buffer, uint32_t size)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af02      	add	r7, sp, #8
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
 80008e8:	603b      	str	r3, [r7, #0]
    // 1. Configure DMA source and destination
    LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_5,
 80008ea:	687a      	ldr	r2, [r7, #4]
                           (uint32_t)buffer,                      // Memory Address (source)
                           (uint32_t)&TIMx->CCR1,                 // Peripheral Address (destination)
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	3334      	adds	r3, #52	@ 0x34
    LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_5,
 80008f0:	4619      	mov	r1, r3
 80008f2:	2310      	movs	r3, #16
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	460b      	mov	r3, r1
 80008f8:	2105      	movs	r1, #5
 80008fa:	480d      	ldr	r0, [pc, #52]	@ (8000930 <PWM_Start_DMA+0x54>)
 80008fc:	f7ff fde8 	bl	80004d0 <LL_DMA_ConfigAddresses>
                           LL_DMA_DIRECTION_MEMORY_TO_PERIPH);    // Memory-to-Peripheral

    // 2. Set number of data items
    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_5, size);
 8000900:	683a      	ldr	r2, [r7, #0]
 8000902:	2105      	movs	r1, #5
 8000904:	480a      	ldr	r0, [pc, #40]	@ (8000930 <PWM_Start_DMA+0x54>)
 8000906:	f7ff fdc1 	bl	800048c <LL_DMA_SetDataLength>

    // 4. Enable DMA Stream
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_5);
 800090a:	2105      	movs	r1, #5
 800090c:	4808      	ldr	r0, [pc, #32]	@ (8000930 <PWM_Start_DMA+0x54>)
 800090e:	f7ff fd81 	bl	8000414 <LL_DMA_EnableChannel>

    // 5. Enable TIM2 DMA request for CC1
    LL_TIM_EnableDMAReq_CC1(TIMx);
 8000912:	68f8      	ldr	r0, [r7, #12]
 8000914:	f7ff fe55 	bl	80005c2 <LL_TIM_EnableDMAReq_CC1>

    // 6. Enable TIM2 Channel 1 (PWM mode must already be configured)
    LL_TIM_CC_EnableChannel(TIMx, Channel);
 8000918:	68b9      	ldr	r1, [r7, #8]
 800091a:	68f8      	ldr	r0, [r7, #12]
 800091c:	f7ff fe30 	bl	8000580 <LL_TIM_CC_EnableChannel>

    // 7. Start Timer
    LL_TIM_EnableCounter(TIMx);
 8000920:	68f8      	ldr	r0, [r7, #12]
 8000922:	f7ff fe0f 	bl	8000544 <LL_TIM_EnableCounter>
}
 8000926:	bf00      	nop
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40020000 	.word	0x40020000

08000934 <LL_TIM_PWM_PulseFinishedCallback>:

void LL_TIM_PWM_PulseFinishedCallback(TIM_TypeDef *TIMx)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	LL_TIM_DisableDMAReq_CC1(TIMx);
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f7ff fe4f 	bl	80005e0 <LL_TIM_DisableDMAReq_CC1>
	LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_5);
 8000942:	2105      	movs	r1, #5
 8000944:	4806      	ldr	r0, [pc, #24]	@ (8000960 <LL_TIM_PWM_PulseFinishedCallback+0x2c>)
 8000946:	f7ff fd83 	bl	8000450 <LL_DMA_DisableChannel>

	LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH1);
 800094a:	2101      	movs	r1, #1
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f7ff fe27 	bl	80005a0 <LL_TIM_CC_DisableChannel>
	LL_TIM_DisableCounter(TIMx);
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f7ff fe05 	bl	8000562 <LL_TIM_DisableCounter>
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40020000 	.word	0x40020000

08000964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000974:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800097a:	68ba      	ldr	r2, [r7, #8]
 800097c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000980:	4013      	ands	r3, r2
 8000982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800098c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000996:	4a04      	ldr	r2, [pc, #16]	@ (80009a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	60d3      	str	r3, [r2, #12]
}
 800099c:	bf00      	nop
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b0:	4b04      	ldr	r3, [pc, #16]	@ (80009c4 <__NVIC_GetPriorityGrouping+0x18>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	0a1b      	lsrs	r3, r3, #8
 80009b6:	f003 0307 	and.w	r3, r3, #7
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	db0b      	blt.n	80009f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	f003 021f 	and.w	r2, r3, #31
 80009e0:	4906      	ldr	r1, [pc, #24]	@ (80009fc <__NVIC_EnableIRQ+0x34>)
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	095b      	lsrs	r3, r3, #5
 80009e8:	2001      	movs	r0, #1
 80009ea:	fa00 f202 	lsl.w	r2, r0, r2
 80009ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr
 80009fc:	e000e100 	.word	0xe000e100

08000a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	6039      	str	r1, [r7, #0]
 8000a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	db0a      	blt.n	8000a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	490c      	ldr	r1, [pc, #48]	@ (8000a4c <__NVIC_SetPriority+0x4c>)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	0112      	lsls	r2, r2, #4
 8000a20:	b2d2      	uxtb	r2, r2
 8000a22:	440b      	add	r3, r1
 8000a24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a28:	e00a      	b.n	8000a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4908      	ldr	r1, [pc, #32]	@ (8000a50 <__NVIC_SetPriority+0x50>)
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	f003 030f 	and.w	r3, r3, #15
 8000a36:	3b04      	subs	r3, #4
 8000a38:	0112      	lsls	r2, r2, #4
 8000a3a:	b2d2      	uxtb	r2, r2
 8000a3c:	440b      	add	r3, r1
 8000a3e:	761a      	strb	r2, [r3, #24]
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000e100 	.word	0xe000e100
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b089      	sub	sp, #36	@ 0x24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	f1c3 0307 	rsb	r3, r3, #7
 8000a6e:	2b04      	cmp	r3, #4
 8000a70:	bf28      	it	cs
 8000a72:	2304      	movcs	r3, #4
 8000a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3304      	adds	r3, #4
 8000a7a:	2b06      	cmp	r3, #6
 8000a7c:	d902      	bls.n	8000a84 <NVIC_EncodePriority+0x30>
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	3b03      	subs	r3, #3
 8000a82:	e000      	b.n	8000a86 <NVIC_EncodePriority+0x32>
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a88:	f04f 32ff 	mov.w	r2, #4294967295
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	43da      	mvns	r2, r3
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	401a      	ands	r2, r3
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa6:	43d9      	mvns	r1, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aac:	4313      	orrs	r3, r2
         );
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3724      	adds	r7, #36	@ 0x24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b089      	sub	sp, #36	@ 0x24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	332c      	adds	r3, #44	@ 0x2c
 8000ac8:	4619      	mov	r1, r3
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8000ad0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000ad4:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ad6:	69ba      	ldr	r2, [r7, #24]
 8000ad8:	fa92 f2a2 	rbit	r2, r2
 8000adc:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ade:	697a      	ldr	r2, [r7, #20]
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	b2d2      	uxtb	r2, r2
 8000ae6:	40d3      	lsrs	r3, r2
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	440b      	add	r3, r1
 8000aec:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	f003 031f 	and.w	r3, r3, #31
 8000af8:	211f      	movs	r1, #31
 8000afa:	fa01 f303 	lsl.w	r3, r1, r3
 8000afe:	43db      	mvns	r3, r3
 8000b00:	401a      	ands	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f003 011f 	and.w	r1, r3, #31
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	f003 031f 	and.w	r3, r3, #31
 8000b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b12:	431a      	orrs	r2, r3
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000b18:	bf00      	nop
 8000b1a:	3724      	adds	r7, #36	@ 0x24
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr

08000b22 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000b22:	b480      	push	{r7}
 8000b24:	b08d      	sub	sp, #52	@ 0x34
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	60f8      	str	r0, [r7, #12]
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	330c      	adds	r3, #12
 8000b32:	4619      	mov	r1, r3
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b3a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b40:	69ba      	ldr	r2, [r7, #24]
 8000b42:	fa92 f2a2 	rbit	r2, r2
 8000b46:	617a      	str	r2, [r7, #20]
  return result;
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	fab2 f282 	clz	r2, r2
 8000b4e:	b2d2      	uxtb	r2, r2
 8000b50:	40d3      	lsrs	r3, r2
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	440b      	add	r3, r1
 8000b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  MODIFY_REG(*preg,
 8000b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8000b62:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8000b66:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b68:	6a39      	ldr	r1, [r7, #32]
 8000b6a:	fa91 f1a1 	rbit	r1, r1
 8000b6e:	61f9      	str	r1, [r7, #28]
  return result;
 8000b70:	69f9      	ldr	r1, [r7, #28]
 8000b72:	fab1 f181 	clz	r1, r1
 8000b76:	b2c9      	uxtb	r1, r1
 8000b78:	40cb      	lsrs	r3, r1
 8000b7a:	2107      	movs	r1, #7
 8000b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b80:	43db      	mvns	r3, r3
 8000b82:	401a      	ands	r2, r3
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8000b8a:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8000b8e:	62b9      	str	r1, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000b92:	fa91 f1a1 	rbit	r1, r1
 8000b96:	6279      	str	r1, [r7, #36]	@ 0x24
  return result;
 8000b98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000b9a:	fab1 f181 	clz	r1, r1
 8000b9e:	b2c9      	uxtb	r1, r1
 8000ba0:	40cb      	lsrs	r3, r1
 8000ba2:	6879      	ldr	r1, [r7, #4]
 8000ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba8:	431a      	orrs	r2, r3
 8000baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bac:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8000bae:	bf00      	nop
 8000bb0:	3734      	adds	r7, #52	@ 0x34
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr

08000bb8 <LL_DMA_SetDataTransferDirection>:
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	4a0c      	ldr	r2, [pc, #48]	@ (8000bfc <LL_DMA_SetDataTransferDirection+0x44>)
 8000bca:	5cd3      	ldrb	r3, [r2, r3]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000bd8:	f023 0310 	bic.w	r3, r3, #16
 8000bdc:	68ba      	ldr	r2, [r7, #8]
 8000bde:	3a01      	subs	r2, #1
 8000be0:	4906      	ldr	r1, [pc, #24]	@ (8000bfc <LL_DMA_SetDataTransferDirection+0x44>)
 8000be2:	5c8a      	ldrb	r2, [r1, r2]
 8000be4:	4611      	mov	r1, r2
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	440a      	add	r2, r1
 8000bea:	4611      	mov	r1, r2
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	600b      	str	r3, [r1, #0]
}
 8000bf2:	bf00      	nop
 8000bf4:	3714      	adds	r7, #20
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	080070d0 	.word	0x080070d0

08000c00 <LL_DMA_SetMode>:
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	4a0b      	ldr	r2, [pc, #44]	@ (8000c40 <LL_DMA_SetMode+0x40>)
 8000c12:	5cd3      	ldrb	r3, [r2, r3]
 8000c14:	461a      	mov	r2, r3
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	4413      	add	r3, r2
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f023 0220 	bic.w	r2, r3, #32
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	4906      	ldr	r1, [pc, #24]	@ (8000c40 <LL_DMA_SetMode+0x40>)
 8000c26:	5ccb      	ldrb	r3, [r1, r3]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	440b      	add	r3, r1
 8000c2e:	4619      	mov	r1, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	600b      	str	r3, [r1, #0]
}
 8000c36:	bf00      	nop
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr
 8000c40:	080070d0 	.word	0x080070d0

08000c44 <LL_DMA_SetPeriphIncMode>:
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	4a0b      	ldr	r2, [pc, #44]	@ (8000c84 <LL_DMA_SetPeriphIncMode+0x40>)
 8000c56:	5cd3      	ldrb	r3, [r2, r3]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	4906      	ldr	r1, [pc, #24]	@ (8000c84 <LL_DMA_SetPeriphIncMode+0x40>)
 8000c6a:	5ccb      	ldrb	r3, [r1, r3]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	440b      	add	r3, r1
 8000c72:	4619      	mov	r1, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	600b      	str	r3, [r1, #0]
}
 8000c7a:	bf00      	nop
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr
 8000c84:	080070d0 	.word	0x080070d0

08000c88 <LL_DMA_SetMemoryIncMode>:
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	4a0b      	ldr	r2, [pc, #44]	@ (8000cc8 <LL_DMA_SetMemoryIncMode+0x40>)
 8000c9a:	5cd3      	ldrb	r3, [r2, r3]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	4906      	ldr	r1, [pc, #24]	@ (8000cc8 <LL_DMA_SetMemoryIncMode+0x40>)
 8000cae:	5ccb      	ldrb	r3, [r1, r3]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	440b      	add	r3, r1
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	600b      	str	r3, [r1, #0]
}
 8000cbe:	bf00      	nop
 8000cc0:	3714      	adds	r7, #20
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	080070d0 	.word	0x080070d0

08000ccc <LL_DMA_SetPeriphSize>:
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8000d0c <LL_DMA_SetPeriphSize+0x40>)
 8000cde:	5cd3      	ldrb	r3, [r2, r3]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	4906      	ldr	r1, [pc, #24]	@ (8000d0c <LL_DMA_SetPeriphSize+0x40>)
 8000cf2:	5ccb      	ldrb	r3, [r1, r3]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	440b      	add	r3, r1
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	600b      	str	r3, [r1, #0]
}
 8000d02:	bf00      	nop
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	080070d0 	.word	0x080070d0

08000d10 <LL_DMA_SetMemorySize>:
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	4a0b      	ldr	r2, [pc, #44]	@ (8000d50 <LL_DMA_SetMemorySize+0x40>)
 8000d22:	5cd3      	ldrb	r3, [r2, r3]
 8000d24:	461a      	mov	r2, r3
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	4413      	add	r3, r2
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	4906      	ldr	r1, [pc, #24]	@ (8000d50 <LL_DMA_SetMemorySize+0x40>)
 8000d36:	5ccb      	ldrb	r3, [r1, r3]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	440b      	add	r3, r1
 8000d3e:	4619      	mov	r1, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	600b      	str	r3, [r1, #0]
}
 8000d46:	bf00      	nop
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr
 8000d50:	080070d0 	.word	0x080070d0

08000d54 <LL_DMA_SetChannelPriorityLevel>:
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	4a0b      	ldr	r2, [pc, #44]	@ (8000d94 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000d66:	5cd3      	ldrb	r3, [r2, r3]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	4906      	ldr	r1, [pc, #24]	@ (8000d94 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000d7a:	5ccb      	ldrb	r3, [r1, r3]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	440b      	add	r3, r1
 8000d82:	4619      	mov	r1, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	600b      	str	r3, [r1, #0]
}
 8000d8a:	bf00      	nop
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr
 8000d94:	080070d0 	.word	0x080070d0

08000d98 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	3b01      	subs	r3, #1
 8000da6:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd0 <LL_DMA_EnableIT_TC+0x38>)
 8000da8:	5cd3      	ldrb	r3, [r2, r3]
 8000daa:	461a      	mov	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4413      	add	r3, r2
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	683a      	ldr	r2, [r7, #0]
 8000db4:	3a01      	subs	r2, #1
 8000db6:	4906      	ldr	r1, [pc, #24]	@ (8000dd0 <LL_DMA_EnableIT_TC+0x38>)
 8000db8:	5c8a      	ldrb	r2, [r1, r2]
 8000dba:	4611      	mov	r1, r2
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	440a      	add	r2, r1
 8000dc0:	f043 0302 	orr.w	r3, r3, #2
 8000dc4:	6013      	str	r3, [r2, #0]
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr
 8000dd0:	080070d0 	.word	0x080070d0

08000dd4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000dd8:	4b04      	ldr	r3, [pc, #16]	@ (8000dec <LL_RCC_HSE_Enable+0x18>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a03      	ldr	r2, [pc, #12]	@ (8000dec <LL_RCC_HSE_Enable+0x18>)
 8000dde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000de2:	6013      	str	r3, [r2, #0]
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr
 8000dec:	40021000 	.word	0x40021000

08000df0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000df4:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <LL_RCC_HSE_IsReady+0x20>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000e00:	bf0c      	ite	eq
 8000e02:	2301      	moveq	r3, #1
 8000e04:	2300      	movne	r3, #0
 8000e06:	b2db      	uxtb	r3, r3
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr
 8000e10:	40021000 	.word	0x40021000

08000e14 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000e1c:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <LL_RCC_SetSysClkSource+0x24>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f023 0203 	bic.w	r2, r3, #3
 8000e24:	4904      	ldr	r1, [pc, #16]	@ (8000e38 <LL_RCC_SetSysClkSource+0x24>)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	604b      	str	r3, [r1, #4]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	40021000 	.word	0x40021000

08000e3c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000e40:	4b03      	ldr	r3, [pc, #12]	@ (8000e50 <LL_RCC_GetSysClkSource+0x14>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 030c 	and.w	r3, r3, #12
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	40021000 	.word	0x40021000

08000e54 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000e5c:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <LL_RCC_SetAHBPrescaler+0x24>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e64:	4904      	ldr	r1, [pc, #16]	@ (8000e78 <LL_RCC_SetAHBPrescaler+0x24>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	604b      	str	r3, [r1, #4]
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40021000 	.word	0x40021000

08000e7c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000e84:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000e8c:	4904      	ldr	r1, [pc, #16]	@ (8000ea0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	604b      	str	r3, [r1, #4]
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	40021000 	.word	0x40021000

08000ea4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000eac:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000eb4:	4904      	ldr	r1, [pc, #16]	@ (8000ec8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	604b      	str	r3, [r1, #4]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40021000 	.word	0x40021000

08000ecc <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8000ed4:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <LL_RCC_SetADCClockSource+0x24>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8000edc:	4904      	ldr	r1, [pc, #16]	@ (8000ef0 <LL_RCC_SetADCClockSource+0x24>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	604b      	str	r3, [r1, #4]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000ef8:	4b04      	ldr	r3, [pc, #16]	@ (8000f0c <LL_RCC_PLL_Enable+0x18>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a03      	ldr	r2, [pc, #12]	@ (8000f0c <LL_RCC_PLL_Enable+0x18>)
 8000efe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f02:	6013      	str	r3, [r2, #0]
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	40021000 	.word	0x40021000

08000f10 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <LL_RCC_PLL_IsReady+0x20>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000f20:	bf0c      	ite	eq
 8000f22:	2301      	moveq	r3, #1
 8000f24:	2300      	movne	r3, #0
 8000f26:	b2db      	uxtb	r3, r3
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	40021000 	.word	0x40021000

08000f34 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8000f3e:	4b11      	ldr	r3, [pc, #68]	@ (8000f84 <LL_RCC_PLL_ConfigDomain_SYS+0x50>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	430b      	orrs	r3, r1
 8000f50:	490c      	ldr	r1, [pc, #48]	@ (8000f84 <LL_RCC_PLL_ConfigDomain_SYS+0x50>)
 8000f52:	4313      	orrs	r3, r2
 8000f54:	604b      	str	r3, [r1, #4]
             (Source & (RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE)) | PLLMul);
#if defined(RCC_CFGR2_PREDIV1)
#if defined(RCC_CFGR2_PREDIV1SRC)
  MODIFY_REG(RCC->CFGR2, (RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC),
 8000f56:	4b0b      	ldr	r3, [pc, #44]	@ (8000f84 <LL_RCC_PLL_ConfigDomain_SYS+0x50>)
 8000f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f5e:	f023 030f 	bic.w	r3, r3, #15
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	f002 010f 	and.w	r1, r2, #15
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	0912      	lsrs	r2, r2, #4
 8000f6c:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 8000f70:	430a      	orrs	r2, r1
 8000f72:	4904      	ldr	r1, [pc, #16]	@ (8000f84 <LL_RCC_PLL_ConfigDomain_SYS+0x50>)
 8000f74:	4313      	orrs	r3, r2
 8000f76:	62cb      	str	r3, [r1, #44]	@ 0x2c
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	40021000 	.word	0x40021000

08000f88 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000f90:	4b08      	ldr	r3, [pc, #32]	@ (8000fb4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f92:	695a      	ldr	r2, [r3, #20]
 8000f94:	4907      	ldr	r1, [pc, #28]	@ (8000fb4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000f9c:	4b05      	ldr	r3, [pc, #20]	@ (8000fb4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f9e:	695a      	ldr	r2, [r3, #20]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000fc0:	4b08      	ldr	r3, [pc, #32]	@ (8000fe4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fc2:	69da      	ldr	r2, [r3, #28]
 8000fc4:	4907      	ldr	r1, [pc, #28]	@ (8000fe4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000fcc:	4b05      	ldr	r3, [pc, #20]	@ (8000fe4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fce:	69da      	ldr	r2, [r3, #28]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ff0:	4b08      	ldr	r3, [pc, #32]	@ (8001014 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ff2:	699a      	ldr	r2, [r3, #24]
 8000ff4:	4907      	ldr	r1, [pc, #28]	@ (8001014 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ffc:	4b05      	ldr	r3, [pc, #20]	@ (8001014 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ffe:	699a      	ldr	r2, [r3, #24]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4013      	ands	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001006:	68fb      	ldr	r3, [r7, #12]
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40021000 	.word	0x40021000

08001018 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001020:	4b06      	ldr	r3, [pc, #24]	@ (800103c <LL_FLASH_SetLatency+0x24>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f023 0207 	bic.w	r2, r3, #7
 8001028:	4904      	ldr	r1, [pc, #16]	@ (800103c <LL_FLASH_SetLatency+0x24>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4313      	orrs	r3, r2
 800102e:	600b      	str	r3, [r1, #0]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40022000 	.word	0x40022000

08001040 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001044:	4b03      	ldr	r3, [pc, #12]	@ (8001054 <LL_FLASH_GetLatency+0x14>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0307 	and.w	r3, r3, #7
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	40022000 	.word	0x40022000

08001058 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001060:	4b05      	ldr	r3, [pc, #20]	@ (8001078 <LL_EXTI_EnableIT_0_31+0x20>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4904      	ldr	r1, [pc, #16]	@ (8001078 <LL_EXTI_EnableIT_0_31+0x20>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4313      	orrs	r3, r2
 800106a:	600b      	str	r3, [r1, #0]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40010400 	.word	0x40010400

0800107c <LL_TIM_EnableCounter>:
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f043 0201 	orr.w	r2, r3, #1
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	601a      	str	r2, [r3, #0]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr

0800109a <LL_TIM_DisableARRPreload>:
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	601a      	str	r2, [r3, #0]
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr

080010b8 <LL_TIM_OC_DisableFast>:
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d01c      	beq.n	8001102 <LL_TIM_OC_DisableFast+0x4a>
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	d017      	beq.n	80010fe <LL_TIM_OC_DisableFast+0x46>
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	2b10      	cmp	r3, #16
 80010d2:	d012      	beq.n	80010fa <LL_TIM_OC_DisableFast+0x42>
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	2b40      	cmp	r3, #64	@ 0x40
 80010d8:	d00d      	beq.n	80010f6 <LL_TIM_OC_DisableFast+0x3e>
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010e0:	d007      	beq.n	80010f2 <LL_TIM_OC_DisableFast+0x3a>
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010e8:	d101      	bne.n	80010ee <LL_TIM_OC_DisableFast+0x36>
 80010ea:	2305      	movs	r3, #5
 80010ec:	e00a      	b.n	8001104 <LL_TIM_OC_DisableFast+0x4c>
 80010ee:	2306      	movs	r3, #6
 80010f0:	e008      	b.n	8001104 <LL_TIM_OC_DisableFast+0x4c>
 80010f2:	2304      	movs	r3, #4
 80010f4:	e006      	b.n	8001104 <LL_TIM_OC_DisableFast+0x4c>
 80010f6:	2303      	movs	r3, #3
 80010f8:	e004      	b.n	8001104 <LL_TIM_OC_DisableFast+0x4c>
 80010fa:	2302      	movs	r3, #2
 80010fc:	e002      	b.n	8001104 <LL_TIM_OC_DisableFast+0x4c>
 80010fe:	2301      	movs	r3, #1
 8001100:	e000      	b.n	8001104 <LL_TIM_OC_DisableFast+0x4c>
 8001102:	2300      	movs	r3, #0
 8001104:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3318      	adds	r3, #24
 800110a:	4619      	mov	r1, r3
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	4a0a      	ldr	r2, [pc, #40]	@ (8001138 <LL_TIM_OC_DisableFast+0x80>)
 8001110:	5cd3      	ldrb	r3, [r2, r3]
 8001112:	440b      	add	r3, r1
 8001114:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	4907      	ldr	r1, [pc, #28]	@ (800113c <LL_TIM_OC_DisableFast+0x84>)
 800111e:	5ccb      	ldrb	r3, [r1, r3]
 8001120:	4619      	mov	r1, r3
 8001122:	2304      	movs	r3, #4
 8001124:	408b      	lsls	r3, r1
 8001126:	43db      	mvns	r3, r3
 8001128:	401a      	ands	r2, r3
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	601a      	str	r2, [r3, #0]
}
 800112e:	bf00      	nop
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr
 8001138:	080070d8 	.word	0x080070d8
 800113c:	080070e0 	.word	0x080070e0

08001140 <LL_TIM_OC_EnablePreload>:
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d01c      	beq.n	800118a <LL_TIM_OC_EnablePreload+0x4a>
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	2b04      	cmp	r3, #4
 8001154:	d017      	beq.n	8001186 <LL_TIM_OC_EnablePreload+0x46>
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	2b10      	cmp	r3, #16
 800115a:	d012      	beq.n	8001182 <LL_TIM_OC_EnablePreload+0x42>
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	2b40      	cmp	r3, #64	@ 0x40
 8001160:	d00d      	beq.n	800117e <LL_TIM_OC_EnablePreload+0x3e>
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001168:	d007      	beq.n	800117a <LL_TIM_OC_EnablePreload+0x3a>
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001170:	d101      	bne.n	8001176 <LL_TIM_OC_EnablePreload+0x36>
 8001172:	2305      	movs	r3, #5
 8001174:	e00a      	b.n	800118c <LL_TIM_OC_EnablePreload+0x4c>
 8001176:	2306      	movs	r3, #6
 8001178:	e008      	b.n	800118c <LL_TIM_OC_EnablePreload+0x4c>
 800117a:	2304      	movs	r3, #4
 800117c:	e006      	b.n	800118c <LL_TIM_OC_EnablePreload+0x4c>
 800117e:	2303      	movs	r3, #3
 8001180:	e004      	b.n	800118c <LL_TIM_OC_EnablePreload+0x4c>
 8001182:	2302      	movs	r3, #2
 8001184:	e002      	b.n	800118c <LL_TIM_OC_EnablePreload+0x4c>
 8001186:	2301      	movs	r3, #1
 8001188:	e000      	b.n	800118c <LL_TIM_OC_EnablePreload+0x4c>
 800118a:	2300      	movs	r3, #0
 800118c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3318      	adds	r3, #24
 8001192:	4619      	mov	r1, r3
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	4a0a      	ldr	r2, [pc, #40]	@ (80011c0 <LL_TIM_OC_EnablePreload+0x80>)
 8001198:	5cd3      	ldrb	r3, [r2, r3]
 800119a:	440b      	add	r3, r1
 800119c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	4907      	ldr	r1, [pc, #28]	@ (80011c4 <LL_TIM_OC_EnablePreload+0x84>)
 80011a6:	5ccb      	ldrb	r3, [r1, r3]
 80011a8:	4619      	mov	r1, r3
 80011aa:	2308      	movs	r3, #8
 80011ac:	408b      	lsls	r3, r1
 80011ae:	431a      	orrs	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	601a      	str	r2, [r3, #0]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	080070d8 	.word	0x080070d8
 80011c4:	080070e0 	.word	0x080070e0

080011c8 <LL_TIM_SetClockSource>:
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80011da:	f023 0307 	bic.w	r3, r3, #7
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	431a      	orrs	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	609a      	str	r2, [r3, #8]
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr

080011f0 <LL_TIM_SetTriggerOutput>:
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	431a      	orrs	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	605a      	str	r2, [r3, #4]
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <LL_TIM_DisableMasterSlaveMode>:
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	609a      	str	r2, [r3, #8]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr

08001232 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	60da      	str	r2, [r3, #12]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr

08001250 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	615a      	str	r2, [r3, #20]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr

0800127a <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800128a:	2b40      	cmp	r3, #64	@ 0x40
 800128c:	bf0c      	ite	eq
 800128e:	2301      	moveq	r3, #1
 8001290:	2300      	movne	r3, #0
 8001292:	b2db      	uxtb	r3, r3
}
 8001294:	4618      	mov	r0, r3
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr

0800129e <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ae:	2b80      	cmp	r3, #128	@ 0x80
 80012b0:	bf0c      	ite	eq
 80012b2:	2301      	moveq	r3, #1
 80012b4:	2300      	movne	r3, #0
 80012b6:	b2db      	uxtb	r3, r3
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr

080012c2 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b089      	sub	sp, #36	@ 0x24
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	330c      	adds	r3, #12
 80012ce:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	e853 3f00 	ldrex	r3, [r3]
 80012d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	f043 0320 	orr.w	r3, r3, #32
 80012de:	61fb      	str	r3, [r7, #28]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	330c      	adds	r3, #12
 80012e4:	69fa      	ldr	r2, [r7, #28]
 80012e6:	61ba      	str	r2, [r7, #24]
 80012e8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80012ea:	6979      	ldr	r1, [r7, #20]
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	e841 2300 	strex	r3, r2, [r1]
 80012f2:	613b      	str	r3, [r7, #16]
   return(result);
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1e7      	bne.n	80012ca <LL_USART_EnableIT_RXNE+0x8>
}
 80012fa:	bf00      	nop
 80012fc:	bf00      	nop
 80012fe:	3724      	adds	r7, #36	@ 0x24
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr

08001306 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
 800130e:	460b      	mov	r3, r1
 8001310:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001312:	78fa      	ldrb	r2, [r7, #3]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	605a      	str	r2, [r3, #4]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr

08001322 <LL_GPIO_SetPinMode>:
{
 8001322:	b490      	push	{r4, r7}
 8001324:	b088      	sub	sp, #32
 8001326:	af00      	add	r7, sp, #0
 8001328:	60f8      	str	r0, [r7, #12]
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	461a      	mov	r2, r3
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	0e1b      	lsrs	r3, r3, #24
 8001336:	4413      	add	r3, r2
 8001338:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800133a:	6822      	ldr	r2, [r4, #0]
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa93 f3a3 	rbit	r3, r3
 8001346:	613b      	str	r3, [r7, #16]
  return result;
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	fab3 f383 	clz	r3, r3
 800134e:	b2db      	uxtb	r3, r3
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	210f      	movs	r1, #15
 8001354:	fa01 f303 	lsl.w	r3, r1, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	401a      	ands	r2, r3
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	fa93 f3a3 	rbit	r3, r3
 8001366:	61bb      	str	r3, [r7, #24]
  return result;
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	fab3 f383 	clz	r3, r3
 800136e:	b2db      	uxtb	r3, r3
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	fa01 f303 	lsl.w	r3, r1, r3
 8001378:	4313      	orrs	r3, r2
 800137a:	6023      	str	r3, [r4, #0]
}
 800137c:	bf00      	nop
 800137e:	3720      	adds	r7, #32
 8001380:	46bd      	mov	sp, r7
 8001382:	bc90      	pop	{r4, r7}
 8001384:	4770      	bx	lr

08001386 <LL_GPIO_SetOutputPin>:
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	0a1b      	lsrs	r3, r3, #8
 8001394:	b29a      	uxth	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	611a      	str	r2, [r3, #16]
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr

080013a4 <LL_GPIO_ResetOutputPin>:
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	0a1b      	lsrs	r3, r3, #8
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	615a      	str	r2, [r3, #20]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr
	...

080013c4 <LL_GPIO_AF_EnableRemap_USART2>:
  * @rmtoll MAPR          USART2_REMAP           LL_GPIO_AF_EnableRemap_USART2
  * @note  ENABLE: Remap     (CTS/PD3, RTS/PD4, TX/PD5, RX/PD6, CK/PD7)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_USART2(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_USART2_REMAP | AFIO_MAPR_SWJ_CFG);
 80013c8:	4b05      	ldr	r3, [pc, #20]	@ (80013e0 <LL_GPIO_AF_EnableRemap_USART2+0x1c>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	4a04      	ldr	r2, [pc, #16]	@ (80013e0 <LL_GPIO_AF_EnableRemap_USART2+0x1c>)
 80013ce:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80013d2:	f043 0308 	orr.w	r3, r3, #8
 80013d6:	6053      	str	r3, [r2, #4]
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr
 80013e0:	40010000 	.word	0x40010000

080013e4 <LL_GPIO_AF_RemapPartial1_TIM2>:
  * @rmtoll MAPR          TIM2_REMAP           LL_GPIO_AF_RemapPartial1_TIM2
  * @note  PARTIAL_1: Partial remap (CH1/ETR/PA15, CH2/PB3, CH3/PA2,  CH4/PA3)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_RemapPartial1_TIM2(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM2_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1 | AFIO_MAPR_SWJ_CFG));
 80013e8:	4b07      	ldr	r3, [pc, #28]	@ (8001408 <LL_GPIO_AF_RemapPartial1_TIM2+0x24>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80013f4:	4a04      	ldr	r2, [pc, #16]	@ (8001408 <LL_GPIO_AF_RemapPartial1_TIM2+0x24>)
 80013f6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80013fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013fe:	6053      	str	r3, [r2, #4]
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr
 8001408:	40010000 	.word	0x40010000

0800140c <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8001410:	4b05      	ldr	r3, [pc, #20]	@ (8001428 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001418:	4a03      	ldr	r2, [pc, #12]	@ (8001428 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 800141a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800141e:	6053      	str	r3, [r2, #4]
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	40010000 	.word	0x40010000

0800142c <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8001436:	4a13      	ldr	r2, [pc, #76]	@ (8001484 <LL_GPIO_AF_SetEXTISource+0x58>)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	b2db      	uxtb	r3, r3
 800143c:	3302      	adds	r3, #2
 800143e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	0c1b      	lsrs	r3, r3, #16
 8001446:	43db      	mvns	r3, r3
 8001448:	ea02 0103 	and.w	r1, r2, r3
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	0c1b      	lsrs	r3, r3, #16
 8001450:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	fa93 f3a3 	rbit	r3, r3
 8001458:	60bb      	str	r3, [r7, #8]
  return result;
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	fab3 f383 	clz	r3, r3
 8001460:	b2db      	uxtb	r3, r3
 8001462:	461a      	mov	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	fa03 f202 	lsl.w	r2, r3, r2
 800146a:	4806      	ldr	r0, [pc, #24]	@ (8001484 <LL_GPIO_AF_SetEXTISource+0x58>)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	b2db      	uxtb	r3, r3
 8001470:	430a      	orrs	r2, r1
 8001472:	3302      	adds	r3, #2
 8001474:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40010000 	.word	0x40010000

08001488 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Погледни чата с г-н Стефанов, _write e блокираща функция

int _write(int file, char *ptr, int len) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	e011      	b.n	80014be <_write+0x36>
        while (!LL_USART_IsActiveFlag_TXE(USART2));  // Wait until TX buffer is empty
 800149a:	bf00      	nop
 800149c:	4810      	ldr	r0, [pc, #64]	@ (80014e0 <_write+0x58>)
 800149e:	f7ff fefe 	bl	800129e <LL_USART_IsActiveFlag_TXE>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0f9      	beq.n	800149c <_write+0x14>
        LL_USART_TransmitData8(USART2, ptr[i]);      // Send byte
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	4413      	add	r3, r2
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	4619      	mov	r1, r3
 80014b2:	480b      	ldr	r0, [pc, #44]	@ (80014e0 <_write+0x58>)
 80014b4:	f7ff ff27 	bl	8001306 <LL_USART_TransmitData8>
    for (int i = 0; i < len; i++) {
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	3301      	adds	r3, #1
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	dbe9      	blt.n	800149a <_write+0x12>
    }

    while (!LL_USART_IsActiveFlag_TC(USART2));  // Wait for last transmission to complete
 80014c6:	bf00      	nop
 80014c8:	4805      	ldr	r0, [pc, #20]	@ (80014e0 <_write+0x58>)
 80014ca:	f7ff fed6 	bl	800127a <LL_USART_IsActiveFlag_TC>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0f9      	beq.n	80014c8 <_write+0x40>
    return len;
 80014d4:	687b      	ldr	r3, [r7, #4]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40004400 	.word	0x40004400

080014e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 80014e8:	2001      	movs	r0, #1
 80014ea:	f7ff fd7d 	bl	8000fe8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80014ee:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80014f2:	f7ff fd61 	bl	8000fb8 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f6:	2003      	movs	r0, #3
 80014f8:	f7ff fa34 	bl	8000964 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80014fc:	f7ff fa56 	bl	80009ac <__NVIC_GetPriorityGrouping>
 8001500:	4603      	mov	r3, r0
 8001502:	2200      	movs	r2, #0
 8001504:	210f      	movs	r1, #15
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff faa4 	bl	8000a54 <NVIC_EncodePriority>
 800150c:	4603      	mov	r3, r0
 800150e:	4619      	mov	r1, r3
 8001510:	f04f 30ff 	mov.w	r0, #4294967295
 8001514:	f7ff fa74 	bl	8000a00 <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8001518:	f7ff ff78 	bl	800140c <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800151c:	f000 f850 	bl	80015c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001520:	f000 fb8e 	bl	8001c40 <MX_GPIO_Init>
  MX_DMA_Init();
 8001524:	f000 fb64 	bl	8001bf0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001528:	f000 f88c 	bl	8001644 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800152c:	f000 fa38 	bl	80019a0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001530:	f000 fa9e 	bl	8001a70 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001534:	f000 faf4 	bl	8001b20 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8001538:	f000 fa08 	bl	800194c <MX_TIM6_Init>
  MX_TIM2_Init();
 800153c:	f000 f96a 	bl	8001814 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Enable UART Interupts
  LL_USART_EnableIT_RXNE(USART1);
 8001540:	4817      	ldr	r0, [pc, #92]	@ (80015a0 <main+0xbc>)
 8001542:	f7ff febe 	bl	80012c2 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART3);
 8001546:	4817      	ldr	r0, [pc, #92]	@ (80015a4 <main+0xc0>)
 8001548:	f7ff febb 	bl	80012c2 <LL_USART_EnableIT_RXNE>

  // Enable EXTI Fault GPIO Interrupts
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_12);
 800154c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001550:	f7ff fd82 	bl	8001058 <LL_EXTI_EnableIT_0_31>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_13);
 8001554:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001558:	f7ff fd7e 	bl	8001058 <LL_EXTI_EnableIT_0_31>

  // Enable DMA Interrupt
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_5);
 800155c:	2105      	movs	r1, #5
 800155e:	4812      	ldr	r0, [pc, #72]	@ (80015a8 <main+0xc4>)
 8001560:	f7ff fc1a 	bl	8000d98 <LL_DMA_EnableIT_TC>

  LL_TIM_EnableCounter(TIM6);
 8001564:	4811      	ldr	r0, [pc, #68]	@ (80015ac <main+0xc8>)
 8001566:	f7ff fd89 	bl	800107c <LL_TIM_EnableCounter>

  OscilloscopeInit();
 800156a:	f001 fe17 	bl	800319c <OscilloscopeInit>

  // Reset all Muxes
  LL_GPIO_SetOutputPin(RST_GPIO, RST_PIN);
 800156e:	4910      	ldr	r1, [pc, #64]	@ (80015b0 <main+0xcc>)
 8001570:	4810      	ldr	r0, [pc, #64]	@ (80015b4 <main+0xd0>)
 8001572:	f7ff ff08 	bl	8001386 <LL_GPIO_SetOutputPin>
  LL_mDelay(20);
 8001576:	2014      	movs	r0, #20
 8001578:	f003 f902 	bl	8004780 <LL_mDelay>
  LL_GPIO_ResetOutputPin(RST_GPIO, RST_PIN);
 800157c:	490c      	ldr	r1, [pc, #48]	@ (80015b0 <main+0xcc>)
 800157e:	480d      	ldr	r0, [pc, #52]	@ (80015b4 <main+0xd0>)
 8001580:	f7ff ff10 	bl	80013a4 <LL_GPIO_ResetOutputPin>
  LL_mDelay(20);
 8001584:	2014      	movs	r0, #20
 8001586:	f003 f8fb 	bl	8004780 <LL_mDelay>

  // Enable Protection
  LL_GPIO_SetOutputPin(PROTECTION_GPIO, PROTECTION_PIN);
 800158a:	490b      	ldr	r1, [pc, #44]	@ (80015b8 <main+0xd4>)
 800158c:	480b      	ldr	r0, [pc, #44]	@ (80015bc <main+0xd8>)
 800158e:	f7ff fefa 	bl	8001386 <LL_GPIO_SetOutputPin>
	  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		  sendADCData();
 8001592:	f001 fe47 	bl	8003224 <sendADCData>
		  FAULT_CheckAndReport();  // Only sends UART if a fault was detected
 8001596:	f7fe fe75 	bl	8000284 <FAULT_CheckAndReport>
		  sendADCData();
 800159a:	bf00      	nop
 800159c:	e7f9      	b.n	8001592 <main+0xae>
 800159e:	bf00      	nop
 80015a0:	40013800 	.word	0x40013800
 80015a4:	40004800 	.word	0x40004800
 80015a8:	40020000 	.word	0x40020000
 80015ac:	40001000 	.word	0x40001000
 80015b0:	04020002 	.word	0x04020002
 80015b4:	40010c00 	.word	0x40010c00
 80015b8:	04080008 	.word	0x04080008
 80015bc:	40011800 	.word	0x40011800

080015c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80015c4:	2002      	movs	r0, #2
 80015c6:	f7ff fd27 	bl	8001018 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 80015ca:	bf00      	nop
 80015cc:	f7ff fd38 	bl	8001040 <LL_FLASH_GetLatency>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d1fa      	bne.n	80015cc <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 80015d6:	f7ff fbfd 	bl	8000dd4 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80015da:	bf00      	nop
 80015dc:	f7ff fc08 	bl	8000df0 <LL_RCC_HSE_IsReady>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d1fa      	bne.n	80015dc <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 80015e6:	f44f 11e0 	mov.w	r1, #1835008	@ 0x1c0000
 80015ea:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80015ee:	f7ff fca1 	bl	8000f34 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80015f2:	f7ff fc7f 	bl	8000ef4 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80015f6:	bf00      	nop
 80015f8:	f7ff fc8a 	bl	8000f10 <LL_RCC_PLL_IsReady>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d1fa      	bne.n	80015f8 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001602:	2000      	movs	r0, #0
 8001604:	f7ff fc26 	bl	8000e54 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001608:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800160c:	f7ff fc36 	bl	8000e7c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001610:	2000      	movs	r0, #0
 8001612:	f7ff fc47 	bl	8000ea4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001616:	2002      	movs	r0, #2
 8001618:	f7ff fbfc 	bl	8000e14 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800161c:	bf00      	nop
 800161e:	f7ff fc0d 	bl	8000e3c <LL_RCC_GetSysClkSource>
 8001622:	4603      	mov	r3, r0
 8001624:	2b08      	cmp	r3, #8
 8001626:	d1fa      	bne.n	800161e <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(72000000);
 8001628:	4805      	ldr	r0, [pc, #20]	@ (8001640 <SystemClock_Config+0x80>)
 800162a:	f003 f89b 	bl	8004764 <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 800162e:	4804      	ldr	r0, [pc, #16]	@ (8001640 <SystemClock_Config+0x80>)
 8001630:	f003 f8ca 	bl	80047c8 <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_6);
 8001634:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001638:	f7ff fc48 	bl	8000ecc <LL_RCC_SetADCClockSource>
}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}
 8001640:	044aa200 	.word	0x044aa200

08001644 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08e      	sub	sp, #56	@ 0x38
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800164a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001654:	2300      	movs	r3, #0
 8001656:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001658:	f107 0318 	add.w	r3, r7, #24
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
 8001674:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8001676:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800167a:	f7ff fcb5 	bl	8000fe8 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800167e:	2004      	movs	r0, #4
 8001680:	f7ff fcb2 	bl	8000fe8 <LL_APB2_GRP1_EnableClock>
  PA4   ------> ADC1_IN4
  PA5   ------> ADC1_IN5
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 8001684:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001688:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800168a:	2300      	movs	r3, #0
 800168c:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	4619      	mov	r1, r3
 8001692:	4856      	ldr	r0, [pc, #344]	@ (80017ec <MX_ADC1_Init+0x1a8>)
 8001694:	f002 facf 	bl	8003c36 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001698:	2200      	movs	r2, #0
 800169a:	2101      	movs	r1, #1
 800169c:	4854      	ldr	r0, [pc, #336]	@ (80017f0 <MX_ADC1_Init+0x1ac>)
 800169e:	f7ff fa8b 	bl	8000bb8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_HIGH);
 80016a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016a6:	2101      	movs	r1, #1
 80016a8:	4851      	ldr	r0, [pc, #324]	@ (80017f0 <MX_ADC1_Init+0x1ac>)
 80016aa:	f7ff fb53 	bl	8000d54 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 80016ae:	2220      	movs	r2, #32
 80016b0:	2101      	movs	r1, #1
 80016b2:	484f      	ldr	r0, [pc, #316]	@ (80017f0 <MX_ADC1_Init+0x1ac>)
 80016b4:	f7ff faa4 	bl	8000c00 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2101      	movs	r1, #1
 80016bc:	484c      	ldr	r0, [pc, #304]	@ (80017f0 <MX_ADC1_Init+0x1ac>)
 80016be:	f7ff fac1 	bl	8000c44 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 80016c2:	2280      	movs	r2, #128	@ 0x80
 80016c4:	2101      	movs	r1, #1
 80016c6:	484a      	ldr	r0, [pc, #296]	@ (80017f0 <MX_ADC1_Init+0x1ac>)
 80016c8:	f7ff fade 	bl	8000c88 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 80016cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016d0:	2101      	movs	r1, #1
 80016d2:	4847      	ldr	r0, [pc, #284]	@ (80017f0 <MX_ADC1_Init+0x1ac>)
 80016d4:	f7ff fafa 	bl	8000ccc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 80016d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016dc:	2101      	movs	r1, #1
 80016de:	4844      	ldr	r0, [pc, #272]	@ (80017f0 <MX_ADC1_Init+0x1ac>)
 80016e0:	f7ff fb16 	bl	8000d10 <LL_DMA_SetMemorySize>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80016e4:	2300      	movs	r3, #0
 80016e6:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 80016e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016ec:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80016ee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016f2:	4619      	mov	r1, r3
 80016f4:	483f      	ldr	r0, [pc, #252]	@ (80017f4 <MX_ADC1_Init+0x1b0>)
 80016f6:	f002 f869 	bl	80037cc <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80016fa:	2300      	movs	r3, #0
 80016fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80016fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001702:	4619      	mov	r1, r3
 8001704:	483b      	ldr	r0, [pc, #236]	@ (80017f4 <MX_ADC1_Init+0x1b0>)
 8001706:	f002 f82f 	bl	8003768 <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800170a:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
 800170e:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
 8001710:	f44f 03e0 	mov.w	r3, #7340032	@ 0x700000
 8001714:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001716:	2300      	movs	r3, #0
 8001718:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 800171a:	2302      	movs	r3, #2
 800171c:	627b      	str	r3, [r7, #36]	@ 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 800171e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001722:	62bb      	str	r3, [r7, #40]	@ 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001724:	f107 0318 	add.w	r3, r7, #24
 8001728:	4619      	mov	r1, r3
 800172a:	4832      	ldr	r0, [pc, #200]	@ (80017f4 <MX_ADC1_Init+0x1b0>)
 800172c:	f002 f875 	bl	800381a <LL_ADC_REG_Init>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 8001730:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001734:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001738:	482e      	ldr	r0, [pc, #184]	@ (80017f4 <MX_ADC1_Init+0x1b0>)
 800173a:	f7ff f9bd 	bl	8000ab8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 800173e:	2202      	movs	r2, #2
 8001740:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001744:	482b      	ldr	r0, [pc, #172]	@ (80017f4 <MX_ADC1_Init+0x1b0>)
 8001746:	f7ff f9ec 	bl	8000b22 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
 800174a:	4a2b      	ldr	r2, [pc, #172]	@ (80017f8 <MX_ADC1_Init+0x1b4>)
 800174c:	f240 2105 	movw	r1, #517	@ 0x205
 8001750:	4828      	ldr	r0, [pc, #160]	@ (80017f4 <MX_ADC1_Init+0x1b0>)
 8001752:	f7ff f9b1 	bl	8000ab8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 8001756:	2202      	movs	r2, #2
 8001758:	4927      	ldr	r1, [pc, #156]	@ (80017f8 <MX_ADC1_Init+0x1b4>)
 800175a:	4826      	ldr	r0, [pc, #152]	@ (80017f4 <MX_ADC1_Init+0x1b0>)
 800175c:	f7ff f9e1 	bl	8000b22 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_2);
 8001760:	4a26      	ldr	r2, [pc, #152]	@ (80017fc <MX_ADC1_Init+0x1b8>)
 8001762:	f240 210a 	movw	r1, #522	@ 0x20a
 8001766:	4823      	ldr	r0, [pc, #140]	@ (80017f4 <MX_ADC1_Init+0x1b0>)
 8001768:	f7ff f9a6 	bl	8000ab8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 800176c:	2202      	movs	r2, #2
 800176e:	4923      	ldr	r1, [pc, #140]	@ (80017fc <MX_ADC1_Init+0x1b8>)
 8001770:	4820      	ldr	r0, [pc, #128]	@ (80017f4 <MX_ADC1_Init+0x1b0>)
 8001772:	f7ff f9d6 	bl	8000b22 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_3);
 8001776:	4a22      	ldr	r2, [pc, #136]	@ (8001800 <MX_ADC1_Init+0x1bc>)
 8001778:	f240 210f 	movw	r1, #527	@ 0x20f
 800177c:	481d      	ldr	r0, [pc, #116]	@ (80017f4 <MX_ADC1_Init+0x1b0>)
 800177e:	f7ff f99b 	bl	8000ab8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 8001782:	2202      	movs	r2, #2
 8001784:	491e      	ldr	r1, [pc, #120]	@ (8001800 <MX_ADC1_Init+0x1bc>)
 8001786:	481b      	ldr	r0, [pc, #108]	@ (80017f4 <MX_ADC1_Init+0x1b0>)
 8001788:	f7ff f9cb 	bl	8000b22 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_4);
 800178c:	4a1d      	ldr	r2, [pc, #116]	@ (8001804 <MX_ADC1_Init+0x1c0>)
 800178e:	f44f 7105 	mov.w	r1, #532	@ 0x214
 8001792:	4818      	ldr	r0, [pc, #96]	@ (80017f4 <MX_ADC1_Init+0x1b0>)
 8001794:	f7ff f990 	bl	8000ab8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 8001798:	2202      	movs	r2, #2
 800179a:	491a      	ldr	r1, [pc, #104]	@ (8001804 <MX_ADC1_Init+0x1c0>)
 800179c:	4815      	ldr	r0, [pc, #84]	@ (80017f4 <MX_ADC1_Init+0x1b0>)
 800179e:	f7ff f9c0 	bl	8000b22 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_5);
 80017a2:	4a19      	ldr	r2, [pc, #100]	@ (8001808 <MX_ADC1_Init+0x1c4>)
 80017a4:	f240 2119 	movw	r1, #537	@ 0x219
 80017a8:	4812      	ldr	r0, [pc, #72]	@ (80017f4 <MX_ADC1_Init+0x1b0>)
 80017aa:	f7ff f985 	bl	8000ab8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 80017ae:	2202      	movs	r2, #2
 80017b0:	4915      	ldr	r1, [pc, #84]	@ (8001808 <MX_ADC1_Init+0x1c4>)
 80017b2:	4810      	ldr	r0, [pc, #64]	@ (80017f4 <MX_ADC1_Init+0x1b0>)
 80017b4:	f7ff f9b5 	bl	8000b22 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_6);
 80017b8:	4a14      	ldr	r2, [pc, #80]	@ (800180c <MX_ADC1_Init+0x1c8>)
 80017ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017be:	480d      	ldr	r0, [pc, #52]	@ (80017f4 <MX_ADC1_Init+0x1b0>)
 80017c0:	f7ff f97a 	bl	8000ab8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 80017c4:	2202      	movs	r2, #2
 80017c6:	4911      	ldr	r1, [pc, #68]	@ (800180c <MX_ADC1_Init+0x1c8>)
 80017c8:	480a      	ldr	r0, [pc, #40]	@ (80017f4 <MX_ADC1_Init+0x1b0>)
 80017ca:	f7ff f9aa 	bl	8000b22 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_7);
 80017ce:	4a10      	ldr	r2, [pc, #64]	@ (8001810 <MX_ADC1_Init+0x1cc>)
 80017d0:	f240 1105 	movw	r1, #261	@ 0x105
 80017d4:	4807      	ldr	r0, [pc, #28]	@ (80017f4 <MX_ADC1_Init+0x1b0>)
 80017d6:	f7ff f96f 	bl	8000ab8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 80017da:	2202      	movs	r2, #2
 80017dc:	490c      	ldr	r1, [pc, #48]	@ (8001810 <MX_ADC1_Init+0x1cc>)
 80017de:	4805      	ldr	r0, [pc, #20]	@ (80017f4 <MX_ADC1_Init+0x1b0>)
 80017e0:	f7ff f99f 	bl	8000b22 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017e4:	bf00      	nop
 80017e6:	3738      	adds	r7, #56	@ 0x38
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40010800 	.word	0x40010800
 80017f0:	40020000 	.word	0x40020000
 80017f4:	40012400 	.word	0x40012400
 80017f8:	02300001 	.word	0x02300001
 80017fc:	02600002 	.word	0x02600002
 8001800:	02900003 	.word	0x02900003
 8001804:	02c00004 	.word	0x02c00004
 8001808:	02f00005 	.word	0x02f00005
 800180c:	03200006 	.word	0x03200006
 8001810:	03500007 	.word	0x03500007

08001814 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b092      	sub	sp, #72	@ 0x48
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800181a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	60da      	str	r2, [r3, #12]
 8001828:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800182a:	f107 0314 	add.w	r3, r7, #20
 800182e:	2220      	movs	r2, #32
 8001830:	2100      	movs	r1, #0
 8001832:	4618      	mov	r0, r3
 8001834:	f003 fb04 	bl	8004e40 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	463b      	mov	r3, r7
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
 8001844:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001846:	2001      	movs	r0, #1
 8001848:	f7ff fbb6 	bl	8000fb8 <LL_APB1_GRP1_EnableClock>

  /* TIM2 DMA Init */

  /* TIM2_CH1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_5, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800184c:	2210      	movs	r2, #16
 800184e:	2105      	movs	r1, #5
 8001850:	483b      	ldr	r0, [pc, #236]	@ (8001940 <MX_TIM2_Init+0x12c>)
 8001852:	f7ff f9b1 	bl	8000bb8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PRIORITY_VERYHIGH);
 8001856:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800185a:	2105      	movs	r1, #5
 800185c:	4838      	ldr	r0, [pc, #224]	@ (8001940 <MX_TIM2_Init+0x12c>)
 800185e:	f7ff fa79 	bl	8000d54 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MODE_NORMAL);
 8001862:	2200      	movs	r2, #0
 8001864:	2105      	movs	r1, #5
 8001866:	4836      	ldr	r0, [pc, #216]	@ (8001940 <MX_TIM2_Init+0x12c>)
 8001868:	f7ff f9ca 	bl	8000c00 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PERIPH_NOINCREMENT);
 800186c:	2200      	movs	r2, #0
 800186e:	2105      	movs	r1, #5
 8001870:	4833      	ldr	r0, [pc, #204]	@ (8001940 <MX_TIM2_Init+0x12c>)
 8001872:	f7ff f9e7 	bl	8000c44 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MEMORY_INCREMENT);
 8001876:	2280      	movs	r2, #128	@ 0x80
 8001878:	2105      	movs	r1, #5
 800187a:	4831      	ldr	r0, [pc, #196]	@ (8001940 <MX_TIM2_Init+0x12c>)
 800187c:	f7ff fa04 	bl	8000c88 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PDATAALIGN_WORD);
 8001880:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001884:	2105      	movs	r1, #5
 8001886:	482e      	ldr	r0, [pc, #184]	@ (8001940 <MX_TIM2_Init+0x12c>)
 8001888:	f7ff fa20 	bl	8000ccc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MDATAALIGN_WORD);
 800188c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001890:	2105      	movs	r1, #5
 8001892:	482b      	ldr	r0, [pc, #172]	@ (8001940 <MX_TIM2_Init+0x12c>)
 8001894:	f7ff fa3c 	bl	8000d10 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	86bb      	strh	r3, [r7, #52]	@ 0x34
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800189c:	2300      	movs	r3, #0
 800189e:	63bb      	str	r3, [r7, #56]	@ 0x38
  TIM_InitStruct.Autoreload = 89;
 80018a0:	2359      	movs	r3, #89	@ 0x59
 80018a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80018a4:	2300      	movs	r3, #0
 80018a6:	643b      	str	r3, [r7, #64]	@ 0x40
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80018a8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80018ac:	4619      	mov	r1, r3
 80018ae:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80018b2:	f002 fbff 	bl	80040b4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 80018b6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80018ba:	f7ff fbee 	bl	800109a <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 80018be:	2100      	movs	r1, #0
 80018c0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80018c4:	f7ff fc80 	bl	80011c8 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 80018c8:	2101      	movs	r1, #1
 80018ca:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80018ce:	f7ff fc37 	bl	8001140 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80018d2:	2360      	movs	r3, #96	@ 0x60
 80018d4:	617b      	str	r3, [r7, #20]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.CompareValue = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80018e2:	2300      	movs	r3, #0
 80018e4:	627b      	str	r3, [r7, #36]	@ 0x24
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	461a      	mov	r2, r3
 80018ec:	2101      	movs	r1, #1
 80018ee:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80018f2:	f002 fc47 	bl	8004184 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 80018f6:	2101      	movs	r1, #1
 80018f8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80018fc:	f7ff fbdc 	bl	80010b8 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001900:	2100      	movs	r1, #0
 8001902:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001906:	f7ff fc73 	bl	80011f0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 800190a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800190e:	f7ff fc81 	bl	8001214 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001912:	2004      	movs	r0, #4
 8001914:	f7ff fb68 	bl	8000fe8 <LL_APB2_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA15   ------> TIM2_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001918:	4b0a      	ldr	r3, [pc, #40]	@ (8001944 <MX_TIM2_Init+0x130>)
 800191a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800191c:	2309      	movs	r3, #9
 800191e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001920:	2302      	movs	r3, #2
 8001922:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001928:	463b      	mov	r3, r7
 800192a:	4619      	mov	r1, r3
 800192c:	4806      	ldr	r0, [pc, #24]	@ (8001948 <MX_TIM2_Init+0x134>)
 800192e:	f002 f982 	bl	8003c36 <LL_GPIO_Init>

  LL_GPIO_AF_RemapPartial1_TIM2();
 8001932:	f7ff fd57 	bl	80013e4 <LL_GPIO_AF_RemapPartial1_TIM2>

}
 8001936:	bf00      	nop
 8001938:	3748      	adds	r7, #72	@ 0x48
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40020000 	.word	0x40020000
 8001944:	04800080 	.word	0x04800080
 8001948:	40010800 	.word	0x40010800

0800194c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8001960:	2010      	movs	r0, #16
 8001962:	f7ff fb29 	bl	8000fb8 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 72;
 8001966:	2348      	movs	r3, #72	@ 0x48
 8001968:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800196a:	2300      	movs	r3, #0
 800196c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 800196e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001972:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8001974:	1d3b      	adds	r3, r7, #4
 8001976:	4619      	mov	r1, r3
 8001978:	4808      	ldr	r0, [pc, #32]	@ (800199c <MX_TIM6_Init+0x50>)
 800197a:	f002 fb9b 	bl	80040b4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 800197e:	4807      	ldr	r0, [pc, #28]	@ (800199c <MX_TIM6_Init+0x50>)
 8001980:	f7ff fb8b 	bl	800109a <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8001984:	2100      	movs	r1, #0
 8001986:	4805      	ldr	r0, [pc, #20]	@ (800199c <MX_TIM6_Init+0x50>)
 8001988:	f7ff fc32 	bl	80011f0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 800198c:	4803      	ldr	r0, [pc, #12]	@ (800199c <MX_TIM6_Init+0x50>)
 800198e:	f7ff fc41 	bl	8001214 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001992:	bf00      	nop
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40001000 	.word	0x40001000

080019a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08c      	sub	sp, #48	@ 0x30
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80019a6:	f107 0314 	add.w	r3, r7, #20
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]
 80019b4:	611a      	str	r2, [r3, #16]
 80019b6:	615a      	str	r2, [r3, #20]
 80019b8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ba:	463b      	mov	r3, r7
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80019c8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80019cc:	f7ff fb0c 	bl	8000fe8 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80019d0:	2004      	movs	r0, #4
 80019d2:	f7ff fb09 	bl	8000fe8 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80019d6:	4b22      	ldr	r3, [pc, #136]	@ (8001a60 <MX_USART1_UART_Init+0xc0>)
 80019d8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80019da:	2309      	movs	r3, #9
 80019dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80019de:	2303      	movs	r3, #3
 80019e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e6:	463b      	mov	r3, r7
 80019e8:	4619      	mov	r1, r3
 80019ea:	481e      	ldr	r0, [pc, #120]	@ (8001a64 <MX_USART1_UART_Init+0xc4>)
 80019ec:	f002 f923 	bl	8003c36 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80019f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a68 <MX_USART1_UART_Init+0xc8>)
 80019f2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80019f4:	2304      	movs	r3, #4
 80019f6:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f8:	463b      	mov	r3, r7
 80019fa:	4619      	mov	r1, r3
 80019fc:	4819      	ldr	r0, [pc, #100]	@ (8001a64 <MX_USART1_UART_Init+0xc4>)
 80019fe:	f002 f91a 	bl	8003c36 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001a02:	f7fe ffd3 	bl	80009ac <__NVIC_GetPriorityGrouping>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff f821 	bl	8000a54 <NVIC_EncodePriority>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4619      	mov	r1, r3
 8001a16:	2025      	movs	r0, #37	@ 0x25
 8001a18:	f7fe fff2 	bl	8000a00 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8001a1c:	2025      	movs	r0, #37	@ 0x25
 8001a1e:	f7fe ffd3 	bl	80009c8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 921600;
 8001a22:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8001a26:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001a34:	230c      	movs	r3, #12
 8001a36:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	4619      	mov	r1, r3
 8001a46:	4809      	ldr	r0, [pc, #36]	@ (8001a6c <MX_USART1_UART_Init+0xcc>)
 8001a48:	f002 fe00 	bl	800464c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8001a4c:	4807      	ldr	r0, [pc, #28]	@ (8001a6c <MX_USART1_UART_Init+0xcc>)
 8001a4e:	f7ff fbff 	bl	8001250 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001a52:	4806      	ldr	r0, [pc, #24]	@ (8001a6c <MX_USART1_UART_Init+0xcc>)
 8001a54:	f7ff fbed 	bl	8001232 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a58:	bf00      	nop
 8001a5a:	3730      	adds	r7, #48	@ 0x30
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	04020002 	.word	0x04020002
 8001a64:	40010800 	.word	0x40010800
 8001a68:	04040004 	.word	0x04040004
 8001a6c:	40013800 	.word	0x40013800

08001a70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08c      	sub	sp, #48	@ 0x30
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]
 8001a84:	611a      	str	r2, [r3, #16]
 8001a86:	615a      	str	r2, [r3, #20]
 8001a88:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8a:	463b      	mov	r3, r7
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001a98:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001a9c:	f7ff fa8c 	bl	8000fb8 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8001aa0:	2020      	movs	r0, #32
 8001aa2:	f7ff faa1 	bl	8000fe8 <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PD5   ------> USART2_TX
  PD6   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001aa6:	f242 0320 	movw	r3, #8224	@ 0x2020
 8001aaa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001aac:	2309      	movs	r3, #9
 8001aae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ab8:	463b      	mov	r3, r7
 8001aba:	4619      	mov	r1, r3
 8001abc:	4816      	ldr	r0, [pc, #88]	@ (8001b18 <MX_USART2_UART_Init+0xa8>)
 8001abe:	f002 f8ba 	bl	8003c36 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001ac2:	f244 0340 	movw	r3, #16448	@ 0x4040
 8001ac6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001ac8:	2304      	movs	r3, #4
 8001aca:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001acc:	463b      	mov	r3, r7
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4811      	ldr	r0, [pc, #68]	@ (8001b18 <MX_USART2_UART_Init+0xa8>)
 8001ad2:	f002 f8b0 	bl	8003c36 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_USART2();
 8001ad6:	f7ff fc75 	bl	80013c4 <LL_GPIO_AF_EnableRemap_USART2>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200 ;
 8001ada:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001ade:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001aec:	230c      	movs	r3, #12
 8001aee:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001af4:	2300      	movs	r3, #0
 8001af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	4619      	mov	r1, r3
 8001afe:	4807      	ldr	r0, [pc, #28]	@ (8001b1c <MX_USART2_UART_Init+0xac>)
 8001b00:	f002 fda4 	bl	800464c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001b04:	4805      	ldr	r0, [pc, #20]	@ (8001b1c <MX_USART2_UART_Init+0xac>)
 8001b06:	f7ff fba3 	bl	8001250 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001b0a:	4804      	ldr	r0, [pc, #16]	@ (8001b1c <MX_USART2_UART_Init+0xac>)
 8001b0c:	f7ff fb91 	bl	8001232 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b10:	bf00      	nop
 8001b12:	3730      	adds	r7, #48	@ 0x30
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40011400 	.word	0x40011400
 8001b1c:	40004400 	.word	0x40004400

08001b20 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08c      	sub	sp, #48	@ 0x30
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	60da      	str	r2, [r3, #12]
 8001b34:	611a      	str	r2, [r3, #16]
 8001b36:	615a      	str	r2, [r3, #20]
 8001b38:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3a:	463b      	mov	r3, r7
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8001b48:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8001b4c:	f7ff fa34 	bl	8000fb8 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001b50:	2008      	movs	r0, #8
 8001b52:	f7ff fa49 	bl	8000fe8 <LL_APB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001b56:	4b22      	ldr	r3, [pc, #136]	@ (8001be0 <MX_USART3_UART_Init+0xc0>)
 8001b58:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001b5a:	2309      	movs	r3, #9
 8001b5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b66:	463b      	mov	r3, r7
 8001b68:	4619      	mov	r1, r3
 8001b6a:	481e      	ldr	r0, [pc, #120]	@ (8001be4 <MX_USART3_UART_Init+0xc4>)
 8001b6c:	f002 f863 	bl	8003c36 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8001b70:	4b1d      	ldr	r3, [pc, #116]	@ (8001be8 <MX_USART3_UART_Init+0xc8>)
 8001b72:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001b74:	2304      	movs	r3, #4
 8001b76:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b78:	463b      	mov	r3, r7
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4819      	ldr	r0, [pc, #100]	@ (8001be4 <MX_USART3_UART_Init+0xc4>)
 8001b7e:	f002 f85a 	bl	8003c36 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001b82:	f7fe ff13 	bl	80009ac <__NVIC_GetPriorityGrouping>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe ff61 	bl	8000a54 <NVIC_EncodePriority>
 8001b92:	4603      	mov	r3, r0
 8001b94:	4619      	mov	r1, r3
 8001b96:	2027      	movs	r0, #39	@ 0x27
 8001b98:	f7fe ff32 	bl	8000a00 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8001b9c:	2027      	movs	r0, #39	@ 0x27
 8001b9e:	f7fe ff13 	bl	80009c8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 921600;
 8001ba2:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8001ba6:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001bb4:	230c      	movs	r3, #12
 8001bb6:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART3, &USART_InitStruct);
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4809      	ldr	r0, [pc, #36]	@ (8001bec <MX_USART3_UART_Init+0xcc>)
 8001bc8:	f002 fd40 	bl	800464c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8001bcc:	4807      	ldr	r0, [pc, #28]	@ (8001bec <MX_USART3_UART_Init+0xcc>)
 8001bce:	f7ff fb3f 	bl	8001250 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8001bd2:	4806      	ldr	r0, [pc, #24]	@ (8001bec <MX_USART3_UART_Init+0xcc>)
 8001bd4:	f7ff fb2d 	bl	8001232 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001bd8:	bf00      	nop
 8001bda:	3730      	adds	r7, #48	@ 0x30
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	04040004 	.word	0x04040004
 8001be4:	40010c00 	.word	0x40010c00
 8001be8:	04080008 	.word	0x04080008
 8001bec:	40004800 	.word	0x40004800

08001bf0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	f7ff f9c7 	bl	8000f88 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001bfa:	f7fe fed7 	bl	80009ac <__NVIC_GetPriorityGrouping>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2200      	movs	r2, #0
 8001c02:	2100      	movs	r1, #0
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7fe ff25 	bl	8000a54 <NVIC_EncodePriority>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	200b      	movs	r0, #11
 8001c10:	f7fe fef6 	bl	8000a00 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c14:	200b      	movs	r0, #11
 8001c16:	f7fe fed7 	bl	80009c8 <__NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001c1a:	f7fe fec7 	bl	80009ac <__NVIC_GetPriorityGrouping>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2200      	movs	r2, #0
 8001c22:	2100      	movs	r1, #0
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe ff15 	bl	8000a54 <NVIC_EncodePriority>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	200f      	movs	r0, #15
 8001c30:	f7fe fee6 	bl	8000a00 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001c34:	200f      	movs	r0, #15
 8001c36:	f7fe fec7 	bl	80009c8 <__NVIC_EnableIRQ>

}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001c46:	f107 0318 	add.w	r3, r7, #24
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	1d3b      	adds	r3, r7, #4
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	60da      	str	r2, [r3, #12]
 8001c5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOE);
 8001c5e:	2040      	movs	r0, #64	@ 0x40
 8001c60:	f7ff f9c2 	bl	8000fe8 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8001c64:	2010      	movs	r0, #16
 8001c66:	f7ff f9bf 	bl	8000fe8 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001c6a:	2004      	movs	r0, #4
 8001c6c:	f7ff f9bc 	bl	8000fe8 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001c70:	2008      	movs	r0, #8
 8001c72:	f7ff f9b9 	bl	8000fe8 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8001c76:	2020      	movs	r0, #32
 8001c78:	f7ff f9b6 	bl	8000fe8 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5
 8001c7c:	494c      	ldr	r1, [pc, #304]	@ (8001db0 <MX_GPIO_Init+0x170>)
 8001c7e:	484d      	ldr	r0, [pc, #308]	@ (8001db4 <MX_GPIO_Init+0x174>)
 8001c80:	f7ff fb90 	bl	80013a4 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9
                          |LL_GPIO_PIN_11|LL_GPIO_PIN_0);

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2
 8001c84:	494c      	ldr	r1, [pc, #304]	@ (8001db8 <MX_GPIO_Init+0x178>)
 8001c86:	484d      	ldr	r0, [pc, #308]	@ (8001dbc <MX_GPIO_Init+0x17c>)
 8001c88:	f7ff fb8c 	bl	80013a4 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6
                          |LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_11);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_12
 8001c8c:	494c      	ldr	r1, [pc, #304]	@ (8001dc0 <MX_GPIO_Init+0x180>)
 8001c8e:	484d      	ldr	r0, [pc, #308]	@ (8001dc4 <MX_GPIO_Init+0x184>)
 8001c90:	f7ff fb88 	bl	80013a4 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11
 8001c94:	494c      	ldr	r1, [pc, #304]	@ (8001dc8 <MX_GPIO_Init+0x188>)
 8001c96:	484d      	ldr	r0, [pc, #308]	@ (8001dcc <MX_GPIO_Init+0x18c>)
 8001c98:	f7ff fb84 	bl	80013a4 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15
                          |LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_7);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5
 8001c9c:	4b44      	ldr	r3, [pc, #272]	@ (8001db0 <MX_GPIO_Init+0x170>)
 8001c9e:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9
                          |LL_GPIO_PIN_11|LL_GPIO_PIN_0;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cac:	1d3b      	adds	r3, r7, #4
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4840      	ldr	r0, [pc, #256]	@ (8001db4 <MX_GPIO_Init+0x174>)
 8001cb2:	f001 ffc0 	bl	8003c36 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2
 8001cb6:	4b40      	ldr	r3, [pc, #256]	@ (8001db8 <MX_GPIO_Init+0x178>)
 8001cb8:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6
                          |LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_11;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	4619      	mov	r1, r3
 8001cca:	483c      	ldr	r0, [pc, #240]	@ (8001dbc <MX_GPIO_Init+0x17c>)
 8001ccc:	f001 ffb3 	bl	8003c36 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_12
 8001cd0:	4b3b      	ldr	r3, [pc, #236]	@ (8001dc0 <MX_GPIO_Init+0x180>)
 8001cd2:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8
                          |LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce0:	1d3b      	adds	r3, r7, #4
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4837      	ldr	r0, [pc, #220]	@ (8001dc4 <MX_GPIO_Init+0x184>)
 8001ce6:	f001 ffa6 	bl	8003c36 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8001cea:	4b39      	ldr	r3, [pc, #228]	@ (8001dd0 <MX_GPIO_Init+0x190>)
 8001cec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001cee:	2304      	movs	r3, #4
 8001cf0:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	482f      	ldr	r0, [pc, #188]	@ (8001db4 <MX_GPIO_Init+0x174>)
 8001cf8:	f001 ff9d 	bl	8003c36 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11
 8001cfc:	4b32      	ldr	r3, [pc, #200]	@ (8001dc8 <MX_GPIO_Init+0x188>)
 8001cfe:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15
                          |LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001d00:	2301      	movs	r3, #1
 8001d02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d04:	2302      	movs	r3, #2
 8001d06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d0c:	1d3b      	adds	r3, r7, #4
 8001d0e:	4619      	mov	r1, r3
 8001d10:	482e      	ldr	r0, [pc, #184]	@ (8001dcc <MX_GPIO_Init+0x18c>)
 8001d12:	f001 ff90 	bl	8003c36 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001d16:	f240 2302 	movw	r3, #514	@ 0x202
 8001d1a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	4619      	mov	r1, r3
 8001d24:	4823      	ldr	r0, [pc, #140]	@ (8001db4 <MX_GPIO_Init+0x174>)
 8001d26:	f001 ff86 	bl	8003c36 <LL_GPIO_Init>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTE, LL_GPIO_AF_EXTI_LINE12);
 8001d2a:	492a      	ldr	r1, [pc, #168]	@ (8001dd4 <MX_GPIO_Init+0x194>)
 8001d2c:	2004      	movs	r0, #4
 8001d2e:	f7ff fb7d 	bl	800142c <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTE, LL_GPIO_AF_EXTI_LINE13);
 8001d32:	4929      	ldr	r1, [pc, #164]	@ (8001dd8 <MX_GPIO_Init+0x198>)
 8001d34:	2004      	movs	r0, #4
 8001d36:	f7ff fb79 	bl	800142c <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 8001d3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d3e:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001d40:	2301      	movs	r3, #1
 8001d42:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001d44:	2300      	movs	r3, #0
 8001d46:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001d4c:	f107 0318 	add.w	r3, r7, #24
 8001d50:	4618      	mov	r0, r3
 8001d52:	f001 fe39 	bl	80039c8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001d56:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d5a:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001d60:	2300      	movs	r3, #0
 8001d62:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001d64:	2302      	movs	r3, #2
 8001d66:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001d68:	f107 0318 	add.w	r3, r7, #24
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f001 fe2b 	bl	80039c8 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinMode(GPIOE, LL_GPIO_PIN_12, LL_GPIO_MODE_FLOATING);
 8001d72:	2204      	movs	r2, #4
 8001d74:	4919      	ldr	r1, [pc, #100]	@ (8001ddc <MX_GPIO_Init+0x19c>)
 8001d76:	480f      	ldr	r0, [pc, #60]	@ (8001db4 <MX_GPIO_Init+0x174>)
 8001d78:	f7ff fad3 	bl	8001322 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOE, LL_GPIO_PIN_13, LL_GPIO_MODE_FLOATING);
 8001d7c:	2204      	movs	r2, #4
 8001d7e:	4918      	ldr	r1, [pc, #96]	@ (8001de0 <MX_GPIO_Init+0x1a0>)
 8001d80:	480c      	ldr	r0, [pc, #48]	@ (8001db4 <MX_GPIO_Init+0x174>)
 8001d82:	f7ff face 	bl	8001322 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001d86:	f7fe fe11 	bl	80009ac <__NVIC_GetPriorityGrouping>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2100      	movs	r1, #0
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe fe5f 	bl	8000a54 <NVIC_EncodePriority>
 8001d96:	4603      	mov	r3, r0
 8001d98:	4619      	mov	r1, r3
 8001d9a:	2028      	movs	r0, #40	@ 0x28
 8001d9c:	f7fe fe30 	bl	8000a00 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001da0:	2028      	movs	r0, #40	@ 0x28
 8001da2:	f7fe fe11 	bl	80009c8 <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001da6:	bf00      	nop
 8001da8:	3720      	adds	r7, #32
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	040bfdff 	.word	0x040bfdff
 8001db4:	40011800 	.word	0x40011800
 8001db8:	042bffff 	.word	0x042bffff
 8001dbc:	40011000 	.word	0x40011000
 8001dc0:	04d3ffff 	.word	0x04d3ffff
 8001dc4:	40010c00 	.word	0x40010c00
 8001dc8:	04ff9bff 	.word	0x04ff9bff
 8001dcc:	40011400 	.word	0x40011400
 8001dd0:	04c000c0 	.word	0x04c000c0
 8001dd4:	000f0003 	.word	0x000f0003
 8001dd8:	00f00003 	.word	0x00f00003
 8001ddc:	04100010 	.word	0x04100010
 8001de0:	04200020 	.word	0x04200020

08001de4 <LL_GPIO_SetOutputPin>:
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	0a1b      	lsrs	r3, r3, #8
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	611a      	str	r2, [r3, #16]
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr

08001e02 <LL_GPIO_ResetOutputPin>:
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	0a1b      	lsrs	r3, r3, #8
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	615a      	str	r2, [r3, #20]
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <getPortName>:
    {GPIOE, LL_GPIO_PIN_7, &xPins32, &yPins32},  // CS_32 (PE7)
    {GPIOE, LL_GPIO_PIN_8, &xPins33, &yPins33},  // CS_33 (PE8)
    {GPIOE, LL_GPIO_PIN_9, &xPins34, &yPins34}   // CS_34 (PE9)
};

const char* getPortName(GPIO_TypeDef* port) {
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
    if (port == GPIOA) return "GPIOA";
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a11      	ldr	r2, [pc, #68]	@ (8001e70 <getPortName+0x50>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d101      	bne.n	8001e34 <getPortName+0x14>
 8001e30:	4b10      	ldr	r3, [pc, #64]	@ (8001e74 <getPortName+0x54>)
 8001e32:	e018      	b.n	8001e66 <getPortName+0x46>
    if (port == GPIOB) return "GPIOB";
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a10      	ldr	r2, [pc, #64]	@ (8001e78 <getPortName+0x58>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d101      	bne.n	8001e40 <getPortName+0x20>
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e7c <getPortName+0x5c>)
 8001e3e:	e012      	b.n	8001e66 <getPortName+0x46>
    if (port == GPIOC) return "GPIOC";
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a0f      	ldr	r2, [pc, #60]	@ (8001e80 <getPortName+0x60>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d101      	bne.n	8001e4c <getPortName+0x2c>
 8001e48:	4b0e      	ldr	r3, [pc, #56]	@ (8001e84 <getPortName+0x64>)
 8001e4a:	e00c      	b.n	8001e66 <getPortName+0x46>
    if (port == GPIOD) return "GPIOD";
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a0e      	ldr	r2, [pc, #56]	@ (8001e88 <getPortName+0x68>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d101      	bne.n	8001e58 <getPortName+0x38>
 8001e54:	4b0d      	ldr	r3, [pc, #52]	@ (8001e8c <getPortName+0x6c>)
 8001e56:	e006      	b.n	8001e66 <getPortName+0x46>
    if (port == GPIOE) return "GPIOE";
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a0d      	ldr	r2, [pc, #52]	@ (8001e90 <getPortName+0x70>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d101      	bne.n	8001e64 <getPortName+0x44>
 8001e60:	4b0c      	ldr	r3, [pc, #48]	@ (8001e94 <getPortName+0x74>)
 8001e62:	e000      	b.n	8001e66 <getPortName+0x46>
    return "UNKNOWN";
 8001e64:	4b0c      	ldr	r3, [pc, #48]	@ (8001e98 <getPortName+0x78>)
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr
 8001e70:	40010800 	.word	0x40010800
 8001e74:	08006a38 	.word	0x08006a38
 8001e78:	40010c00 	.word	0x40010c00
 8001e7c:	08006a40 	.word	0x08006a40
 8001e80:	40011000 	.word	0x40011000
 8001e84:	08006a48 	.word	0x08006a48
 8001e88:	40011400 	.word	0x40011400
 8001e8c:	08006a50 	.word	0x08006a50
 8001e90:	40011800 	.word	0x40011800
 8001e94:	08006a58 	.word	0x08006a58
 8001e98:	08006a60 	.word	0x08006a60

08001e9c <getPinName>:

const char* getPinName(uint32_t pin) {
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
    switch (pin) {
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a5a      	ldr	r2, [pc, #360]	@ (8002010 <getPinName+0x174>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	f000 80a8 	beq.w	8001ffe <getPinName+0x162>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a57      	ldr	r2, [pc, #348]	@ (8002010 <getPinName+0x174>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	f200 80a5 	bhi.w	8002002 <getPinName+0x166>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a56      	ldr	r2, [pc, #344]	@ (8002014 <getPinName+0x178>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	f000 809c 	beq.w	8001ffa <getPinName+0x15e>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a53      	ldr	r2, [pc, #332]	@ (8002014 <getPinName+0x178>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	f200 809b 	bhi.w	8002002 <getPinName+0x166>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a52      	ldr	r2, [pc, #328]	@ (8002018 <getPinName+0x17c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	f000 8090 	beq.w	8001ff6 <getPinName+0x15a>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a4f      	ldr	r2, [pc, #316]	@ (8002018 <getPinName+0x17c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	f200 8091 	bhi.w	8002002 <getPinName+0x166>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a4e      	ldr	r2, [pc, #312]	@ (800201c <getPinName+0x180>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	f000 8084 	beq.w	8001ff2 <getPinName+0x156>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a4b      	ldr	r2, [pc, #300]	@ (800201c <getPinName+0x180>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	f200 8087 	bhi.w	8002002 <getPinName+0x166>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a4a      	ldr	r2, [pc, #296]	@ (8002020 <getPinName+0x184>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d078      	beq.n	8001fee <getPinName+0x152>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a48      	ldr	r2, [pc, #288]	@ (8002020 <getPinName+0x184>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d87e      	bhi.n	8002002 <getPinName+0x166>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a47      	ldr	r2, [pc, #284]	@ (8002024 <getPinName+0x188>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d06e      	beq.n	8001fea <getPinName+0x14e>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a45      	ldr	r2, [pc, #276]	@ (8002024 <getPinName+0x188>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d876      	bhi.n	8002002 <getPinName+0x166>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a44      	ldr	r2, [pc, #272]	@ (8002028 <getPinName+0x18c>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d064      	beq.n	8001fe6 <getPinName+0x14a>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a42      	ldr	r2, [pc, #264]	@ (8002028 <getPinName+0x18c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d86e      	bhi.n	8002002 <getPinName+0x166>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a41      	ldr	r2, [pc, #260]	@ (800202c <getPinName+0x190>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d05a      	beq.n	8001fe2 <getPinName+0x146>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a3f      	ldr	r2, [pc, #252]	@ (800202c <getPinName+0x190>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d866      	bhi.n	8002002 <getPinName+0x166>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f248 0280 	movw	r2, #32896	@ 0x8080
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d04f      	beq.n	8001fde <getPinName+0x142>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f248 0280 	movw	r2, #32896	@ 0x8080
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d85c      	bhi.n	8002002 <getPinName+0x166>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f244 0240 	movw	r2, #16448	@ 0x4040
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d043      	beq.n	8001fda <getPinName+0x13e>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f244 0240 	movw	r2, #16448	@ 0x4040
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d852      	bhi.n	8002002 <getPinName+0x166>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f242 0220 	movw	r2, #8224	@ 0x2020
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d037      	beq.n	8001fd6 <getPinName+0x13a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f242 0220 	movw	r2, #8224	@ 0x2020
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d848      	bhi.n	8002002 <getPinName+0x166>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f241 0210 	movw	r2, #4112	@ 0x1010
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d02b      	beq.n	8001fd2 <getPinName+0x136>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f241 0210 	movw	r2, #4112	@ 0x1010
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d83e      	bhi.n	8002002 <getPinName+0x166>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f640 0208 	movw	r2, #2056	@ 0x808
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d01f      	beq.n	8001fce <getPinName+0x132>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f640 0208 	movw	r2, #2056	@ 0x808
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d834      	bhi.n	8002002 <getPinName+0x166>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f240 4204 	movw	r2, #1028	@ 0x404
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d013      	beq.n	8001fca <getPinName+0x12e>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f240 4204 	movw	r2, #1028	@ 0x404
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d82a      	bhi.n	8002002 <getPinName+0x166>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f240 1201 	movw	r2, #257	@ 0x101
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d005      	beq.n	8001fc2 <getPinName+0x126>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f240 2202 	movw	r2, #514	@ 0x202
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d002      	beq.n	8001fc6 <getPinName+0x12a>
 8001fc0:	e01f      	b.n	8002002 <getPinName+0x166>
        case LL_GPIO_PIN_0:  return "Pin 0";
 8001fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8002030 <getPinName+0x194>)
 8001fc4:	e01e      	b.n	8002004 <getPinName+0x168>
        case LL_GPIO_PIN_1:  return "Pin 1";
 8001fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8002034 <getPinName+0x198>)
 8001fc8:	e01c      	b.n	8002004 <getPinName+0x168>
        case LL_GPIO_PIN_2:  return "Pin 2";
 8001fca:	4b1b      	ldr	r3, [pc, #108]	@ (8002038 <getPinName+0x19c>)
 8001fcc:	e01a      	b.n	8002004 <getPinName+0x168>
        case LL_GPIO_PIN_3:  return "Pin 3";
 8001fce:	4b1b      	ldr	r3, [pc, #108]	@ (800203c <getPinName+0x1a0>)
 8001fd0:	e018      	b.n	8002004 <getPinName+0x168>
        case LL_GPIO_PIN_4:  return "Pin 4";
 8001fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8002040 <getPinName+0x1a4>)
 8001fd4:	e016      	b.n	8002004 <getPinName+0x168>
        case LL_GPIO_PIN_5:  return "Pin 5";
 8001fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8002044 <getPinName+0x1a8>)
 8001fd8:	e014      	b.n	8002004 <getPinName+0x168>
        case LL_GPIO_PIN_6:  return "Pin 6";
 8001fda:	4b1b      	ldr	r3, [pc, #108]	@ (8002048 <getPinName+0x1ac>)
 8001fdc:	e012      	b.n	8002004 <getPinName+0x168>
        case LL_GPIO_PIN_7:  return "Pin 7";
 8001fde:	4b1b      	ldr	r3, [pc, #108]	@ (800204c <getPinName+0x1b0>)
 8001fe0:	e010      	b.n	8002004 <getPinName+0x168>
        case LL_GPIO_PIN_8:  return "Pin 8";
 8001fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8002050 <getPinName+0x1b4>)
 8001fe4:	e00e      	b.n	8002004 <getPinName+0x168>
        case LL_GPIO_PIN_9:  return "Pin 9";
 8001fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8002054 <getPinName+0x1b8>)
 8001fe8:	e00c      	b.n	8002004 <getPinName+0x168>
        case LL_GPIO_PIN_10: return "Pin 10";
 8001fea:	4b1b      	ldr	r3, [pc, #108]	@ (8002058 <getPinName+0x1bc>)
 8001fec:	e00a      	b.n	8002004 <getPinName+0x168>
        case LL_GPIO_PIN_11: return "Pin 11";
 8001fee:	4b1b      	ldr	r3, [pc, #108]	@ (800205c <getPinName+0x1c0>)
 8001ff0:	e008      	b.n	8002004 <getPinName+0x168>
        case LL_GPIO_PIN_12: return "Pin 12";
 8001ff2:	4b1b      	ldr	r3, [pc, #108]	@ (8002060 <getPinName+0x1c4>)
 8001ff4:	e006      	b.n	8002004 <getPinName+0x168>
        case LL_GPIO_PIN_13: return "Pin 13";
 8001ff6:	4b1b      	ldr	r3, [pc, #108]	@ (8002064 <getPinName+0x1c8>)
 8001ff8:	e004      	b.n	8002004 <getPinName+0x168>
        case LL_GPIO_PIN_14: return "Pin 14";
 8001ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8002068 <getPinName+0x1cc>)
 8001ffc:	e002      	b.n	8002004 <getPinName+0x168>
        case LL_GPIO_PIN_15: return "Pin 15";
 8001ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800206c <getPinName+0x1d0>)
 8002000:	e000      	b.n	8002004 <getPinName+0x168>
        default: return "Unknown Pin";
 8002002:	4b1b      	ldr	r3, [pc, #108]	@ (8002070 <getPinName+0x1d4>)
    }
}
 8002004:	4618      	mov	r0, r3
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	bc80      	pop	{r7}
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	04800080 	.word	0x04800080
 8002014:	04400040 	.word	0x04400040
 8002018:	04200020 	.word	0x04200020
 800201c:	04100010 	.word	0x04100010
 8002020:	04080008 	.word	0x04080008
 8002024:	04040004 	.word	0x04040004
 8002028:	04020002 	.word	0x04020002
 800202c:	04010001 	.word	0x04010001
 8002030:	08006a68 	.word	0x08006a68
 8002034:	08006a70 	.word	0x08006a70
 8002038:	08006a78 	.word	0x08006a78
 800203c:	08006a80 	.word	0x08006a80
 8002040:	08006a88 	.word	0x08006a88
 8002044:	08006a90 	.word	0x08006a90
 8002048:	08006a98 	.word	0x08006a98
 800204c:	08006aa0 	.word	0x08006aa0
 8002050:	08006aa8 	.word	0x08006aa8
 8002054:	08006ab0 	.word	0x08006ab0
 8002058:	08006ab8 	.word	0x08006ab8
 800205c:	08006ac0 	.word	0x08006ac0
 8002060:	08006ac8 	.word	0x08006ac8
 8002064:	08006ad0 	.word	0x08006ad0
 8002068:	08006ad8 	.word	0x08006ad8
 800206c:	08006ae0 	.word	0x08006ae0
 8002070:	08006ae8 	.word	0x08006ae8

08002074 <setConnection>:

MainTrack mainTracks[32] = {0};
SignalAnalyzerTrack signalAnalyzerTracks[8] = {0};
uint8_t ledsToMainTracks[120] = {0};

void setConnection(int x, int y, MUX mux, uint8_t mode) {
 8002074:	b082      	sub	sp, #8
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
 800207e:	6039      	str	r1, [r7, #0]
 8002080:	f107 0110 	add.w	r1, r7, #16
 8002084:	e881 000c 	stmia.w	r1, {r2, r3}
    if (x < 0 || x > 15 || y < 0 || y > 7) {
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	f2c0 80bd 	blt.w	800220a <setConnection+0x196>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b0f      	cmp	r3, #15
 8002094:	f300 80b9 	bgt.w	800220a <setConnection+0x196>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	f2c0 80b5 	blt.w	800220a <setConnection+0x196>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	2b07      	cmp	r3, #7
 80020a4:	f300 80b1 	bgt.w	800220a <setConnection+0x196>
    }

//    printMUXDetails(&mux);

    // Activate multiplexer using the struct for CS
    LL_GPIO_ResetOutputPin(mux.port, mux.pin);
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	4611      	mov	r1, r2
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff fea7 	bl	8001e02 <LL_GPIO_ResetOutputPin>
    LL_mDelay(20);
 80020b4:	2014      	movs	r0, #20
 80020b6:	f002 fb63 	bl	8004780 <LL_mDelay>
    LL_GPIO_SetOutputPin(mux.port, mux.pin);
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	4611      	mov	r1, r2
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff fe8f 	bl	8001de4 <LL_GPIO_SetOutputPin>
    LL_mDelay(20);
 80020c6:	2014      	movs	r0, #20
 80020c8:	f002 fb5a 	bl	8004780 <LL_mDelay>

    // Set X address
    (x & 0x01) ? LL_GPIO_SetOutputPin(AX_GPIO, AX0_PIN) : LL_GPIO_ResetOutputPin(AX_GPIO, AX0_PIN);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d005      	beq.n	80020e2 <setConnection+0x6e>
 80020d6:	f244 0140 	movw	r1, #16448	@ 0x4040
 80020da:	484f      	ldr	r0, [pc, #316]	@ (8002218 <setConnection+0x1a4>)
 80020dc:	f7ff fe82 	bl	8001de4 <LL_GPIO_SetOutputPin>
 80020e0:	e004      	b.n	80020ec <setConnection+0x78>
 80020e2:	f244 0140 	movw	r1, #16448	@ 0x4040
 80020e6:	484c      	ldr	r0, [pc, #304]	@ (8002218 <setConnection+0x1a4>)
 80020e8:	f7ff fe8b 	bl	8001e02 <LL_GPIO_ResetOutputPin>
    (x & 0x02) ? LL_GPIO_SetOutputPin(AX_GPIO, AX1_PIN) : LL_GPIO_ResetOutputPin(AX_GPIO, AX1_PIN);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d005      	beq.n	8002102 <setConnection+0x8e>
 80020f6:	f241 0110 	movw	r1, #4112	@ 0x1010
 80020fa:	4847      	ldr	r0, [pc, #284]	@ (8002218 <setConnection+0x1a4>)
 80020fc:	f7ff fe72 	bl	8001de4 <LL_GPIO_SetOutputPin>
 8002100:	e004      	b.n	800210c <setConnection+0x98>
 8002102:	f241 0110 	movw	r1, #4112	@ 0x1010
 8002106:	4844      	ldr	r0, [pc, #272]	@ (8002218 <setConnection+0x1a4>)
 8002108:	f7ff fe7b 	bl	8001e02 <LL_GPIO_ResetOutputPin>
    (x & 0x04) ? LL_GPIO_SetOutputPin(AX_GPIO, AX2_PIN) : LL_GPIO_ResetOutputPin(AX_GPIO, AX2_PIN);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	2b00      	cmp	r3, #0
 8002114:	d005      	beq.n	8002122 <setConnection+0xae>
 8002116:	f640 0108 	movw	r1, #2056	@ 0x808
 800211a:	483f      	ldr	r0, [pc, #252]	@ (8002218 <setConnection+0x1a4>)
 800211c:	f7ff fe62 	bl	8001de4 <LL_GPIO_SetOutputPin>
 8002120:	e004      	b.n	800212c <setConnection+0xb8>
 8002122:	f640 0108 	movw	r1, #2056	@ 0x808
 8002126:	483c      	ldr	r0, [pc, #240]	@ (8002218 <setConnection+0x1a4>)
 8002128:	f7ff fe6b 	bl	8001e02 <LL_GPIO_ResetOutputPin>
    (x & 0x08) ? LL_GPIO_SetOutputPin(AX_GPIO, AX3_PIN) : LL_GPIO_ResetOutputPin(AX_GPIO, AX3_PIN);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b00      	cmp	r3, #0
 8002134:	d005      	beq.n	8002142 <setConnection+0xce>
 8002136:	f242 0120 	movw	r1, #8224	@ 0x2020
 800213a:	4837      	ldr	r0, [pc, #220]	@ (8002218 <setConnection+0x1a4>)
 800213c:	f7ff fe52 	bl	8001de4 <LL_GPIO_SetOutputPin>
 8002140:	e004      	b.n	800214c <setConnection+0xd8>
 8002142:	f242 0120 	movw	r1, #8224	@ 0x2020
 8002146:	4834      	ldr	r0, [pc, #208]	@ (8002218 <setConnection+0x1a4>)
 8002148:	f7ff fe5b 	bl	8001e02 <LL_GPIO_ResetOutputPin>

    // Set Y address
    (y & 0x01) ? LL_GPIO_SetOutputPin(AY_GPIO, AY0_PIN) : LL_GPIO_ResetOutputPin(AY_GPIO, AY0_PIN);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d005      	beq.n	8002162 <setConnection+0xee>
 8002156:	f240 1101 	movw	r1, #257	@ 0x101
 800215a:	482f      	ldr	r0, [pc, #188]	@ (8002218 <setConnection+0x1a4>)
 800215c:	f7ff fe42 	bl	8001de4 <LL_GPIO_SetOutputPin>
 8002160:	e004      	b.n	800216c <setConnection+0xf8>
 8002162:	f240 1101 	movw	r1, #257	@ 0x101
 8002166:	482c      	ldr	r0, [pc, #176]	@ (8002218 <setConnection+0x1a4>)
 8002168:	f7ff fe4b 	bl	8001e02 <LL_GPIO_ResetOutputPin>
    (y & 0x02) ? LL_GPIO_SetOutputPin(AY_GPIO, AY1_PIN) : LL_GPIO_ResetOutputPin(AY_GPIO, AY1_PIN);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d005      	beq.n	8002182 <setConnection+0x10e>
 8002176:	f240 2102 	movw	r1, #514	@ 0x202
 800217a:	4827      	ldr	r0, [pc, #156]	@ (8002218 <setConnection+0x1a4>)
 800217c:	f7ff fe32 	bl	8001de4 <LL_GPIO_SetOutputPin>
 8002180:	e004      	b.n	800218c <setConnection+0x118>
 8002182:	f240 2102 	movw	r1, #514	@ 0x202
 8002186:	4824      	ldr	r0, [pc, #144]	@ (8002218 <setConnection+0x1a4>)
 8002188:	f7ff fe3b 	bl	8001e02 <LL_GPIO_ResetOutputPin>
    (y & 0x04) ? LL_GPIO_SetOutputPin(AY_GPIO, AY2_PIN) : LL_GPIO_ResetOutputPin(AY_GPIO, AY2_PIN);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	2b00      	cmp	r3, #0
 8002194:	d005      	beq.n	80021a2 <setConnection+0x12e>
 8002196:	f240 4104 	movw	r1, #1028	@ 0x404
 800219a:	481f      	ldr	r0, [pc, #124]	@ (8002218 <setConnection+0x1a4>)
 800219c:	f7ff fe22 	bl	8001de4 <LL_GPIO_SetOutputPin>
 80021a0:	e004      	b.n	80021ac <setConnection+0x138>
 80021a2:	f240 4104 	movw	r1, #1028	@ 0x404
 80021a6:	481c      	ldr	r0, [pc, #112]	@ (8002218 <setConnection+0x1a4>)
 80021a8:	f7ff fe2b 	bl	8001e02 <LL_GPIO_ResetOutputPin>


    // Set data pin
    mode ? LL_GPIO_SetOutputPin(DAT_GPIO, DAT_PIN) : LL_GPIO_ResetOutputPin(DAT_GPIO, DAT_PIN);
 80021ac:	f897 30a0 	ldrb.w	r3, [r7, #160]	@ 0xa0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d005      	beq.n	80021c0 <setConnection+0x14c>
 80021b4:	f248 0180 	movw	r1, #32896	@ 0x8080
 80021b8:	4817      	ldr	r0, [pc, #92]	@ (8002218 <setConnection+0x1a4>)
 80021ba:	f7ff fe13 	bl	8001de4 <LL_GPIO_SetOutputPin>
 80021be:	e004      	b.n	80021ca <setConnection+0x156>
 80021c0:	f248 0180 	movw	r1, #32896	@ 0x8080
 80021c4:	4814      	ldr	r0, [pc, #80]	@ (8002218 <setConnection+0x1a4>)
 80021c6:	f7ff fe1c 	bl	8001e02 <LL_GPIO_ResetOutputPin>

    // Strobe signal
    LL_mDelay(20);
 80021ca:	2014      	movs	r0, #20
 80021cc:	f002 fad8 	bl	8004780 <LL_mDelay>
	LL_GPIO_SetOutputPin(STB_GPIO, STB_PIN);
 80021d0:	4912      	ldr	r1, [pc, #72]	@ (800221c <setConnection+0x1a8>)
 80021d2:	4811      	ldr	r0, [pc, #68]	@ (8002218 <setConnection+0x1a4>)
 80021d4:	f7ff fe06 	bl	8001de4 <LL_GPIO_SetOutputPin>
	LL_mDelay(20);
 80021d8:	2014      	movs	r0, #20
 80021da:	f002 fad1 	bl	8004780 <LL_mDelay>
	LL_GPIO_ResetOutputPin(STB_GPIO, STB_PIN);
 80021de:	490f      	ldr	r1, [pc, #60]	@ (800221c <setConnection+0x1a8>)
 80021e0:	480d      	ldr	r0, [pc, #52]	@ (8002218 <setConnection+0x1a4>)
 80021e2:	f7ff fe0e 	bl	8001e02 <LL_GPIO_ResetOutputPin>

	LL_mDelay(20);
 80021e6:	2014      	movs	r0, #20
 80021e8:	f002 faca 	bl	8004780 <LL_mDelay>

	LL_GPIO_ResetOutputPin(DAT_GPIO, DAT_PIN);
 80021ec:	f248 0180 	movw	r1, #32896	@ 0x8080
 80021f0:	4809      	ldr	r0, [pc, #36]	@ (8002218 <setConnection+0x1a4>)
 80021f2:	f7ff fe06 	bl	8001e02 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(mux.port, mux.pin);
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	4611      	mov	r1, r2
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff fe00 	bl	8001e02 <LL_GPIO_ResetOutputPin>

	LL_mDelay(20);
 8002202:	2014      	movs	r0, #20
 8002204:	f002 fabc 	bl	8004780 <LL_mDelay>
 8002208:	e000      	b.n	800220c <setConnection+0x198>
        return;
 800220a:	bf00      	nop
}
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002214:	b002      	add	sp, #8
 8002216:	4770      	bx	lr
 8002218:	40010c00 	.word	0x40010c00
 800221c:	04010001 	.word	0x04010001

08002220 <routeBreadboard>:

void routeBreadboard(int breadboardPin1, int breadboardPin2, int net_id, MUX *muxes, size_t muxCount, uint8_t mode, RGB_t rgb) {
 8002220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002222:	b0c3      	sub	sp, #268	@ 0x10c
 8002224:	af24      	add	r7, sp, #144	@ 0x90
 8002226:	6278      	str	r0, [r7, #36]	@ 0x24
 8002228:	6239      	str	r1, [r7, #32]
 800222a:	61fa      	str	r2, [r7, #28]
 800222c:	61bb      	str	r3, [r7, #24]

    if (breadboardPin1 > 120 || breadboardPin1 < 1 || breadboardPin2 > 120 || breadboardPin2 < 1){
 800222e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002230:	2b78      	cmp	r3, #120	@ 0x78
 8002232:	f300 82d1 	bgt.w	80027d8 <routeBreadboard+0x5b8>
 8002236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002238:	2b00      	cmp	r3, #0
 800223a:	f340 82cd 	ble.w	80027d8 <routeBreadboard+0x5b8>
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	2b78      	cmp	r3, #120	@ 0x78
 8002242:	f300 82c9 	bgt.w	80027d8 <routeBreadboard+0x5b8>
 8002246:	6a3b      	ldr	r3, [r7, #32]
 8002248:	2b00      	cmp	r3, #0
 800224a:	f340 82c5 	ble.w	80027d8 <routeBreadboard+0x5b8>
    	return; // Maybe message to UART idk?
    }

    if (mode != 0 && mode != 1){
 800224e:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 8002252:	2b00      	cmp	r3, #0
 8002254:	d004      	beq.n	8002260 <routeBreadboard+0x40>
 8002256:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 800225a:	2b01      	cmp	r3, #1
 800225c:	f040 82be 	bne.w	80027dc <routeBreadboard+0x5bc>
    if (rgb.color.r > 255 || rgb.color.r < 0 || rgb.color.g > 255 || rgb.color.g < 0 || rgb.color.b > 255 || rgb.color.b < 0){
		return; // Maybe message to UART idk?
    }

	char pin1Name[6], pin2Name[6];
    snprintf(pin1Name, sizeof(pin1Name), "B_%d", breadboardPin1);
 8002260:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8002264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002266:	4a9c      	ldr	r2, [pc, #624]	@ (80024d8 <routeBreadboard+0x2b8>)
 8002268:	2106      	movs	r1, #6
 800226a:	f002 fcb1 	bl	8004bd0 <sniprintf>
    snprintf(pin2Name, sizeof(pin2Name), "B_%d", breadboardPin2);
 800226e:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	4a98      	ldr	r2, [pc, #608]	@ (80024d8 <routeBreadboard+0x2b8>)
 8002276:	2106      	movs	r1, #6
 8002278:	f002 fcaa 	bl	8004bd0 <sniprintf>


//    printf("LedsToMainTrakcs[%d] = %d\n", breadboardPin1 - 1, ledsToMainTracks[breadboardPin1 - 1]);
//    printf("LedsToMainTrakcs[%d] = %d\n", breadboardPin2 - 1, ledsToMainTracks[breadboardPin2 - 1]);

    for (int i = 0; i < 120; i++){
 800227c:	2300      	movs	r3, #0
 800227e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002280:	e002      	b.n	8002288 <routeBreadboard+0x68>
 8002282:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002284:	3301      	adds	r3, #1
 8002286:	677b      	str	r3, [r7, #116]	@ 0x74
 8002288:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800228a:	2b77      	cmp	r3, #119	@ 0x77
 800228c:	ddf9      	ble.n	8002282 <routeBreadboard+0x62>
    	if (ledsToMainTracks[i] < 0){
    		ledsToMainTracks[i] = 0;
    	}
    }

    printf("Routing %s to %s with net ID: %d\n", pin1Name, pin2Name, net_id);
 800228e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002292:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	4890      	ldr	r0, [pc, #576]	@ (80024dc <routeBreadboard+0x2bc>)
 800229a:	f002 fc21 	bl	8004ae0 <iprintf>
    fflush(stdout);
 800229e:	4b90      	ldr	r3, [pc, #576]	@ (80024e0 <routeBreadboard+0x2c0>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f002 fb45 	bl	8004934 <fflush>

    int xIndex1 = -1, yIndex1 = -1;
 80022aa:	f04f 33ff 	mov.w	r3, #4294967295
 80022ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80022b0:	f04f 33ff 	mov.w	r3, #4294967295
 80022b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    int xIndex2 = -1, yIndex2 = -1;
 80022b6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 80022bc:	f04f 33ff 	mov.w	r3, #4294967295
 80022c0:	667b      	str	r3, [r7, #100]	@ 0x64
    MUX *mux1 = NULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	663b      	str	r3, [r7, #96]	@ 0x60
    MUX *mux2 = NULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    MainTrack *selectedTrack = NULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	65bb      	str	r3, [r7, #88]	@ 0x58
    int muxIndex = -1;
 80022ce:	f04f 33ff 	mov.w	r3, #4294967295
 80022d2:	643b      	str	r3, [r7, #64]	@ 0x40

    // Find an available or existing main track for the given net ID
    for (int x = 0; x < 32; ++x) {
 80022d4:	2300      	movs	r3, #0
 80022d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80022d8:	e02c      	b.n	8002334 <routeBreadboard+0x114>
        if (mainTracks[x].net_id == net_id) {
 80022da:	4a82      	ldr	r2, [pc, #520]	@ (80024e4 <routeBreadboard+0x2c4>)
 80022dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	4413      	add	r3, r2
 80022e2:	3304      	adds	r3, #4
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	69fa      	ldr	r2, [r7, #28]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d105      	bne.n	80022f8 <routeBreadboard+0xd8>
            selectedTrack = &mainTracks[x];  // Reuse existing track if net ID matches
 80022ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022ee:	011b      	lsls	r3, r3, #4
 80022f0:	4a7c      	ldr	r2, [pc, #496]	@ (80024e4 <routeBreadboard+0x2c4>)
 80022f2:	4413      	add	r3, r2
 80022f4:	65bb      	str	r3, [r7, #88]	@ 0x58
            break;
 80022f6:	e020      	b.n	800233a <routeBreadboard+0x11a>
        } else if (!mainTracks[x].is_used) {
 80022f8:	4a7a      	ldr	r2, [pc, #488]	@ (80024e4 <routeBreadboard+0x2c4>)
 80022fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022fc:	011b      	lsls	r3, r3, #4
 80022fe:	4413      	add	r3, r2
 8002300:	3308      	adds	r3, #8
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d112      	bne.n	800232e <routeBreadboard+0x10e>
            selectedTrack = &mainTracks[x];  // Assign new track if available
 8002308:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	4a75      	ldr	r2, [pc, #468]	@ (80024e4 <routeBreadboard+0x2c4>)
 800230e:	4413      	add	r3, r2
 8002310:	65bb      	str	r3, [r7, #88]	@ 0x58
            selectedTrack->is_used = 1;
 8002312:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002314:	2201      	movs	r2, #1
 8002316:	609a      	str	r2, [r3, #8]
            selectedTrack->net_id = net_id;
 8002318:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800231a:	69fa      	ldr	r2, [r7, #28]
 800231c:	605a      	str	r2, [r3, #4]
            selectedTrack->track_id = x; // Assign track ID here
 800231e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002320:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002322:	601a      	str	r2, [r3, #0]
            printf("Selected Track id: %d\n", x);
 8002324:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002326:	4870      	ldr	r0, [pc, #448]	@ (80024e8 <routeBreadboard+0x2c8>)
 8002328:	f002 fbda 	bl	8004ae0 <iprintf>
            break;
 800232c:	e005      	b.n	800233a <routeBreadboard+0x11a>
    for (int x = 0; x < 32; ++x) {
 800232e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002330:	3301      	adds	r3, #1
 8002332:	657b      	str	r3, [r7, #84]	@ 0x54
 8002334:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002336:	2b1f      	cmp	r3, #31
 8002338:	ddcf      	ble.n	80022da <routeBreadboard+0xba>
        }
    }

    if (!selectedTrack) {
 800233a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800233c:	2b00      	cmp	r3, #0
 800233e:	d104      	bne.n	800234a <routeBreadboard+0x12a>
        printf("Error: No available main track for net ID %d\n", net_id);
 8002340:	69f9      	ldr	r1, [r7, #28]
 8002342:	486a      	ldr	r0, [pc, #424]	@ (80024ec <routeBreadboard+0x2cc>)
 8002344:	f002 fbcc 	bl	8004ae0 <iprintf>
        return;
 8002348:	e249      	b.n	80027de <routeBreadboard+0x5be>
    }

    muxIndex = (selectedTrack->track_id < 16) ? 0 : 1;
 800234a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2b0f      	cmp	r3, #15
 8002350:	bfcc      	ite	gt
 8002352:	2301      	movgt	r3, #1
 8002354:	2300      	movle	r3, #0
 8002356:	b2db      	uxtb	r3, r3
 8002358:	643b      	str	r3, [r7, #64]	@ 0x40

	for (size_t i = muxIndex; i < muxCount; i += 2) {
 800235a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800235c:	653b      	str	r3, [r7, #80]	@ 0x50
 800235e:	e06b      	b.n	8002438 <routeBreadboard+0x218>
		for (int y = 0; y < 8; ++y) {
 8002360:	2300      	movs	r3, #0
 8002362:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002364:	e05c      	b.n	8002420 <routeBreadboard+0x200>
			if (strcmp((*muxes[i].yPins)[y], pin1Name) == 0 && mux1 == NULL) {
 8002366:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002368:	4613      	mov	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	4413      	add	r3, r2
 800236e:	011b      	lsls	r3, r3, #4
 8002370:	461a      	mov	r2, r3
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	4413      	add	r3, r2
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800237a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800237e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8002382:	4611      	mov	r1, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f7fd ff4d 	bl	8000224 <strcmp>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d117      	bne.n	80023c0 <routeBreadboard+0x1a0>
 8002390:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002392:	2b00      	cmp	r3, #0
 8002394:	d114      	bne.n	80023c0 <routeBreadboard+0x1a0>
				xIndex1 = selectedTrack->track_id % 16;
 8002396:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	425a      	negs	r2, r3
 800239c:	f003 030f 	and.w	r3, r3, #15
 80023a0:	f002 020f 	and.w	r2, r2, #15
 80023a4:	bf58      	it	pl
 80023a6:	4253      	negpl	r3, r2
 80023a8:	673b      	str	r3, [r7, #112]	@ 0x70
				yIndex1 = y;
 80023aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
				mux1 = &muxes[i];
 80023ae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80023b0:	4613      	mov	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	4413      	add	r3, r2
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	461a      	mov	r2, r3
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	4413      	add	r3, r2
 80023be:	663b      	str	r3, [r7, #96]	@ 0x60
			}
			if (strcmp((*muxes[i].yPins)[y], pin2Name) == 0 && mux2 == NULL) {
 80023c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80023c2:	4613      	mov	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4413      	add	r3, r2
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	461a      	mov	r2, r3
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	4413      	add	r3, r2
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d8:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80023dc:	4611      	mov	r1, r2
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fd ff20 	bl	8000224 <strcmp>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d117      	bne.n	800241a <routeBreadboard+0x1fa>
 80023ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d114      	bne.n	800241a <routeBreadboard+0x1fa>
				xIndex2 = selectedTrack->track_id % 16;
 80023f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	425a      	negs	r2, r3
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	f002 020f 	and.w	r2, r2, #15
 80023fe:	bf58      	it	pl
 8002400:	4253      	negpl	r3, r2
 8002402:	66bb      	str	r3, [r7, #104]	@ 0x68
				yIndex2 = y;
 8002404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002406:	667b      	str	r3, [r7, #100]	@ 0x64
				mux2 = &muxes[i];
 8002408:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800240a:	4613      	mov	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	4413      	add	r3, r2
 8002410:	011b      	lsls	r3, r3, #4
 8002412:	461a      	mov	r2, r3
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	4413      	add	r3, r2
 8002418:	65fb      	str	r3, [r7, #92]	@ 0x5c
		for (int y = 0; y < 8; ++y) {
 800241a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800241c:	3301      	adds	r3, #1
 800241e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002420:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002422:	2b07      	cmp	r3, #7
 8002424:	dd9f      	ble.n	8002366 <routeBreadboard+0x146>
			}
		}
		if (mux1 && mux2) break;
 8002426:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002428:	2b00      	cmp	r3, #0
 800242a:	d002      	beq.n	8002432 <routeBreadboard+0x212>
 800242c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800242e:	2b00      	cmp	r3, #0
 8002430:	d108      	bne.n	8002444 <routeBreadboard+0x224>
	for (size_t i = muxIndex; i < muxCount; i += 2) {
 8002432:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002434:	3302      	adds	r3, #2
 8002436:	653b      	str	r3, [r7, #80]	@ 0x50
 8002438:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800243a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800243e:	429a      	cmp	r2, r3
 8002440:	d38e      	bcc.n	8002360 <routeBreadboard+0x140>
 8002442:	e000      	b.n	8002446 <routeBreadboard+0x226>
		if (mux1 && mux2) break;
 8002444:	bf00      	nop
	}


    // Update connection counter based on mode
	if (mode == 1) {
 8002446:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 800244a:	2b01      	cmp	r3, #1
 800244c:	d156      	bne.n	80024fc <routeBreadboard+0x2dc>
		if (mux1->usage[xIndex1][yIndex1] > 0 && mux2->usage[xIndex2][yIndex2] > 0) {
 800244e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002450:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	441a      	add	r2, r3
 8002456:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002458:	4413      	add	r3, r2
 800245a:	3310      	adds	r3, #16
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00d      	beq.n	800247e <routeBreadboard+0x25e>
 8002462:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002464:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	441a      	add	r2, r3
 800246a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800246c:	4413      	add	r3, r2
 800246e:	3310      	adds	r3, #16
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <routeBreadboard+0x25e>
			printf("Already connected, RETURN. NOT incrementing usage, maintrack, led counters\n\n");
 8002476:	481e      	ldr	r0, [pc, #120]	@ (80024f0 <routeBreadboard+0x2d0>)
 8002478:	f002 fba2 	bl	8004bc0 <puts>
			return;
 800247c:	e1af      	b.n	80027de <routeBreadboard+0x5be>
		}

		selectedTrack->current_connections++; // Increment current connections
 800247e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	1c5a      	adds	r2, r3, #1
 8002484:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002486:	60da      	str	r2, [r3, #12]
		printf("Main Track %d incremented. Current connections: %d\n", selectedTrack->track_id, selectedTrack->current_connections);
 8002488:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800248a:	6819      	ldr	r1, [r3, #0]
 800248c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	461a      	mov	r2, r3
 8002492:	4818      	ldr	r0, [pc, #96]	@ (80024f4 <routeBreadboard+0x2d4>)
 8002494:	f002 fb24 	bl	8004ae0 <iprintf>


	    // Keep track of leds:
	    ledsToMainTracks[breadboardPin1 - 1]++;
 8002498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249a:	3b01      	subs	r3, #1
 800249c:	4a16      	ldr	r2, [pc, #88]	@ (80024f8 <routeBreadboard+0x2d8>)
 800249e:	5cd2      	ldrb	r2, [r2, r3]
 80024a0:	3201      	adds	r2, #1
 80024a2:	b2d1      	uxtb	r1, r2
 80024a4:	4a14      	ldr	r2, [pc, #80]	@ (80024f8 <routeBreadboard+0x2d8>)
 80024a6:	54d1      	strb	r1, [r2, r3]
	    ledsToMainTracks[breadboardPin2 - 1]++;
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	4a12      	ldr	r2, [pc, #72]	@ (80024f8 <routeBreadboard+0x2d8>)
 80024ae:	5cd2      	ldrb	r2, [r2, r3]
 80024b0:	3201      	adds	r2, #1
 80024b2:	b2d1      	uxtb	r1, r2
 80024b4:	4a10      	ldr	r2, [pc, #64]	@ (80024f8 <routeBreadboard+0x2d8>)
 80024b6:	54d1      	strb	r1, [r2, r3]

		addToPin(breadboardPin1, rgb);
 80024b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fe f89d 	bl	8000600 <addToPin>
		addToPin(breadboardPin2, rgb);
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe f896 	bl	8000600 <addToPin>
 80024d4:	e05e      	b.n	8002594 <routeBreadboard+0x374>
 80024d6:	bf00      	nop
 80024d8:	08006b6c 	.word	0x08006b6c
 80024dc:	08006b74 	.word	0x08006b74
 80024e0:	20001ff0 	.word	0x20001ff0
 80024e4:	20005308 	.word	0x20005308
 80024e8:	08006b98 	.word	0x08006b98
 80024ec:	08006bb0 	.word	0x08006bb0
 80024f0:	08006be0 	.word	0x08006be0
 80024f4:	08006c2c 	.word	0x08006c2c
 80024f8:	20005568 	.word	0x20005568
	} else if (mode == 0) {
 80024fc:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 8002500:	2b00      	cmp	r3, #0
 8002502:	d147      	bne.n	8002594 <routeBreadboard+0x374>
		selectedTrack->current_connections--; // Decrement current connections
 8002504:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	1e5a      	subs	r2, r3, #1
 800250a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800250c:	60da      	str	r2, [r3, #12]
		if (selectedTrack->current_connections <= 0) { // If counter is 0, free track
 800250e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	2b00      	cmp	r3, #0
 8002514:	dc10      	bgt.n	8002538 <routeBreadboard+0x318>
			printf("Main Track %d is now free\n", selectedTrack->track_id);
 8002516:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4619      	mov	r1, r3
 800251c:	4857      	ldr	r0, [pc, #348]	@ (800267c <routeBreadboard+0x45c>)
 800251e:	f002 fadf 	bl	8004ae0 <iprintf>
			selectedTrack->is_used = 0;
 8002522:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002524:	2200      	movs	r2, #0
 8002526:	609a      	str	r2, [r3, #8]
			selectedTrack->net_id = -1;
 8002528:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800252a:	f04f 32ff 	mov.w	r2, #4294967295
 800252e:	605a      	str	r2, [r3, #4]
			selectedTrack->current_connections = 0;
 8002530:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002532:	2200      	movs	r2, #0
 8002534:	60da      	str	r2, [r3, #12]
 8002536:	e007      	b.n	8002548 <routeBreadboard+0x328>
		}else{
			printf("Main Track %d decremented, but still occupied. Current connections: %d\n", selectedTrack->track_id, selectedTrack->current_connections);
 8002538:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800253a:	6819      	ldr	r1, [r3, #0]
 800253c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	461a      	mov	r2, r3
 8002542:	484f      	ldr	r0, [pc, #316]	@ (8002680 <routeBreadboard+0x460>)
 8002544:	f002 facc 	bl	8004ae0 <iprintf>

		}

	    // Keep track of leds:
		ledsToMainTracks[breadboardPin1 - 1]--;
 8002548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254a:	3b01      	subs	r3, #1
 800254c:	4a4d      	ldr	r2, [pc, #308]	@ (8002684 <routeBreadboard+0x464>)
 800254e:	5cd2      	ldrb	r2, [r2, r3]
 8002550:	3a01      	subs	r2, #1
 8002552:	b2d1      	uxtb	r1, r2
 8002554:	4a4b      	ldr	r2, [pc, #300]	@ (8002684 <routeBreadboard+0x464>)
 8002556:	54d1      	strb	r1, [r2, r3]
		ledsToMainTracks[breadboardPin2 - 1]--;
 8002558:	6a3b      	ldr	r3, [r7, #32]
 800255a:	3b01      	subs	r3, #1
 800255c:	4a49      	ldr	r2, [pc, #292]	@ (8002684 <routeBreadboard+0x464>)
 800255e:	5cd2      	ldrb	r2, [r2, r3]
 8002560:	3a01      	subs	r2, #1
 8002562:	b2d1      	uxtb	r1, r2
 8002564:	4a47      	ldr	r2, [pc, #284]	@ (8002684 <routeBreadboard+0x464>)
 8002566:	54d1      	strb	r1, [r2, r3]

		ledsToMainTracks[breadboardPin1 - 1] == 0 ? removeFromPin(breadboardPin1) : (void)0;
 8002568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256a:	3b01      	subs	r3, #1
 800256c:	4a45      	ldr	r2, [pc, #276]	@ (8002684 <routeBreadboard+0x464>)
 800256e:	5cd3      	ldrb	r3, [r2, r3]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d104      	bne.n	800257e <routeBreadboard+0x35e>
 8002574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002576:	b2db      	uxtb	r3, r3
 8002578:	4618      	mov	r0, r3
 800257a:	f7fe f889 	bl	8000690 <removeFromPin>
		ledsToMainTracks[breadboardPin2 - 1] == 0 ? removeFromPin(breadboardPin2) : (void)0;
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	3b01      	subs	r3, #1
 8002582:	4a40      	ldr	r2, [pc, #256]	@ (8002684 <routeBreadboard+0x464>)
 8002584:	5cd3      	ldrb	r3, [r2, r3]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d104      	bne.n	8002594 <routeBreadboard+0x374>
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	4618      	mov	r0, r3
 8002590:	f7fe f87e 	bl	8000690 <removeFromPin>
	}


	if (mux1 && mux2) {
 8002594:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 8114 	beq.w	80027c4 <routeBreadboard+0x5a4>
 800259c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 8110 	beq.w	80027c4 <routeBreadboard+0x5a4>
		const char *action1 = "SKIP";
 80025a4:	4b38      	ldr	r3, [pc, #224]	@ (8002688 <routeBreadboard+0x468>)
 80025a6:	64bb      	str	r3, [r7, #72]	@ 0x48
		const char *action2 = "SKIP";
 80025a8:	4b37      	ldr	r3, [pc, #220]	@ (8002688 <routeBreadboard+0x468>)
 80025aa:	647b      	str	r3, [r7, #68]	@ 0x44

		uint8_t *usage1 = &mux1->usage[xIndex1][yIndex1];
 80025ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025ae:	00da      	lsls	r2, r3, #3
 80025b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025b2:	4413      	add	r3, r2
 80025b4:	3310      	adds	r3, #16
 80025b6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80025b8:	4413      	add	r3, r2
 80025ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
		uint8_t *usage2 = &mux2->usage[xIndex2][yIndex2];
 80025bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025be:	00da      	lsls	r2, r3, #3
 80025c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025c2:	4413      	add	r3, r2
 80025c4:	3310      	adds	r3, #16
 80025c6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80025c8:	4413      	add	r3, r2
 80025ca:	63bb      	str	r3, [r7, #56]	@ 0x38

		// Only connect if usage was 0 before
		if (mode == 1) {
 80025cc:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d144      	bne.n	800265e <routeBreadboard+0x43e>

			action1 = (*usage1 == 0) ? "Connecting" : "Already Connected";
 80025d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <routeBreadboard+0x3c0>
 80025dc:	4b2b      	ldr	r3, [pc, #172]	@ (800268c <routeBreadboard+0x46c>)
 80025de:	e000      	b.n	80025e2 <routeBreadboard+0x3c2>
 80025e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002690 <routeBreadboard+0x470>)
 80025e2:	64bb      	str	r3, [r7, #72]	@ 0x48
			action2 = (*usage2 == 0) ? "Connecting" : "Already Connected";
 80025e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <routeBreadboard+0x3d0>
 80025ec:	4b27      	ldr	r3, [pc, #156]	@ (800268c <routeBreadboard+0x46c>)
 80025ee:	e000      	b.n	80025f2 <routeBreadboard+0x3d2>
 80025f0:	4b27      	ldr	r3, [pc, #156]	@ (8002690 <routeBreadboard+0x470>)
 80025f2:	647b      	str	r3, [r7, #68]	@ 0x44

			if (*usage1 == 0) setConnection(xIndex1, yIndex1, *mux1, 1);
 80025f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10f      	bne.n	800261c <routeBreadboard+0x3fc>
 80025fc:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 80025fe:	2301      	movs	r3, #1
 8002600:	9322      	str	r3, [sp, #136]	@ 0x88
 8002602:	4668      	mov	r0, sp
 8002604:	f104 0308 	add.w	r3, r4, #8
 8002608:	2288      	movs	r2, #136	@ 0x88
 800260a:	4619      	mov	r1, r3
 800260c:	f002 fca5 	bl	8004f5a <memcpy>
 8002610:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002614:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8002616:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002618:	f7ff fd2c 	bl	8002074 <setConnection>
			if (*usage2 == 0) setConnection(xIndex2, yIndex2, *mux2, 1);
 800261c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10f      	bne.n	8002644 <routeBreadboard+0x424>
 8002624:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 8002626:	2301      	movs	r3, #1
 8002628:	9322      	str	r3, [sp, #136]	@ 0x88
 800262a:	4668      	mov	r0, sp
 800262c:	f104 0308 	add.w	r3, r4, #8
 8002630:	2288      	movs	r2, #136	@ 0x88
 8002632:	4619      	mov	r1, r3
 8002634:	f002 fc91 	bl	8004f5a <memcpy>
 8002638:	e894 000c 	ldmia.w	r4, {r2, r3}
 800263c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800263e:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002640:	f7ff fd18 	bl	8002074 <setConnection>

			(*usage1)++;
 8002644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	3301      	adds	r3, #1
 800264a:	b2da      	uxtb	r2, r3
 800264c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800264e:	701a      	strb	r2, [r3, #0]
			(*usage2)++;
 8002650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	3301      	adds	r3, #1
 8002656:	b2da      	uxtb	r2, r3
 8002658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800265a:	701a      	strb	r2, [r3, #0]
 800265c:	e05c      	b.n	8002718 <routeBreadboard+0x4f8>
		} else {

			action1 = (*usage1 == 1) ? "Disconnecting" : "Still In Use";
 800265e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d101      	bne.n	800266a <routeBreadboard+0x44a>
 8002666:	4b0b      	ldr	r3, [pc, #44]	@ (8002694 <routeBreadboard+0x474>)
 8002668:	e000      	b.n	800266c <routeBreadboard+0x44c>
 800266a:	4b0b      	ldr	r3, [pc, #44]	@ (8002698 <routeBreadboard+0x478>)
 800266c:	64bb      	str	r3, [r7, #72]	@ 0x48
			action2 = (*usage2 == 1) ? "Disconnecting" : "Still In Use";
 800266e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d112      	bne.n	800269c <routeBreadboard+0x47c>
 8002676:	4b07      	ldr	r3, [pc, #28]	@ (8002694 <routeBreadboard+0x474>)
 8002678:	e011      	b.n	800269e <routeBreadboard+0x47e>
 800267a:	bf00      	nop
 800267c:	08006c60 	.word	0x08006c60
 8002680:	08006c7c 	.word	0x08006c7c
 8002684:	20005568 	.word	0x20005568
 8002688:	08006cc4 	.word	0x08006cc4
 800268c:	08006ccc 	.word	0x08006ccc
 8002690:	08006cd8 	.word	0x08006cd8
 8002694:	08006cec 	.word	0x08006cec
 8002698:	08006cfc 	.word	0x08006cfc
 800269c:	4b51      	ldr	r3, [pc, #324]	@ (80027e4 <routeBreadboard+0x5c4>)
 800269e:	647b      	str	r3, [r7, #68]	@ 0x44

			if (*usage1 == 1) setConnection(xIndex1, yIndex1, *mux1, 0);
 80026a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d10f      	bne.n	80026c8 <routeBreadboard+0x4a8>
 80026a8:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 80026aa:	2300      	movs	r3, #0
 80026ac:	9322      	str	r3, [sp, #136]	@ 0x88
 80026ae:	4668      	mov	r0, sp
 80026b0:	f104 0308 	add.w	r3, r4, #8
 80026b4:	2288      	movs	r2, #136	@ 0x88
 80026b6:	4619      	mov	r1, r3
 80026b8:	f002 fc4f 	bl	8004f5a <memcpy>
 80026bc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80026c0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80026c2:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80026c4:	f7ff fcd6 	bl	8002074 <setConnection>
			if (*usage2 == 1) setConnection(xIndex2, yIndex2, *mux2, 0);
 80026c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d10f      	bne.n	80026f0 <routeBreadboard+0x4d0>
 80026d0:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 80026d2:	2300      	movs	r3, #0
 80026d4:	9322      	str	r3, [sp, #136]	@ 0x88
 80026d6:	4668      	mov	r0, sp
 80026d8:	f104 0308 	add.w	r3, r4, #8
 80026dc:	2288      	movs	r2, #136	@ 0x88
 80026de:	4619      	mov	r1, r3
 80026e0:	f002 fc3b 	bl	8004f5a <memcpy>
 80026e4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80026e8:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80026ea:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80026ec:	f7ff fcc2 	bl	8002074 <setConnection>

			if (*usage1 > 0) (*usage1)--;
 80026f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d005      	beq.n	8002704 <routeBreadboard+0x4e4>
 80026f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002702:	701a      	strb	r2, [r3, #0]
			if (*usage2 > 0) (*usage2)--;
 8002704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d005      	beq.n	8002718 <routeBreadboard+0x4f8>
 800270c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	3b01      	subs	r3, #1
 8002712:	b2da      	uxtb	r2, r3
 8002714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002716:	701a      	strb	r2, [r3, #0]
		}

		printf(
			"%s (X:%d, Y:%d, Usage:%d) at MUX[%ld] CS: %s, Pin: %s, Main Track: %d\n"
			"%s (X:%d, Y:%d, Usage:%d) at MUX[%ld] CS: %s, Pin: %s, Main Track: %d\n\n",
			action1, xIndex1, yIndex1, *usage1, mux1 - muxes + 1, getPortName(mux1->port), getPinName(mux1->pin), selectedTrack->track_id,
 8002718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800271a:	781b      	ldrb	r3, [r3, #0]
		printf(
 800271c:	617b      	str	r3, [r7, #20]
			action1, xIndex1, yIndex1, *usage1, mux1 - muxes + 1, getPortName(mux1->port), getPinName(mux1->pin), selectedTrack->track_id,
 800271e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	111b      	asrs	r3, r3, #4
 8002726:	4a30      	ldr	r2, [pc, #192]	@ (80027e8 <routeBreadboard+0x5c8>)
 8002728:	fb02 f303 	mul.w	r3, r2, r3
		printf(
 800272c:	1c5c      	adds	r4, r3, #1
 800272e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff fb74 	bl	8001e20 <getPortName>
 8002738:	6138      	str	r0, [r7, #16]
 800273a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff fbac 	bl	8001e9c <getPinName>
 8002744:	60f8      	str	r0, [r7, #12]
 8002746:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002748:	681d      	ldr	r5, [r3, #0]
			action2, xIndex2, yIndex2, *usage2, mux2 - muxes + 1, getPortName(mux2->port), getPinName(mux2->pin), selectedTrack->track_id
 800274a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800274c:	781b      	ldrb	r3, [r3, #0]
		printf(
 800274e:	60bb      	str	r3, [r7, #8]
			action2, xIndex2, yIndex2, *usage2, mux2 - muxes + 1, getPortName(mux2->port), getPinName(mux2->pin), selectedTrack->track_id
 8002750:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	111b      	asrs	r3, r3, #4
 8002758:	4a23      	ldr	r2, [pc, #140]	@ (80027e8 <routeBreadboard+0x5c8>)
 800275a:	fb02 f303 	mul.w	r3, r2, r3
		printf(
 800275e:	1c5e      	adds	r6, r3, #1
 8002760:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff fb5b 	bl	8001e20 <getPortName>
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fb93 	bl	8001e9c <getPinName>
 8002776:	4602      	mov	r2, r0
 8002778:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	930c      	str	r3, [sp, #48]	@ 0x30
 800277e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	920a      	str	r2, [sp, #40]	@ 0x28
 8002784:	9609      	str	r6, [sp, #36]	@ 0x24
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	9208      	str	r2, [sp, #32]
 800278a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800278c:	9307      	str	r3, [sp, #28]
 800278e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002790:	9306      	str	r3, [sp, #24]
 8002792:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002794:	9305      	str	r3, [sp, #20]
 8002796:	9504      	str	r5, [sp, #16]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	9203      	str	r2, [sp, #12]
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	9202      	str	r2, [sp, #8]
 80027a0:	9401      	str	r4, [sp, #4]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027a8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80027aa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80027ac:	480f      	ldr	r0, [pc, #60]	@ (80027ec <routeBreadboard+0x5cc>)
 80027ae:	f002 f997 	bl	8004ae0 <iprintf>
		);

		fflush(stdout);
 80027b2:	4b0f      	ldr	r3, [pc, #60]	@ (80027f0 <routeBreadboard+0x5d0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f002 f8bb 	bl	8004934 <fflush>

		sendPixelData();
 80027be:	f7fd ffe3 	bl	8000788 <sendPixelData>
	if (mux1 && mux2) {
 80027c2:	e00c      	b.n	80027de <routeBreadboard+0x5be>
	} else {
		printf("Error: Unable to route pins - No available MUX found!\n");
 80027c4:	480b      	ldr	r0, [pc, #44]	@ (80027f4 <routeBreadboard+0x5d4>)
 80027c6:	f002 f9fb 	bl	8004bc0 <puts>
		fflush(stdout);
 80027ca:	4b09      	ldr	r3, [pc, #36]	@ (80027f0 <routeBreadboard+0x5d0>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f002 f8af 	bl	8004934 <fflush>
 80027d6:	e002      	b.n	80027de <routeBreadboard+0x5be>
    	return; // Maybe message to UART idk?
 80027d8:	bf00      	nop
 80027da:	e000      	b.n	80027de <routeBreadboard+0x5be>
		return; // Maybe message to UART idk?
 80027dc:	bf00      	nop
	}
}
 80027de:	377c      	adds	r7, #124	@ 0x7c
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027e4:	08006cfc 	.word	0x08006cfc
 80027e8:	38e38e39 	.word	0x38e38e39
 80027ec:	08006d0c 	.word	0x08006d0c
 80027f0:	20001ff0 	.word	0x20001ff0
 80027f4:	08006d9c 	.word	0x08006d9c

080027f8 <routeSignalAnalyzer>:

void routeSignalAnalyzer(int net_id, MUX *muxes, uint8_t mode) {
 80027f8:	b590      	push	{r4, r7, lr}
 80027fa:	b0b7      	sub	sp, #220	@ 0xdc
 80027fc:	af24      	add	r7, sp, #144	@ 0x90
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	4613      	mov	r3, r2
 8002804:	71fb      	strb	r3, [r7, #7]
    MainTrack *selectedTrack = NULL;
 8002806:	2300      	movs	r3, #0
 8002808:	647b      	str	r3, [r7, #68]	@ 0x44
    int trackIndex = -1;
 800280a:	f04f 33ff 	mov.w	r3, #4294967295
 800280e:	627b      	str	r3, [r7, #36]	@ 0x24
    char trackName[10];  // Buffer for formatted string
    int xIndex = -1, yIndex = -1;
 8002810:	f04f 33ff 	mov.w	r3, #4294967295
 8002814:	643b      	str	r3, [r7, #64]	@ 0x40
 8002816:	f04f 33ff 	mov.w	r3, #4294967295
 800281a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    MUX *mux = NULL;
 800281c:	2300      	movs	r3, #0
 800281e:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Step 1: Find a main track that is used and has the matching net_id
    for (int i = 0; i < 32; i++) {
 8002820:	2300      	movs	r3, #0
 8002822:	637b      	str	r3, [r7, #52]	@ 0x34
 8002824:	e02b      	b.n	800287e <routeSignalAnalyzer+0x86>
        if (mainTracks[i].is_used && mainTracks[i].net_id == net_id) {
 8002826:	4a9a      	ldr	r2, [pc, #616]	@ (8002a90 <routeSignalAnalyzer+0x298>)
 8002828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	4413      	add	r3, r2
 800282e:	3308      	adds	r3, #8
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d020      	beq.n	8002878 <routeSignalAnalyzer+0x80>
 8002836:	4a96      	ldr	r2, [pc, #600]	@ (8002a90 <routeSignalAnalyzer+0x298>)
 8002838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	4413      	add	r3, r2
 800283e:	3304      	adds	r3, #4
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	429a      	cmp	r2, r3
 8002846:	d117      	bne.n	8002878 <routeSignalAnalyzer+0x80>
            selectedTrack = &mainTracks[i];
 8002848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	4a90      	ldr	r2, [pc, #576]	@ (8002a90 <routeSignalAnalyzer+0x298>)
 800284e:	4413      	add	r3, r2
 8002850:	647b      	str	r3, [r7, #68]	@ 0x44
            trackIndex = i;
 8002852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002854:	627b      	str	r3, [r7, #36]	@ 0x24
            snprintf(trackName, sizeof(trackName), "MT_%d", trackIndex + 1); // Convert to "MT_X"
 8002856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002858:	3301      	adds	r3, #1
 800285a:	f107 0010 	add.w	r0, r7, #16
 800285e:	4a8d      	ldr	r2, [pc, #564]	@ (8002a94 <routeSignalAnalyzer+0x29c>)
 8002860:	210a      	movs	r1, #10
 8002862:	f002 f9b5 	bl	8004bd0 <sniprintf>
			printf("Found Main Track %d (Name: %s) for Net ID %d\n", selectedTrack->track_id, trackName, net_id);
 8002866:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002868:	6819      	ldr	r1, [r3, #0]
 800286a:	f107 0210 	add.w	r2, r7, #16
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4889      	ldr	r0, [pc, #548]	@ (8002a98 <routeSignalAnalyzer+0x2a0>)
 8002872:	f002 f935 	bl	8004ae0 <iprintf>
			break;
 8002876:	e005      	b.n	8002884 <routeSignalAnalyzer+0x8c>
    for (int i = 0; i < 32; i++) {
 8002878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800287a:	3301      	adds	r3, #1
 800287c:	637b      	str	r3, [r7, #52]	@ 0x34
 800287e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002880:	2b1f      	cmp	r3, #31
 8002882:	ddd0      	ble.n	8002826 <routeSignalAnalyzer+0x2e>
        }
    }

    if (!selectedTrack) {
 8002884:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002886:	2b00      	cmp	r3, #0
 8002888:	d104      	bne.n	8002894 <routeSignalAnalyzer+0x9c>
        printf("Error: No active Main Track found for Net ID %d\n", net_id);
 800288a:	68f9      	ldr	r1, [r7, #12]
 800288c:	4883      	ldr	r0, [pc, #524]	@ (8002a9c <routeSignalAnalyzer+0x2a4>)
 800288e:	f002 f927 	bl	8004ae0 <iprintf>
        return;
 8002892:	e0fa      	b.n	8002a8a <routeSignalAnalyzer+0x292>
    }

    // Step 2: Check MUX 33 and 34
    MUX *mux33 = &muxes[32]; // MUX 33 (Array index 32)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	f503 5390 	add.w	r3, r3, #4608	@ 0x1200
 800289a:	623b      	str	r3, [r7, #32]
    MUX *mux34 = &muxes[33]; // MUX 34 (Array index 33)
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f503 5394 	add.w	r3, r3, #4736	@ 0x1280
 80028a2:	3310      	adds	r3, #16
 80028a4:	61fb      	str	r3, [r7, #28]

    // Step 3: Look for the track ID in X Pins of MUX 33 and 34

    for (int i = 0; i < 16; i++) {
 80028a6:	2300      	movs	r3, #0
 80028a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80028aa:	e028      	b.n	80028fe <routeSignalAnalyzer+0x106>
        if (strcmp((*mux33->xPins)[i], trackName) == 0) {
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b6:	f107 0210 	add.w	r2, r7, #16
 80028ba:	4611      	mov	r1, r2
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fd fcb1 	bl	8000224 <strcmp>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d104      	bne.n	80028d2 <routeSignalAnalyzer+0xda>
            xIndex = i;
 80028c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ca:	643b      	str	r3, [r7, #64]	@ 0x40
            mux = mux33;
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	63bb      	str	r3, [r7, #56]	@ 0x38
            break;
 80028d0:	e018      	b.n	8002904 <routeSignalAnalyzer+0x10c>
        }
        if (strcmp((*mux34->xPins)[i], trackName) == 0) {
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028dc:	f107 0210 	add.w	r2, r7, #16
 80028e0:	4611      	mov	r1, r2
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fd fc9e 	bl	8000224 <strcmp>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d104      	bne.n	80028f8 <routeSignalAnalyzer+0x100>
            xIndex = i;
 80028ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f0:	643b      	str	r3, [r7, #64]	@ 0x40
            mux = mux34;
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	63bb      	str	r3, [r7, #56]	@ 0x38
            break;
 80028f6:	e005      	b.n	8002904 <routeSignalAnalyzer+0x10c>
    for (int i = 0; i < 16; i++) {
 80028f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028fa:	3301      	adds	r3, #1
 80028fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80028fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002900:	2b0f      	cmp	r3, #15
 8002902:	ddd3      	ble.n	80028ac <routeSignalAnalyzer+0xb4>
        }
    }

    if (mode == 1) {  // Connecting
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d139      	bne.n	800297e <routeSignalAnalyzer+0x186>
		for (int i = 0; i < 8; i++) {
 800290a:	2300      	movs	r3, #0
 800290c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800290e:	e032      	b.n	8002976 <routeSignalAnalyzer+0x17e>
			if (!signalAnalyzerTracks[i].is_used) {
 8002910:	4963      	ldr	r1, [pc, #396]	@ (8002aa0 <routeSignalAnalyzer+0x2a8>)
 8002912:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002914:	4613      	mov	r3, r2
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	4413      	add	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	3308      	adds	r3, #8
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d124      	bne.n	8002970 <routeSignalAnalyzer+0x178>
				yIndex = i;
 8002926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002928:	63fb      	str	r3, [r7, #60]	@ 0x3c
				signalAnalyzerTracks[i].is_used = 1;
 800292a:	495d      	ldr	r1, [pc, #372]	@ (8002aa0 <routeSignalAnalyzer+0x2a8>)
 800292c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800292e:	4613      	mov	r3, r2
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	4413      	add	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	3308      	adds	r3, #8
 800293a:	2201      	movs	r2, #1
 800293c:	601a      	str	r2, [r3, #0]
				signalAnalyzerTracks[i].net_id = net_id;
 800293e:	4958      	ldr	r1, [pc, #352]	@ (8002aa0 <routeSignalAnalyzer+0x2a8>)
 8002940:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002942:	4613      	mov	r3, r2
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	4413      	add	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	440b      	add	r3, r1
 800294c:	3304      	adds	r3, #4
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	601a      	str	r2, [r3, #0]
				signalAnalyzerTracks[i].track_id = xIndex;
 8002952:	4953      	ldr	r1, [pc, #332]	@ (8002aa0 <routeSignalAnalyzer+0x2a8>)
 8002954:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002956:	4613      	mov	r3, r2
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	4413      	add	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	440b      	add	r3, r1
 8002960:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002962:	601a      	str	r2, [r3, #0]
				printf("Assigned Y Pin %d to Net ID %d\n", yIndex, net_id);
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002968:	484e      	ldr	r0, [pc, #312]	@ (8002aa4 <routeSignalAnalyzer+0x2ac>)
 800296a:	f002 f8b9 	bl	8004ae0 <iprintf>
				break;
 800296e:	e04d      	b.n	8002a0c <routeSignalAnalyzer+0x214>
		for (int i = 0; i < 8; i++) {
 8002970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002972:	3301      	adds	r3, #1
 8002974:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002978:	2b07      	cmp	r3, #7
 800297a:	ddc9      	ble.n	8002910 <routeSignalAnalyzer+0x118>
 800297c:	e046      	b.n	8002a0c <routeSignalAnalyzer+0x214>
			}
		}
	} else {  // Disconnecting
		for (int i = 0; i < 8; i++) {
 800297e:	2300      	movs	r3, #0
 8002980:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002982:	e040      	b.n	8002a06 <routeSignalAnalyzer+0x20e>
			if (signalAnalyzerTracks[i].is_used && signalAnalyzerTracks[i].net_id == net_id) {
 8002984:	4946      	ldr	r1, [pc, #280]	@ (8002aa0 <routeSignalAnalyzer+0x2a8>)
 8002986:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002988:	4613      	mov	r3, r2
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	4413      	add	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	3308      	adds	r3, #8
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d032      	beq.n	8002a00 <routeSignalAnalyzer+0x208>
 800299a:	4941      	ldr	r1, [pc, #260]	@ (8002aa0 <routeSignalAnalyzer+0x2a8>)
 800299c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800299e:	4613      	mov	r3, r2
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	4413      	add	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	440b      	add	r3, r1
 80029a8:	3304      	adds	r3, #4
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d126      	bne.n	8002a00 <routeSignalAnalyzer+0x208>
				yIndex = i;
 80029b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
				signalAnalyzerTracks[i].is_used = 0;
 80029b6:	493a      	ldr	r1, [pc, #232]	@ (8002aa0 <routeSignalAnalyzer+0x2a8>)
 80029b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029ba:	4613      	mov	r3, r2
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	4413      	add	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	440b      	add	r3, r1
 80029c4:	3308      	adds	r3, #8
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
				signalAnalyzerTracks[i].net_id = -1;
 80029ca:	4935      	ldr	r1, [pc, #212]	@ (8002aa0 <routeSignalAnalyzer+0x2a8>)
 80029cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029ce:	4613      	mov	r3, r2
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	4413      	add	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	440b      	add	r3, r1
 80029d8:	3304      	adds	r3, #4
 80029da:	f04f 32ff 	mov.w	r2, #4294967295
 80029de:	601a      	str	r2, [r3, #0]
				signalAnalyzerTracks[i].track_id = -1;
 80029e0:	492f      	ldr	r1, [pc, #188]	@ (8002aa0 <routeSignalAnalyzer+0x2a8>)
 80029e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029e4:	4613      	mov	r3, r2
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	4413      	add	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	f04f 32ff 	mov.w	r2, #4294967295
 80029f2:	601a      	str	r2, [r3, #0]
				printf("Freed Y Pin %d for Net ID %d\n", yIndex, net_id);
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80029f8:	482b      	ldr	r0, [pc, #172]	@ (8002aa8 <routeSignalAnalyzer+0x2b0>)
 80029fa:	f002 f871 	bl	8004ae0 <iprintf>
				break;
 80029fe:	e005      	b.n	8002a0c <routeSignalAnalyzer+0x214>
		for (int i = 0; i < 8; i++) {
 8002a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a02:	3301      	adds	r3, #1
 8002a04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a08:	2b07      	cmp	r3, #7
 8002a0a:	ddbb      	ble.n	8002984 <routeSignalAnalyzer+0x18c>
			}
		}
	}

	if (yIndex == -1) {
 8002a0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a12:	d103      	bne.n	8002a1c <routeSignalAnalyzer+0x224>
		printf("Error: No available Y Pin found for Signal Analyzer\n");
 8002a14:	4825      	ldr	r0, [pc, #148]	@ (8002aac <routeSignalAnalyzer+0x2b4>)
 8002a16:	f002 f8d3 	bl	8004bc0 <puts>
		return;
 8002a1a:	e036      	b.n	8002a8a <routeSignalAnalyzer+0x292>
	}

	printf("Connecting Signal Analyzer to MUX %d at (X: %d, Y: %d) for Net ID %d\n",
 8002a1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d101      	bne.n	8002a28 <routeSignalAnalyzer+0x230>
 8002a24:	2121      	movs	r1, #33	@ 0x21
 8002a26:	e000      	b.n	8002a2a <routeSignalAnalyzer+0x232>
 8002a28:	2122      	movs	r1, #34	@ 0x22
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002a32:	481f      	ldr	r0, [pc, #124]	@ (8002ab0 <routeSignalAnalyzer+0x2b8>)
 8002a34:	f002 f854 	bl	8004ae0 <iprintf>
		   (mux == mux33 ? 33 : 34), xIndex, yIndex, net_id);

	printf("\n");
 8002a38:	200a      	movs	r0, #10
 8002a3a:	f002 f863 	bl	8004b04 <putchar>

	// Step 5: Set the connection
	setConnection(xIndex, yIndex, *mux, mode);
 8002a3e:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8002a40:	79fb      	ldrb	r3, [r7, #7]
 8002a42:	9322      	str	r3, [sp, #136]	@ 0x88
 8002a44:	4668      	mov	r0, sp
 8002a46:	f104 0308 	add.w	r3, r4, #8
 8002a4a:	2288      	movs	r2, #136	@ 0x88
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	f002 fa84 	bl	8004f5a <memcpy>
 8002a52:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002a56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002a58:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002a5a:	f7ff fb0b 	bl	8002074 <setConnection>

	if (mode == 1) {
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d109      	bne.n	8002a78 <routeSignalAnalyzer+0x280>
	    adcChannelConfig.channel_enabled[yIndex] = 1;  // Enable the channel
 8002a64:	4a13      	ldr	r2, [pc, #76]	@ (8002ab4 <routeSignalAnalyzer+0x2bc>)
 8002a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a68:	4413      	add	r3, r2
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	701a      	strb	r2, [r3, #0]
	    printf("(ADC%d) ENABLED\n", yIndex);
 8002a6e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002a70:	4811      	ldr	r0, [pc, #68]	@ (8002ab8 <routeSignalAnalyzer+0x2c0>)
 8002a72:	f002 f835 	bl	8004ae0 <iprintf>
 8002a76:	e008      	b.n	8002a8a <routeSignalAnalyzer+0x292>
	} else {
	    adcChannelConfig.channel_enabled[yIndex] = 0;  // Disable the channel
 8002a78:	4a0e      	ldr	r2, [pc, #56]	@ (8002ab4 <routeSignalAnalyzer+0x2bc>)
 8002a7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a7c:	4413      	add	r3, r2
 8002a7e:	2200      	movs	r2, #0
 8002a80:	701a      	strb	r2, [r3, #0]
	    printf("(ADC%d) DISABLED\n", yIndex);
 8002a82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002a84:	480d      	ldr	r0, [pc, #52]	@ (8002abc <routeSignalAnalyzer+0x2c4>)
 8002a86:	f002 f82b 	bl	8004ae0 <iprintf>
	}
}
 8002a8a:	374c      	adds	r7, #76	@ 0x4c
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd90      	pop	{r4, r7, pc}
 8002a90:	20005308 	.word	0x20005308
 8002a94:	08006dd4 	.word	0x08006dd4
 8002a98:	08006ddc 	.word	0x08006ddc
 8002a9c:	08006e0c 	.word	0x08006e0c
 8002aa0:	20005508 	.word	0x20005508
 8002aa4:	08006e40 	.word	0x08006e40
 8002aa8:	08006e60 	.word	0x08006e60
 8002aac:	08006e80 	.word	0x08006e80
 8002ab0:	08006eb4 	.word	0x08006eb4
 8002ab4:	20005658 	.word	0x20005658
 8002ab8:	08006efc 	.word	0x08006efc
 8002abc:	08006f10 	.word	0x08006f10

08002ac0 <clear>:

void clear() {
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b088      	sub	sp, #32
 8002ac4:	af00      	add	r7, sp, #0
    // Step 1: Clear all main tracks
    for (int i = 0; i < 32; i++) {
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]
 8002aca:	e01f      	b.n	8002b0c <clear+0x4c>
        mainTracks[i].is_used = 0;
 8002acc:	4a52      	ldr	r2, [pc, #328]	@ (8002c18 <clear+0x158>)
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3308      	adds	r3, #8
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
        mainTracks[i].net_id = -1;
 8002ada:	4a4f      	ldr	r2, [pc, #316]	@ (8002c18 <clear+0x158>)
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae8:	601a      	str	r2, [r3, #0]
        mainTracks[i].current_connections = 0;
 8002aea:	4a4b      	ldr	r2, [pc, #300]	@ (8002c18 <clear+0x158>)
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	011b      	lsls	r3, r3, #4
 8002af0:	4413      	add	r3, r2
 8002af2:	330c      	adds	r3, #12
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
        mainTracks[i].track_id = -1;
 8002af8:	4a47      	ldr	r2, [pc, #284]	@ (8002c18 <clear+0x158>)
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	4413      	add	r3, r2
 8002b00:	f04f 32ff 	mov.w	r2, #4294967295
 8002b04:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 32; i++) {
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	61fb      	str	r3, [r7, #28]
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	2b1f      	cmp	r3, #31
 8002b10:	dddc      	ble.n	8002acc <clear+0xc>
    }

    // Step 2: Clear all signal analyzer tracks
    for (int i = 0; i < 8; i++) {
 8002b12:	2300      	movs	r3, #0
 8002b14:	61bb      	str	r3, [r7, #24]
 8002b16:	e021      	b.n	8002b5c <clear+0x9c>
        signalAnalyzerTracks[i].is_used = 0;
 8002b18:	4940      	ldr	r1, [pc, #256]	@ (8002c1c <clear+0x15c>)
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	4413      	add	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	3308      	adds	r3, #8
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
        signalAnalyzerTracks[i].net_id = -1;
 8002b2c:	493b      	ldr	r1, [pc, #236]	@ (8002c1c <clear+0x15c>)
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4613      	mov	r3, r2
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	4413      	add	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	3304      	adds	r3, #4
 8002b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b40:	601a      	str	r2, [r3, #0]
        signalAnalyzerTracks[i].track_id = -1;
 8002b42:	4936      	ldr	r1, [pc, #216]	@ (8002c1c <clear+0x15c>)
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4613      	mov	r3, r2
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	4413      	add	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	440b      	add	r3, r1
 8002b50:	f04f 32ff 	mov.w	r2, #4294967295
 8002b54:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	61bb      	str	r3, [r7, #24]
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	2b07      	cmp	r3, #7
 8002b60:	ddda      	ble.n	8002b18 <clear+0x58>
    }

    // Step 3: Clear all Leds assigned to main tracks
    for (int i = 0; i < 120; i++){
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	e007      	b.n	8002b78 <clear+0xb8>
		ledsToMainTracks[i] = 0;
 8002b68:	4a2d      	ldr	r2, [pc, #180]	@ (8002c20 <clear+0x160>)
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	2200      	movs	r2, #0
 8002b70:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 120; i++){
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	3301      	adds	r3, #1
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	2b77      	cmp	r3, #119	@ 0x77
 8002b7c:	ddf4      	ble.n	8002b68 <clear+0xa8>
//		printf("ledsToMainTracks[%d] = %d\n", i, ledsToMainTracks[i]);
    }

    // Step 4: Reset all multiplexer usage values
	for (int i = 0; i < 34; i++) {
 8002b7e:	2300      	movs	r3, #0
 8002b80:	613b      	str	r3, [r7, #16]
 8002b82:	e023      	b.n	8002bcc <clear+0x10c>
		for (int x = 0; x < 16; x++) {
 8002b84:	2300      	movs	r3, #0
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	e01a      	b.n	8002bc0 <clear+0x100>
			for (int y = 0; y < 8; y++) {
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	e011      	b.n	8002bb4 <clear+0xf4>
				muxes[i].usage[x][y] = 0;
 8002b90:	4824      	ldr	r0, [pc, #144]	@ (8002c24 <clear+0x164>)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	00d9      	lsls	r1, r3, #3
 8002b98:	4613      	mov	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	4413      	add	r3, r2
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	440b      	add	r3, r1
 8002ba2:	18c2      	adds	r2, r0, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3310      	adds	r3, #16
 8002baa:	2200      	movs	r2, #0
 8002bac:	701a      	strb	r2, [r3, #0]
			for (int y = 0; y < 8; y++) {
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	60bb      	str	r3, [r7, #8]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2b07      	cmp	r3, #7
 8002bb8:	ddea      	ble.n	8002b90 <clear+0xd0>
		for (int x = 0; x < 16; x++) {
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2b0f      	cmp	r3, #15
 8002bc4:	dde1      	ble.n	8002b8a <clear+0xca>
	for (int i = 0; i < 34; i++) {
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	2b21      	cmp	r3, #33	@ 0x21
 8002bd0:	ddd8      	ble.n	8002b84 <clear+0xc4>
			}
		}
	}

    // Step 5: Disable ADC's
	for (int i = 0; i < 8; i++){
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	607b      	str	r3, [r7, #4]
 8002bd6:	e007      	b.n	8002be8 <clear+0x128>
	    adcChannelConfig.channel_enabled[i] = 0;
 8002bd8:	4a13      	ldr	r2, [pc, #76]	@ (8002c28 <clear+0x168>)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4413      	add	r3, r2
 8002bde:	2200      	movs	r2, #0
 8002be0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++){
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	3301      	adds	r3, #1
 8002be6:	607b      	str	r3, [r7, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b07      	cmp	r3, #7
 8002bec:	ddf4      	ble.n	8002bd8 <clear+0x118>
	}

    // Step 6: Perform hardware reset using RST_GPIO
    LL_GPIO_SetOutputPin(RST_GPIO, RST_PIN);
 8002bee:	490f      	ldr	r1, [pc, #60]	@ (8002c2c <clear+0x16c>)
 8002bf0:	480f      	ldr	r0, [pc, #60]	@ (8002c30 <clear+0x170>)
 8002bf2:	f7ff f8f7 	bl	8001de4 <LL_GPIO_SetOutputPin>
    LL_mDelay(20);
 8002bf6:	2014      	movs	r0, #20
 8002bf8:	f001 fdc2 	bl	8004780 <LL_mDelay>
    LL_GPIO_ResetOutputPin(RST_GPIO, RST_PIN);
 8002bfc:	490b      	ldr	r1, [pc, #44]	@ (8002c2c <clear+0x16c>)
 8002bfe:	480c      	ldr	r0, [pc, #48]	@ (8002c30 <clear+0x170>)
 8002c00:	f7ff f8ff 	bl	8001e02 <LL_GPIO_ResetOutputPin>
    LL_mDelay(20);
 8002c04:	2014      	movs	r0, #20
 8002c06:	f001 fdbb 	bl	8004780 <LL_mDelay>

    printf("CLR complete.\n\n");
 8002c0a:	480a      	ldr	r0, [pc, #40]	@ (8002c34 <clear+0x174>)
 8002c0c:	f001 ffd8 	bl	8004bc0 <puts>
}
 8002c10:	bf00      	nop
 8002c12:	3720      	adds	r7, #32
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	20005308 	.word	0x20005308
 8002c1c:	20005508 	.word	0x20005508
 8002c20:	20005568 	.word	0x20005568
 8002c24:	20000cc0 	.word	0x20000cc0
 8002c28:	20005658 	.word	0x20005658
 8002c2c:	04020002 	.word	0x04020002
 8002c30:	40010c00 	.word	0x40010c00
 8002c34:	08006f24 	.word	0x08006f24

08002c38 <processCommand>:

void processCommand(char *command) {
 8002c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c3a:	b095      	sub	sp, #84	@ 0x54
 8002c3c:	af06      	add	r7, sp, #24
 8002c3e:	6078      	str	r0, [r7, #4]
	if (!fault_3v3_triggered || !fault_5v_triggered){ // test tmr
 8002c40:	4b6b      	ldr	r3, [pc, #428]	@ (8002df0 <processCommand+0x1b8>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d004      	beq.n	8002c54 <processCommand+0x1c>
 8002c4a:	4b6a      	ldr	r3, [pc, #424]	@ (8002df4 <processCommand+0x1bc>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d15d      	bne.n	8002d10 <processCommand+0xd8>

		if (strncmp(command, "RB", 2) == 0) {  // Check if it's a "ROUTE" command
 8002c54:	2202      	movs	r2, #2
 8002c56:	4968      	ldr	r1, [pc, #416]	@ (8002df8 <processCommand+0x1c0>)
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f002 f8f9 	bl	8004e50 <strncmp>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d155      	bne.n	8002d10 <processCommand+0xd8>
				int pin1, pin2, net_id, mode, r, g, b;
				int parsed = sscanf(command, "RB %d %d %d %d %d %d %d",
 8002c64:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8002c68:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002c6c:	f107 0314 	add.w	r3, r7, #20
 8002c70:	9304      	str	r3, [sp, #16]
 8002c72:	f107 0318 	add.w	r3, r7, #24
 8002c76:	9303      	str	r3, [sp, #12]
 8002c78:	f107 031c 	add.w	r3, r7, #28
 8002c7c:	9302      	str	r3, [sp, #8]
 8002c7e:	f107 0320 	add.w	r3, r7, #32
 8002c82:	9301      	str	r3, [sp, #4]
 8002c84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	495b      	ldr	r1, [pc, #364]	@ (8002dfc <processCommand+0x1c4>)
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f001 ffd2 	bl	8004c38 <siscanf>
 8002c94:	6378      	str	r0, [r7, #52]	@ 0x34
									&pin1, &pin2, &net_id, &mode, &r, &g, &b);
				if (parsed == 7) {  // Ensure all arguments were parsed
 8002c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c98:	2b07      	cmp	r3, #7
 8002c9a:	d130      	bne.n	8002cfe <processCommand+0xc6>

					RGB_t color = {b, r, g}; // This is brg, because of the Union, the union is brg, cuz the leds take brg
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	613b      	str	r3, [r7, #16]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	743b      	strb	r3, [r7, #16]
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	747b      	strb	r3, [r7, #17]
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	74bb      	strb	r3, [r7, #18]
					printf("Calling routeBreadboard with: Pin1=%d, Pin2=%d, NetID=%d, Mode=%d, RGB(%d,%d,%d)\n",
 8002cb2:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 8002cb4:	6abd      	ldr	r5, [r7, #40]	@ 0x28
 8002cb6:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	69fa      	ldr	r2, [r7, #28]
 8002cbc:	69b9      	ldr	r1, [r7, #24]
 8002cbe:	6978      	ldr	r0, [r7, #20]
 8002cc0:	9003      	str	r0, [sp, #12]
 8002cc2:	9102      	str	r1, [sp, #8]
 8002cc4:	9201      	str	r2, [sp, #4]
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	4633      	mov	r3, r6
 8002cca:	462a      	mov	r2, r5
 8002ccc:	4621      	mov	r1, r4
 8002cce:	484c      	ldr	r0, [pc, #304]	@ (8002e00 <processCommand+0x1c8>)
 8002cd0:	f001 ff06 	bl	8004ae0 <iprintf>
						   pin1, pin2, net_id, mode, r, g, b);
					fflush(stdout);
 8002cd4:	4b4b      	ldr	r3, [pc, #300]	@ (8002e04 <processCommand+0x1cc>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f001 fe2a 	bl	8004934 <fflush>

					routeBreadboard(pin1, pin2, net_id, muxes, sizeof(muxes) / sizeof(muxes[0]), mode, color);
 8002ce0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ce2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ce4:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	9202      	str	r2, [sp, #8]
 8002cee:	9301      	str	r3, [sp, #4]
 8002cf0:	2322      	movs	r3, #34	@ 0x22
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	4b44      	ldr	r3, [pc, #272]	@ (8002e08 <processCommand+0x1d0>)
 8002cf6:	4622      	mov	r2, r4
 8002cf8:	f7ff fa92 	bl	8002220 <routeBreadboard>
 8002cfc:	e008      	b.n	8002d10 <processCommand+0xd8>
				} else {
					printf("Error: Invalid RB command format!\n");
 8002cfe:	4843      	ldr	r0, [pc, #268]	@ (8002e0c <processCommand+0x1d4>)
 8002d00:	f001 ff5e 	bl	8004bc0 <puts>
					fflush(stdout);
 8002d04:	4b3f      	ldr	r3, [pc, #252]	@ (8002e04 <processCommand+0x1cc>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f001 fe12 	bl	8004934 <fflush>
				}
			}
		}
		if (strncmp(command, "RS", 2) == 0) {
 8002d10:	2202      	movs	r2, #2
 8002d12:	493f      	ldr	r1, [pc, #252]	@ (8002e10 <processCommand+0x1d8>)
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f002 f89b 	bl	8004e50 <strncmp>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d128      	bne.n	8002d72 <processCommand+0x13a>
			int net_id, mode;
			int parsed = sscanf(command, "RS %d %d",
 8002d20:	f107 0308 	add.w	r3, r7, #8
 8002d24:	f107 020c 	add.w	r2, r7, #12
 8002d28:	493a      	ldr	r1, [pc, #232]	@ (8002e14 <processCommand+0x1dc>)
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f001 ff84 	bl	8004c38 <siscanf>
 8002d30:	6338      	str	r0, [r7, #48]	@ 0x30
								&net_id, &mode);
			if (parsed == 2) {  // Ensure all arguments were parsed
 8002d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d113      	bne.n	8002d60 <processCommand+0x128>
				printf("Calling routeSignalAnalyzer with: NetID=%d, Mode=%d\n",
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4836      	ldr	r0, [pc, #216]	@ (8002e18 <processCommand+0x1e0>)
 8002d40:	f001 fece 	bl	8004ae0 <iprintf>
					   net_id, mode);
				fflush(stdout);
 8002d44:	4b2f      	ldr	r3, [pc, #188]	@ (8002e04 <processCommand+0x1cc>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f001 fdf2 	bl	8004934 <fflush>

				routeSignalAnalyzer(net_id, muxes, mode);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	492c      	ldr	r1, [pc, #176]	@ (8002e08 <processCommand+0x1d0>)
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff fd4d 	bl	80027f8 <routeSignalAnalyzer>
 8002d5e:	e008      	b.n	8002d72 <processCommand+0x13a>
			} else {
				printf("Error: Invalid RS command format!\n");
 8002d60:	482e      	ldr	r0, [pc, #184]	@ (8002e1c <processCommand+0x1e4>)
 8002d62:	f001 ff2d 	bl	8004bc0 <puts>
				fflush(stdout);
 8002d66:	4b27      	ldr	r3, [pc, #156]	@ (8002e04 <processCommand+0x1cc>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f001 fde1 	bl	8004934 <fflush>
		}

	}

    if (strncmp(command, "CLR", 3) == 0) {
 8002d72:	2203      	movs	r2, #3
 8002d74:	492a      	ldr	r1, [pc, #168]	@ (8002e20 <processCommand+0x1e8>)
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f002 f86a 	bl	8004e50 <strncmp>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d103      	bne.n	8002d8a <processCommand+0x152>
		clear();
 8002d82:	f7ff fe9d 	bl	8002ac0 <clear>
		clearLeds();
 8002d86:	f7fd fccd 	bl	8000724 <clearLeds>
	}

    if (strncmp(command, "EN 5V", 5) == 0) {
 8002d8a:	2205      	movs	r2, #5
 8002d8c:	4925      	ldr	r1, [pc, #148]	@ (8002e24 <processCommand+0x1ec>)
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f002 f85e 	bl	8004e50 <strncmp>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <processCommand+0x166>
    	FAULT_5v_HandleMsg();
 8002d9a:	f7fd fae7 	bl	800036c <FAULT_5v_HandleMsg>
	}

    if (strncmp(command, "EN 3V3", 6) == 0) {
 8002d9e:	2206      	movs	r2, #6
 8002da0:	4921      	ldr	r1, [pc, #132]	@ (8002e28 <processCommand+0x1f0>)
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f002 f854 	bl	8004e50 <strncmp>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <processCommand+0x17a>
    	FAULT_3v3_HandleMsg();
 8002dae:	f7fd fb07 	bl	80003c0 <FAULT_3v3_HandleMsg>
	}

    if (strncmp(command, "MO", 8) == 0) {
 8002db2:	491e      	ldr	r1, [pc, #120]	@ (8002e2c <processCommand+0x1f4>)
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f7fd fa35 	bl	8000224 <strcmp>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d105      	bne.n	8002dcc <processCommand+0x194>
        signalMode = SIGNAL_MODE_ADC;
 8002dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e30 <processCommand+0x1f8>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	701a      	strb	r2, [r3, #0]
        printf("Switched to ADC mode (Oscilloscope)\n");
 8002dc6:	481b      	ldr	r0, [pc, #108]	@ (8002e34 <processCommand+0x1fc>)
 8002dc8:	f001 fefa 	bl	8004bc0 <puts>
    }

    if (strncmp(command, "MS", 8) == 0) {
 8002dcc:	491a      	ldr	r1, [pc, #104]	@ (8002e38 <processCommand+0x200>)
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7fd fa28 	bl	8000224 <strcmp>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d105      	bne.n	8002de6 <processCommand+0x1ae>
        signalMode = SIGNAL_MODE_DIGITAL;
 8002dda:	4b15      	ldr	r3, [pc, #84]	@ (8002e30 <processCommand+0x1f8>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	701a      	strb	r2, [r3, #0]
        printf("Switched to Digital mode (Logic Analyzer)\n");
 8002de0:	4816      	ldr	r0, [pc, #88]	@ (8002e3c <processCommand+0x204>)
 8002de2:	f001 feed 	bl	8004bc0 <puts>
//			}
//		} else {
//			printf("Invalid command format. Use: Sx ON/OFF\n");
//		}
//	}
}
 8002de6:	bf00      	nop
 8002de8:	373c      	adds	r7, #60	@ 0x3c
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dee:	bf00      	nop
 8002df0:	2000205c 	.word	0x2000205c
 8002df4:	2000205d 	.word	0x2000205d
 8002df8:	08006f34 	.word	0x08006f34
 8002dfc:	08006f38 	.word	0x08006f38
 8002e00:	08006f50 	.word	0x08006f50
 8002e04:	20001ff0 	.word	0x20001ff0
 8002e08:	20000cc0 	.word	0x20000cc0
 8002e0c:	08006fa4 	.word	0x08006fa4
 8002e10:	08006fc8 	.word	0x08006fc8
 8002e14:	08006fcc 	.word	0x08006fcc
 8002e18:	08006fd8 	.word	0x08006fd8
 8002e1c:	08007010 	.word	0x08007010
 8002e20:	08007034 	.word	0x08007034
 8002e24:	08007038 	.word	0x08007038
 8002e28:	08007040 	.word	0x08007040
 8002e2c:	08007048 	.word	0x08007048
 8002e30:	20005660 	.word	0x20005660
 8002e34:	0800704c 	.word	0x0800704c
 8002e38:	08007070 	.word	0x08007070
 8002e3c:	08007074 	.word	0x08007074

08002e40 <LL_USART_IsActiveFlag_TC>:
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e50:	2b40      	cmp	r3, #64	@ 0x40
 8002e52:	bf0c      	ite	eq
 8002e54:	2301      	moveq	r3, #1
 8002e56:	2300      	movne	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr

08002e64 <LL_USART_IsActiveFlag_TXE>:
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e74:	2b80      	cmp	r3, #128	@ 0x80
 8002e76:	bf0c      	ite	eq
 8002e78:	2301      	moveq	r3, #1
 8002e7a:	2300      	movne	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr

08002e88 <LL_USART_TransmitData8>:
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002e94:	78fa      	ldrb	r2, [r7, #3]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	605a      	str	r2, [r3, #4]
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr

08002ea4 <sendRawUART>:

volatile uint8_t usingESP = 0;
volatile uint8_t usingCP2102 = 0;  // default to start with CP2102

void sendRawUART(USART_TypeDef *USARTx, uint8_t *data, uint16_t length)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < length; i++) {
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	82fb      	strh	r3, [r7, #22]
 8002eb6:	e011      	b.n	8002edc <sendRawUART+0x38>
        while (!LL_USART_IsActiveFlag_TXE(USARTx)); // Wait until TX buffer is empty
 8002eb8:	bf00      	nop
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f7ff ffd2 	bl	8002e64 <LL_USART_IsActiveFlag_TXE>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f9      	beq.n	8002eba <sendRawUART+0x16>
        LL_USART_TransmitData8(USARTx, data[i]);
 8002ec6:	8afb      	ldrh	r3, [r7, #22]
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	4413      	add	r3, r2
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	4619      	mov	r1, r3
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f7ff ffd9 	bl	8002e88 <LL_USART_TransmitData8>
    for (uint16_t i = 0; i < length; i++) {
 8002ed6:	8afb      	ldrh	r3, [r7, #22]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	82fb      	strh	r3, [r7, #22]
 8002edc:	8afa      	ldrh	r2, [r7, #22]
 8002ede:	88fb      	ldrh	r3, [r7, #6]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d3e9      	bcc.n	8002eb8 <sendRawUART+0x14>
    }

    // Optionally wait until transmission is complete
    while (!LL_USART_IsActiveFlag_TC(USARTx));
 8002ee4:	bf00      	nop
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f7ff ffaa 	bl	8002e40 <LL_USART_IsActiveFlag_TC>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f9      	beq.n	8002ee6 <sendRawUART+0x42>
}
 8002ef2:	bf00      	nop
 8002ef4:	bf00      	nop
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <UART_ProcessReceivedByte>:
}



void UART_ProcessReceivedByte(uint8_t byte, uint8_t uartNumber)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	4603      	mov	r3, r0
 8002f04:	460a      	mov	r2, r1
 8002f06:	71fb      	strb	r3, [r7, #7]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	71bb      	strb	r3, [r7, #6]
    static uint8_t rxBuffer[RX_BUFFER_SIZE];
    static uint8_t rxIndex = 0;

    if (rxIndex < (RX_BUFFER_SIZE - 1))
 8002f0c:	4b27      	ldr	r3, [pc, #156]	@ (8002fac <UART_ProcessReceivedByte+0xb0>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b62      	cmp	r3, #98	@ 0x62
 8002f12:	d809      	bhi.n	8002f28 <UART_ProcessReceivedByte+0x2c>
    {
        rxBuffer[rxIndex++] = byte;
 8002f14:	4b25      	ldr	r3, [pc, #148]	@ (8002fac <UART_ProcessReceivedByte+0xb0>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	b2d1      	uxtb	r1, r2
 8002f1c:	4a23      	ldr	r2, [pc, #140]	@ (8002fac <UART_ProcessReceivedByte+0xb0>)
 8002f1e:	7011      	strb	r1, [r2, #0]
 8002f20:	4619      	mov	r1, r3
 8002f22:	4a23      	ldr	r2, [pc, #140]	@ (8002fb0 <UART_ProcessReceivedByte+0xb4>)
 8002f24:	79fb      	ldrb	r3, [r7, #7]
 8002f26:	5453      	strb	r3, [r2, r1]
    }

    if (byte == '\n' || byte == '\r')
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	2b0a      	cmp	r3, #10
 8002f2c:	d002      	beq.n	8002f34 <UART_ProcessReceivedByte+0x38>
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
 8002f30:	2b0d      	cmp	r3, #13
 8002f32:	d136      	bne.n	8002fa2 <UART_ProcessReceivedByte+0xa6>
    {
        rxBuffer[rxIndex] = '\0';  // Null-terminate
 8002f34:	4b1d      	ldr	r3, [pc, #116]	@ (8002fac <UART_ProcessReceivedByte+0xb0>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb0 <UART_ProcessReceivedByte+0xb4>)
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	5499      	strb	r1, [r3, r2]

        // Trim leading/trailing whitespace
        char* start = (char*)rxBuffer;
 8002f40:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb0 <UART_ProcessReceivedByte+0xb4>)
 8002f42:	60fb      	str	r3, [r7, #12]
        while (*start == ' ' || *start == '\t' || *start == '\r' || *start == '\n') start++;
 8002f44:	e002      	b.n	8002f4c <UART_ProcessReceivedByte+0x50>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	2b20      	cmp	r3, #32
 8002f52:	d0f8      	beq.n	8002f46 <UART_ProcessReceivedByte+0x4a>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b09      	cmp	r3, #9
 8002f5a:	d0f4      	beq.n	8002f46 <UART_ProcessReceivedByte+0x4a>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b0d      	cmp	r3, #13
 8002f62:	d0f0      	beq.n	8002f46 <UART_ProcessReceivedByte+0x4a>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b0a      	cmp	r3, #10
 8002f6a:	d0ec      	beq.n	8002f46 <UART_ProcessReceivedByte+0x4a>

        if (*start != '\0')  // Only print if not empty after trimming
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00e      	beq.n	8002f92 <UART_ProcessReceivedByte+0x96>
        {
            printf("Received from UART%d: %s\n", uartNumber, start);
 8002f74:	79bb      	ldrb	r3, [r7, #6]
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	4619      	mov	r1, r3
 8002f7a:	480e      	ldr	r0, [pc, #56]	@ (8002fb4 <UART_ProcessReceivedByte+0xb8>)
 8002f7c:	f001 fdb0 	bl	8004ae0 <iprintf>
            fflush(stdout);
 8002f80:	4b0d      	ldr	r3, [pc, #52]	@ (8002fb8 <UART_ProcessReceivedByte+0xbc>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f001 fcd4 	bl	8004934 <fflush>
            processCommand(start);
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f7ff fe53 	bl	8002c38 <processCommand>
        }

        memset(rxBuffer, 0, RX_BUFFER_SIZE);
 8002f92:	2264      	movs	r2, #100	@ 0x64
 8002f94:	2100      	movs	r1, #0
 8002f96:	4806      	ldr	r0, [pc, #24]	@ (8002fb0 <UART_ProcessReceivedByte+0xb4>)
 8002f98:	f001 ff52 	bl	8004e40 <memset>
        rxIndex = 0;
 8002f9c:	4b03      	ldr	r3, [pc, #12]	@ (8002fac <UART_ProcessReceivedByte+0xb0>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	701a      	strb	r2, [r3, #0]
    }
}
 8002fa2:	bf00      	nop
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	200055e2 	.word	0x200055e2
 8002fb0:	200055e4 	.word	0x200055e4
 8002fb4:	080070a0 	.word	0x080070a0
 8002fb8:	20001ff0 	.word	0x20001ff0

08002fbc <LL_ADC_DMA_GetRegAddr>:
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]
  if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d103      	bne.n	8002fd8 <LL_ADC_DMA_GetRegAddr+0x1c>
    data_reg_addr = (uint32_t)&(ADCx->DR);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	334c      	adds	r3, #76	@ 0x4c
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	e001      	b.n	8002fdc <LL_ADC_DMA_GetRegAddr+0x20>
    data_reg_addr = (uint32_t)&(ADC12_COMMON->DR);
 8002fd8:	4b03      	ldr	r3, [pc, #12]	@ (8002fe8 <LL_ADC_DMA_GetRegAddr+0x2c>)
 8002fda:	60fb      	str	r3, [r7, #12]
  return data_reg_addr;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr
 8002fe8:	4001244c 	.word	0x4001244c

08002fec <LL_ADC_REG_SetDMATransfer>:
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	609a      	str	r2, [r3, #8]
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr

08003010 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f043 0201 	orr.w	r2, r3, #1
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	609a      	str	r2, [r3, #8]
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	bc80      	pop	{r7}
 800302c:	4770      	bx	lr

0800302e <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f043 0204 	orr.w	r2, r3, #4
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	609a      	str	r2, [r3, #8]
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR2      CAL            LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b04      	cmp	r3, #4
 800305e:	bf0c      	ite	eq
 8003060:	2301      	moveq	r3, #1
 8003062:	2300      	movne	r3, #0
 8003064:	b2db      	uxtb	r3, r3
}
 8003066:	4618      	mov	r0, r3
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr

08003070 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f443 02a0 	orr.w	r2, r3, #5242880	@ 0x500000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	609a      	str	r2, [r3, #8]
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr
	...

08003090 <LL_DMA_EnableChannel>:
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	3b01      	subs	r3, #1
 800309e:	4a0a      	ldr	r2, [pc, #40]	@ (80030c8 <LL_DMA_EnableChannel+0x38>)
 80030a0:	5cd3      	ldrb	r3, [r2, r3]
 80030a2:	461a      	mov	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4413      	add	r3, r2
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	3a01      	subs	r2, #1
 80030ae:	4906      	ldr	r1, [pc, #24]	@ (80030c8 <LL_DMA_EnableChannel+0x38>)
 80030b0:	5c8a      	ldrb	r2, [r1, r2]
 80030b2:	4611      	mov	r1, r2
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	440a      	add	r2, r1
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	6013      	str	r3, [r2, #0]
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr
 80030c8:	080070e8 	.word	0x080070e8

080030cc <LL_DMA_SetDataLength>:
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	3b01      	subs	r3, #1
 80030dc:	4a0b      	ldr	r2, [pc, #44]	@ (800310c <LL_DMA_SetDataLength+0x40>)
 80030de:	5cd3      	ldrb	r3, [r2, r3]
 80030e0:	461a      	mov	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	4413      	add	r3, r2
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	0c1b      	lsrs	r3, r3, #16
 80030ea:	041b      	lsls	r3, r3, #16
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	3a01      	subs	r2, #1
 80030f0:	4906      	ldr	r1, [pc, #24]	@ (800310c <LL_DMA_SetDataLength+0x40>)
 80030f2:	5c8a      	ldrb	r2, [r1, r2]
 80030f4:	4611      	mov	r1, r2
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	440a      	add	r2, r1
 80030fa:	4611      	mov	r1, r2
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	4313      	orrs	r3, r2
 8003100:	604b      	str	r3, [r1, #4]
}
 8003102:	bf00      	nop
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	bc80      	pop	{r7}
 800310a:	4770      	bx	lr
 800310c:	080070e8 	.word	0x080070e8

08003110 <LL_DMA_ConfigAddresses>:
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
 800311c:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	2b10      	cmp	r3, #16
 8003122:	d114      	bne.n	800314e <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	3b01      	subs	r3, #1
 8003128:	4a15      	ldr	r2, [pc, #84]	@ (8003180 <LL_DMA_ConfigAddresses+0x70>)
 800312a:	5cd3      	ldrb	r3, [r2, r3]
 800312c:	461a      	mov	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4413      	add	r3, r2
 8003132:	461a      	mov	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	3b01      	subs	r3, #1
 800313c:	4a10      	ldr	r2, [pc, #64]	@ (8003180 <LL_DMA_ConfigAddresses+0x70>)
 800313e:	5cd3      	ldrb	r3, [r2, r3]
 8003140:	461a      	mov	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4413      	add	r3, r2
 8003146:	461a      	mov	r2, r3
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	6093      	str	r3, [r2, #8]
}
 800314c:	e013      	b.n	8003176 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	3b01      	subs	r3, #1
 8003152:	4a0b      	ldr	r2, [pc, #44]	@ (8003180 <LL_DMA_ConfigAddresses+0x70>)
 8003154:	5cd3      	ldrb	r3, [r2, r3]
 8003156:	461a      	mov	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4413      	add	r3, r2
 800315c:	461a      	mov	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	3b01      	subs	r3, #1
 8003166:	4a06      	ldr	r2, [pc, #24]	@ (8003180 <LL_DMA_ConfigAddresses+0x70>)
 8003168:	5cd3      	ldrb	r3, [r2, r3]
 800316a:	461a      	mov	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4413      	add	r3, r2
 8003170:	461a      	mov	r2, r3
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	60d3      	str	r3, [r2, #12]
}
 8003176:	bf00      	nop
 8003178:	3714      	adds	r7, #20
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr
 8003180:	080070e8 	.word	0x080070e8

08003184 <LL_TIM_GetCounter>:
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8003190:	4618      	mov	r0, r3
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr
	...

0800319c <OscilloscopeInit>:
};

volatile SignalMode_t signalMode = SIGNAL_MODE_ADC;  // Default

void OscilloscopeInit(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af02      	add	r7, sp, #8
    // Configure DMA source/destination and length
    LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_1,
 80031a2:	2100      	movs	r1, #0
 80031a4:	4817      	ldr	r0, [pc, #92]	@ (8003204 <OscilloscopeInit+0x68>)
 80031a6:	f7ff ff09 	bl	8002fbc <LL_ADC_DMA_GetRegAddr>
 80031aa:	4602      	mov	r2, r0
 80031ac:	4916      	ldr	r1, [pc, #88]	@ (8003208 <OscilloscopeInit+0x6c>)
 80031ae:	2300      	movs	r3, #0
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	460b      	mov	r3, r1
 80031b4:	2101      	movs	r1, #1
 80031b6:	4815      	ldr	r0, [pc, #84]	@ (800320c <OscilloscopeInit+0x70>)
 80031b8:	f7ff ffaa 	bl	8003110 <LL_DMA_ConfigAddresses>
        LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA),
        (uint32_t)adcValues,
        LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, ADC_CHANNELS);
 80031bc:	2208      	movs	r2, #8
 80031be:	2101      	movs	r1, #1
 80031c0:	4812      	ldr	r0, [pc, #72]	@ (800320c <OscilloscopeInit+0x70>)
 80031c2:	f7ff ff83 	bl	80030cc <LL_DMA_SetDataLength>
//    LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
//    LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
//    LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_HIGH);

    // Enable DMA
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 80031c6:	2101      	movs	r1, #1
 80031c8:	4810      	ldr	r0, [pc, #64]	@ (800320c <OscilloscopeInit+0x70>)
 80031ca:	f7ff ff61 	bl	8003090 <LL_DMA_EnableChannel>

    // Enable ADC and wait for stabilization
    LL_ADC_Enable(ADC1);
 80031ce:	480d      	ldr	r0, [pc, #52]	@ (8003204 <OscilloscopeInit+0x68>)
 80031d0:	f7ff ff1e 	bl	8003010 <LL_ADC_Enable>
    LL_mDelay(1);
 80031d4:	2001      	movs	r0, #1
 80031d6:	f001 fad3 	bl	8004780 <LL_mDelay>

    // Calibrate ADC
    LL_ADC_StartCalibration(ADC1);
 80031da:	480a      	ldr	r0, [pc, #40]	@ (8003204 <OscilloscopeInit+0x68>)
 80031dc:	f7ff ff27 	bl	800302e <LL_ADC_StartCalibration>
    while (LL_ADC_IsCalibrationOnGoing(ADC1));
 80031e0:	bf00      	nop
 80031e2:	4808      	ldr	r0, [pc, #32]	@ (8003204 <OscilloscopeInit+0x68>)
 80031e4:	f7ff ff32 	bl	800304c <LL_ADC_IsCalibrationOnGoing>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f9      	bne.n	80031e2 <OscilloscopeInit+0x46>

    // Enable ADC DMA transfer
    LL_ADC_REG_SetDMATransfer(ADC1, LL_ADC_REG_DMA_TRANSFER_UNLIMITED);
 80031ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80031f2:	4804      	ldr	r0, [pc, #16]	@ (8003204 <OscilloscopeInit+0x68>)
 80031f4:	f7ff fefa 	bl	8002fec <LL_ADC_REG_SetDMATransfer>

    // Start ADC conversion
    LL_ADC_REG_StartConversionSWStart(ADC1);
 80031f8:	4802      	ldr	r0, [pc, #8]	@ (8003204 <OscilloscopeInit+0x68>)
 80031fa:	f7ff ff39 	bl	8003070 <LL_ADC_REG_StartConversionSWStart>
}
 80031fe:	bf00      	nop
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	40012400 	.word	0x40012400
 8003208:	20005648 	.word	0x20005648
 800320c:	40020000 	.word	0x40020000

08003210 <getTimestamp>:
    LL_ADC_Disable(ADC1);
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_1);
}

uint32_t getTimestamp(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
    return LL_TIM_GetCounter(TIM6);
 8003214:	4802      	ldr	r0, [pc, #8]	@ (8003220 <getTimestamp+0x10>)
 8003216:	f7ff ffb5 	bl	8003184 <LL_TIM_GetCounter>
 800321a:	4603      	mov	r3, r0
}
 800321c:	4618      	mov	r0, r3
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40001000 	.word	0x40001000

08003224 <sendADCData>:

void sendADCData(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08c      	sub	sp, #48	@ 0x30
 8003228:	af00      	add	r7, sp, #0
    uint8_t buffer[32]; // Max: 1 + 1 + (8*2) + 2 = 20 bytes
    uint8_t index = 0;
 800322a:	2300      	movs	r3, #0
 800322c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    buffer[index++] = 0xAA; // Start byte
 8003230:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 800323a:	3330      	adds	r3, #48	@ 0x30
 800323c:	443b      	add	r3, r7
 800323e:	22aa      	movs	r2, #170	@ 0xaa
 8003240:	f803 2c2c 	strb.w	r2, [r3, #-44]
    buffer[index++] = 0x00; // Reserve space for channel bitmap
 8003244:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 800324e:	3330      	adds	r3, #48	@ 0x30
 8003250:	443b      	add	r3, r7
 8003252:	2200      	movs	r2, #0
 8003254:	f803 2c2c 	strb.w	r2, [r3, #-44]

    uint8_t channel_map = 0;
 8003258:	2300      	movs	r3, #0
 800325a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    for (int i = 0; i < 8; i++) {
 800325e:	2300      	movs	r3, #0
 8003260:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003262:	e031      	b.n	80032c8 <sendADCData+0xa4>
        if (adcChannelConfig.channel_enabled[i]) {
 8003264:	4a39      	ldr	r2, [pc, #228]	@ (800334c <sendADCData+0x128>)
 8003266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003268:	4413      	add	r3, r2
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d028      	beq.n	80032c2 <sendADCData+0x9e>
            buffer[index++] = (adcValues[i] >> 8) & 0xFF;
 8003270:	4a37      	ldr	r2, [pc, #220]	@ (8003350 <sendADCData+0x12c>)
 8003272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003274:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003278:	0a1b      	lsrs	r3, r3, #8
 800327a:	b29a      	uxth	r2, r3
 800327c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003280:	1c59      	adds	r1, r3, #1
 8003282:	f887 102f 	strb.w	r1, [r7, #47]	@ 0x2f
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	3330      	adds	r3, #48	@ 0x30
 800328a:	443b      	add	r3, r7
 800328c:	f803 2c2c 	strb.w	r2, [r3, #-44]
            buffer[index++] = adcValues[i] & 0xFF;
 8003290:	4a2f      	ldr	r2, [pc, #188]	@ (8003350 <sendADCData+0x12c>)
 8003292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003294:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003298:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800329c:	1c59      	adds	r1, r3, #1
 800329e:	f887 102f 	strb.w	r1, [r7, #47]	@ 0x2f
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	3330      	adds	r3, #48	@ 0x30
 80032a6:	443b      	add	r3, r7
 80032a8:	f803 2c2c 	strb.w	r2, [r3, #-44]
            channel_map |= (1 << i);  // Set bit i if channel is enabled
 80032ac:	2201      	movs	r2, #1
 80032ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	b25a      	sxtb	r2, r3
 80032b6:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 80032ba:	4313      	orrs	r3, r2
 80032bc:	b25b      	sxtb	r3, r3
 80032be:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    for (int i = 0; i < 8; i++) {
 80032c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c4:	3301      	adds	r3, #1
 80032c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ca:	2b07      	cmp	r3, #7
 80032cc:	ddca      	ble.n	8003264 <sendADCData+0x40>
        }
    }

    // Timestamp (2 bytes, big endian)
    uint16_t t = (uint16_t)getTimestamp();
 80032ce:	f7ff ff9f 	bl	8003210 <getTimestamp>
 80032d2:	4603      	mov	r3, r0
 80032d4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    buffer[index++] = (t >> 8) & 0xFF;
 80032d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80032d8:	0a1b      	lsrs	r3, r3, #8
 80032da:	b29a      	uxth	r2, r3
 80032dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80032e0:	1c59      	adds	r1, r3, #1
 80032e2:	f887 102f 	strb.w	r1, [r7, #47]	@ 0x2f
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	3330      	adds	r3, #48	@ 0x30
 80032ea:	443b      	add	r3, r7
 80032ec:	f803 2c2c 	strb.w	r2, [r3, #-44]
    buffer[index++] = t & 0xFF;
 80032f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80032fa:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80032fc:	b2d2      	uxtb	r2, r2
 80032fe:	3330      	adds	r3, #48	@ 0x30
 8003300:	443b      	add	r3, r7
 8003302:	f803 2c2c 	strb.w	r2, [r3, #-44]

    // Insert channel map after start byte
    buffer[1] = channel_map;
 8003306:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800330a:	717b      	strb	r3, [r7, #5]

//  Send via UART
    if (usingESP){
 800330c:	4b11      	ldr	r3, [pc, #68]	@ (8003354 <sendADCData+0x130>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d008      	beq.n	8003328 <sendADCData+0x104>
        sendRawUART(USART1, buffer, index);
 8003316:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800331a:	b29a      	uxth	r2, r3
 800331c:	1d3b      	adds	r3, r7, #4
 800331e:	4619      	mov	r1, r3
 8003320:	480d      	ldr	r0, [pc, #52]	@ (8003358 <sendADCData+0x134>)
 8003322:	f7ff fdbf 	bl	8002ea4 <sendRawUART>
    }else if (usingCP2102){
        sendRawUART(USART3, buffer, index);
//		printf("Sending to CP2102");
    }

}
 8003326:	e00c      	b.n	8003342 <sendADCData+0x11e>
    }else if (usingCP2102){
 8003328:	4b0c      	ldr	r3, [pc, #48]	@ (800335c <sendADCData+0x138>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d007      	beq.n	8003342 <sendADCData+0x11e>
        sendRawUART(USART3, buffer, index);
 8003332:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003336:	b29a      	uxth	r2, r3
 8003338:	1d3b      	adds	r3, r7, #4
 800333a:	4619      	mov	r1, r3
 800333c:	4808      	ldr	r0, [pc, #32]	@ (8003360 <sendADCData+0x13c>)
 800333e:	f7ff fdb1 	bl	8002ea4 <sendRawUART>
}
 8003342:	bf00      	nop
 8003344:	3730      	adds	r7, #48	@ 0x30
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	20005658 	.word	0x20005658
 8003350:	20005648 	.word	0x20005648
 8003354:	200055e0 	.word	0x200055e0
 8003358:	40013800 	.word	0x40013800
 800335c:	200055e1 	.word	0x200055e1
 8003360:	40004800 	.word	0x40004800

08003364 <LL_DMA_IsActiveFlag_TC5>:
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003374:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003378:	bf0c      	ite	eq
 800337a:	2301      	moveq	r3, #1
 800337c:	2300      	movne	r3, #0
 800337e:	b2db      	uxtb	r3, r3
}
 8003380:	4618      	mov	r0, r3
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	bc80      	pop	{r7}
 8003388:	4770      	bx	lr

0800338a <LL_DMA_ClearFlag_TC5>:
{
 800338a:	b480      	push	{r7}
 800338c:	b083      	sub	sp, #12
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003398:	605a      	str	r2, [r3, #4]
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr

080033a4 <LL_DMA_ClearFlag_HT5>:
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF5);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80033b2:	605a      	str	r2, [r3, #4]
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bc80      	pop	{r7}
 80033bc:	4770      	bx	lr

080033be <LL_DMA_ClearFlag_TE5>:
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF5);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80033cc:	605a      	str	r2, [r3, #4]
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr

080033d8 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80033e0:	4b07      	ldr	r3, [pc, #28]	@ (8003400 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80033e2:	695a      	ldr	r2, [r3, #20]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4013      	ands	r3, r2
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	bf0c      	ite	eq
 80033ee:	2301      	moveq	r3, #1
 80033f0:	2300      	movne	r3, #0
 80033f2:	b2db      	uxtb	r3, r3
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	40010400 	.word	0x40010400

08003404 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 800340c:	4a03      	ldr	r2, [pc, #12]	@ (800341c <LL_EXTI_ClearFlag_0_31+0x18>)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6153      	str	r3, [r2, #20]
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr
 800341c:	40010400 	.word	0x40010400

08003420 <LL_USART_IsActiveFlag_RXNE>:
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b20      	cmp	r3, #32
 8003432:	bf0c      	ite	eq
 8003434:	2301      	moveq	r3, #1
 8003436:	2300      	movne	r3, #0
 8003438:	b2db      	uxtb	r3, r3
}
 800343a:	4618      	mov	r0, r3
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	bc80      	pop	{r7}
 8003442:	4770      	bx	lr

08003444 <LL_USART_ReceiveData8>:
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	b2db      	uxtb	r3, r3
}
 8003452:	4618      	mov	r0, r3
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	bc80      	pop	{r7}
 800345a:	4770      	bx	lr

0800345c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003460:	bf00      	nop
 8003462:	e7fd      	b.n	8003460 <NMI_Handler+0x4>

08003464 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003468:	bf00      	nop
 800346a:	e7fd      	b.n	8003468 <HardFault_Handler+0x4>

0800346c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003470:	bf00      	nop
 8003472:	e7fd      	b.n	8003470 <MemManage_Handler+0x4>

08003474 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003478:	bf00      	nop
 800347a:	e7fd      	b.n	8003478 <BusFault_Handler+0x4>

0800347c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003480:	bf00      	nop
 8003482:	e7fd      	b.n	8003480 <UsageFault_Handler+0x4>

08003484 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003488:	bf00      	nop
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr

08003490 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003494:	bf00      	nop
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr

0800349c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034a0:	bf00      	nop
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bc80      	pop	{r7}
 80034a6:	4770      	bx	lr

080034a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034ac:	bf00      	nop
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr

080034b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80034b8:	bf00      	nop
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr

080034c0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

	if (LL_DMA_IsActiveFlag_TC5(DMA1)) {
 80034c4:	480a      	ldr	r0, [pc, #40]	@ (80034f0 <DMA1_Channel5_IRQHandler+0x30>)
 80034c6:	f7ff ff4d 	bl	8003364 <LL_DMA_IsActiveFlag_TC5>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00c      	beq.n	80034ea <DMA1_Channel5_IRQHandler+0x2a>
//		LL_DMA_ClearFlag_GI5(DMA1);
		LL_DMA_ClearFlag_TC5(DMA1);  // Clear transfer complete flag
 80034d0:	4807      	ldr	r0, [pc, #28]	@ (80034f0 <DMA1_Channel5_IRQHandler+0x30>)
 80034d2:	f7ff ff5a 	bl	800338a <LL_DMA_ClearFlag_TC5>
		LL_DMA_ClearFlag_HT5(DMA1);  // Clear half transfer flag
 80034d6:	4806      	ldr	r0, [pc, #24]	@ (80034f0 <DMA1_Channel5_IRQHandler+0x30>)
 80034d8:	f7ff ff64 	bl	80033a4 <LL_DMA_ClearFlag_HT5>
		LL_DMA_ClearFlag_TE5(DMA1);  // Clear transfer error flag
 80034dc:	4804      	ldr	r0, [pc, #16]	@ (80034f0 <DMA1_Channel5_IRQHandler+0x30>)
 80034de:	f7ff ff6e 	bl	80033be <LL_DMA_ClearFlag_TE5>

		// Trigger callback when transfer is complete
		LL_TIM_PWM_PulseFinishedCallback(TIM2);
 80034e2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80034e6:	f7fd fa25 	bl	8000934 <LL_TIM_PWM_PulseFinishedCallback>
	}

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80034ea:	bf00      	nop
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40020000 	.word	0x40020000

080034f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */
	if (LL_USART_IsActiveFlag_RXNE(USART1))
 80034fa:	480d      	ldr	r0, [pc, #52]	@ (8003530 <USART1_IRQHandler+0x3c>)
 80034fc:	f7ff ff90 	bl	8003420 <LL_USART_IsActiveFlag_RXNE>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00f      	beq.n	8003526 <USART1_IRQHandler+0x32>
	{
        usingESP = 1;
 8003506:	4b0b      	ldr	r3, [pc, #44]	@ (8003534 <USART1_IRQHandler+0x40>)
 8003508:	2201      	movs	r2, #1
 800350a:	701a      	strb	r2, [r3, #0]
        usingCP2102 = 0;
 800350c:	4b0a      	ldr	r3, [pc, #40]	@ (8003538 <USART1_IRQHandler+0x44>)
 800350e:	2200      	movs	r2, #0
 8003510:	701a      	strb	r2, [r3, #0]
		uint8_t receivedByte = LL_USART_ReceiveData8(USART1);
 8003512:	4807      	ldr	r0, [pc, #28]	@ (8003530 <USART1_IRQHandler+0x3c>)
 8003514:	f7ff ff96 	bl	8003444 <LL_USART_ReceiveData8>
 8003518:	4603      	mov	r3, r0
 800351a:	71fb      	strb	r3, [r7, #7]
		UART_ProcessReceivedByte(receivedByte, 1);  // Process received data for UART1
 800351c:	79fb      	ldrb	r3, [r7, #7]
 800351e:	2101      	movs	r1, #1
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff fceb 	bl	8002efc <UART_ProcessReceivedByte>
	}
  /* USER CODE END USART1_IRQn 1 */
}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40013800 	.word	0x40013800
 8003534:	200055e0 	.word	0x200055e0
 8003538:	200055e1 	.word	0x200055e1

0800353c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */
    usingCP2102 = 1;
 8003542:	4b0d      	ldr	r3, [pc, #52]	@ (8003578 <USART3_IRQHandler+0x3c>)
 8003544:	2201      	movs	r2, #1
 8003546:	701a      	strb	r2, [r3, #0]
	usingESP = 0;
 8003548:	4b0c      	ldr	r3, [pc, #48]	@ (800357c <USART3_IRQHandler+0x40>)
 800354a:	2200      	movs	r2, #0
 800354c:	701a      	strb	r2, [r3, #0]
	if (LL_USART_IsActiveFlag_RXNE(USART3))
 800354e:	480c      	ldr	r0, [pc, #48]	@ (8003580 <USART3_IRQHandler+0x44>)
 8003550:	f7ff ff66 	bl	8003420 <LL_USART_IsActiveFlag_RXNE>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d009      	beq.n	800356e <USART3_IRQHandler+0x32>
	{

		uint8_t receivedByte = LL_USART_ReceiveData8(USART3);
 800355a:	4809      	ldr	r0, [pc, #36]	@ (8003580 <USART3_IRQHandler+0x44>)
 800355c:	f7ff ff72 	bl	8003444 <LL_USART_ReceiveData8>
 8003560:	4603      	mov	r3, r0
 8003562:	71fb      	strb	r3, [r7, #7]
		UART_ProcessReceivedByte(receivedByte, 3);  // Process received data for UART3
 8003564:	79fb      	ldrb	r3, [r7, #7]
 8003566:	2103      	movs	r1, #3
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff fcc7 	bl	8002efc <UART_ProcessReceivedByte>
	}
  /* USER CODE END USART3_IRQn 1 */
}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	200055e1 	.word	0x200055e1
 800357c:	200055e0 	.word	0x200055e0
 8003580:	40004800 	.word	0x40004800

08003584 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_12) != RESET)
 8003588:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800358c:	f7ff ff24 	bl	80033d8 <LL_EXTI_IsActiveFlag_0_31>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d005      	beq.n	80035a2 <EXTI15_10_IRQHandler+0x1e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_12);
 8003596:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800359a:	f7ff ff33 	bl	8003404 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_12 */
    FAULT_3v3_HandleInterrupt();  // Handle FAULT 3V3
 800359e:	f7fc fed5 	bl	800034c <FAULT_3v3_HandleInterrupt>
    /* USER CODE END LL_EXTI_LINE_12 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 80035a2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80035a6:	f7ff ff17 	bl	80033d8 <LL_EXTI_IsActiveFlag_0_31>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d005      	beq.n	80035bc <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 80035b0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80035b4:	f7ff ff26 	bl	8003404 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */
    FAULT_5v_HandleInterrupt();  // Handle FAULT 3V3
 80035b8:	f7fc feb8 	bl	800032c <FAULT_5v_HandleInterrupt>
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80035bc:	bf00      	nop
 80035be:	bd80      	pop	{r7, pc}

080035c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	e00a      	b.n	80035e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80035d2:	f3af 8000 	nop.w
 80035d6:	4601      	mov	r1, r0
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	60ba      	str	r2, [r7, #8]
 80035de:	b2ca      	uxtb	r2, r1
 80035e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	3301      	adds	r3, #1
 80035e6:	617b      	str	r3, [r7, #20]
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	dbf0      	blt.n	80035d2 <_read+0x12>
  }

  return len;
 80035f0:	687b      	ldr	r3, [r7, #4]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <_close>:
  }
  return len;
}

int _close(int file)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003602:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003606:	4618      	mov	r0, r3
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr

08003610 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003620:	605a      	str	r2, [r3, #4]
  return 0;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr

0800362e <_isatty>:

int _isatty(int file)
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003636:	2301      	movs	r3, #1
}
 8003638:	4618      	mov	r0, r3
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr

08003642 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003642:	b480      	push	{r7}
 8003644:	b085      	sub	sp, #20
 8003646:	af00      	add	r7, sp, #0
 8003648:	60f8      	str	r0, [r7, #12]
 800364a:	60b9      	str	r1, [r7, #8]
 800364c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr
	...

0800365c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003664:	4a14      	ldr	r2, [pc, #80]	@ (80036b8 <_sbrk+0x5c>)
 8003666:	4b15      	ldr	r3, [pc, #84]	@ (80036bc <_sbrk+0x60>)
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003670:	4b13      	ldr	r3, [pc, #76]	@ (80036c0 <_sbrk+0x64>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d102      	bne.n	800367e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003678:	4b11      	ldr	r3, [pc, #68]	@ (80036c0 <_sbrk+0x64>)
 800367a:	4a12      	ldr	r2, [pc, #72]	@ (80036c4 <_sbrk+0x68>)
 800367c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800367e:	4b10      	ldr	r3, [pc, #64]	@ (80036c0 <_sbrk+0x64>)
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4413      	add	r3, r2
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	429a      	cmp	r2, r3
 800368a:	d207      	bcs.n	800369c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800368c:	f001 fc38 	bl	8004f00 <__errno>
 8003690:	4603      	mov	r3, r0
 8003692:	220c      	movs	r2, #12
 8003694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003696:	f04f 33ff 	mov.w	r3, #4294967295
 800369a:	e009      	b.n	80036b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800369c:	4b08      	ldr	r3, [pc, #32]	@ (80036c0 <_sbrk+0x64>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036a2:	4b07      	ldr	r3, [pc, #28]	@ (80036c0 <_sbrk+0x64>)
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4413      	add	r3, r2
 80036aa:	4a05      	ldr	r2, [pc, #20]	@ (80036c0 <_sbrk+0x64>)
 80036ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036ae:	68fb      	ldr	r3, [r7, #12]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3718      	adds	r7, #24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	20010000 	.word	0x20010000
 80036bc:	00000400 	.word	0x00000400
 80036c0:	20005664 	.word	0x20005664
 80036c4:	200057b8 	.word	0x200057b8

080036c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036cc:	bf00      	nop
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bc80      	pop	{r7}
 80036d2:	4770      	bx	lr

080036d4 <Reset_Handler>:
 80036d4:	f7ff fff8 	bl	80036c8 <SystemInit>
 80036d8:	480b      	ldr	r0, [pc, #44]	@ (8003708 <LoopFillZerobss+0xe>)
 80036da:	490c      	ldr	r1, [pc, #48]	@ (800370c <LoopFillZerobss+0x12>)
 80036dc:	4a0c      	ldr	r2, [pc, #48]	@ (8003710 <LoopFillZerobss+0x16>)
 80036de:	2300      	movs	r3, #0
 80036e0:	e002      	b.n	80036e8 <LoopCopyDataInit>

080036e2 <CopyDataInit>:
 80036e2:	58d4      	ldr	r4, [r2, r3]
 80036e4:	50c4      	str	r4, [r0, r3]
 80036e6:	3304      	adds	r3, #4

080036e8 <LoopCopyDataInit>:
 80036e8:	18c4      	adds	r4, r0, r3
 80036ea:	428c      	cmp	r4, r1
 80036ec:	d3f9      	bcc.n	80036e2 <CopyDataInit>
 80036ee:	4a09      	ldr	r2, [pc, #36]	@ (8003714 <LoopFillZerobss+0x1a>)
 80036f0:	4c09      	ldr	r4, [pc, #36]	@ (8003718 <LoopFillZerobss+0x1e>)
 80036f2:	2300      	movs	r3, #0
 80036f4:	e001      	b.n	80036fa <LoopFillZerobss>

080036f6 <FillZerobss>:
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	3204      	adds	r2, #4

080036fa <LoopFillZerobss>:
 80036fa:	42a2      	cmp	r2, r4
 80036fc:	d3fb      	bcc.n	80036f6 <FillZerobss>
 80036fe:	f001 fc05 	bl	8004f0c <__libc_init_array>
 8003702:	f7fd feef 	bl	80014e4 <main>
 8003706:	4770      	bx	lr
 8003708:	20000000 	.word	0x20000000
 800370c:	20002040 	.word	0x20002040
 8003710:	08007268 	.word	0x08007268
 8003714:	20002040 	.word	0x20002040
 8003718:	200057b4 	.word	0x200057b4

0800371c <ADC1_2_IRQHandler>:
 800371c:	e7fe      	b.n	800371c <ADC1_2_IRQHandler>

0800371e <LL_ADC_REG_SetSequencerLength>:
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
 8003726:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr

08003742 <LL_ADC_IsEnabled>:
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b01      	cmp	r3, #1
 8003754:	bf0c      	ite	eq
 8003756:	2301      	moveq	r3, #1
 8003758:	2300      	movne	r3, #0
 800375a:	b2db      	uxtb	r3, r3
}
 800375c:	4618      	mov	r0, r3
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	bc80      	pop	{r7}
 8003764:	4770      	bx	lr
	...

08003768 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8003768:	b590      	push	{r4, r7, lr}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003772:	2300      	movs	r3, #0
 8003774:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8003776:	4813      	ldr	r0, [pc, #76]	@ (80037c4 <LL_ADC_CommonInit+0x5c>)
 8003778:	f7ff ffe3 	bl	8003742 <LL_ADC_IsEnabled>
 800377c:	4604      	mov	r4, r0
 800377e:	4812      	ldr	r0, [pc, #72]	@ (80037c8 <LL_ADC_CommonInit+0x60>)
 8003780:	f7ff ffdf 	bl	8003742 <LL_ADC_IsEnabled>
 8003784:	4603      	mov	r3, r0
 8003786:	4323      	orrs	r3, r4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d114      	bne.n	80037b6 <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d009      	beq.n	80037a8 <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	431a      	orrs	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	605a      	str	r2, [r3, #4]
 80037a6:	e008      	b.n	80037ba <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	605a      	str	r2, [r3, #4]
 80037b4:	e001      	b.n	80037ba <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd90      	pop	{r4, r7, pc}
 80037c4:	40012400 	.word	0x40012400
 80037c8:	40012800 	.word	0x40012800

080037cc <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80037d6:	2300      	movs	r3, #0
 80037d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7ff ffb1 	bl	8003742 <LL_ADC_IsEnabled>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d112      	bne.n	800380c <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	431a      	orrs	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	609a      	str	r2, [r3, #8]
 800380a:	e001      	b.n	8003810 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003810:	7bfb      	ldrb	r3, [r7, #15]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b084      	sub	sp, #16
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
 8003822:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003824:	2300      	movs	r3, #0
 8003826:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7ff ff8a 	bl	8003742 <LL_ADC_IsEnabled>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d131      	bne.n	8003898 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00c      	beq.n	8003856 <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	6859      	ldr	r1, [r3, #4]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	430b      	orrs	r3, r1
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	605a      	str	r2, [r3, #4]
 8003854:	e008      	b.n	8003868 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 8003870:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	6811      	ldr	r1, [r2, #0]
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	68d2      	ldr	r2, [r2, #12]
 800387c:	4311      	orrs	r1, r2
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	6912      	ldr	r2, [r2, #16]
 8003882:	430a      	orrs	r2, r1
 8003884:	431a      	orrs	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	4619      	mov	r1, r3
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff ff44 	bl	800371e <LL_ADC_REG_SetSequencerLength>
 8003896:	e001      	b.n	800389c <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800389c:	7bfb      	ldrb	r3, [r7, #15]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <LL_EXTI_EnableIT_0_31>:
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80038b0:	4b05      	ldr	r3, [pc, #20]	@ (80038c8 <LL_EXTI_EnableIT_0_31+0x20>)
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	4904      	ldr	r1, [pc, #16]	@ (80038c8 <LL_EXTI_EnableIT_0_31+0x20>)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	600b      	str	r3, [r1, #0]
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40010400 	.word	0x40010400

080038cc <LL_EXTI_DisableIT_0_31>:
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80038d4:	4b05      	ldr	r3, [pc, #20]	@ (80038ec <LL_EXTI_DisableIT_0_31+0x20>)
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	43db      	mvns	r3, r3
 80038dc:	4903      	ldr	r1, [pc, #12]	@ (80038ec <LL_EXTI_DisableIT_0_31+0x20>)
 80038de:	4013      	ands	r3, r2
 80038e0:	600b      	str	r3, [r1, #0]
}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bc80      	pop	{r7}
 80038ea:	4770      	bx	lr
 80038ec:	40010400 	.word	0x40010400

080038f0 <LL_EXTI_EnableEvent_0_31>:
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80038f8:	4b05      	ldr	r3, [pc, #20]	@ (8003910 <LL_EXTI_EnableEvent_0_31+0x20>)
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	4904      	ldr	r1, [pc, #16]	@ (8003910 <LL_EXTI_EnableEvent_0_31+0x20>)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4313      	orrs	r3, r2
 8003902:	604b      	str	r3, [r1, #4]
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	bc80      	pop	{r7}
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	40010400 	.word	0x40010400

08003914 <LL_EXTI_DisableEvent_0_31>:
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800391c:	4b05      	ldr	r3, [pc, #20]	@ (8003934 <LL_EXTI_DisableEvent_0_31+0x20>)
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	43db      	mvns	r3, r3
 8003924:	4903      	ldr	r1, [pc, #12]	@ (8003934 <LL_EXTI_DisableEvent_0_31+0x20>)
 8003926:	4013      	ands	r3, r2
 8003928:	604b      	str	r3, [r1, #4]
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	bc80      	pop	{r7}
 8003932:	4770      	bx	lr
 8003934:	40010400 	.word	0x40010400

08003938 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8003940:	4b05      	ldr	r3, [pc, #20]	@ (8003958 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	4904      	ldr	r1, [pc, #16]	@ (8003958 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4313      	orrs	r3, r2
 800394a:	608b      	str	r3, [r1, #8]
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	bc80      	pop	{r7}
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40010400 	.word	0x40010400

0800395c <LL_EXTI_DisableRisingTrig_0_31>:
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8003964:	4b05      	ldr	r3, [pc, #20]	@ (800397c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	43db      	mvns	r3, r3
 800396c:	4903      	ldr	r1, [pc, #12]	@ (800397c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800396e:	4013      	ands	r3, r2
 8003970:	608b      	str	r3, [r1, #8]
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	bc80      	pop	{r7}
 800397a:	4770      	bx	lr
 800397c:	40010400 	.word	0x40010400

08003980 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8003988:	4b05      	ldr	r3, [pc, #20]	@ (80039a0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	4904      	ldr	r1, [pc, #16]	@ (80039a0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4313      	orrs	r3, r2
 8003992:	60cb      	str	r3, [r1, #12]
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	bc80      	pop	{r7}
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	40010400 	.word	0x40010400

080039a4 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80039ac:	4b05      	ldr	r3, [pc, #20]	@ (80039c4 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80039ae:	68da      	ldr	r2, [r3, #12]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	43db      	mvns	r3, r3
 80039b4:	4903      	ldr	r1, [pc, #12]	@ (80039c4 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80039b6:	4013      	ands	r3, r2
 80039b8:	60cb      	str	r3, [r1, #12]
}
 80039ba:	bf00      	nop
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	bc80      	pop	{r7}
 80039c2:	4770      	bx	lr
 80039c4:	40010400 	.word	0x40010400

080039c8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80039d0:	2300      	movs	r3, #0
 80039d2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	791b      	ldrb	r3, [r3, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d065      	beq.n	8003aa8 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d06b      	beq.n	8003abc <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	795b      	ldrb	r3, [r3, #5]
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d01c      	beq.n	8003a26 <LL_EXTI_Init+0x5e>
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	dc25      	bgt.n	8003a3c <LL_EXTI_Init+0x74>
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d002      	beq.n	80039fa <LL_EXTI_Init+0x32>
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d00b      	beq.n	8003a10 <LL_EXTI_Init+0x48>
 80039f8:	e020      	b.n	8003a3c <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff ff88 	bl	8003914 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff ff4d 	bl	80038a8 <LL_EXTI_EnableIT_0_31>
          break;
 8003a0e:	e018      	b.n	8003a42 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff ff59 	bl	80038cc <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff ff66 	bl	80038f0 <LL_EXTI_EnableEvent_0_31>
          break;
 8003a24:	e00d      	b.n	8003a42 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7ff ff3c 	bl	80038a8 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff ff5b 	bl	80038f0 <LL_EXTI_EnableEvent_0_31>
          break;
 8003a3a:	e002      	b.n	8003a42 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	73fb      	strb	r3, [r7, #15]
          break;
 8003a40:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	799b      	ldrb	r3, [r3, #6]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d038      	beq.n	8003abc <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	799b      	ldrb	r3, [r3, #6]
 8003a4e:	2b03      	cmp	r3, #3
 8003a50:	d01c      	beq.n	8003a8c <LL_EXTI_Init+0xc4>
 8003a52:	2b03      	cmp	r3, #3
 8003a54:	dc25      	bgt.n	8003aa2 <LL_EXTI_Init+0xda>
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d002      	beq.n	8003a60 <LL_EXTI_Init+0x98>
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d00b      	beq.n	8003a76 <LL_EXTI_Init+0xae>
 8003a5e:	e020      	b.n	8003aa2 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff ff9d 	bl	80039a4 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff ff62 	bl	8003938 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8003a74:	e022      	b.n	8003abc <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff ff6e 	bl	800395c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff ff7b 	bl	8003980 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003a8a:	e017      	b.n	8003abc <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff ff51 	bl	8003938 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7ff ff70 	bl	8003980 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003aa0:	e00c      	b.n	8003abc <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	73fb      	strb	r3, [r7, #15]
            break;
 8003aa6:	e009      	b.n	8003abc <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff ff0d 	bl	80038cc <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff ff2c 	bl	8003914 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8003abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <LL_GPIO_SetPinMode>:
{
 8003ac6:	b490      	push	{r4, r7}
 8003ac8:	b088      	sub	sp, #32
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	60f8      	str	r0, [r7, #12]
 8003ace:	60b9      	str	r1, [r7, #8]
 8003ad0:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	0e1b      	lsrs	r3, r3, #24
 8003ada:	4413      	add	r3, r2
 8003adc:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8003ade:	6822      	ldr	r2, [r4, #0]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	fa93 f3a3 	rbit	r3, r3
 8003aea:	613b      	str	r3, [r7, #16]
  return result;
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	fab3 f383 	clz	r3, r3
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	210f      	movs	r1, #15
 8003af8:	fa01 f303 	lsl.w	r3, r1, r3
 8003afc:	43db      	mvns	r3, r3
 8003afe:	401a      	ands	r2, r3
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	fa93 f3a3 	rbit	r3, r3
 8003b0a:	61bb      	str	r3, [r7, #24]
  return result;
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	fab3 f383 	clz	r3, r3
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	fa01 f303 	lsl.w	r3, r1, r3
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	6023      	str	r3, [r4, #0]
}
 8003b20:	bf00      	nop
 8003b22:	3720      	adds	r7, #32
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc90      	pop	{r4, r7}
 8003b28:	4770      	bx	lr

08003b2a <LL_GPIO_SetPinSpeed>:
{
 8003b2a:	b490      	push	{r4, r7}
 8003b2c:	b088      	sub	sp, #32
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	60f8      	str	r0, [r7, #12]
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	0e1b      	lsrs	r3, r3, #24
 8003b3e:	4413      	add	r3, r2
 8003b40:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8003b42:	6822      	ldr	r2, [r4, #0]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	fa93 f3a3 	rbit	r3, r3
 8003b4e:	613b      	str	r3, [r7, #16]
  return result;
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	fab3 f383 	clz	r3, r3
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	2103      	movs	r1, #3
 8003b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b60:	43db      	mvns	r3, r3
 8003b62:	401a      	ands	r2, r3
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	fa93 f3a3 	rbit	r3, r3
 8003b6e:	61bb      	str	r3, [r7, #24]
  return result;
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	fab3 f383 	clz	r3, r3
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	6879      	ldr	r1, [r7, #4]
 8003b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b80:	4313      	orrs	r3, r2
 8003b82:	6023      	str	r3, [r4, #0]
}
 8003b84:	bf00      	nop
 8003b86:	3720      	adds	r7, #32
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bc90      	pop	{r4, r7}
 8003b8c:	4770      	bx	lr

08003b8e <LL_GPIO_SetPinOutputType>:
{
 8003b8e:	b490      	push	{r4, r7}
 8003b90:	b088      	sub	sp, #32
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	0e1b      	lsrs	r3, r3, #24
 8003ba2:	4413      	add	r3, r2
 8003ba4:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8003ba6:	6822      	ldr	r2, [r4, #0]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	fa93 f3a3 	rbit	r3, r3
 8003bb2:	613b      	str	r3, [r7, #16]
  return result;
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	fab3 f383 	clz	r3, r3
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	2104      	movs	r1, #4
 8003bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	401a      	ands	r2, r3
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	fa93 f3a3 	rbit	r3, r3
 8003bd2:	61bb      	str	r3, [r7, #24]
  return result;
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	fab3 f383 	clz	r3, r3
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	fa01 f303 	lsl.w	r3, r1, r3
 8003be4:	4313      	orrs	r3, r2
 8003be6:	6023      	str	r3, [r4, #0]
}
 8003be8:	bf00      	nop
 8003bea:	3720      	adds	r7, #32
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bc90      	pop	{r4, r7}
 8003bf0:	4770      	bx	lr

08003bf2 <LL_GPIO_SetPinPull>:
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b087      	sub	sp, #28
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	60f8      	str	r0, [r7, #12]
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	0a1b      	lsrs	r3, r3, #8
 8003c06:	43db      	mvns	r3, r3
 8003c08:	401a      	ands	r2, r3
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	0a1b      	lsrs	r3, r3, #8
 8003c0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	fa93 f3a3 	rbit	r3, r3
 8003c16:	613b      	str	r3, [r7, #16]
  return result;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	fab3 f383 	clz	r3, r3
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	4619      	mov	r1, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	408b      	lsls	r3, r1
 8003c26:	431a      	orrs	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	60da      	str	r2, [r3, #12]
}
 8003c2c:	bf00      	nop
 8003c2e:	371c      	adds	r7, #28
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bc80      	pop	{r7}
 8003c34:	4770      	bx	lr

08003c36 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b088      	sub	sp, #32
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	021b      	lsls	r3, r3, #8
 8003c46:	0c1b      	lsrs	r3, r3, #16
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	fa93 f3a3 	rbit	r3, r3
 8003c54:	60fb      	str	r3, [r7, #12]
  return result;
 8003c56:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8003c58:	fab3 f383 	clz	r3, r3
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8003c60:	e044      	b.n	8003cec <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8003c62:	2201      	movs	r2, #1
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	409a      	lsls	r2, r3
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d03a      	beq.n	8003ce6 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	2b07      	cmp	r3, #7
 8003c74:	d806      	bhi.n	8003c84 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8003c76:	f240 1201 	movw	r2, #257	@ 0x101
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	61bb      	str	r3, [r7, #24]
 8003c82:	e008      	b.n	8003c96 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	3b08      	subs	r3, #8
 8003c88:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c94:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	2b08      	cmp	r3, #8
 8003c9c:	d106      	bne.n	8003cac <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	69b9      	ldr	r1, [r7, #24]
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7ff ffa3 	bl	8003bf2 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	69b9      	ldr	r1, [r7, #24]
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7ff ff06 	bl	8003ac6 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d003      	beq.n	8003cca <LL_GPIO_Init+0x94>
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2b09      	cmp	r3, #9
 8003cc8:	d10d      	bne.n	8003ce6 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	69b9      	ldr	r1, [r7, #24]
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7ff ff29 	bl	8003b2a <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	461a      	mov	r2, r3
 8003cde:	69b9      	ldr	r1, [r7, #24]
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7ff ff54 	bl	8003b8e <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1b4      	bne.n	8003c62 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3720      	adds	r7, #32
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
	...

08003d04 <LL_RCC_HSE_GetPrediv2>:
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV2));
 8003d08:	4b03      	ldr	r3, [pc, #12]	@ (8003d18 <LL_RCC_HSE_GetPrediv2+0x14>)
 8003d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bc80      	pop	{r7}
 8003d16:	4770      	bx	lr
 8003d18:	40021000 	.word	0x40021000

08003d1c <LL_RCC_GetSysClkSource>:
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003d20:	4b03      	ldr	r3, [pc, #12]	@ (8003d30 <LL_RCC_GetSysClkSource+0x14>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f003 030c 	and.w	r3, r3, #12
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr
 8003d30:	40021000 	.word	0x40021000

08003d34 <LL_RCC_GetAHBPrescaler>:
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003d38:	4b03      	ldr	r3, [pc, #12]	@ (8003d48 <LL_RCC_GetAHBPrescaler+0x14>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bc80      	pop	{r7}
 8003d46:	4770      	bx	lr
 8003d48:	40021000 	.word	0x40021000

08003d4c <LL_RCC_GetAPB1Prescaler>:
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003d50:	4b03      	ldr	r3, [pc, #12]	@ (8003d60 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr
 8003d60:	40021000 	.word	0x40021000

08003d64 <LL_RCC_GetAPB2Prescaler>:
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003d68:	4b03      	ldr	r3, [pc, #12]	@ (8003d78 <LL_RCC_GetAPB2Prescaler+0x14>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr
 8003d78:	40021000 	.word	0x40021000

08003d7c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
 8003d82:	4b09      	ldr	r3, [pc, #36]	@ (8003da8 <LL_RCC_PLL_GetMainSource+0x2c>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d8a:	607b      	str	r3, [r7, #4]
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
 8003d8c:	4b06      	ldr	r3, [pc, #24]	@ (8003da8 <LL_RCC_PLL_GetMainSource+0x2c>)
 8003d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d96:	603b      	str	r3, [r7, #0]
  return (uint32_t)(pllsrc | predivsrc);
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	4313      	orrs	r3, r2
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bc80      	pop	{r7}
 8003da6:	4770      	bx	lr
 8003da8:	40021000 	.word	0x40021000

08003dac <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8003db0:	4b03      	ldr	r3, [pc, #12]	@ (8003dc0 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bc80      	pop	{r7}
 8003dbe:	4770      	bx	lr
 8003dc0:	40021000 	.word	0x40021000

08003dc4 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
 8003dc8:	4b03      	ldr	r3, [pc, #12]	@ (8003dd8 <LL_RCC_PLL_GetPrediv+0x14>)
 8003dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dcc:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
#endif /*RCC_CFGR2_PREDIV1*/
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr
 8003dd8:	40021000 	.word	0x40021000

08003ddc <LL_RCC_PLL2_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL2_MUL_14
  *         @arg @ref LL_RCC_PLL2_MUL_16
  *         @arg @ref LL_RCC_PLL2_MUL_20
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetMultiplicator(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL2MUL));
 8003de0:	4b03      	ldr	r3, [pc, #12]	@ (8003df0 <LL_RCC_PLL2_GetMultiplicator+0x14>)
 8003de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc80      	pop	{r7}
 8003dee:	4770      	bx	lr
 8003df0:	40021000 	.word	0x40021000

08003df4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003dfc:	f000 f820 	bl	8003e40 <RCC_GetSystemClockFreq>
 8003e00:	4602      	mov	r2, r0
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 f83e 	bl	8003e8c <RCC_GetHCLKClockFreq>
 8003e10:	4602      	mov	r2, r0
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 f84c 	bl	8003eb8 <RCC_GetPCLK1ClockFreq>
 8003e20:	4602      	mov	r2, r0
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 f858 	bl	8003ee0 <RCC_GetPCLK2ClockFreq>
 8003e30:	4602      	mov	r2, r0
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	60da      	str	r2, [r3, #12]
}
 8003e36:	bf00      	nop
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003e4a:	f7ff ff67 	bl	8003d1c <LL_RCC_GetSysClkSource>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d00c      	beq.n	8003e6e <RCC_GetSystemClockFreq+0x2e>
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d80e      	bhi.n	8003e76 <RCC_GetSystemClockFreq+0x36>
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d002      	beq.n	8003e62 <RCC_GetSystemClockFreq+0x22>
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	d003      	beq.n	8003e68 <RCC_GetSystemClockFreq+0x28>
 8003e60:	e009      	b.n	8003e76 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003e62:	4b09      	ldr	r3, [pc, #36]	@ (8003e88 <RCC_GetSystemClockFreq+0x48>)
 8003e64:	607b      	str	r3, [r7, #4]
      break;
 8003e66:	e009      	b.n	8003e7c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003e68:	4b07      	ldr	r3, [pc, #28]	@ (8003e88 <RCC_GetSystemClockFreq+0x48>)
 8003e6a:	607b      	str	r3, [r7, #4]
      break;
 8003e6c:	e006      	b.n	8003e7c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003e6e:	f000 f84b 	bl	8003f08 <RCC_PLL_GetFreqDomain_SYS>
 8003e72:	6078      	str	r0, [r7, #4]
      break;
 8003e74:	e002      	b.n	8003e7c <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8003e76:	4b04      	ldr	r3, [pc, #16]	@ (8003e88 <RCC_GetSystemClockFreq+0x48>)
 8003e78:	607b      	str	r3, [r7, #4]
      break;
 8003e7a:	bf00      	nop
  }

  return frequency;
 8003e7c:	687b      	ldr	r3, [r7, #4]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	007a1200 	.word	0x007a1200

08003e8c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003e94:	f7ff ff4e 	bl	8003d34 <LL_RCC_GetAHBPrescaler>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	091b      	lsrs	r3, r3, #4
 8003e9c:	f003 030f 	and.w	r3, r3, #15
 8003ea0:	4a04      	ldr	r2, [pc, #16]	@ (8003eb4 <RCC_GetHCLKClockFreq+0x28>)
 8003ea2:	5cd3      	ldrb	r3, [r2, r3]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	40d3      	lsrs	r3, r2
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	080070f0 	.word	0x080070f0

08003eb8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003ec0:	f7ff ff44 	bl	8003d4c <LL_RCC_GetAPB1Prescaler>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	0a1b      	lsrs	r3, r3, #8
 8003ec8:	4a04      	ldr	r2, [pc, #16]	@ (8003edc <RCC_GetPCLK1ClockFreq+0x24>)
 8003eca:	5cd3      	ldrb	r3, [r2, r3]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	40d3      	lsrs	r3, r2
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	08007100 	.word	0x08007100

08003ee0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003ee8:	f7ff ff3c 	bl	8003d64 <LL_RCC_GetAPB2Prescaler>
 8003eec:	4603      	mov	r3, r0
 8003eee:	0adb      	lsrs	r3, r3, #11
 8003ef0:	4a04      	ldr	r2, [pc, #16]	@ (8003f04 <RCC_GetPCLK2ClockFreq+0x24>)
 8003ef2:	5cd3      	ldrb	r3, [r2, r3]
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	40d3      	lsrs	r3, r2
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	08007100 	.word	0x08007100

08003f08 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003f08:	b590      	push	{r4, r7, lr}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	607b      	str	r3, [r7, #4]
 8003f12:	2300      	movs	r3, #0
 8003f14:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003f16:	f7ff ff31 	bl	8003d7c <LL_RCC_PLL_GetMainSource>
 8003f1a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8003f22:	d017      	beq.n	8003f54 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8003f2a:	d81e      	bhi.n	8003f6a <RCC_PLL_GetFreqDomain_SYS+0x62>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d004      	beq.n	8003f3c <RCC_PLL_GetFreqDomain_SYS+0x34>
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f38:	d003      	beq.n	8003f42 <RCC_PLL_GetFreqDomain_SYS+0x3a>
 8003f3a:	e016      	b.n	8003f6a <RCC_PLL_GetFreqDomain_SYS+0x62>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8003f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8003fa8 <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 8003f3e:	607b      	str	r3, [r7, #4]
      break;
 8003f40:	e016      	b.n	8003f70 <RCC_PLL_GetFreqDomain_SYS+0x68>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8003f42:	f7ff ff3f 	bl	8003dc4 <LL_RCC_PLL_GetPrediv>
 8003f46:	4603      	mov	r3, r0
 8003f48:	3301      	adds	r3, #1
 8003f4a:	4a18      	ldr	r2, [pc, #96]	@ (8003fac <RCC_PLL_GetFreqDomain_SYS+0xa4>)
 8003f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f50:	607b      	str	r3, [r7, #4]
      break;
 8003f52:	e00d      	b.n	8003f70 <RCC_PLL_GetFreqDomain_SYS+0x68>

#if defined(RCC_PLL2_SUPPORT)
    case LL_RCC_PLLSOURCE_PLL2:       /* PLL2 used as PLL clock source */
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
 8003f54:	f000 f82c 	bl	8003fb0 <RCC_PLL2_GetFreqClockFreq>
 8003f58:	4604      	mov	r4, r0
 8003f5a:	f7ff ff33 	bl	8003dc4 <LL_RCC_PLL_GetPrediv>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	3301      	adds	r3, #1
 8003f62:	fbb4 f3f3 	udiv	r3, r4, r3
 8003f66:	607b      	str	r3, [r7, #4]
      break;
 8003f68:	e002      	b.n	8003f70 <RCC_PLL_GetFreqDomain_SYS+0x68>
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8003f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8003fa8 <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 8003f6c:	607b      	str	r3, [r7, #4]
      break;
 8003f6e:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8003f70:	f7ff ff1c 	bl	8003dac <LL_RCC_PLL_GetMultiplicator>
 8003f74:	4603      	mov	r3, r0
 8003f76:	f5b3 1f50 	cmp.w	r3, #3407872	@ 0x340000
 8003f7a:	d00a      	beq.n	8003f92 <RCC_PLL_GetFreqDomain_SYS+0x8a>
 8003f7c:	f7ff ff16 	bl	8003dac <LL_RCC_PLL_GetMultiplicator>
 8003f80:	4603      	mov	r3, r0
 8003f82:	0c9b      	lsrs	r3, r3, #18
 8003f84:	f003 030f 	and.w	r3, r3, #15
 8003f88:	3302      	adds	r3, #2
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	fb02 f303 	mul.w	r3, r2, r3
 8003f90:	e006      	b.n	8003fa0 <RCC_PLL_GetFreqDomain_SYS+0x98>
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	4613      	mov	r3, r2
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	4413      	add	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	085b      	lsrs	r3, r3, #1
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd90      	pop	{r4, r7, pc}
 8003fa8:	003d0900 	.word	0x003d0900
 8003fac:	007a1200 	.word	0x007a1200

08003fb0 <RCC_PLL2_GetFreqClockFreq>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL2_GetFreqClockFreq(void)
{
 8003fb0:	b598      	push	{r3, r4, r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
  return __LL_RCC_CALC_PLL2CLK_FREQ(HSE_VALUE, LL_RCC_PLL2_GetMultiplicator(), LL_RCC_HSE_GetPrediv2());
 8003fb4:	f7ff ff12 	bl	8003ddc <LL_RCC_PLL2_GetMultiplicator>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	0a1b      	lsrs	r3, r3, #8
 8003fbc:	4a07      	ldr	r2, [pc, #28]	@ (8003fdc <RCC_PLL2_GetFreqClockFreq+0x2c>)
 8003fbe:	fb02 f303 	mul.w	r3, r2, r3
 8003fc2:	f503 0474 	add.w	r4, r3, #15990784	@ 0xf40000
 8003fc6:	f504 5410 	add.w	r4, r4, #9216	@ 0x2400
 8003fca:	f7ff fe9b 	bl	8003d04 <LL_RCC_HSE_GetPrediv2>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	091b      	lsrs	r3, r3, #4
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	bd98      	pop	{r3, r4, r7, pc}
 8003fdc:	007a1200 	.word	0x007a1200

08003fe0 <LL_TIM_SetPrescaler>:
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bc80      	pop	{r7}
 8003ff8:	4770      	bx	lr

08003ffa <LL_TIM_SetAutoReload>:
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr

08004014 <LL_TIM_SetRepetitionCounter>:
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	bc80      	pop	{r7}
 800402c:	4770      	bx	lr

0800402e <LL_TIM_OC_SetCompareCH1>:
{
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	bc80      	pop	{r7}
 8004046:	4770      	bx	lr

08004048 <LL_TIM_OC_SetCompareCH2>:
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	bc80      	pop	{r7}
 8004060:	4770      	bx	lr

08004062 <LL_TIM_OC_SetCompareCH3>:
{
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	bc80      	pop	{r7}
 800407a:	4770      	bx	lr

0800407c <LL_TIM_OC_SetCompareCH4>:
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	bc80      	pop	{r7}
 8004094:	4770      	bx	lr

08004096 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004096:	b480      	push	{r7}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f043 0201 	orr.w	r2, r3, #1
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	615a      	str	r2, [r3, #20]
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr

080040b4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a2b      	ldr	r2, [pc, #172]	@ (8004174 <LL_TIM_Init+0xc0>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d00f      	beq.n	80040ec <LL_TIM_Init+0x38>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040d2:	d00b      	beq.n	80040ec <LL_TIM_Init+0x38>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a28      	ldr	r2, [pc, #160]	@ (8004178 <LL_TIM_Init+0xc4>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d007      	beq.n	80040ec <LL_TIM_Init+0x38>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a27      	ldr	r2, [pc, #156]	@ (800417c <LL_TIM_Init+0xc8>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d003      	beq.n	80040ec <LL_TIM_Init+0x38>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a26      	ldr	r2, [pc, #152]	@ (8004180 <LL_TIM_Init+0xcc>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d106      	bne.n	80040fa <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004174 <LL_TIM_Init+0xc0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d00f      	beq.n	8004122 <LL_TIM_Init+0x6e>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004108:	d00b      	beq.n	8004122 <LL_TIM_Init+0x6e>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a1a      	ldr	r2, [pc, #104]	@ (8004178 <LL_TIM_Init+0xc4>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d007      	beq.n	8004122 <LL_TIM_Init+0x6e>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a19      	ldr	r2, [pc, #100]	@ (800417c <LL_TIM_Init+0xc8>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d003      	beq.n	8004122 <LL_TIM_Init+0x6e>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a18      	ldr	r2, [pc, #96]	@ (8004180 <LL_TIM_Init+0xcc>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d106      	bne.n	8004130 <LL_TIM_Init+0x7c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	4313      	orrs	r3, r2
 800412e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	4619      	mov	r1, r3
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f7ff ff5c 	bl	8003ffa <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	4619      	mov	r1, r3
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7ff ff49 	bl	8003fe0 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a08      	ldr	r2, [pc, #32]	@ (8004174 <LL_TIM_Init+0xc0>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d105      	bne.n	8004162 <LL_TIM_Init+0xae>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	4619      	mov	r1, r3
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f7ff ff59 	bl	8004014 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7ff ff97 	bl	8004096 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40012c00 	.word	0x40012c00
 8004178:	40000400 	.word	0x40000400
 800417c:	40000800 	.word	0x40000800
 8004180:	40000c00 	.word	0x40000c00

08004184 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800419a:	d027      	beq.n	80041ec <LL_TIM_OC_Init+0x68>
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041a2:	d82a      	bhi.n	80041fa <LL_TIM_OC_Init+0x76>
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041aa:	d018      	beq.n	80041de <LL_TIM_OC_Init+0x5a>
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041b2:	d822      	bhi.n	80041fa <LL_TIM_OC_Init+0x76>
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d003      	beq.n	80041c2 <LL_TIM_OC_Init+0x3e>
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	2b10      	cmp	r3, #16
 80041be:	d007      	beq.n	80041d0 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80041c0:	e01b      	b.n	80041fa <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f81f 	bl	8004208 <OC1Config>
 80041ca:	4603      	mov	r3, r0
 80041cc:	75fb      	strb	r3, [r7, #23]
      break;
 80041ce:	e015      	b.n	80041fc <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 f87e 	bl	80042d4 <OC2Config>
 80041d8:	4603      	mov	r3, r0
 80041da:	75fb      	strb	r3, [r7, #23]
      break;
 80041dc:	e00e      	b.n	80041fc <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80041de:	6879      	ldr	r1, [r7, #4]
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f8e1 	bl	80043a8 <OC3Config>
 80041e6:	4603      	mov	r3, r0
 80041e8:	75fb      	strb	r3, [r7, #23]
      break;
 80041ea:	e007      	b.n	80041fc <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 f944 	bl	800447c <OC4Config>
 80041f4:	4603      	mov	r3, r0
 80041f6:	75fb      	strb	r3, [r7, #23]
      break;
 80041f8:	e000      	b.n	80041fc <LL_TIM_OC_Init+0x78>
      break;
 80041fa:	bf00      	nop
  }

  return result;
 80041fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
	...

08004208 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	f023 0201 	bic.w	r2, r3, #1
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f023 0303 	bic.w	r3, r3, #3
 8004236:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4313      	orrs	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f023 0202 	bic.w	r2, r3, #2
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f023 0201 	bic.w	r2, r3, #1
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	4313      	orrs	r3, r2
 8004260:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a1a      	ldr	r2, [pc, #104]	@ (80042d0 <OC1Config+0xc8>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d11e      	bne.n	80042a8 <OC1Config+0xa0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f023 0208 	bic.w	r2, r3, #8
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4313      	orrs	r3, r2
 8004278:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f023 0204 	bic.w	r2, r3, #4
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4313      	orrs	r3, r2
 8004288:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	4313      	orrs	r3, r2
 8004296:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	4313      	orrs	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	4619      	mov	r1, r3
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7ff feb7 	bl	800402e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3718      	adds	r7, #24
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	40012c00 	.word	0x40012c00

080042d4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	f023 0210 	bic.w	r2, r3, #16
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004302:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	021b      	lsls	r3, r3, #8
 8004310:	4313      	orrs	r3, r2
 8004312:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	f023 0220 	bic.w	r2, r3, #32
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	4313      	orrs	r3, r2
 8004322:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f023 0210 	bic.w	r2, r3, #16
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	4313      	orrs	r3, r2
 8004332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a1b      	ldr	r2, [pc, #108]	@ (80043a4 <OC2Config+0xd0>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d11f      	bne.n	800437c <OC2Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	019b      	lsls	r3, r3, #6
 8004348:	4313      	orrs	r3, r2
 800434a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	019b      	lsls	r3, r3, #6
 8004358:	4313      	orrs	r3, r2
 800435a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4313      	orrs	r3, r2
 800436a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	4313      	orrs	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	4619      	mov	r1, r3
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7ff fe5a 	bl	8004048 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3718      	adds	r7, #24
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40012c00 	.word	0x40012c00

080043a8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f023 0303 	bic.w	r3, r3, #3
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	021b      	lsls	r3, r3, #8
 80043f2:	4313      	orrs	r3, r2
 80043f4:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	021b      	lsls	r3, r3, #8
 8004402:	4313      	orrs	r3, r2
 8004404:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a1b      	ldr	r2, [pc, #108]	@ (8004478 <OC3Config+0xd0>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d11f      	bne.n	800444e <OC3Config+0xa6>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	029b      	lsls	r3, r3, #10
 800441a:	4313      	orrs	r3, r2
 800441c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	029b      	lsls	r3, r3, #10
 800442a:	4313      	orrs	r3, r2
 800442c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	4313      	orrs	r3, r2
 800443c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	015b      	lsls	r3, r3, #5
 800444a:	4313      	orrs	r3, r2
 800444c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	4619      	mov	r1, r3
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f7ff fdfe 	bl	8004062 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3718      	adds	r7, #24
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	40012c00 	.word	0x40012c00

0800447c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	021b      	lsls	r3, r3, #8
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	031b      	lsls	r3, r3, #12
 80044c8:	4313      	orrs	r3, r2
 80044ca:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	031b      	lsls	r3, r3, #12
 80044d8:	4313      	orrs	r3, r2
 80044da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a0f      	ldr	r2, [pc, #60]	@ (800451c <OC4Config+0xa0>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d107      	bne.n	80044f4 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	019b      	lsls	r3, r3, #6
 80044f0:	4313      	orrs	r3, r2
 80044f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	4619      	mov	r1, r3
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7ff fdb8 	bl	800407c <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	40012c00 	.word	0x40012c00

08004520 <LL_USART_IsEnabled>:
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004530:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004534:	bf0c      	ite	eq
 8004536:	2301      	moveq	r3, #1
 8004538:	2300      	movne	r3, #0
 800453a:	b2db      	uxtb	r3, r3
}
 800453c:	4618      	mov	r0, r3
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	bc80      	pop	{r7}
 8004544:	4770      	bx	lr

08004546 <LL_USART_SetStopBitsLength>:
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
 800454e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	611a      	str	r2, [r3, #16]
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	bc80      	pop	{r7}
 8004568:	4770      	bx	lr

0800456a <LL_USART_SetHWFlowCtrl>:
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
 8004572:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	615a      	str	r2, [r3, #20]
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	bc80      	pop	{r7}
 800458c:	4770      	bx	lr
	...

08004590 <LL_USART_SetBaudRate>:
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	4613      	mov	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	009a      	lsls	r2, r3, #2
 80045a6:	441a      	add	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b0:	4a25      	ldr	r2, [pc, #148]	@ (8004648 <LL_USART_SetBaudRate+0xb8>)
 80045b2:	fba2 2303 	umull	r2, r3, r2, r3
 80045b6:	095b      	lsrs	r3, r3, #5
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	b299      	uxth	r1, r3
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	4613      	mov	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	009a      	lsls	r2, r3, #2
 80045c8:	441a      	add	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80045d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004648 <LL_USART_SetBaudRate+0xb8>)
 80045d4:	fba3 0302 	umull	r0, r3, r3, r2
 80045d8:	095b      	lsrs	r3, r3, #5
 80045da:	2064      	movs	r0, #100	@ 0x64
 80045dc:	fb00 f303 	mul.w	r3, r0, r3
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	3332      	adds	r3, #50	@ 0x32
 80045e6:	4a18      	ldr	r2, [pc, #96]	@ (8004648 <LL_USART_SetBaudRate+0xb8>)
 80045e8:	fba2 2303 	umull	r2, r3, r2, r3
 80045ec:	095b      	lsrs	r3, r3, #5
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	440b      	add	r3, r1
 80045f8:	b299      	uxth	r1, r3
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	4613      	mov	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	009a      	lsls	r2, r3, #2
 8004604:	441a      	add	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	fbb2 f2f3 	udiv	r2, r2, r3
 800460e:	4b0e      	ldr	r3, [pc, #56]	@ (8004648 <LL_USART_SetBaudRate+0xb8>)
 8004610:	fba3 0302 	umull	r0, r3, r3, r2
 8004614:	095b      	lsrs	r3, r3, #5
 8004616:	2064      	movs	r0, #100	@ 0x64
 8004618:	fb00 f303 	mul.w	r3, r0, r3
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	011b      	lsls	r3, r3, #4
 8004620:	3332      	adds	r3, #50	@ 0x32
 8004622:	4a09      	ldr	r2, [pc, #36]	@ (8004648 <LL_USART_SetBaudRate+0xb8>)
 8004624:	fba2 2303 	umull	r2, r3, r2, r3
 8004628:	095b      	lsrs	r3, r3, #5
 800462a:	b29b      	uxth	r3, r3
 800462c:	f003 030f 	and.w	r3, r3, #15
 8004630:	b29b      	uxth	r3, r3
 8004632:	440b      	add	r3, r1
 8004634:	b29b      	uxth	r3, r3
 8004636:	461a      	mov	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	609a      	str	r2, [r3, #8]
}
 800463c:	bf00      	nop
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	bc80      	pop	{r7}
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	51eb851f 	.word	0x51eb851f

0800464c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800465a:	2300      	movs	r3, #0
 800465c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7ff ff5e 	bl	8004520 <LL_USART_IsEnabled>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d153      	bne.n	8004712 <LL_USART_Init+0xc6>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004672:	f023 030c 	bic.w	r3, r3, #12
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	6851      	ldr	r1, [r2, #4]
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	68d2      	ldr	r2, [r2, #12]
 800467e:	4311      	orrs	r1, r2
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	6912      	ldr	r2, [r2, #16]
 8004684:	430a      	orrs	r2, r1
 8004686:	431a      	orrs	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	4619      	mov	r1, r3
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7ff ff57 	bl	8004546 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	4619      	mov	r1, r3
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7ff ff63 	bl	800456a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80046a4:	f107 0308 	add.w	r3, r7, #8
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7ff fba3 	bl	8003df4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a1a      	ldr	r2, [pc, #104]	@ (800471c <LL_USART_Init+0xd0>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d102      	bne.n	80046bc <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	61bb      	str	r3, [r7, #24]
 80046ba:	e01a      	b.n	80046f2 <LL_USART_Init+0xa6>
    }
    else if (USARTx == USART2)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a18      	ldr	r2, [pc, #96]	@ (8004720 <LL_USART_Init+0xd4>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d102      	bne.n	80046ca <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	61bb      	str	r3, [r7, #24]
 80046c8:	e013      	b.n	80046f2 <LL_USART_Init+0xa6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a15      	ldr	r2, [pc, #84]	@ (8004724 <LL_USART_Init+0xd8>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d102      	bne.n	80046d8 <LL_USART_Init+0x8c>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	61bb      	str	r3, [r7, #24]
 80046d6:	e00c      	b.n	80046f2 <LL_USART_Init+0xa6>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a13      	ldr	r2, [pc, #76]	@ (8004728 <LL_USART_Init+0xdc>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d102      	bne.n	80046e6 <LL_USART_Init+0x9a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	61bb      	str	r3, [r7, #24]
 80046e4:	e005      	b.n	80046f2 <LL_USART_Init+0xa6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a10      	ldr	r2, [pc, #64]	@ (800472c <LL_USART_Init+0xe0>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d101      	bne.n	80046f2 <LL_USART_Init+0xa6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00c      	beq.n	8004712 <LL_USART_Init+0xc6>
        && (USART_InitStruct->BaudRate != 0U))
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d008      	beq.n	8004712 <LL_USART_Init+0xc6>
    {
      status = SUCCESS;
 8004700:	2300      	movs	r3, #0
 8004702:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8004708:	461a      	mov	r2, r3
 800470a:	69b9      	ldr	r1, [r7, #24]
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f7ff ff3f 	bl	8004590 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004712:	7ffb      	ldrb	r3, [r7, #31]
}
 8004714:	4618      	mov	r0, r3
 8004716:	3720      	adds	r7, #32
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	40013800 	.word	0x40013800
 8004720:	40004400 	.word	0x40004400
 8004724:	40004800 	.word	0x40004800
 8004728:	40004c00 	.word	0x40004c00
 800472c:	40005000 	.word	0x40005000

08004730 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004742:	4a07      	ldr	r2, [pc, #28]	@ (8004760 <LL_InitTick+0x30>)
 8004744:	3b01      	subs	r3, #1
 8004746:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004748:	4b05      	ldr	r3, [pc, #20]	@ (8004760 <LL_InitTick+0x30>)
 800474a:	2200      	movs	r2, #0
 800474c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800474e:	4b04      	ldr	r3, [pc, #16]	@ (8004760 <LL_InitTick+0x30>)
 8004750:	2205      	movs	r2, #5
 8004752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	bc80      	pop	{r7}
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	e000e010 	.word	0xe000e010

08004764 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800476c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f7ff ffdd 	bl	8004730 <LL_InitTick>
}
 8004776:	bf00      	nop
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
	...

08004780 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004788:	4b0e      	ldr	r3, [pc, #56]	@ (80047c4 <LL_mDelay+0x44>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800478e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004796:	d00c      	beq.n	80047b2 <LL_mDelay+0x32>
  {
    Delay++;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3301      	adds	r3, #1
 800479c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800479e:	e008      	b.n	80047b2 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80047a0:	4b08      	ldr	r3, [pc, #32]	@ (80047c4 <LL_mDelay+0x44>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <LL_mDelay+0x32>
    {
      Delay--;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3b01      	subs	r3, #1
 80047b0:	607b      	str	r3, [r7, #4]
  while (Delay)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1f3      	bne.n	80047a0 <LL_mDelay+0x20>
    }
  }
}
 80047b8:	bf00      	nop
 80047ba:	bf00      	nop
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	bc80      	pop	{r7}
 80047c2:	4770      	bx	lr
 80047c4:	e000e010 	.word	0xe000e010

080047c8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80047d0:	4a03      	ldr	r2, [pc, #12]	@ (80047e0 <LL_SetSystemCoreClock+0x18>)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6013      	str	r3, [r2, #0]
}
 80047d6:	bf00      	nop
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	bc80      	pop	{r7}
 80047de:	4770      	bx	lr
 80047e0:	20001fe0 	.word	0x20001fe0

080047e4 <__sflush_r>:
 80047e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80047e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ea:	0716      	lsls	r6, r2, #28
 80047ec:	4605      	mov	r5, r0
 80047ee:	460c      	mov	r4, r1
 80047f0:	d454      	bmi.n	800489c <__sflush_r+0xb8>
 80047f2:	684b      	ldr	r3, [r1, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	dc02      	bgt.n	80047fe <__sflush_r+0x1a>
 80047f8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	dd48      	ble.n	8004890 <__sflush_r+0xac>
 80047fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004800:	2e00      	cmp	r6, #0
 8004802:	d045      	beq.n	8004890 <__sflush_r+0xac>
 8004804:	2300      	movs	r3, #0
 8004806:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800480a:	682f      	ldr	r7, [r5, #0]
 800480c:	6a21      	ldr	r1, [r4, #32]
 800480e:	602b      	str	r3, [r5, #0]
 8004810:	d030      	beq.n	8004874 <__sflush_r+0x90>
 8004812:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004814:	89a3      	ldrh	r3, [r4, #12]
 8004816:	0759      	lsls	r1, r3, #29
 8004818:	d505      	bpl.n	8004826 <__sflush_r+0x42>
 800481a:	6863      	ldr	r3, [r4, #4]
 800481c:	1ad2      	subs	r2, r2, r3
 800481e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004820:	b10b      	cbz	r3, 8004826 <__sflush_r+0x42>
 8004822:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004824:	1ad2      	subs	r2, r2, r3
 8004826:	2300      	movs	r3, #0
 8004828:	4628      	mov	r0, r5
 800482a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800482c:	6a21      	ldr	r1, [r4, #32]
 800482e:	47b0      	blx	r6
 8004830:	1c43      	adds	r3, r0, #1
 8004832:	89a3      	ldrh	r3, [r4, #12]
 8004834:	d106      	bne.n	8004844 <__sflush_r+0x60>
 8004836:	6829      	ldr	r1, [r5, #0]
 8004838:	291d      	cmp	r1, #29
 800483a:	d82b      	bhi.n	8004894 <__sflush_r+0xb0>
 800483c:	4a28      	ldr	r2, [pc, #160]	@ (80048e0 <__sflush_r+0xfc>)
 800483e:	410a      	asrs	r2, r1
 8004840:	07d6      	lsls	r6, r2, #31
 8004842:	d427      	bmi.n	8004894 <__sflush_r+0xb0>
 8004844:	2200      	movs	r2, #0
 8004846:	6062      	str	r2, [r4, #4]
 8004848:	6922      	ldr	r2, [r4, #16]
 800484a:	04d9      	lsls	r1, r3, #19
 800484c:	6022      	str	r2, [r4, #0]
 800484e:	d504      	bpl.n	800485a <__sflush_r+0x76>
 8004850:	1c42      	adds	r2, r0, #1
 8004852:	d101      	bne.n	8004858 <__sflush_r+0x74>
 8004854:	682b      	ldr	r3, [r5, #0]
 8004856:	b903      	cbnz	r3, 800485a <__sflush_r+0x76>
 8004858:	6560      	str	r0, [r4, #84]	@ 0x54
 800485a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800485c:	602f      	str	r7, [r5, #0]
 800485e:	b1b9      	cbz	r1, 8004890 <__sflush_r+0xac>
 8004860:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004864:	4299      	cmp	r1, r3
 8004866:	d002      	beq.n	800486e <__sflush_r+0x8a>
 8004868:	4628      	mov	r0, r5
 800486a:	f000 fb85 	bl	8004f78 <_free_r>
 800486e:	2300      	movs	r3, #0
 8004870:	6363      	str	r3, [r4, #52]	@ 0x34
 8004872:	e00d      	b.n	8004890 <__sflush_r+0xac>
 8004874:	2301      	movs	r3, #1
 8004876:	4628      	mov	r0, r5
 8004878:	47b0      	blx	r6
 800487a:	4602      	mov	r2, r0
 800487c:	1c50      	adds	r0, r2, #1
 800487e:	d1c9      	bne.n	8004814 <__sflush_r+0x30>
 8004880:	682b      	ldr	r3, [r5, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0c6      	beq.n	8004814 <__sflush_r+0x30>
 8004886:	2b1d      	cmp	r3, #29
 8004888:	d001      	beq.n	800488e <__sflush_r+0xaa>
 800488a:	2b16      	cmp	r3, #22
 800488c:	d11d      	bne.n	80048ca <__sflush_r+0xe6>
 800488e:	602f      	str	r7, [r5, #0]
 8004890:	2000      	movs	r0, #0
 8004892:	e021      	b.n	80048d8 <__sflush_r+0xf4>
 8004894:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004898:	b21b      	sxth	r3, r3
 800489a:	e01a      	b.n	80048d2 <__sflush_r+0xee>
 800489c:	690f      	ldr	r7, [r1, #16]
 800489e:	2f00      	cmp	r7, #0
 80048a0:	d0f6      	beq.n	8004890 <__sflush_r+0xac>
 80048a2:	0793      	lsls	r3, r2, #30
 80048a4:	bf18      	it	ne
 80048a6:	2300      	movne	r3, #0
 80048a8:	680e      	ldr	r6, [r1, #0]
 80048aa:	bf08      	it	eq
 80048ac:	694b      	ldreq	r3, [r1, #20]
 80048ae:	1bf6      	subs	r6, r6, r7
 80048b0:	600f      	str	r7, [r1, #0]
 80048b2:	608b      	str	r3, [r1, #8]
 80048b4:	2e00      	cmp	r6, #0
 80048b6:	ddeb      	ble.n	8004890 <__sflush_r+0xac>
 80048b8:	4633      	mov	r3, r6
 80048ba:	463a      	mov	r2, r7
 80048bc:	4628      	mov	r0, r5
 80048be:	6a21      	ldr	r1, [r4, #32]
 80048c0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80048c4:	47e0      	blx	ip
 80048c6:	2800      	cmp	r0, #0
 80048c8:	dc07      	bgt.n	80048da <__sflush_r+0xf6>
 80048ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048d2:	f04f 30ff 	mov.w	r0, #4294967295
 80048d6:	81a3      	strh	r3, [r4, #12]
 80048d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048da:	4407      	add	r7, r0
 80048dc:	1a36      	subs	r6, r6, r0
 80048de:	e7e9      	b.n	80048b4 <__sflush_r+0xd0>
 80048e0:	dfbffffe 	.word	0xdfbffffe

080048e4 <_fflush_r>:
 80048e4:	b538      	push	{r3, r4, r5, lr}
 80048e6:	690b      	ldr	r3, [r1, #16]
 80048e8:	4605      	mov	r5, r0
 80048ea:	460c      	mov	r4, r1
 80048ec:	b913      	cbnz	r3, 80048f4 <_fflush_r+0x10>
 80048ee:	2500      	movs	r5, #0
 80048f0:	4628      	mov	r0, r5
 80048f2:	bd38      	pop	{r3, r4, r5, pc}
 80048f4:	b118      	cbz	r0, 80048fe <_fflush_r+0x1a>
 80048f6:	6a03      	ldr	r3, [r0, #32]
 80048f8:	b90b      	cbnz	r3, 80048fe <_fflush_r+0x1a>
 80048fa:	f000 f8bb 	bl	8004a74 <__sinit>
 80048fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0f3      	beq.n	80048ee <_fflush_r+0xa>
 8004906:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004908:	07d0      	lsls	r0, r2, #31
 800490a:	d404      	bmi.n	8004916 <_fflush_r+0x32>
 800490c:	0599      	lsls	r1, r3, #22
 800490e:	d402      	bmi.n	8004916 <_fflush_r+0x32>
 8004910:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004912:	f000 fb20 	bl	8004f56 <__retarget_lock_acquire_recursive>
 8004916:	4628      	mov	r0, r5
 8004918:	4621      	mov	r1, r4
 800491a:	f7ff ff63 	bl	80047e4 <__sflush_r>
 800491e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004920:	4605      	mov	r5, r0
 8004922:	07da      	lsls	r2, r3, #31
 8004924:	d4e4      	bmi.n	80048f0 <_fflush_r+0xc>
 8004926:	89a3      	ldrh	r3, [r4, #12]
 8004928:	059b      	lsls	r3, r3, #22
 800492a:	d4e1      	bmi.n	80048f0 <_fflush_r+0xc>
 800492c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800492e:	f000 fb13 	bl	8004f58 <__retarget_lock_release_recursive>
 8004932:	e7dd      	b.n	80048f0 <_fflush_r+0xc>

08004934 <fflush>:
 8004934:	4601      	mov	r1, r0
 8004936:	b920      	cbnz	r0, 8004942 <fflush+0xe>
 8004938:	4a04      	ldr	r2, [pc, #16]	@ (800494c <fflush+0x18>)
 800493a:	4905      	ldr	r1, [pc, #20]	@ (8004950 <fflush+0x1c>)
 800493c:	4805      	ldr	r0, [pc, #20]	@ (8004954 <fflush+0x20>)
 800493e:	f000 b8b1 	b.w	8004aa4 <_fwalk_sglue>
 8004942:	4b05      	ldr	r3, [pc, #20]	@ (8004958 <fflush+0x24>)
 8004944:	6818      	ldr	r0, [r3, #0]
 8004946:	f7ff bfcd 	b.w	80048e4 <_fflush_r>
 800494a:	bf00      	nop
 800494c:	20001fe4 	.word	0x20001fe4
 8004950:	080048e5 	.word	0x080048e5
 8004954:	20001ff4 	.word	0x20001ff4
 8004958:	20001ff0 	.word	0x20001ff0

0800495c <std>:
 800495c:	2300      	movs	r3, #0
 800495e:	b510      	push	{r4, lr}
 8004960:	4604      	mov	r4, r0
 8004962:	e9c0 3300 	strd	r3, r3, [r0]
 8004966:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800496a:	6083      	str	r3, [r0, #8]
 800496c:	8181      	strh	r1, [r0, #12]
 800496e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004970:	81c2      	strh	r2, [r0, #14]
 8004972:	6183      	str	r3, [r0, #24]
 8004974:	4619      	mov	r1, r3
 8004976:	2208      	movs	r2, #8
 8004978:	305c      	adds	r0, #92	@ 0x5c
 800497a:	f000 fa61 	bl	8004e40 <memset>
 800497e:	4b0d      	ldr	r3, [pc, #52]	@ (80049b4 <std+0x58>)
 8004980:	6224      	str	r4, [r4, #32]
 8004982:	6263      	str	r3, [r4, #36]	@ 0x24
 8004984:	4b0c      	ldr	r3, [pc, #48]	@ (80049b8 <std+0x5c>)
 8004986:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004988:	4b0c      	ldr	r3, [pc, #48]	@ (80049bc <std+0x60>)
 800498a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800498c:	4b0c      	ldr	r3, [pc, #48]	@ (80049c0 <std+0x64>)
 800498e:	6323      	str	r3, [r4, #48]	@ 0x30
 8004990:	4b0c      	ldr	r3, [pc, #48]	@ (80049c4 <std+0x68>)
 8004992:	429c      	cmp	r4, r3
 8004994:	d006      	beq.n	80049a4 <std+0x48>
 8004996:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800499a:	4294      	cmp	r4, r2
 800499c:	d002      	beq.n	80049a4 <std+0x48>
 800499e:	33d0      	adds	r3, #208	@ 0xd0
 80049a0:	429c      	cmp	r4, r3
 80049a2:	d105      	bne.n	80049b0 <std+0x54>
 80049a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80049a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049ac:	f000 bad2 	b.w	8004f54 <__retarget_lock_init_recursive>
 80049b0:	bd10      	pop	{r4, pc}
 80049b2:	bf00      	nop
 80049b4:	08004c8d 	.word	0x08004c8d
 80049b8:	08004cb3 	.word	0x08004cb3
 80049bc:	08004ceb 	.word	0x08004ceb
 80049c0:	08004d0f 	.word	0x08004d0f
 80049c4:	20005668 	.word	0x20005668

080049c8 <stdio_exit_handler>:
 80049c8:	4a02      	ldr	r2, [pc, #8]	@ (80049d4 <stdio_exit_handler+0xc>)
 80049ca:	4903      	ldr	r1, [pc, #12]	@ (80049d8 <stdio_exit_handler+0x10>)
 80049cc:	4803      	ldr	r0, [pc, #12]	@ (80049dc <stdio_exit_handler+0x14>)
 80049ce:	f000 b869 	b.w	8004aa4 <_fwalk_sglue>
 80049d2:	bf00      	nop
 80049d4:	20001fe4 	.word	0x20001fe4
 80049d8:	080048e5 	.word	0x080048e5
 80049dc:	20001ff4 	.word	0x20001ff4

080049e0 <cleanup_stdio>:
 80049e0:	6841      	ldr	r1, [r0, #4]
 80049e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004a14 <cleanup_stdio+0x34>)
 80049e4:	b510      	push	{r4, lr}
 80049e6:	4299      	cmp	r1, r3
 80049e8:	4604      	mov	r4, r0
 80049ea:	d001      	beq.n	80049f0 <cleanup_stdio+0x10>
 80049ec:	f7ff ff7a 	bl	80048e4 <_fflush_r>
 80049f0:	68a1      	ldr	r1, [r4, #8]
 80049f2:	4b09      	ldr	r3, [pc, #36]	@ (8004a18 <cleanup_stdio+0x38>)
 80049f4:	4299      	cmp	r1, r3
 80049f6:	d002      	beq.n	80049fe <cleanup_stdio+0x1e>
 80049f8:	4620      	mov	r0, r4
 80049fa:	f7ff ff73 	bl	80048e4 <_fflush_r>
 80049fe:	68e1      	ldr	r1, [r4, #12]
 8004a00:	4b06      	ldr	r3, [pc, #24]	@ (8004a1c <cleanup_stdio+0x3c>)
 8004a02:	4299      	cmp	r1, r3
 8004a04:	d004      	beq.n	8004a10 <cleanup_stdio+0x30>
 8004a06:	4620      	mov	r0, r4
 8004a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a0c:	f7ff bf6a 	b.w	80048e4 <_fflush_r>
 8004a10:	bd10      	pop	{r4, pc}
 8004a12:	bf00      	nop
 8004a14:	20005668 	.word	0x20005668
 8004a18:	200056d0 	.word	0x200056d0
 8004a1c:	20005738 	.word	0x20005738

08004a20 <global_stdio_init.part.0>:
 8004a20:	b510      	push	{r4, lr}
 8004a22:	4b0b      	ldr	r3, [pc, #44]	@ (8004a50 <global_stdio_init.part.0+0x30>)
 8004a24:	4c0b      	ldr	r4, [pc, #44]	@ (8004a54 <global_stdio_init.part.0+0x34>)
 8004a26:	4a0c      	ldr	r2, [pc, #48]	@ (8004a58 <global_stdio_init.part.0+0x38>)
 8004a28:	4620      	mov	r0, r4
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	2104      	movs	r1, #4
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f7ff ff94 	bl	800495c <std>
 8004a34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004a38:	2201      	movs	r2, #1
 8004a3a:	2109      	movs	r1, #9
 8004a3c:	f7ff ff8e 	bl	800495c <std>
 8004a40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004a44:	2202      	movs	r2, #2
 8004a46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a4a:	2112      	movs	r1, #18
 8004a4c:	f7ff bf86 	b.w	800495c <std>
 8004a50:	200057a0 	.word	0x200057a0
 8004a54:	20005668 	.word	0x20005668
 8004a58:	080049c9 	.word	0x080049c9

08004a5c <__sfp_lock_acquire>:
 8004a5c:	4801      	ldr	r0, [pc, #4]	@ (8004a64 <__sfp_lock_acquire+0x8>)
 8004a5e:	f000 ba7a 	b.w	8004f56 <__retarget_lock_acquire_recursive>
 8004a62:	bf00      	nop
 8004a64:	200057a9 	.word	0x200057a9

08004a68 <__sfp_lock_release>:
 8004a68:	4801      	ldr	r0, [pc, #4]	@ (8004a70 <__sfp_lock_release+0x8>)
 8004a6a:	f000 ba75 	b.w	8004f58 <__retarget_lock_release_recursive>
 8004a6e:	bf00      	nop
 8004a70:	200057a9 	.word	0x200057a9

08004a74 <__sinit>:
 8004a74:	b510      	push	{r4, lr}
 8004a76:	4604      	mov	r4, r0
 8004a78:	f7ff fff0 	bl	8004a5c <__sfp_lock_acquire>
 8004a7c:	6a23      	ldr	r3, [r4, #32]
 8004a7e:	b11b      	cbz	r3, 8004a88 <__sinit+0x14>
 8004a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a84:	f7ff bff0 	b.w	8004a68 <__sfp_lock_release>
 8004a88:	4b04      	ldr	r3, [pc, #16]	@ (8004a9c <__sinit+0x28>)
 8004a8a:	6223      	str	r3, [r4, #32]
 8004a8c:	4b04      	ldr	r3, [pc, #16]	@ (8004aa0 <__sinit+0x2c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1f5      	bne.n	8004a80 <__sinit+0xc>
 8004a94:	f7ff ffc4 	bl	8004a20 <global_stdio_init.part.0>
 8004a98:	e7f2      	b.n	8004a80 <__sinit+0xc>
 8004a9a:	bf00      	nop
 8004a9c:	080049e1 	.word	0x080049e1
 8004aa0:	200057a0 	.word	0x200057a0

08004aa4 <_fwalk_sglue>:
 8004aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004aa8:	4607      	mov	r7, r0
 8004aaa:	4688      	mov	r8, r1
 8004aac:	4614      	mov	r4, r2
 8004aae:	2600      	movs	r6, #0
 8004ab0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ab4:	f1b9 0901 	subs.w	r9, r9, #1
 8004ab8:	d505      	bpl.n	8004ac6 <_fwalk_sglue+0x22>
 8004aba:	6824      	ldr	r4, [r4, #0]
 8004abc:	2c00      	cmp	r4, #0
 8004abe:	d1f7      	bne.n	8004ab0 <_fwalk_sglue+0xc>
 8004ac0:	4630      	mov	r0, r6
 8004ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ac6:	89ab      	ldrh	r3, [r5, #12]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d907      	bls.n	8004adc <_fwalk_sglue+0x38>
 8004acc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	d003      	beq.n	8004adc <_fwalk_sglue+0x38>
 8004ad4:	4629      	mov	r1, r5
 8004ad6:	4638      	mov	r0, r7
 8004ad8:	47c0      	blx	r8
 8004ada:	4306      	orrs	r6, r0
 8004adc:	3568      	adds	r5, #104	@ 0x68
 8004ade:	e7e9      	b.n	8004ab4 <_fwalk_sglue+0x10>

08004ae0 <iprintf>:
 8004ae0:	b40f      	push	{r0, r1, r2, r3}
 8004ae2:	b507      	push	{r0, r1, r2, lr}
 8004ae4:	4906      	ldr	r1, [pc, #24]	@ (8004b00 <iprintf+0x20>)
 8004ae6:	ab04      	add	r3, sp, #16
 8004ae8:	6808      	ldr	r0, [r1, #0]
 8004aea:	f853 2b04 	ldr.w	r2, [r3], #4
 8004aee:	6881      	ldr	r1, [r0, #8]
 8004af0:	9301      	str	r3, [sp, #4]
 8004af2:	f000 fe81 	bl	80057f8 <_vfiprintf_r>
 8004af6:	b003      	add	sp, #12
 8004af8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004afc:	b004      	add	sp, #16
 8004afe:	4770      	bx	lr
 8004b00:	20001ff0 	.word	0x20001ff0

08004b04 <putchar>:
 8004b04:	4b02      	ldr	r3, [pc, #8]	@ (8004b10 <putchar+0xc>)
 8004b06:	4601      	mov	r1, r0
 8004b08:	6818      	ldr	r0, [r3, #0]
 8004b0a:	6882      	ldr	r2, [r0, #8]
 8004b0c:	f001 bacb 	b.w	80060a6 <_putc_r>
 8004b10:	20001ff0 	.word	0x20001ff0

08004b14 <_puts_r>:
 8004b14:	6a03      	ldr	r3, [r0, #32]
 8004b16:	b570      	push	{r4, r5, r6, lr}
 8004b18:	4605      	mov	r5, r0
 8004b1a:	460e      	mov	r6, r1
 8004b1c:	6884      	ldr	r4, [r0, #8]
 8004b1e:	b90b      	cbnz	r3, 8004b24 <_puts_r+0x10>
 8004b20:	f7ff ffa8 	bl	8004a74 <__sinit>
 8004b24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b26:	07db      	lsls	r3, r3, #31
 8004b28:	d405      	bmi.n	8004b36 <_puts_r+0x22>
 8004b2a:	89a3      	ldrh	r3, [r4, #12]
 8004b2c:	0598      	lsls	r0, r3, #22
 8004b2e:	d402      	bmi.n	8004b36 <_puts_r+0x22>
 8004b30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b32:	f000 fa10 	bl	8004f56 <__retarget_lock_acquire_recursive>
 8004b36:	89a3      	ldrh	r3, [r4, #12]
 8004b38:	0719      	lsls	r1, r3, #28
 8004b3a:	d502      	bpl.n	8004b42 <_puts_r+0x2e>
 8004b3c:	6923      	ldr	r3, [r4, #16]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d135      	bne.n	8004bae <_puts_r+0x9a>
 8004b42:	4621      	mov	r1, r4
 8004b44:	4628      	mov	r0, r5
 8004b46:	f000 f925 	bl	8004d94 <__swsetup_r>
 8004b4a:	b380      	cbz	r0, 8004bae <_puts_r+0x9a>
 8004b4c:	f04f 35ff 	mov.w	r5, #4294967295
 8004b50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b52:	07da      	lsls	r2, r3, #31
 8004b54:	d405      	bmi.n	8004b62 <_puts_r+0x4e>
 8004b56:	89a3      	ldrh	r3, [r4, #12]
 8004b58:	059b      	lsls	r3, r3, #22
 8004b5a:	d402      	bmi.n	8004b62 <_puts_r+0x4e>
 8004b5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b5e:	f000 f9fb 	bl	8004f58 <__retarget_lock_release_recursive>
 8004b62:	4628      	mov	r0, r5
 8004b64:	bd70      	pop	{r4, r5, r6, pc}
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	da04      	bge.n	8004b74 <_puts_r+0x60>
 8004b6a:	69a2      	ldr	r2, [r4, #24]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	dc17      	bgt.n	8004ba0 <_puts_r+0x8c>
 8004b70:	290a      	cmp	r1, #10
 8004b72:	d015      	beq.n	8004ba0 <_puts_r+0x8c>
 8004b74:	6823      	ldr	r3, [r4, #0]
 8004b76:	1c5a      	adds	r2, r3, #1
 8004b78:	6022      	str	r2, [r4, #0]
 8004b7a:	7019      	strb	r1, [r3, #0]
 8004b7c:	68a3      	ldr	r3, [r4, #8]
 8004b7e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b82:	3b01      	subs	r3, #1
 8004b84:	60a3      	str	r3, [r4, #8]
 8004b86:	2900      	cmp	r1, #0
 8004b88:	d1ed      	bne.n	8004b66 <_puts_r+0x52>
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	da11      	bge.n	8004bb2 <_puts_r+0x9e>
 8004b8e:	4622      	mov	r2, r4
 8004b90:	210a      	movs	r1, #10
 8004b92:	4628      	mov	r0, r5
 8004b94:	f000 f8bf 	bl	8004d16 <__swbuf_r>
 8004b98:	3001      	adds	r0, #1
 8004b9a:	d0d7      	beq.n	8004b4c <_puts_r+0x38>
 8004b9c:	250a      	movs	r5, #10
 8004b9e:	e7d7      	b.n	8004b50 <_puts_r+0x3c>
 8004ba0:	4622      	mov	r2, r4
 8004ba2:	4628      	mov	r0, r5
 8004ba4:	f000 f8b7 	bl	8004d16 <__swbuf_r>
 8004ba8:	3001      	adds	r0, #1
 8004baa:	d1e7      	bne.n	8004b7c <_puts_r+0x68>
 8004bac:	e7ce      	b.n	8004b4c <_puts_r+0x38>
 8004bae:	3e01      	subs	r6, #1
 8004bb0:	e7e4      	b.n	8004b7c <_puts_r+0x68>
 8004bb2:	6823      	ldr	r3, [r4, #0]
 8004bb4:	1c5a      	adds	r2, r3, #1
 8004bb6:	6022      	str	r2, [r4, #0]
 8004bb8:	220a      	movs	r2, #10
 8004bba:	701a      	strb	r2, [r3, #0]
 8004bbc:	e7ee      	b.n	8004b9c <_puts_r+0x88>
	...

08004bc0 <puts>:
 8004bc0:	4b02      	ldr	r3, [pc, #8]	@ (8004bcc <puts+0xc>)
 8004bc2:	4601      	mov	r1, r0
 8004bc4:	6818      	ldr	r0, [r3, #0]
 8004bc6:	f7ff bfa5 	b.w	8004b14 <_puts_r>
 8004bca:	bf00      	nop
 8004bcc:	20001ff0 	.word	0x20001ff0

08004bd0 <sniprintf>:
 8004bd0:	b40c      	push	{r2, r3}
 8004bd2:	b530      	push	{r4, r5, lr}
 8004bd4:	4b17      	ldr	r3, [pc, #92]	@ (8004c34 <sniprintf+0x64>)
 8004bd6:	1e0c      	subs	r4, r1, #0
 8004bd8:	681d      	ldr	r5, [r3, #0]
 8004bda:	b09d      	sub	sp, #116	@ 0x74
 8004bdc:	da08      	bge.n	8004bf0 <sniprintf+0x20>
 8004bde:	238b      	movs	r3, #139	@ 0x8b
 8004be0:	f04f 30ff 	mov.w	r0, #4294967295
 8004be4:	602b      	str	r3, [r5, #0]
 8004be6:	b01d      	add	sp, #116	@ 0x74
 8004be8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004bec:	b002      	add	sp, #8
 8004bee:	4770      	bx	lr
 8004bf0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004bf4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004bf8:	bf0c      	ite	eq
 8004bfa:	4623      	moveq	r3, r4
 8004bfc:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004c00:	9304      	str	r3, [sp, #16]
 8004c02:	9307      	str	r3, [sp, #28]
 8004c04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004c08:	9002      	str	r0, [sp, #8]
 8004c0a:	9006      	str	r0, [sp, #24]
 8004c0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004c10:	4628      	mov	r0, r5
 8004c12:	ab21      	add	r3, sp, #132	@ 0x84
 8004c14:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004c16:	a902      	add	r1, sp, #8
 8004c18:	9301      	str	r3, [sp, #4]
 8004c1a:	f000 faff 	bl	800521c <_svfiprintf_r>
 8004c1e:	1c43      	adds	r3, r0, #1
 8004c20:	bfbc      	itt	lt
 8004c22:	238b      	movlt	r3, #139	@ 0x8b
 8004c24:	602b      	strlt	r3, [r5, #0]
 8004c26:	2c00      	cmp	r4, #0
 8004c28:	d0dd      	beq.n	8004be6 <sniprintf+0x16>
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	9b02      	ldr	r3, [sp, #8]
 8004c2e:	701a      	strb	r2, [r3, #0]
 8004c30:	e7d9      	b.n	8004be6 <sniprintf+0x16>
 8004c32:	bf00      	nop
 8004c34:	20001ff0 	.word	0x20001ff0

08004c38 <siscanf>:
 8004c38:	b40e      	push	{r1, r2, r3}
 8004c3a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8004c3e:	b530      	push	{r4, r5, lr}
 8004c40:	b09c      	sub	sp, #112	@ 0x70
 8004c42:	ac1f      	add	r4, sp, #124	@ 0x7c
 8004c44:	f854 5b04 	ldr.w	r5, [r4], #4
 8004c48:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004c4c:	9002      	str	r0, [sp, #8]
 8004c4e:	9006      	str	r0, [sp, #24]
 8004c50:	f7fb faf2 	bl	8000238 <strlen>
 8004c54:	4b0b      	ldr	r3, [pc, #44]	@ (8004c84 <siscanf+0x4c>)
 8004c56:	9003      	str	r0, [sp, #12]
 8004c58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004c5e:	9314      	str	r3, [sp, #80]	@ 0x50
 8004c60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004c64:	9007      	str	r0, [sp, #28]
 8004c66:	4808      	ldr	r0, [pc, #32]	@ (8004c88 <siscanf+0x50>)
 8004c68:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004c6c:	462a      	mov	r2, r5
 8004c6e:	4623      	mov	r3, r4
 8004c70:	a902      	add	r1, sp, #8
 8004c72:	6800      	ldr	r0, [r0, #0]
 8004c74:	9401      	str	r4, [sp, #4]
 8004c76:	f000 fc25 	bl	80054c4 <__ssvfiscanf_r>
 8004c7a:	b01c      	add	sp, #112	@ 0x70
 8004c7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c80:	b003      	add	sp, #12
 8004c82:	4770      	bx	lr
 8004c84:	08004caf 	.word	0x08004caf
 8004c88:	20001ff0 	.word	0x20001ff0

08004c8c <__sread>:
 8004c8c:	b510      	push	{r4, lr}
 8004c8e:	460c      	mov	r4, r1
 8004c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c94:	f000 f910 	bl	8004eb8 <_read_r>
 8004c98:	2800      	cmp	r0, #0
 8004c9a:	bfab      	itete	ge
 8004c9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004c9e:	89a3      	ldrhlt	r3, [r4, #12]
 8004ca0:	181b      	addge	r3, r3, r0
 8004ca2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004ca6:	bfac      	ite	ge
 8004ca8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004caa:	81a3      	strhlt	r3, [r4, #12]
 8004cac:	bd10      	pop	{r4, pc}

08004cae <__seofread>:
 8004cae:	2000      	movs	r0, #0
 8004cb0:	4770      	bx	lr

08004cb2 <__swrite>:
 8004cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cb6:	461f      	mov	r7, r3
 8004cb8:	898b      	ldrh	r3, [r1, #12]
 8004cba:	4605      	mov	r5, r0
 8004cbc:	05db      	lsls	r3, r3, #23
 8004cbe:	460c      	mov	r4, r1
 8004cc0:	4616      	mov	r6, r2
 8004cc2:	d505      	bpl.n	8004cd0 <__swrite+0x1e>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ccc:	f000 f8e2 	bl	8004e94 <_lseek_r>
 8004cd0:	89a3      	ldrh	r3, [r4, #12]
 8004cd2:	4632      	mov	r2, r6
 8004cd4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004cd8:	81a3      	strh	r3, [r4, #12]
 8004cda:	4628      	mov	r0, r5
 8004cdc:	463b      	mov	r3, r7
 8004cde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ce6:	f000 b8f9 	b.w	8004edc <_write_r>

08004cea <__sseek>:
 8004cea:	b510      	push	{r4, lr}
 8004cec:	460c      	mov	r4, r1
 8004cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cf2:	f000 f8cf 	bl	8004e94 <_lseek_r>
 8004cf6:	1c43      	adds	r3, r0, #1
 8004cf8:	89a3      	ldrh	r3, [r4, #12]
 8004cfa:	bf15      	itete	ne
 8004cfc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004cfe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004d02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004d06:	81a3      	strheq	r3, [r4, #12]
 8004d08:	bf18      	it	ne
 8004d0a:	81a3      	strhne	r3, [r4, #12]
 8004d0c:	bd10      	pop	{r4, pc}

08004d0e <__sclose>:
 8004d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d12:	f000 b8af 	b.w	8004e74 <_close_r>

08004d16 <__swbuf_r>:
 8004d16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d18:	460e      	mov	r6, r1
 8004d1a:	4614      	mov	r4, r2
 8004d1c:	4605      	mov	r5, r0
 8004d1e:	b118      	cbz	r0, 8004d28 <__swbuf_r+0x12>
 8004d20:	6a03      	ldr	r3, [r0, #32]
 8004d22:	b90b      	cbnz	r3, 8004d28 <__swbuf_r+0x12>
 8004d24:	f7ff fea6 	bl	8004a74 <__sinit>
 8004d28:	69a3      	ldr	r3, [r4, #24]
 8004d2a:	60a3      	str	r3, [r4, #8]
 8004d2c:	89a3      	ldrh	r3, [r4, #12]
 8004d2e:	071a      	lsls	r2, r3, #28
 8004d30:	d501      	bpl.n	8004d36 <__swbuf_r+0x20>
 8004d32:	6923      	ldr	r3, [r4, #16]
 8004d34:	b943      	cbnz	r3, 8004d48 <__swbuf_r+0x32>
 8004d36:	4621      	mov	r1, r4
 8004d38:	4628      	mov	r0, r5
 8004d3a:	f000 f82b 	bl	8004d94 <__swsetup_r>
 8004d3e:	b118      	cbz	r0, 8004d48 <__swbuf_r+0x32>
 8004d40:	f04f 37ff 	mov.w	r7, #4294967295
 8004d44:	4638      	mov	r0, r7
 8004d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d48:	6823      	ldr	r3, [r4, #0]
 8004d4a:	6922      	ldr	r2, [r4, #16]
 8004d4c:	b2f6      	uxtb	r6, r6
 8004d4e:	1a98      	subs	r0, r3, r2
 8004d50:	6963      	ldr	r3, [r4, #20]
 8004d52:	4637      	mov	r7, r6
 8004d54:	4283      	cmp	r3, r0
 8004d56:	dc05      	bgt.n	8004d64 <__swbuf_r+0x4e>
 8004d58:	4621      	mov	r1, r4
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	f7ff fdc2 	bl	80048e4 <_fflush_r>
 8004d60:	2800      	cmp	r0, #0
 8004d62:	d1ed      	bne.n	8004d40 <__swbuf_r+0x2a>
 8004d64:	68a3      	ldr	r3, [r4, #8]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	60a3      	str	r3, [r4, #8]
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	1c5a      	adds	r2, r3, #1
 8004d6e:	6022      	str	r2, [r4, #0]
 8004d70:	701e      	strb	r6, [r3, #0]
 8004d72:	6962      	ldr	r2, [r4, #20]
 8004d74:	1c43      	adds	r3, r0, #1
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d004      	beq.n	8004d84 <__swbuf_r+0x6e>
 8004d7a:	89a3      	ldrh	r3, [r4, #12]
 8004d7c:	07db      	lsls	r3, r3, #31
 8004d7e:	d5e1      	bpl.n	8004d44 <__swbuf_r+0x2e>
 8004d80:	2e0a      	cmp	r6, #10
 8004d82:	d1df      	bne.n	8004d44 <__swbuf_r+0x2e>
 8004d84:	4621      	mov	r1, r4
 8004d86:	4628      	mov	r0, r5
 8004d88:	f7ff fdac 	bl	80048e4 <_fflush_r>
 8004d8c:	2800      	cmp	r0, #0
 8004d8e:	d0d9      	beq.n	8004d44 <__swbuf_r+0x2e>
 8004d90:	e7d6      	b.n	8004d40 <__swbuf_r+0x2a>
	...

08004d94 <__swsetup_r>:
 8004d94:	b538      	push	{r3, r4, r5, lr}
 8004d96:	4b29      	ldr	r3, [pc, #164]	@ (8004e3c <__swsetup_r+0xa8>)
 8004d98:	4605      	mov	r5, r0
 8004d9a:	6818      	ldr	r0, [r3, #0]
 8004d9c:	460c      	mov	r4, r1
 8004d9e:	b118      	cbz	r0, 8004da8 <__swsetup_r+0x14>
 8004da0:	6a03      	ldr	r3, [r0, #32]
 8004da2:	b90b      	cbnz	r3, 8004da8 <__swsetup_r+0x14>
 8004da4:	f7ff fe66 	bl	8004a74 <__sinit>
 8004da8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dac:	0719      	lsls	r1, r3, #28
 8004dae:	d422      	bmi.n	8004df6 <__swsetup_r+0x62>
 8004db0:	06da      	lsls	r2, r3, #27
 8004db2:	d407      	bmi.n	8004dc4 <__swsetup_r+0x30>
 8004db4:	2209      	movs	r2, #9
 8004db6:	602a      	str	r2, [r5, #0]
 8004db8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004dc0:	81a3      	strh	r3, [r4, #12]
 8004dc2:	e033      	b.n	8004e2c <__swsetup_r+0x98>
 8004dc4:	0758      	lsls	r0, r3, #29
 8004dc6:	d512      	bpl.n	8004dee <__swsetup_r+0x5a>
 8004dc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004dca:	b141      	cbz	r1, 8004dde <__swsetup_r+0x4a>
 8004dcc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004dd0:	4299      	cmp	r1, r3
 8004dd2:	d002      	beq.n	8004dda <__swsetup_r+0x46>
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	f000 f8cf 	bl	8004f78 <_free_r>
 8004dda:	2300      	movs	r3, #0
 8004ddc:	6363      	str	r3, [r4, #52]	@ 0x34
 8004dde:	89a3      	ldrh	r3, [r4, #12]
 8004de0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004de4:	81a3      	strh	r3, [r4, #12]
 8004de6:	2300      	movs	r3, #0
 8004de8:	6063      	str	r3, [r4, #4]
 8004dea:	6923      	ldr	r3, [r4, #16]
 8004dec:	6023      	str	r3, [r4, #0]
 8004dee:	89a3      	ldrh	r3, [r4, #12]
 8004df0:	f043 0308 	orr.w	r3, r3, #8
 8004df4:	81a3      	strh	r3, [r4, #12]
 8004df6:	6923      	ldr	r3, [r4, #16]
 8004df8:	b94b      	cbnz	r3, 8004e0e <__swsetup_r+0x7a>
 8004dfa:	89a3      	ldrh	r3, [r4, #12]
 8004dfc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004e00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e04:	d003      	beq.n	8004e0e <__swsetup_r+0x7a>
 8004e06:	4621      	mov	r1, r4
 8004e08:	4628      	mov	r0, r5
 8004e0a:	f001 f910 	bl	800602e <__smakebuf_r>
 8004e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e12:	f013 0201 	ands.w	r2, r3, #1
 8004e16:	d00a      	beq.n	8004e2e <__swsetup_r+0x9a>
 8004e18:	2200      	movs	r2, #0
 8004e1a:	60a2      	str	r2, [r4, #8]
 8004e1c:	6962      	ldr	r2, [r4, #20]
 8004e1e:	4252      	negs	r2, r2
 8004e20:	61a2      	str	r2, [r4, #24]
 8004e22:	6922      	ldr	r2, [r4, #16]
 8004e24:	b942      	cbnz	r2, 8004e38 <__swsetup_r+0xa4>
 8004e26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004e2a:	d1c5      	bne.n	8004db8 <__swsetup_r+0x24>
 8004e2c:	bd38      	pop	{r3, r4, r5, pc}
 8004e2e:	0799      	lsls	r1, r3, #30
 8004e30:	bf58      	it	pl
 8004e32:	6962      	ldrpl	r2, [r4, #20]
 8004e34:	60a2      	str	r2, [r4, #8]
 8004e36:	e7f4      	b.n	8004e22 <__swsetup_r+0x8e>
 8004e38:	2000      	movs	r0, #0
 8004e3a:	e7f7      	b.n	8004e2c <__swsetup_r+0x98>
 8004e3c:	20001ff0 	.word	0x20001ff0

08004e40 <memset>:
 8004e40:	4603      	mov	r3, r0
 8004e42:	4402      	add	r2, r0
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d100      	bne.n	8004e4a <memset+0xa>
 8004e48:	4770      	bx	lr
 8004e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e4e:	e7f9      	b.n	8004e44 <memset+0x4>

08004e50 <strncmp>:
 8004e50:	b510      	push	{r4, lr}
 8004e52:	b16a      	cbz	r2, 8004e70 <strncmp+0x20>
 8004e54:	3901      	subs	r1, #1
 8004e56:	1884      	adds	r4, r0, r2
 8004e58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e5c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d103      	bne.n	8004e6c <strncmp+0x1c>
 8004e64:	42a0      	cmp	r0, r4
 8004e66:	d001      	beq.n	8004e6c <strncmp+0x1c>
 8004e68:	2a00      	cmp	r2, #0
 8004e6a:	d1f5      	bne.n	8004e58 <strncmp+0x8>
 8004e6c:	1ad0      	subs	r0, r2, r3
 8004e6e:	bd10      	pop	{r4, pc}
 8004e70:	4610      	mov	r0, r2
 8004e72:	e7fc      	b.n	8004e6e <strncmp+0x1e>

08004e74 <_close_r>:
 8004e74:	b538      	push	{r3, r4, r5, lr}
 8004e76:	2300      	movs	r3, #0
 8004e78:	4d05      	ldr	r5, [pc, #20]	@ (8004e90 <_close_r+0x1c>)
 8004e7a:	4604      	mov	r4, r0
 8004e7c:	4608      	mov	r0, r1
 8004e7e:	602b      	str	r3, [r5, #0]
 8004e80:	f7fe fbbb 	bl	80035fa <_close>
 8004e84:	1c43      	adds	r3, r0, #1
 8004e86:	d102      	bne.n	8004e8e <_close_r+0x1a>
 8004e88:	682b      	ldr	r3, [r5, #0]
 8004e8a:	b103      	cbz	r3, 8004e8e <_close_r+0x1a>
 8004e8c:	6023      	str	r3, [r4, #0]
 8004e8e:	bd38      	pop	{r3, r4, r5, pc}
 8004e90:	200057a4 	.word	0x200057a4

08004e94 <_lseek_r>:
 8004e94:	b538      	push	{r3, r4, r5, lr}
 8004e96:	4604      	mov	r4, r0
 8004e98:	4608      	mov	r0, r1
 8004e9a:	4611      	mov	r1, r2
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	4d05      	ldr	r5, [pc, #20]	@ (8004eb4 <_lseek_r+0x20>)
 8004ea0:	602a      	str	r2, [r5, #0]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	f7fe fbcd 	bl	8003642 <_lseek>
 8004ea8:	1c43      	adds	r3, r0, #1
 8004eaa:	d102      	bne.n	8004eb2 <_lseek_r+0x1e>
 8004eac:	682b      	ldr	r3, [r5, #0]
 8004eae:	b103      	cbz	r3, 8004eb2 <_lseek_r+0x1e>
 8004eb0:	6023      	str	r3, [r4, #0]
 8004eb2:	bd38      	pop	{r3, r4, r5, pc}
 8004eb4:	200057a4 	.word	0x200057a4

08004eb8 <_read_r>:
 8004eb8:	b538      	push	{r3, r4, r5, lr}
 8004eba:	4604      	mov	r4, r0
 8004ebc:	4608      	mov	r0, r1
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	4d05      	ldr	r5, [pc, #20]	@ (8004ed8 <_read_r+0x20>)
 8004ec4:	602a      	str	r2, [r5, #0]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	f7fe fb7a 	bl	80035c0 <_read>
 8004ecc:	1c43      	adds	r3, r0, #1
 8004ece:	d102      	bne.n	8004ed6 <_read_r+0x1e>
 8004ed0:	682b      	ldr	r3, [r5, #0]
 8004ed2:	b103      	cbz	r3, 8004ed6 <_read_r+0x1e>
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	bd38      	pop	{r3, r4, r5, pc}
 8004ed8:	200057a4 	.word	0x200057a4

08004edc <_write_r>:
 8004edc:	b538      	push	{r3, r4, r5, lr}
 8004ede:	4604      	mov	r4, r0
 8004ee0:	4608      	mov	r0, r1
 8004ee2:	4611      	mov	r1, r2
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	4d05      	ldr	r5, [pc, #20]	@ (8004efc <_write_r+0x20>)
 8004ee8:	602a      	str	r2, [r5, #0]
 8004eea:	461a      	mov	r2, r3
 8004eec:	f7fc facc 	bl	8001488 <_write>
 8004ef0:	1c43      	adds	r3, r0, #1
 8004ef2:	d102      	bne.n	8004efa <_write_r+0x1e>
 8004ef4:	682b      	ldr	r3, [r5, #0]
 8004ef6:	b103      	cbz	r3, 8004efa <_write_r+0x1e>
 8004ef8:	6023      	str	r3, [r4, #0]
 8004efa:	bd38      	pop	{r3, r4, r5, pc}
 8004efc:	200057a4 	.word	0x200057a4

08004f00 <__errno>:
 8004f00:	4b01      	ldr	r3, [pc, #4]	@ (8004f08 <__errno+0x8>)
 8004f02:	6818      	ldr	r0, [r3, #0]
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	20001ff0 	.word	0x20001ff0

08004f0c <__libc_init_array>:
 8004f0c:	b570      	push	{r4, r5, r6, lr}
 8004f0e:	2600      	movs	r6, #0
 8004f10:	4d0c      	ldr	r5, [pc, #48]	@ (8004f44 <__libc_init_array+0x38>)
 8004f12:	4c0d      	ldr	r4, [pc, #52]	@ (8004f48 <__libc_init_array+0x3c>)
 8004f14:	1b64      	subs	r4, r4, r5
 8004f16:	10a4      	asrs	r4, r4, #2
 8004f18:	42a6      	cmp	r6, r4
 8004f1a:	d109      	bne.n	8004f30 <__libc_init_array+0x24>
 8004f1c:	f001 fae4 	bl	80064e8 <_init>
 8004f20:	2600      	movs	r6, #0
 8004f22:	4d0a      	ldr	r5, [pc, #40]	@ (8004f4c <__libc_init_array+0x40>)
 8004f24:	4c0a      	ldr	r4, [pc, #40]	@ (8004f50 <__libc_init_array+0x44>)
 8004f26:	1b64      	subs	r4, r4, r5
 8004f28:	10a4      	asrs	r4, r4, #2
 8004f2a:	42a6      	cmp	r6, r4
 8004f2c:	d105      	bne.n	8004f3a <__libc_init_array+0x2e>
 8004f2e:	bd70      	pop	{r4, r5, r6, pc}
 8004f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f34:	4798      	blx	r3
 8004f36:	3601      	adds	r6, #1
 8004f38:	e7ee      	b.n	8004f18 <__libc_init_array+0xc>
 8004f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f3e:	4798      	blx	r3
 8004f40:	3601      	adds	r6, #1
 8004f42:	e7f2      	b.n	8004f2a <__libc_init_array+0x1e>
 8004f44:	08007260 	.word	0x08007260
 8004f48:	08007260 	.word	0x08007260
 8004f4c:	08007260 	.word	0x08007260
 8004f50:	08007264 	.word	0x08007264

08004f54 <__retarget_lock_init_recursive>:
 8004f54:	4770      	bx	lr

08004f56 <__retarget_lock_acquire_recursive>:
 8004f56:	4770      	bx	lr

08004f58 <__retarget_lock_release_recursive>:
 8004f58:	4770      	bx	lr

08004f5a <memcpy>:
 8004f5a:	440a      	add	r2, r1
 8004f5c:	4291      	cmp	r1, r2
 8004f5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f62:	d100      	bne.n	8004f66 <memcpy+0xc>
 8004f64:	4770      	bx	lr
 8004f66:	b510      	push	{r4, lr}
 8004f68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f6c:	4291      	cmp	r1, r2
 8004f6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f72:	d1f9      	bne.n	8004f68 <memcpy+0xe>
 8004f74:	bd10      	pop	{r4, pc}
	...

08004f78 <_free_r>:
 8004f78:	b538      	push	{r3, r4, r5, lr}
 8004f7a:	4605      	mov	r5, r0
 8004f7c:	2900      	cmp	r1, #0
 8004f7e:	d040      	beq.n	8005002 <_free_r+0x8a>
 8004f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f84:	1f0c      	subs	r4, r1, #4
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	bfb8      	it	lt
 8004f8a:	18e4      	addlt	r4, r4, r3
 8004f8c:	f000 f8de 	bl	800514c <__malloc_lock>
 8004f90:	4a1c      	ldr	r2, [pc, #112]	@ (8005004 <_free_r+0x8c>)
 8004f92:	6813      	ldr	r3, [r2, #0]
 8004f94:	b933      	cbnz	r3, 8004fa4 <_free_r+0x2c>
 8004f96:	6063      	str	r3, [r4, #4]
 8004f98:	6014      	str	r4, [r2, #0]
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fa0:	f000 b8da 	b.w	8005158 <__malloc_unlock>
 8004fa4:	42a3      	cmp	r3, r4
 8004fa6:	d908      	bls.n	8004fba <_free_r+0x42>
 8004fa8:	6820      	ldr	r0, [r4, #0]
 8004faa:	1821      	adds	r1, r4, r0
 8004fac:	428b      	cmp	r3, r1
 8004fae:	bf01      	itttt	eq
 8004fb0:	6819      	ldreq	r1, [r3, #0]
 8004fb2:	685b      	ldreq	r3, [r3, #4]
 8004fb4:	1809      	addeq	r1, r1, r0
 8004fb6:	6021      	streq	r1, [r4, #0]
 8004fb8:	e7ed      	b.n	8004f96 <_free_r+0x1e>
 8004fba:	461a      	mov	r2, r3
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	b10b      	cbz	r3, 8004fc4 <_free_r+0x4c>
 8004fc0:	42a3      	cmp	r3, r4
 8004fc2:	d9fa      	bls.n	8004fba <_free_r+0x42>
 8004fc4:	6811      	ldr	r1, [r2, #0]
 8004fc6:	1850      	adds	r0, r2, r1
 8004fc8:	42a0      	cmp	r0, r4
 8004fca:	d10b      	bne.n	8004fe4 <_free_r+0x6c>
 8004fcc:	6820      	ldr	r0, [r4, #0]
 8004fce:	4401      	add	r1, r0
 8004fd0:	1850      	adds	r0, r2, r1
 8004fd2:	4283      	cmp	r3, r0
 8004fd4:	6011      	str	r1, [r2, #0]
 8004fd6:	d1e0      	bne.n	8004f9a <_free_r+0x22>
 8004fd8:	6818      	ldr	r0, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	4408      	add	r0, r1
 8004fde:	6010      	str	r0, [r2, #0]
 8004fe0:	6053      	str	r3, [r2, #4]
 8004fe2:	e7da      	b.n	8004f9a <_free_r+0x22>
 8004fe4:	d902      	bls.n	8004fec <_free_r+0x74>
 8004fe6:	230c      	movs	r3, #12
 8004fe8:	602b      	str	r3, [r5, #0]
 8004fea:	e7d6      	b.n	8004f9a <_free_r+0x22>
 8004fec:	6820      	ldr	r0, [r4, #0]
 8004fee:	1821      	adds	r1, r4, r0
 8004ff0:	428b      	cmp	r3, r1
 8004ff2:	bf01      	itttt	eq
 8004ff4:	6819      	ldreq	r1, [r3, #0]
 8004ff6:	685b      	ldreq	r3, [r3, #4]
 8004ff8:	1809      	addeq	r1, r1, r0
 8004ffa:	6021      	streq	r1, [r4, #0]
 8004ffc:	6063      	str	r3, [r4, #4]
 8004ffe:	6054      	str	r4, [r2, #4]
 8005000:	e7cb      	b.n	8004f9a <_free_r+0x22>
 8005002:	bd38      	pop	{r3, r4, r5, pc}
 8005004:	200057b0 	.word	0x200057b0

08005008 <sbrk_aligned>:
 8005008:	b570      	push	{r4, r5, r6, lr}
 800500a:	4e0f      	ldr	r6, [pc, #60]	@ (8005048 <sbrk_aligned+0x40>)
 800500c:	460c      	mov	r4, r1
 800500e:	6831      	ldr	r1, [r6, #0]
 8005010:	4605      	mov	r5, r0
 8005012:	b911      	cbnz	r1, 800501a <sbrk_aligned+0x12>
 8005014:	f001 f928 	bl	8006268 <_sbrk_r>
 8005018:	6030      	str	r0, [r6, #0]
 800501a:	4621      	mov	r1, r4
 800501c:	4628      	mov	r0, r5
 800501e:	f001 f923 	bl	8006268 <_sbrk_r>
 8005022:	1c43      	adds	r3, r0, #1
 8005024:	d103      	bne.n	800502e <sbrk_aligned+0x26>
 8005026:	f04f 34ff 	mov.w	r4, #4294967295
 800502a:	4620      	mov	r0, r4
 800502c:	bd70      	pop	{r4, r5, r6, pc}
 800502e:	1cc4      	adds	r4, r0, #3
 8005030:	f024 0403 	bic.w	r4, r4, #3
 8005034:	42a0      	cmp	r0, r4
 8005036:	d0f8      	beq.n	800502a <sbrk_aligned+0x22>
 8005038:	1a21      	subs	r1, r4, r0
 800503a:	4628      	mov	r0, r5
 800503c:	f001 f914 	bl	8006268 <_sbrk_r>
 8005040:	3001      	adds	r0, #1
 8005042:	d1f2      	bne.n	800502a <sbrk_aligned+0x22>
 8005044:	e7ef      	b.n	8005026 <sbrk_aligned+0x1e>
 8005046:	bf00      	nop
 8005048:	200057ac 	.word	0x200057ac

0800504c <_malloc_r>:
 800504c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005050:	1ccd      	adds	r5, r1, #3
 8005052:	f025 0503 	bic.w	r5, r5, #3
 8005056:	3508      	adds	r5, #8
 8005058:	2d0c      	cmp	r5, #12
 800505a:	bf38      	it	cc
 800505c:	250c      	movcc	r5, #12
 800505e:	2d00      	cmp	r5, #0
 8005060:	4606      	mov	r6, r0
 8005062:	db01      	blt.n	8005068 <_malloc_r+0x1c>
 8005064:	42a9      	cmp	r1, r5
 8005066:	d904      	bls.n	8005072 <_malloc_r+0x26>
 8005068:	230c      	movs	r3, #12
 800506a:	6033      	str	r3, [r6, #0]
 800506c:	2000      	movs	r0, #0
 800506e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005072:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005148 <_malloc_r+0xfc>
 8005076:	f000 f869 	bl	800514c <__malloc_lock>
 800507a:	f8d8 3000 	ldr.w	r3, [r8]
 800507e:	461c      	mov	r4, r3
 8005080:	bb44      	cbnz	r4, 80050d4 <_malloc_r+0x88>
 8005082:	4629      	mov	r1, r5
 8005084:	4630      	mov	r0, r6
 8005086:	f7ff ffbf 	bl	8005008 <sbrk_aligned>
 800508a:	1c43      	adds	r3, r0, #1
 800508c:	4604      	mov	r4, r0
 800508e:	d158      	bne.n	8005142 <_malloc_r+0xf6>
 8005090:	f8d8 4000 	ldr.w	r4, [r8]
 8005094:	4627      	mov	r7, r4
 8005096:	2f00      	cmp	r7, #0
 8005098:	d143      	bne.n	8005122 <_malloc_r+0xd6>
 800509a:	2c00      	cmp	r4, #0
 800509c:	d04b      	beq.n	8005136 <_malloc_r+0xea>
 800509e:	6823      	ldr	r3, [r4, #0]
 80050a0:	4639      	mov	r1, r7
 80050a2:	4630      	mov	r0, r6
 80050a4:	eb04 0903 	add.w	r9, r4, r3
 80050a8:	f001 f8de 	bl	8006268 <_sbrk_r>
 80050ac:	4581      	cmp	r9, r0
 80050ae:	d142      	bne.n	8005136 <_malloc_r+0xea>
 80050b0:	6821      	ldr	r1, [r4, #0]
 80050b2:	4630      	mov	r0, r6
 80050b4:	1a6d      	subs	r5, r5, r1
 80050b6:	4629      	mov	r1, r5
 80050b8:	f7ff ffa6 	bl	8005008 <sbrk_aligned>
 80050bc:	3001      	adds	r0, #1
 80050be:	d03a      	beq.n	8005136 <_malloc_r+0xea>
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	442b      	add	r3, r5
 80050c4:	6023      	str	r3, [r4, #0]
 80050c6:	f8d8 3000 	ldr.w	r3, [r8]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	bb62      	cbnz	r2, 8005128 <_malloc_r+0xdc>
 80050ce:	f8c8 7000 	str.w	r7, [r8]
 80050d2:	e00f      	b.n	80050f4 <_malloc_r+0xa8>
 80050d4:	6822      	ldr	r2, [r4, #0]
 80050d6:	1b52      	subs	r2, r2, r5
 80050d8:	d420      	bmi.n	800511c <_malloc_r+0xd0>
 80050da:	2a0b      	cmp	r2, #11
 80050dc:	d917      	bls.n	800510e <_malloc_r+0xc2>
 80050de:	1961      	adds	r1, r4, r5
 80050e0:	42a3      	cmp	r3, r4
 80050e2:	6025      	str	r5, [r4, #0]
 80050e4:	bf18      	it	ne
 80050e6:	6059      	strne	r1, [r3, #4]
 80050e8:	6863      	ldr	r3, [r4, #4]
 80050ea:	bf08      	it	eq
 80050ec:	f8c8 1000 	streq.w	r1, [r8]
 80050f0:	5162      	str	r2, [r4, r5]
 80050f2:	604b      	str	r3, [r1, #4]
 80050f4:	4630      	mov	r0, r6
 80050f6:	f000 f82f 	bl	8005158 <__malloc_unlock>
 80050fa:	f104 000b 	add.w	r0, r4, #11
 80050fe:	1d23      	adds	r3, r4, #4
 8005100:	f020 0007 	bic.w	r0, r0, #7
 8005104:	1ac2      	subs	r2, r0, r3
 8005106:	bf1c      	itt	ne
 8005108:	1a1b      	subne	r3, r3, r0
 800510a:	50a3      	strne	r3, [r4, r2]
 800510c:	e7af      	b.n	800506e <_malloc_r+0x22>
 800510e:	6862      	ldr	r2, [r4, #4]
 8005110:	42a3      	cmp	r3, r4
 8005112:	bf0c      	ite	eq
 8005114:	f8c8 2000 	streq.w	r2, [r8]
 8005118:	605a      	strne	r2, [r3, #4]
 800511a:	e7eb      	b.n	80050f4 <_malloc_r+0xa8>
 800511c:	4623      	mov	r3, r4
 800511e:	6864      	ldr	r4, [r4, #4]
 8005120:	e7ae      	b.n	8005080 <_malloc_r+0x34>
 8005122:	463c      	mov	r4, r7
 8005124:	687f      	ldr	r7, [r7, #4]
 8005126:	e7b6      	b.n	8005096 <_malloc_r+0x4a>
 8005128:	461a      	mov	r2, r3
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	42a3      	cmp	r3, r4
 800512e:	d1fb      	bne.n	8005128 <_malloc_r+0xdc>
 8005130:	2300      	movs	r3, #0
 8005132:	6053      	str	r3, [r2, #4]
 8005134:	e7de      	b.n	80050f4 <_malloc_r+0xa8>
 8005136:	230c      	movs	r3, #12
 8005138:	4630      	mov	r0, r6
 800513a:	6033      	str	r3, [r6, #0]
 800513c:	f000 f80c 	bl	8005158 <__malloc_unlock>
 8005140:	e794      	b.n	800506c <_malloc_r+0x20>
 8005142:	6005      	str	r5, [r0, #0]
 8005144:	e7d6      	b.n	80050f4 <_malloc_r+0xa8>
 8005146:	bf00      	nop
 8005148:	200057b0 	.word	0x200057b0

0800514c <__malloc_lock>:
 800514c:	4801      	ldr	r0, [pc, #4]	@ (8005154 <__malloc_lock+0x8>)
 800514e:	f7ff bf02 	b.w	8004f56 <__retarget_lock_acquire_recursive>
 8005152:	bf00      	nop
 8005154:	200057a8 	.word	0x200057a8

08005158 <__malloc_unlock>:
 8005158:	4801      	ldr	r0, [pc, #4]	@ (8005160 <__malloc_unlock+0x8>)
 800515a:	f7ff befd 	b.w	8004f58 <__retarget_lock_release_recursive>
 800515e:	bf00      	nop
 8005160:	200057a8 	.word	0x200057a8

08005164 <__ssputs_r>:
 8005164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005168:	461f      	mov	r7, r3
 800516a:	688e      	ldr	r6, [r1, #8]
 800516c:	4682      	mov	sl, r0
 800516e:	42be      	cmp	r6, r7
 8005170:	460c      	mov	r4, r1
 8005172:	4690      	mov	r8, r2
 8005174:	680b      	ldr	r3, [r1, #0]
 8005176:	d82d      	bhi.n	80051d4 <__ssputs_r+0x70>
 8005178:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800517c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005180:	d026      	beq.n	80051d0 <__ssputs_r+0x6c>
 8005182:	6965      	ldr	r5, [r4, #20]
 8005184:	6909      	ldr	r1, [r1, #16]
 8005186:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800518a:	eba3 0901 	sub.w	r9, r3, r1
 800518e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005192:	1c7b      	adds	r3, r7, #1
 8005194:	444b      	add	r3, r9
 8005196:	106d      	asrs	r5, r5, #1
 8005198:	429d      	cmp	r5, r3
 800519a:	bf38      	it	cc
 800519c:	461d      	movcc	r5, r3
 800519e:	0553      	lsls	r3, r2, #21
 80051a0:	d527      	bpl.n	80051f2 <__ssputs_r+0x8e>
 80051a2:	4629      	mov	r1, r5
 80051a4:	f7ff ff52 	bl	800504c <_malloc_r>
 80051a8:	4606      	mov	r6, r0
 80051aa:	b360      	cbz	r0, 8005206 <__ssputs_r+0xa2>
 80051ac:	464a      	mov	r2, r9
 80051ae:	6921      	ldr	r1, [r4, #16]
 80051b0:	f7ff fed3 	bl	8004f5a <memcpy>
 80051b4:	89a3      	ldrh	r3, [r4, #12]
 80051b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80051ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051be:	81a3      	strh	r3, [r4, #12]
 80051c0:	6126      	str	r6, [r4, #16]
 80051c2:	444e      	add	r6, r9
 80051c4:	6026      	str	r6, [r4, #0]
 80051c6:	463e      	mov	r6, r7
 80051c8:	6165      	str	r5, [r4, #20]
 80051ca:	eba5 0509 	sub.w	r5, r5, r9
 80051ce:	60a5      	str	r5, [r4, #8]
 80051d0:	42be      	cmp	r6, r7
 80051d2:	d900      	bls.n	80051d6 <__ssputs_r+0x72>
 80051d4:	463e      	mov	r6, r7
 80051d6:	4632      	mov	r2, r6
 80051d8:	4641      	mov	r1, r8
 80051da:	6820      	ldr	r0, [r4, #0]
 80051dc:	f001 f808 	bl	80061f0 <memmove>
 80051e0:	2000      	movs	r0, #0
 80051e2:	68a3      	ldr	r3, [r4, #8]
 80051e4:	1b9b      	subs	r3, r3, r6
 80051e6:	60a3      	str	r3, [r4, #8]
 80051e8:	6823      	ldr	r3, [r4, #0]
 80051ea:	4433      	add	r3, r6
 80051ec:	6023      	str	r3, [r4, #0]
 80051ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051f2:	462a      	mov	r2, r5
 80051f4:	f001 f856 	bl	80062a4 <_realloc_r>
 80051f8:	4606      	mov	r6, r0
 80051fa:	2800      	cmp	r0, #0
 80051fc:	d1e0      	bne.n	80051c0 <__ssputs_r+0x5c>
 80051fe:	4650      	mov	r0, sl
 8005200:	6921      	ldr	r1, [r4, #16]
 8005202:	f7ff feb9 	bl	8004f78 <_free_r>
 8005206:	230c      	movs	r3, #12
 8005208:	f8ca 3000 	str.w	r3, [sl]
 800520c:	89a3      	ldrh	r3, [r4, #12]
 800520e:	f04f 30ff 	mov.w	r0, #4294967295
 8005212:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005216:	81a3      	strh	r3, [r4, #12]
 8005218:	e7e9      	b.n	80051ee <__ssputs_r+0x8a>
	...

0800521c <_svfiprintf_r>:
 800521c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005220:	4698      	mov	r8, r3
 8005222:	898b      	ldrh	r3, [r1, #12]
 8005224:	4607      	mov	r7, r0
 8005226:	061b      	lsls	r3, r3, #24
 8005228:	460d      	mov	r5, r1
 800522a:	4614      	mov	r4, r2
 800522c:	b09d      	sub	sp, #116	@ 0x74
 800522e:	d510      	bpl.n	8005252 <_svfiprintf_r+0x36>
 8005230:	690b      	ldr	r3, [r1, #16]
 8005232:	b973      	cbnz	r3, 8005252 <_svfiprintf_r+0x36>
 8005234:	2140      	movs	r1, #64	@ 0x40
 8005236:	f7ff ff09 	bl	800504c <_malloc_r>
 800523a:	6028      	str	r0, [r5, #0]
 800523c:	6128      	str	r0, [r5, #16]
 800523e:	b930      	cbnz	r0, 800524e <_svfiprintf_r+0x32>
 8005240:	230c      	movs	r3, #12
 8005242:	603b      	str	r3, [r7, #0]
 8005244:	f04f 30ff 	mov.w	r0, #4294967295
 8005248:	b01d      	add	sp, #116	@ 0x74
 800524a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800524e:	2340      	movs	r3, #64	@ 0x40
 8005250:	616b      	str	r3, [r5, #20]
 8005252:	2300      	movs	r3, #0
 8005254:	9309      	str	r3, [sp, #36]	@ 0x24
 8005256:	2320      	movs	r3, #32
 8005258:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800525c:	2330      	movs	r3, #48	@ 0x30
 800525e:	f04f 0901 	mov.w	r9, #1
 8005262:	f8cd 800c 	str.w	r8, [sp, #12]
 8005266:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005400 <_svfiprintf_r+0x1e4>
 800526a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800526e:	4623      	mov	r3, r4
 8005270:	469a      	mov	sl, r3
 8005272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005276:	b10a      	cbz	r2, 800527c <_svfiprintf_r+0x60>
 8005278:	2a25      	cmp	r2, #37	@ 0x25
 800527a:	d1f9      	bne.n	8005270 <_svfiprintf_r+0x54>
 800527c:	ebba 0b04 	subs.w	fp, sl, r4
 8005280:	d00b      	beq.n	800529a <_svfiprintf_r+0x7e>
 8005282:	465b      	mov	r3, fp
 8005284:	4622      	mov	r2, r4
 8005286:	4629      	mov	r1, r5
 8005288:	4638      	mov	r0, r7
 800528a:	f7ff ff6b 	bl	8005164 <__ssputs_r>
 800528e:	3001      	adds	r0, #1
 8005290:	f000 80a7 	beq.w	80053e2 <_svfiprintf_r+0x1c6>
 8005294:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005296:	445a      	add	r2, fp
 8005298:	9209      	str	r2, [sp, #36]	@ 0x24
 800529a:	f89a 3000 	ldrb.w	r3, [sl]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f000 809f 	beq.w	80053e2 <_svfiprintf_r+0x1c6>
 80052a4:	2300      	movs	r3, #0
 80052a6:	f04f 32ff 	mov.w	r2, #4294967295
 80052aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052ae:	f10a 0a01 	add.w	sl, sl, #1
 80052b2:	9304      	str	r3, [sp, #16]
 80052b4:	9307      	str	r3, [sp, #28]
 80052b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80052ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80052bc:	4654      	mov	r4, sl
 80052be:	2205      	movs	r2, #5
 80052c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052c4:	484e      	ldr	r0, [pc, #312]	@ (8005400 <_svfiprintf_r+0x1e4>)
 80052c6:	f000 ffdf 	bl	8006288 <memchr>
 80052ca:	9a04      	ldr	r2, [sp, #16]
 80052cc:	b9d8      	cbnz	r0, 8005306 <_svfiprintf_r+0xea>
 80052ce:	06d0      	lsls	r0, r2, #27
 80052d0:	bf44      	itt	mi
 80052d2:	2320      	movmi	r3, #32
 80052d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052d8:	0711      	lsls	r1, r2, #28
 80052da:	bf44      	itt	mi
 80052dc:	232b      	movmi	r3, #43	@ 0x2b
 80052de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052e2:	f89a 3000 	ldrb.w	r3, [sl]
 80052e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80052e8:	d015      	beq.n	8005316 <_svfiprintf_r+0xfa>
 80052ea:	4654      	mov	r4, sl
 80052ec:	2000      	movs	r0, #0
 80052ee:	f04f 0c0a 	mov.w	ip, #10
 80052f2:	9a07      	ldr	r2, [sp, #28]
 80052f4:	4621      	mov	r1, r4
 80052f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052fa:	3b30      	subs	r3, #48	@ 0x30
 80052fc:	2b09      	cmp	r3, #9
 80052fe:	d94b      	bls.n	8005398 <_svfiprintf_r+0x17c>
 8005300:	b1b0      	cbz	r0, 8005330 <_svfiprintf_r+0x114>
 8005302:	9207      	str	r2, [sp, #28]
 8005304:	e014      	b.n	8005330 <_svfiprintf_r+0x114>
 8005306:	eba0 0308 	sub.w	r3, r0, r8
 800530a:	fa09 f303 	lsl.w	r3, r9, r3
 800530e:	4313      	orrs	r3, r2
 8005310:	46a2      	mov	sl, r4
 8005312:	9304      	str	r3, [sp, #16]
 8005314:	e7d2      	b.n	80052bc <_svfiprintf_r+0xa0>
 8005316:	9b03      	ldr	r3, [sp, #12]
 8005318:	1d19      	adds	r1, r3, #4
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	9103      	str	r1, [sp, #12]
 800531e:	2b00      	cmp	r3, #0
 8005320:	bfbb      	ittet	lt
 8005322:	425b      	neglt	r3, r3
 8005324:	f042 0202 	orrlt.w	r2, r2, #2
 8005328:	9307      	strge	r3, [sp, #28]
 800532a:	9307      	strlt	r3, [sp, #28]
 800532c:	bfb8      	it	lt
 800532e:	9204      	strlt	r2, [sp, #16]
 8005330:	7823      	ldrb	r3, [r4, #0]
 8005332:	2b2e      	cmp	r3, #46	@ 0x2e
 8005334:	d10a      	bne.n	800534c <_svfiprintf_r+0x130>
 8005336:	7863      	ldrb	r3, [r4, #1]
 8005338:	2b2a      	cmp	r3, #42	@ 0x2a
 800533a:	d132      	bne.n	80053a2 <_svfiprintf_r+0x186>
 800533c:	9b03      	ldr	r3, [sp, #12]
 800533e:	3402      	adds	r4, #2
 8005340:	1d1a      	adds	r2, r3, #4
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	9203      	str	r2, [sp, #12]
 8005346:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800534a:	9305      	str	r3, [sp, #20]
 800534c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005404 <_svfiprintf_r+0x1e8>
 8005350:	2203      	movs	r2, #3
 8005352:	4650      	mov	r0, sl
 8005354:	7821      	ldrb	r1, [r4, #0]
 8005356:	f000 ff97 	bl	8006288 <memchr>
 800535a:	b138      	cbz	r0, 800536c <_svfiprintf_r+0x150>
 800535c:	2240      	movs	r2, #64	@ 0x40
 800535e:	9b04      	ldr	r3, [sp, #16]
 8005360:	eba0 000a 	sub.w	r0, r0, sl
 8005364:	4082      	lsls	r2, r0
 8005366:	4313      	orrs	r3, r2
 8005368:	3401      	adds	r4, #1
 800536a:	9304      	str	r3, [sp, #16]
 800536c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005370:	2206      	movs	r2, #6
 8005372:	4825      	ldr	r0, [pc, #148]	@ (8005408 <_svfiprintf_r+0x1ec>)
 8005374:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005378:	f000 ff86 	bl	8006288 <memchr>
 800537c:	2800      	cmp	r0, #0
 800537e:	d036      	beq.n	80053ee <_svfiprintf_r+0x1d2>
 8005380:	4b22      	ldr	r3, [pc, #136]	@ (800540c <_svfiprintf_r+0x1f0>)
 8005382:	bb1b      	cbnz	r3, 80053cc <_svfiprintf_r+0x1b0>
 8005384:	9b03      	ldr	r3, [sp, #12]
 8005386:	3307      	adds	r3, #7
 8005388:	f023 0307 	bic.w	r3, r3, #7
 800538c:	3308      	adds	r3, #8
 800538e:	9303      	str	r3, [sp, #12]
 8005390:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005392:	4433      	add	r3, r6
 8005394:	9309      	str	r3, [sp, #36]	@ 0x24
 8005396:	e76a      	b.n	800526e <_svfiprintf_r+0x52>
 8005398:	460c      	mov	r4, r1
 800539a:	2001      	movs	r0, #1
 800539c:	fb0c 3202 	mla	r2, ip, r2, r3
 80053a0:	e7a8      	b.n	80052f4 <_svfiprintf_r+0xd8>
 80053a2:	2300      	movs	r3, #0
 80053a4:	f04f 0c0a 	mov.w	ip, #10
 80053a8:	4619      	mov	r1, r3
 80053aa:	3401      	adds	r4, #1
 80053ac:	9305      	str	r3, [sp, #20]
 80053ae:	4620      	mov	r0, r4
 80053b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053b4:	3a30      	subs	r2, #48	@ 0x30
 80053b6:	2a09      	cmp	r2, #9
 80053b8:	d903      	bls.n	80053c2 <_svfiprintf_r+0x1a6>
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d0c6      	beq.n	800534c <_svfiprintf_r+0x130>
 80053be:	9105      	str	r1, [sp, #20]
 80053c0:	e7c4      	b.n	800534c <_svfiprintf_r+0x130>
 80053c2:	4604      	mov	r4, r0
 80053c4:	2301      	movs	r3, #1
 80053c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80053ca:	e7f0      	b.n	80053ae <_svfiprintf_r+0x192>
 80053cc:	ab03      	add	r3, sp, #12
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	462a      	mov	r2, r5
 80053d2:	4638      	mov	r0, r7
 80053d4:	4b0e      	ldr	r3, [pc, #56]	@ (8005410 <_svfiprintf_r+0x1f4>)
 80053d6:	a904      	add	r1, sp, #16
 80053d8:	f3af 8000 	nop.w
 80053dc:	1c42      	adds	r2, r0, #1
 80053de:	4606      	mov	r6, r0
 80053e0:	d1d6      	bne.n	8005390 <_svfiprintf_r+0x174>
 80053e2:	89ab      	ldrh	r3, [r5, #12]
 80053e4:	065b      	lsls	r3, r3, #25
 80053e6:	f53f af2d 	bmi.w	8005244 <_svfiprintf_r+0x28>
 80053ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80053ec:	e72c      	b.n	8005248 <_svfiprintf_r+0x2c>
 80053ee:	ab03      	add	r3, sp, #12
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	462a      	mov	r2, r5
 80053f4:	4638      	mov	r0, r7
 80053f6:	4b06      	ldr	r3, [pc, #24]	@ (8005410 <_svfiprintf_r+0x1f4>)
 80053f8:	a904      	add	r1, sp, #16
 80053fa:	f000 fb87 	bl	8005b0c <_printf_i>
 80053fe:	e7ed      	b.n	80053dc <_svfiprintf_r+0x1c0>
 8005400:	08007108 	.word	0x08007108
 8005404:	0800710e 	.word	0x0800710e
 8005408:	08007112 	.word	0x08007112
 800540c:	00000000 	.word	0x00000000
 8005410:	08005165 	.word	0x08005165

08005414 <_sungetc_r>:
 8005414:	b538      	push	{r3, r4, r5, lr}
 8005416:	1c4b      	adds	r3, r1, #1
 8005418:	4614      	mov	r4, r2
 800541a:	d103      	bne.n	8005424 <_sungetc_r+0x10>
 800541c:	f04f 35ff 	mov.w	r5, #4294967295
 8005420:	4628      	mov	r0, r5
 8005422:	bd38      	pop	{r3, r4, r5, pc}
 8005424:	8993      	ldrh	r3, [r2, #12]
 8005426:	b2cd      	uxtb	r5, r1
 8005428:	f023 0320 	bic.w	r3, r3, #32
 800542c:	8193      	strh	r3, [r2, #12]
 800542e:	6853      	ldr	r3, [r2, #4]
 8005430:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005432:	b18a      	cbz	r2, 8005458 <_sungetc_r+0x44>
 8005434:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005436:	429a      	cmp	r2, r3
 8005438:	dd08      	ble.n	800544c <_sungetc_r+0x38>
 800543a:	6823      	ldr	r3, [r4, #0]
 800543c:	1e5a      	subs	r2, r3, #1
 800543e:	6022      	str	r2, [r4, #0]
 8005440:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005444:	6863      	ldr	r3, [r4, #4]
 8005446:	3301      	adds	r3, #1
 8005448:	6063      	str	r3, [r4, #4]
 800544a:	e7e9      	b.n	8005420 <_sungetc_r+0xc>
 800544c:	4621      	mov	r1, r4
 800544e:	f000 fe97 	bl	8006180 <__submore>
 8005452:	2800      	cmp	r0, #0
 8005454:	d0f1      	beq.n	800543a <_sungetc_r+0x26>
 8005456:	e7e1      	b.n	800541c <_sungetc_r+0x8>
 8005458:	6921      	ldr	r1, [r4, #16]
 800545a:	6822      	ldr	r2, [r4, #0]
 800545c:	b141      	cbz	r1, 8005470 <_sungetc_r+0x5c>
 800545e:	4291      	cmp	r1, r2
 8005460:	d206      	bcs.n	8005470 <_sungetc_r+0x5c>
 8005462:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8005466:	42a9      	cmp	r1, r5
 8005468:	d102      	bne.n	8005470 <_sungetc_r+0x5c>
 800546a:	3a01      	subs	r2, #1
 800546c:	6022      	str	r2, [r4, #0]
 800546e:	e7ea      	b.n	8005446 <_sungetc_r+0x32>
 8005470:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8005474:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005478:	6363      	str	r3, [r4, #52]	@ 0x34
 800547a:	2303      	movs	r3, #3
 800547c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800547e:	4623      	mov	r3, r4
 8005480:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005484:	6023      	str	r3, [r4, #0]
 8005486:	2301      	movs	r3, #1
 8005488:	e7de      	b.n	8005448 <_sungetc_r+0x34>

0800548a <__ssrefill_r>:
 800548a:	b510      	push	{r4, lr}
 800548c:	460c      	mov	r4, r1
 800548e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005490:	b169      	cbz	r1, 80054ae <__ssrefill_r+0x24>
 8005492:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005496:	4299      	cmp	r1, r3
 8005498:	d001      	beq.n	800549e <__ssrefill_r+0x14>
 800549a:	f7ff fd6d 	bl	8004f78 <_free_r>
 800549e:	2000      	movs	r0, #0
 80054a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80054a2:	6360      	str	r0, [r4, #52]	@ 0x34
 80054a4:	6063      	str	r3, [r4, #4]
 80054a6:	b113      	cbz	r3, 80054ae <__ssrefill_r+0x24>
 80054a8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80054aa:	6023      	str	r3, [r4, #0]
 80054ac:	bd10      	pop	{r4, pc}
 80054ae:	6923      	ldr	r3, [r4, #16]
 80054b0:	f04f 30ff 	mov.w	r0, #4294967295
 80054b4:	6023      	str	r3, [r4, #0]
 80054b6:	2300      	movs	r3, #0
 80054b8:	6063      	str	r3, [r4, #4]
 80054ba:	89a3      	ldrh	r3, [r4, #12]
 80054bc:	f043 0320 	orr.w	r3, r3, #32
 80054c0:	81a3      	strh	r3, [r4, #12]
 80054c2:	e7f3      	b.n	80054ac <__ssrefill_r+0x22>

080054c4 <__ssvfiscanf_r>:
 80054c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054c8:	460c      	mov	r4, r1
 80054ca:	2100      	movs	r1, #0
 80054cc:	4606      	mov	r6, r0
 80054ce:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80054d2:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80054d6:	49aa      	ldr	r1, [pc, #680]	@ (8005780 <__ssvfiscanf_r+0x2bc>)
 80054d8:	f10d 0804 	add.w	r8, sp, #4
 80054dc:	91a0      	str	r1, [sp, #640]	@ 0x280
 80054de:	49a9      	ldr	r1, [pc, #676]	@ (8005784 <__ssvfiscanf_r+0x2c0>)
 80054e0:	4fa9      	ldr	r7, [pc, #676]	@ (8005788 <__ssvfiscanf_r+0x2c4>)
 80054e2:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80054e6:	91a1      	str	r1, [sp, #644]	@ 0x284
 80054e8:	9300      	str	r3, [sp, #0]
 80054ea:	7813      	ldrb	r3, [r2, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 8159 	beq.w	80057a4 <__ssvfiscanf_r+0x2e0>
 80054f2:	5cf9      	ldrb	r1, [r7, r3]
 80054f4:	1c55      	adds	r5, r2, #1
 80054f6:	f011 0108 	ands.w	r1, r1, #8
 80054fa:	d019      	beq.n	8005530 <__ssvfiscanf_r+0x6c>
 80054fc:	6863      	ldr	r3, [r4, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	dd0f      	ble.n	8005522 <__ssvfiscanf_r+0x5e>
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	781a      	ldrb	r2, [r3, #0]
 8005506:	5cba      	ldrb	r2, [r7, r2]
 8005508:	0712      	lsls	r2, r2, #28
 800550a:	d401      	bmi.n	8005510 <__ssvfiscanf_r+0x4c>
 800550c:	462a      	mov	r2, r5
 800550e:	e7ec      	b.n	80054ea <__ssvfiscanf_r+0x26>
 8005510:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005512:	3301      	adds	r3, #1
 8005514:	3201      	adds	r2, #1
 8005516:	9245      	str	r2, [sp, #276]	@ 0x114
 8005518:	6862      	ldr	r2, [r4, #4]
 800551a:	6023      	str	r3, [r4, #0]
 800551c:	3a01      	subs	r2, #1
 800551e:	6062      	str	r2, [r4, #4]
 8005520:	e7ec      	b.n	80054fc <__ssvfiscanf_r+0x38>
 8005522:	4621      	mov	r1, r4
 8005524:	4630      	mov	r0, r6
 8005526:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005528:	4798      	blx	r3
 800552a:	2800      	cmp	r0, #0
 800552c:	d0e9      	beq.n	8005502 <__ssvfiscanf_r+0x3e>
 800552e:	e7ed      	b.n	800550c <__ssvfiscanf_r+0x48>
 8005530:	2b25      	cmp	r3, #37	@ 0x25
 8005532:	d012      	beq.n	800555a <__ssvfiscanf_r+0x96>
 8005534:	4699      	mov	r9, r3
 8005536:	6863      	ldr	r3, [r4, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	f340 8094 	ble.w	8005666 <__ssvfiscanf_r+0x1a2>
 800553e:	6822      	ldr	r2, [r4, #0]
 8005540:	7813      	ldrb	r3, [r2, #0]
 8005542:	454b      	cmp	r3, r9
 8005544:	f040 812e 	bne.w	80057a4 <__ssvfiscanf_r+0x2e0>
 8005548:	6863      	ldr	r3, [r4, #4]
 800554a:	3201      	adds	r2, #1
 800554c:	3b01      	subs	r3, #1
 800554e:	6063      	str	r3, [r4, #4]
 8005550:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8005552:	6022      	str	r2, [r4, #0]
 8005554:	3301      	adds	r3, #1
 8005556:	9345      	str	r3, [sp, #276]	@ 0x114
 8005558:	e7d8      	b.n	800550c <__ssvfiscanf_r+0x48>
 800555a:	9141      	str	r1, [sp, #260]	@ 0x104
 800555c:	9143      	str	r1, [sp, #268]	@ 0x10c
 800555e:	7853      	ldrb	r3, [r2, #1]
 8005560:	2b2a      	cmp	r3, #42	@ 0x2a
 8005562:	bf04      	itt	eq
 8005564:	2310      	moveq	r3, #16
 8005566:	1c95      	addeq	r5, r2, #2
 8005568:	f04f 020a 	mov.w	r2, #10
 800556c:	bf08      	it	eq
 800556e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8005570:	46a9      	mov	r9, r5
 8005572:	f819 1b01 	ldrb.w	r1, [r9], #1
 8005576:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800557a:	2b09      	cmp	r3, #9
 800557c:	d91e      	bls.n	80055bc <__ssvfiscanf_r+0xf8>
 800557e:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 800578c <__ssvfiscanf_r+0x2c8>
 8005582:	2203      	movs	r2, #3
 8005584:	4650      	mov	r0, sl
 8005586:	f000 fe7f 	bl	8006288 <memchr>
 800558a:	b138      	cbz	r0, 800559c <__ssvfiscanf_r+0xd8>
 800558c:	2301      	movs	r3, #1
 800558e:	464d      	mov	r5, r9
 8005590:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005592:	eba0 000a 	sub.w	r0, r0, sl
 8005596:	4083      	lsls	r3, r0
 8005598:	4313      	orrs	r3, r2
 800559a:	9341      	str	r3, [sp, #260]	@ 0x104
 800559c:	f815 3b01 	ldrb.w	r3, [r5], #1
 80055a0:	2b78      	cmp	r3, #120	@ 0x78
 80055a2:	d806      	bhi.n	80055b2 <__ssvfiscanf_r+0xee>
 80055a4:	2b57      	cmp	r3, #87	@ 0x57
 80055a6:	d810      	bhi.n	80055ca <__ssvfiscanf_r+0x106>
 80055a8:	2b25      	cmp	r3, #37	@ 0x25
 80055aa:	d0c3      	beq.n	8005534 <__ssvfiscanf_r+0x70>
 80055ac:	d856      	bhi.n	800565c <__ssvfiscanf_r+0x198>
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d064      	beq.n	800567c <__ssvfiscanf_r+0x1b8>
 80055b2:	2303      	movs	r3, #3
 80055b4:	9347      	str	r3, [sp, #284]	@ 0x11c
 80055b6:	230a      	movs	r3, #10
 80055b8:	9342      	str	r3, [sp, #264]	@ 0x108
 80055ba:	e077      	b.n	80056ac <__ssvfiscanf_r+0x1e8>
 80055bc:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80055be:	464d      	mov	r5, r9
 80055c0:	fb02 1103 	mla	r1, r2, r3, r1
 80055c4:	3930      	subs	r1, #48	@ 0x30
 80055c6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80055c8:	e7d2      	b.n	8005570 <__ssvfiscanf_r+0xac>
 80055ca:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80055ce:	2a20      	cmp	r2, #32
 80055d0:	d8ef      	bhi.n	80055b2 <__ssvfiscanf_r+0xee>
 80055d2:	a101      	add	r1, pc, #4	@ (adr r1, 80055d8 <__ssvfiscanf_r+0x114>)
 80055d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80055d8:	0800568b 	.word	0x0800568b
 80055dc:	080055b3 	.word	0x080055b3
 80055e0:	080055b3 	.word	0x080055b3
 80055e4:	080056e5 	.word	0x080056e5
 80055e8:	080055b3 	.word	0x080055b3
 80055ec:	080055b3 	.word	0x080055b3
 80055f0:	080055b3 	.word	0x080055b3
 80055f4:	080055b3 	.word	0x080055b3
 80055f8:	080055b3 	.word	0x080055b3
 80055fc:	080055b3 	.word	0x080055b3
 8005600:	080055b3 	.word	0x080055b3
 8005604:	080056fb 	.word	0x080056fb
 8005608:	080056e1 	.word	0x080056e1
 800560c:	08005663 	.word	0x08005663
 8005610:	08005663 	.word	0x08005663
 8005614:	08005663 	.word	0x08005663
 8005618:	080055b3 	.word	0x080055b3
 800561c:	0800569d 	.word	0x0800569d
 8005620:	080055b3 	.word	0x080055b3
 8005624:	080055b3 	.word	0x080055b3
 8005628:	080055b3 	.word	0x080055b3
 800562c:	080055b3 	.word	0x080055b3
 8005630:	0800570b 	.word	0x0800570b
 8005634:	080056a5 	.word	0x080056a5
 8005638:	08005683 	.word	0x08005683
 800563c:	080055b3 	.word	0x080055b3
 8005640:	080055b3 	.word	0x080055b3
 8005644:	08005707 	.word	0x08005707
 8005648:	080055b3 	.word	0x080055b3
 800564c:	080056e1 	.word	0x080056e1
 8005650:	080055b3 	.word	0x080055b3
 8005654:	080055b3 	.word	0x080055b3
 8005658:	0800568b 	.word	0x0800568b
 800565c:	3b45      	subs	r3, #69	@ 0x45
 800565e:	2b02      	cmp	r3, #2
 8005660:	d8a7      	bhi.n	80055b2 <__ssvfiscanf_r+0xee>
 8005662:	2305      	movs	r3, #5
 8005664:	e021      	b.n	80056aa <__ssvfiscanf_r+0x1e6>
 8005666:	4621      	mov	r1, r4
 8005668:	4630      	mov	r0, r6
 800566a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800566c:	4798      	blx	r3
 800566e:	2800      	cmp	r0, #0
 8005670:	f43f af65 	beq.w	800553e <__ssvfiscanf_r+0x7a>
 8005674:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8005676:	2800      	cmp	r0, #0
 8005678:	f040 808c 	bne.w	8005794 <__ssvfiscanf_r+0x2d0>
 800567c:	f04f 30ff 	mov.w	r0, #4294967295
 8005680:	e08c      	b.n	800579c <__ssvfiscanf_r+0x2d8>
 8005682:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005684:	f042 0220 	orr.w	r2, r2, #32
 8005688:	9241      	str	r2, [sp, #260]	@ 0x104
 800568a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800568c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005690:	9241      	str	r2, [sp, #260]	@ 0x104
 8005692:	2210      	movs	r2, #16
 8005694:	2b6e      	cmp	r3, #110	@ 0x6e
 8005696:	9242      	str	r2, [sp, #264]	@ 0x108
 8005698:	d902      	bls.n	80056a0 <__ssvfiscanf_r+0x1dc>
 800569a:	e005      	b.n	80056a8 <__ssvfiscanf_r+0x1e4>
 800569c:	2300      	movs	r3, #0
 800569e:	9342      	str	r3, [sp, #264]	@ 0x108
 80056a0:	2303      	movs	r3, #3
 80056a2:	e002      	b.n	80056aa <__ssvfiscanf_r+0x1e6>
 80056a4:	2308      	movs	r3, #8
 80056a6:	9342      	str	r3, [sp, #264]	@ 0x108
 80056a8:	2304      	movs	r3, #4
 80056aa:	9347      	str	r3, [sp, #284]	@ 0x11c
 80056ac:	6863      	ldr	r3, [r4, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	dd39      	ble.n	8005726 <__ssvfiscanf_r+0x262>
 80056b2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80056b4:	0659      	lsls	r1, r3, #25
 80056b6:	d404      	bmi.n	80056c2 <__ssvfiscanf_r+0x1fe>
 80056b8:	6823      	ldr	r3, [r4, #0]
 80056ba:	781a      	ldrb	r2, [r3, #0]
 80056bc:	5cba      	ldrb	r2, [r7, r2]
 80056be:	0712      	lsls	r2, r2, #28
 80056c0:	d438      	bmi.n	8005734 <__ssvfiscanf_r+0x270>
 80056c2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	dc47      	bgt.n	8005758 <__ssvfiscanf_r+0x294>
 80056c8:	466b      	mov	r3, sp
 80056ca:	4622      	mov	r2, r4
 80056cc:	4630      	mov	r0, r6
 80056ce:	a941      	add	r1, sp, #260	@ 0x104
 80056d0:	f000 fb3c 	bl	8005d4c <_scanf_chars>
 80056d4:	2801      	cmp	r0, #1
 80056d6:	d065      	beq.n	80057a4 <__ssvfiscanf_r+0x2e0>
 80056d8:	2802      	cmp	r0, #2
 80056da:	f47f af17 	bne.w	800550c <__ssvfiscanf_r+0x48>
 80056de:	e7c9      	b.n	8005674 <__ssvfiscanf_r+0x1b0>
 80056e0:	220a      	movs	r2, #10
 80056e2:	e7d7      	b.n	8005694 <__ssvfiscanf_r+0x1d0>
 80056e4:	4629      	mov	r1, r5
 80056e6:	4640      	mov	r0, r8
 80056e8:	f000 fd11 	bl	800610e <__sccl>
 80056ec:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80056ee:	4605      	mov	r5, r0
 80056f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056f4:	9341      	str	r3, [sp, #260]	@ 0x104
 80056f6:	2301      	movs	r3, #1
 80056f8:	e7d7      	b.n	80056aa <__ssvfiscanf_r+0x1e6>
 80056fa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80056fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005700:	9341      	str	r3, [sp, #260]	@ 0x104
 8005702:	2300      	movs	r3, #0
 8005704:	e7d1      	b.n	80056aa <__ssvfiscanf_r+0x1e6>
 8005706:	2302      	movs	r3, #2
 8005708:	e7cf      	b.n	80056aa <__ssvfiscanf_r+0x1e6>
 800570a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800570c:	06c3      	lsls	r3, r0, #27
 800570e:	f53f aefd 	bmi.w	800550c <__ssvfiscanf_r+0x48>
 8005712:	9b00      	ldr	r3, [sp, #0]
 8005714:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005716:	1d19      	adds	r1, r3, #4
 8005718:	9100      	str	r1, [sp, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	07c0      	lsls	r0, r0, #31
 800571e:	bf4c      	ite	mi
 8005720:	801a      	strhmi	r2, [r3, #0]
 8005722:	601a      	strpl	r2, [r3, #0]
 8005724:	e6f2      	b.n	800550c <__ssvfiscanf_r+0x48>
 8005726:	4621      	mov	r1, r4
 8005728:	4630      	mov	r0, r6
 800572a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800572c:	4798      	blx	r3
 800572e:	2800      	cmp	r0, #0
 8005730:	d0bf      	beq.n	80056b2 <__ssvfiscanf_r+0x1ee>
 8005732:	e79f      	b.n	8005674 <__ssvfiscanf_r+0x1b0>
 8005734:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005736:	3201      	adds	r2, #1
 8005738:	9245      	str	r2, [sp, #276]	@ 0x114
 800573a:	6862      	ldr	r2, [r4, #4]
 800573c:	3a01      	subs	r2, #1
 800573e:	2a00      	cmp	r2, #0
 8005740:	6062      	str	r2, [r4, #4]
 8005742:	dd02      	ble.n	800574a <__ssvfiscanf_r+0x286>
 8005744:	3301      	adds	r3, #1
 8005746:	6023      	str	r3, [r4, #0]
 8005748:	e7b6      	b.n	80056b8 <__ssvfiscanf_r+0x1f4>
 800574a:	4621      	mov	r1, r4
 800574c:	4630      	mov	r0, r6
 800574e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005750:	4798      	blx	r3
 8005752:	2800      	cmp	r0, #0
 8005754:	d0b0      	beq.n	80056b8 <__ssvfiscanf_r+0x1f4>
 8005756:	e78d      	b.n	8005674 <__ssvfiscanf_r+0x1b0>
 8005758:	2b04      	cmp	r3, #4
 800575a:	dc06      	bgt.n	800576a <__ssvfiscanf_r+0x2a6>
 800575c:	466b      	mov	r3, sp
 800575e:	4622      	mov	r2, r4
 8005760:	4630      	mov	r0, r6
 8005762:	a941      	add	r1, sp, #260	@ 0x104
 8005764:	f000 fb4c 	bl	8005e00 <_scanf_i>
 8005768:	e7b4      	b.n	80056d4 <__ssvfiscanf_r+0x210>
 800576a:	4b09      	ldr	r3, [pc, #36]	@ (8005790 <__ssvfiscanf_r+0x2cc>)
 800576c:	2b00      	cmp	r3, #0
 800576e:	f43f aecd 	beq.w	800550c <__ssvfiscanf_r+0x48>
 8005772:	466b      	mov	r3, sp
 8005774:	4622      	mov	r2, r4
 8005776:	4630      	mov	r0, r6
 8005778:	a941      	add	r1, sp, #260	@ 0x104
 800577a:	f3af 8000 	nop.w
 800577e:	e7a9      	b.n	80056d4 <__ssvfiscanf_r+0x210>
 8005780:	08005415 	.word	0x08005415
 8005784:	0800548b 	.word	0x0800548b
 8005788:	08007157 	.word	0x08007157
 800578c:	0800710e 	.word	0x0800710e
 8005790:	00000000 	.word	0x00000000
 8005794:	89a3      	ldrh	r3, [r4, #12]
 8005796:	065b      	lsls	r3, r3, #25
 8005798:	f53f af70 	bmi.w	800567c <__ssvfiscanf_r+0x1b8>
 800579c:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80057a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057a4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80057a6:	e7f9      	b.n	800579c <__ssvfiscanf_r+0x2d8>

080057a8 <__sfputc_r>:
 80057a8:	6893      	ldr	r3, [r2, #8]
 80057aa:	b410      	push	{r4}
 80057ac:	3b01      	subs	r3, #1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	6093      	str	r3, [r2, #8]
 80057b2:	da07      	bge.n	80057c4 <__sfputc_r+0x1c>
 80057b4:	6994      	ldr	r4, [r2, #24]
 80057b6:	42a3      	cmp	r3, r4
 80057b8:	db01      	blt.n	80057be <__sfputc_r+0x16>
 80057ba:	290a      	cmp	r1, #10
 80057bc:	d102      	bne.n	80057c4 <__sfputc_r+0x1c>
 80057be:	bc10      	pop	{r4}
 80057c0:	f7ff baa9 	b.w	8004d16 <__swbuf_r>
 80057c4:	6813      	ldr	r3, [r2, #0]
 80057c6:	1c58      	adds	r0, r3, #1
 80057c8:	6010      	str	r0, [r2, #0]
 80057ca:	7019      	strb	r1, [r3, #0]
 80057cc:	4608      	mov	r0, r1
 80057ce:	bc10      	pop	{r4}
 80057d0:	4770      	bx	lr

080057d2 <__sfputs_r>:
 80057d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d4:	4606      	mov	r6, r0
 80057d6:	460f      	mov	r7, r1
 80057d8:	4614      	mov	r4, r2
 80057da:	18d5      	adds	r5, r2, r3
 80057dc:	42ac      	cmp	r4, r5
 80057de:	d101      	bne.n	80057e4 <__sfputs_r+0x12>
 80057e0:	2000      	movs	r0, #0
 80057e2:	e007      	b.n	80057f4 <__sfputs_r+0x22>
 80057e4:	463a      	mov	r2, r7
 80057e6:	4630      	mov	r0, r6
 80057e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057ec:	f7ff ffdc 	bl	80057a8 <__sfputc_r>
 80057f0:	1c43      	adds	r3, r0, #1
 80057f2:	d1f3      	bne.n	80057dc <__sfputs_r+0xa>
 80057f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080057f8 <_vfiprintf_r>:
 80057f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057fc:	460d      	mov	r5, r1
 80057fe:	4614      	mov	r4, r2
 8005800:	4698      	mov	r8, r3
 8005802:	4606      	mov	r6, r0
 8005804:	b09d      	sub	sp, #116	@ 0x74
 8005806:	b118      	cbz	r0, 8005810 <_vfiprintf_r+0x18>
 8005808:	6a03      	ldr	r3, [r0, #32]
 800580a:	b90b      	cbnz	r3, 8005810 <_vfiprintf_r+0x18>
 800580c:	f7ff f932 	bl	8004a74 <__sinit>
 8005810:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005812:	07d9      	lsls	r1, r3, #31
 8005814:	d405      	bmi.n	8005822 <_vfiprintf_r+0x2a>
 8005816:	89ab      	ldrh	r3, [r5, #12]
 8005818:	059a      	lsls	r2, r3, #22
 800581a:	d402      	bmi.n	8005822 <_vfiprintf_r+0x2a>
 800581c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800581e:	f7ff fb9a 	bl	8004f56 <__retarget_lock_acquire_recursive>
 8005822:	89ab      	ldrh	r3, [r5, #12]
 8005824:	071b      	lsls	r3, r3, #28
 8005826:	d501      	bpl.n	800582c <_vfiprintf_r+0x34>
 8005828:	692b      	ldr	r3, [r5, #16]
 800582a:	b99b      	cbnz	r3, 8005854 <_vfiprintf_r+0x5c>
 800582c:	4629      	mov	r1, r5
 800582e:	4630      	mov	r0, r6
 8005830:	f7ff fab0 	bl	8004d94 <__swsetup_r>
 8005834:	b170      	cbz	r0, 8005854 <_vfiprintf_r+0x5c>
 8005836:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005838:	07dc      	lsls	r4, r3, #31
 800583a:	d504      	bpl.n	8005846 <_vfiprintf_r+0x4e>
 800583c:	f04f 30ff 	mov.w	r0, #4294967295
 8005840:	b01d      	add	sp, #116	@ 0x74
 8005842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005846:	89ab      	ldrh	r3, [r5, #12]
 8005848:	0598      	lsls	r0, r3, #22
 800584a:	d4f7      	bmi.n	800583c <_vfiprintf_r+0x44>
 800584c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800584e:	f7ff fb83 	bl	8004f58 <__retarget_lock_release_recursive>
 8005852:	e7f3      	b.n	800583c <_vfiprintf_r+0x44>
 8005854:	2300      	movs	r3, #0
 8005856:	9309      	str	r3, [sp, #36]	@ 0x24
 8005858:	2320      	movs	r3, #32
 800585a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800585e:	2330      	movs	r3, #48	@ 0x30
 8005860:	f04f 0901 	mov.w	r9, #1
 8005864:	f8cd 800c 	str.w	r8, [sp, #12]
 8005868:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005a14 <_vfiprintf_r+0x21c>
 800586c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005870:	4623      	mov	r3, r4
 8005872:	469a      	mov	sl, r3
 8005874:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005878:	b10a      	cbz	r2, 800587e <_vfiprintf_r+0x86>
 800587a:	2a25      	cmp	r2, #37	@ 0x25
 800587c:	d1f9      	bne.n	8005872 <_vfiprintf_r+0x7a>
 800587e:	ebba 0b04 	subs.w	fp, sl, r4
 8005882:	d00b      	beq.n	800589c <_vfiprintf_r+0xa4>
 8005884:	465b      	mov	r3, fp
 8005886:	4622      	mov	r2, r4
 8005888:	4629      	mov	r1, r5
 800588a:	4630      	mov	r0, r6
 800588c:	f7ff ffa1 	bl	80057d2 <__sfputs_r>
 8005890:	3001      	adds	r0, #1
 8005892:	f000 80a7 	beq.w	80059e4 <_vfiprintf_r+0x1ec>
 8005896:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005898:	445a      	add	r2, fp
 800589a:	9209      	str	r2, [sp, #36]	@ 0x24
 800589c:	f89a 3000 	ldrb.w	r3, [sl]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 809f 	beq.w	80059e4 <_vfiprintf_r+0x1ec>
 80058a6:	2300      	movs	r3, #0
 80058a8:	f04f 32ff 	mov.w	r2, #4294967295
 80058ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058b0:	f10a 0a01 	add.w	sl, sl, #1
 80058b4:	9304      	str	r3, [sp, #16]
 80058b6:	9307      	str	r3, [sp, #28]
 80058b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80058bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80058be:	4654      	mov	r4, sl
 80058c0:	2205      	movs	r2, #5
 80058c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058c6:	4853      	ldr	r0, [pc, #332]	@ (8005a14 <_vfiprintf_r+0x21c>)
 80058c8:	f000 fcde 	bl	8006288 <memchr>
 80058cc:	9a04      	ldr	r2, [sp, #16]
 80058ce:	b9d8      	cbnz	r0, 8005908 <_vfiprintf_r+0x110>
 80058d0:	06d1      	lsls	r1, r2, #27
 80058d2:	bf44      	itt	mi
 80058d4:	2320      	movmi	r3, #32
 80058d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80058da:	0713      	lsls	r3, r2, #28
 80058dc:	bf44      	itt	mi
 80058de:	232b      	movmi	r3, #43	@ 0x2b
 80058e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80058e4:	f89a 3000 	ldrb.w	r3, [sl]
 80058e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80058ea:	d015      	beq.n	8005918 <_vfiprintf_r+0x120>
 80058ec:	4654      	mov	r4, sl
 80058ee:	2000      	movs	r0, #0
 80058f0:	f04f 0c0a 	mov.w	ip, #10
 80058f4:	9a07      	ldr	r2, [sp, #28]
 80058f6:	4621      	mov	r1, r4
 80058f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058fc:	3b30      	subs	r3, #48	@ 0x30
 80058fe:	2b09      	cmp	r3, #9
 8005900:	d94b      	bls.n	800599a <_vfiprintf_r+0x1a2>
 8005902:	b1b0      	cbz	r0, 8005932 <_vfiprintf_r+0x13a>
 8005904:	9207      	str	r2, [sp, #28]
 8005906:	e014      	b.n	8005932 <_vfiprintf_r+0x13a>
 8005908:	eba0 0308 	sub.w	r3, r0, r8
 800590c:	fa09 f303 	lsl.w	r3, r9, r3
 8005910:	4313      	orrs	r3, r2
 8005912:	46a2      	mov	sl, r4
 8005914:	9304      	str	r3, [sp, #16]
 8005916:	e7d2      	b.n	80058be <_vfiprintf_r+0xc6>
 8005918:	9b03      	ldr	r3, [sp, #12]
 800591a:	1d19      	adds	r1, r3, #4
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	9103      	str	r1, [sp, #12]
 8005920:	2b00      	cmp	r3, #0
 8005922:	bfbb      	ittet	lt
 8005924:	425b      	neglt	r3, r3
 8005926:	f042 0202 	orrlt.w	r2, r2, #2
 800592a:	9307      	strge	r3, [sp, #28]
 800592c:	9307      	strlt	r3, [sp, #28]
 800592e:	bfb8      	it	lt
 8005930:	9204      	strlt	r2, [sp, #16]
 8005932:	7823      	ldrb	r3, [r4, #0]
 8005934:	2b2e      	cmp	r3, #46	@ 0x2e
 8005936:	d10a      	bne.n	800594e <_vfiprintf_r+0x156>
 8005938:	7863      	ldrb	r3, [r4, #1]
 800593a:	2b2a      	cmp	r3, #42	@ 0x2a
 800593c:	d132      	bne.n	80059a4 <_vfiprintf_r+0x1ac>
 800593e:	9b03      	ldr	r3, [sp, #12]
 8005940:	3402      	adds	r4, #2
 8005942:	1d1a      	adds	r2, r3, #4
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	9203      	str	r2, [sp, #12]
 8005948:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800594c:	9305      	str	r3, [sp, #20]
 800594e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005a18 <_vfiprintf_r+0x220>
 8005952:	2203      	movs	r2, #3
 8005954:	4650      	mov	r0, sl
 8005956:	7821      	ldrb	r1, [r4, #0]
 8005958:	f000 fc96 	bl	8006288 <memchr>
 800595c:	b138      	cbz	r0, 800596e <_vfiprintf_r+0x176>
 800595e:	2240      	movs	r2, #64	@ 0x40
 8005960:	9b04      	ldr	r3, [sp, #16]
 8005962:	eba0 000a 	sub.w	r0, r0, sl
 8005966:	4082      	lsls	r2, r0
 8005968:	4313      	orrs	r3, r2
 800596a:	3401      	adds	r4, #1
 800596c:	9304      	str	r3, [sp, #16]
 800596e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005972:	2206      	movs	r2, #6
 8005974:	4829      	ldr	r0, [pc, #164]	@ (8005a1c <_vfiprintf_r+0x224>)
 8005976:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800597a:	f000 fc85 	bl	8006288 <memchr>
 800597e:	2800      	cmp	r0, #0
 8005980:	d03f      	beq.n	8005a02 <_vfiprintf_r+0x20a>
 8005982:	4b27      	ldr	r3, [pc, #156]	@ (8005a20 <_vfiprintf_r+0x228>)
 8005984:	bb1b      	cbnz	r3, 80059ce <_vfiprintf_r+0x1d6>
 8005986:	9b03      	ldr	r3, [sp, #12]
 8005988:	3307      	adds	r3, #7
 800598a:	f023 0307 	bic.w	r3, r3, #7
 800598e:	3308      	adds	r3, #8
 8005990:	9303      	str	r3, [sp, #12]
 8005992:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005994:	443b      	add	r3, r7
 8005996:	9309      	str	r3, [sp, #36]	@ 0x24
 8005998:	e76a      	b.n	8005870 <_vfiprintf_r+0x78>
 800599a:	460c      	mov	r4, r1
 800599c:	2001      	movs	r0, #1
 800599e:	fb0c 3202 	mla	r2, ip, r2, r3
 80059a2:	e7a8      	b.n	80058f6 <_vfiprintf_r+0xfe>
 80059a4:	2300      	movs	r3, #0
 80059a6:	f04f 0c0a 	mov.w	ip, #10
 80059aa:	4619      	mov	r1, r3
 80059ac:	3401      	adds	r4, #1
 80059ae:	9305      	str	r3, [sp, #20]
 80059b0:	4620      	mov	r0, r4
 80059b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059b6:	3a30      	subs	r2, #48	@ 0x30
 80059b8:	2a09      	cmp	r2, #9
 80059ba:	d903      	bls.n	80059c4 <_vfiprintf_r+0x1cc>
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d0c6      	beq.n	800594e <_vfiprintf_r+0x156>
 80059c0:	9105      	str	r1, [sp, #20]
 80059c2:	e7c4      	b.n	800594e <_vfiprintf_r+0x156>
 80059c4:	4604      	mov	r4, r0
 80059c6:	2301      	movs	r3, #1
 80059c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80059cc:	e7f0      	b.n	80059b0 <_vfiprintf_r+0x1b8>
 80059ce:	ab03      	add	r3, sp, #12
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	462a      	mov	r2, r5
 80059d4:	4630      	mov	r0, r6
 80059d6:	4b13      	ldr	r3, [pc, #76]	@ (8005a24 <_vfiprintf_r+0x22c>)
 80059d8:	a904      	add	r1, sp, #16
 80059da:	f3af 8000 	nop.w
 80059de:	4607      	mov	r7, r0
 80059e0:	1c78      	adds	r0, r7, #1
 80059e2:	d1d6      	bne.n	8005992 <_vfiprintf_r+0x19a>
 80059e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80059e6:	07d9      	lsls	r1, r3, #31
 80059e8:	d405      	bmi.n	80059f6 <_vfiprintf_r+0x1fe>
 80059ea:	89ab      	ldrh	r3, [r5, #12]
 80059ec:	059a      	lsls	r2, r3, #22
 80059ee:	d402      	bmi.n	80059f6 <_vfiprintf_r+0x1fe>
 80059f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80059f2:	f7ff fab1 	bl	8004f58 <__retarget_lock_release_recursive>
 80059f6:	89ab      	ldrh	r3, [r5, #12]
 80059f8:	065b      	lsls	r3, r3, #25
 80059fa:	f53f af1f 	bmi.w	800583c <_vfiprintf_r+0x44>
 80059fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a00:	e71e      	b.n	8005840 <_vfiprintf_r+0x48>
 8005a02:	ab03      	add	r3, sp, #12
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	462a      	mov	r2, r5
 8005a08:	4630      	mov	r0, r6
 8005a0a:	4b06      	ldr	r3, [pc, #24]	@ (8005a24 <_vfiprintf_r+0x22c>)
 8005a0c:	a904      	add	r1, sp, #16
 8005a0e:	f000 f87d 	bl	8005b0c <_printf_i>
 8005a12:	e7e4      	b.n	80059de <_vfiprintf_r+0x1e6>
 8005a14:	08007108 	.word	0x08007108
 8005a18:	0800710e 	.word	0x0800710e
 8005a1c:	08007112 	.word	0x08007112
 8005a20:	00000000 	.word	0x00000000
 8005a24:	080057d3 	.word	0x080057d3

08005a28 <_printf_common>:
 8005a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a2c:	4616      	mov	r6, r2
 8005a2e:	4698      	mov	r8, r3
 8005a30:	688a      	ldr	r2, [r1, #8]
 8005a32:	690b      	ldr	r3, [r1, #16]
 8005a34:	4607      	mov	r7, r0
 8005a36:	4293      	cmp	r3, r2
 8005a38:	bfb8      	it	lt
 8005a3a:	4613      	movlt	r3, r2
 8005a3c:	6033      	str	r3, [r6, #0]
 8005a3e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a42:	460c      	mov	r4, r1
 8005a44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a48:	b10a      	cbz	r2, 8005a4e <_printf_common+0x26>
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	6033      	str	r3, [r6, #0]
 8005a4e:	6823      	ldr	r3, [r4, #0]
 8005a50:	0699      	lsls	r1, r3, #26
 8005a52:	bf42      	ittt	mi
 8005a54:	6833      	ldrmi	r3, [r6, #0]
 8005a56:	3302      	addmi	r3, #2
 8005a58:	6033      	strmi	r3, [r6, #0]
 8005a5a:	6825      	ldr	r5, [r4, #0]
 8005a5c:	f015 0506 	ands.w	r5, r5, #6
 8005a60:	d106      	bne.n	8005a70 <_printf_common+0x48>
 8005a62:	f104 0a19 	add.w	sl, r4, #25
 8005a66:	68e3      	ldr	r3, [r4, #12]
 8005a68:	6832      	ldr	r2, [r6, #0]
 8005a6a:	1a9b      	subs	r3, r3, r2
 8005a6c:	42ab      	cmp	r3, r5
 8005a6e:	dc2b      	bgt.n	8005ac8 <_printf_common+0xa0>
 8005a70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a74:	6822      	ldr	r2, [r4, #0]
 8005a76:	3b00      	subs	r3, #0
 8005a78:	bf18      	it	ne
 8005a7a:	2301      	movne	r3, #1
 8005a7c:	0692      	lsls	r2, r2, #26
 8005a7e:	d430      	bmi.n	8005ae2 <_printf_common+0xba>
 8005a80:	4641      	mov	r1, r8
 8005a82:	4638      	mov	r0, r7
 8005a84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a88:	47c8      	blx	r9
 8005a8a:	3001      	adds	r0, #1
 8005a8c:	d023      	beq.n	8005ad6 <_printf_common+0xae>
 8005a8e:	6823      	ldr	r3, [r4, #0]
 8005a90:	6922      	ldr	r2, [r4, #16]
 8005a92:	f003 0306 	and.w	r3, r3, #6
 8005a96:	2b04      	cmp	r3, #4
 8005a98:	bf14      	ite	ne
 8005a9a:	2500      	movne	r5, #0
 8005a9c:	6833      	ldreq	r3, [r6, #0]
 8005a9e:	f04f 0600 	mov.w	r6, #0
 8005aa2:	bf08      	it	eq
 8005aa4:	68e5      	ldreq	r5, [r4, #12]
 8005aa6:	f104 041a 	add.w	r4, r4, #26
 8005aaa:	bf08      	it	eq
 8005aac:	1aed      	subeq	r5, r5, r3
 8005aae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005ab2:	bf08      	it	eq
 8005ab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	bfc4      	itt	gt
 8005abc:	1a9b      	subgt	r3, r3, r2
 8005abe:	18ed      	addgt	r5, r5, r3
 8005ac0:	42b5      	cmp	r5, r6
 8005ac2:	d11a      	bne.n	8005afa <_printf_common+0xd2>
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	e008      	b.n	8005ada <_printf_common+0xb2>
 8005ac8:	2301      	movs	r3, #1
 8005aca:	4652      	mov	r2, sl
 8005acc:	4641      	mov	r1, r8
 8005ace:	4638      	mov	r0, r7
 8005ad0:	47c8      	blx	r9
 8005ad2:	3001      	adds	r0, #1
 8005ad4:	d103      	bne.n	8005ade <_printf_common+0xb6>
 8005ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8005ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ade:	3501      	adds	r5, #1
 8005ae0:	e7c1      	b.n	8005a66 <_printf_common+0x3e>
 8005ae2:	2030      	movs	r0, #48	@ 0x30
 8005ae4:	18e1      	adds	r1, r4, r3
 8005ae6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005aea:	1c5a      	adds	r2, r3, #1
 8005aec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005af0:	4422      	add	r2, r4
 8005af2:	3302      	adds	r3, #2
 8005af4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005af8:	e7c2      	b.n	8005a80 <_printf_common+0x58>
 8005afa:	2301      	movs	r3, #1
 8005afc:	4622      	mov	r2, r4
 8005afe:	4641      	mov	r1, r8
 8005b00:	4638      	mov	r0, r7
 8005b02:	47c8      	blx	r9
 8005b04:	3001      	adds	r0, #1
 8005b06:	d0e6      	beq.n	8005ad6 <_printf_common+0xae>
 8005b08:	3601      	adds	r6, #1
 8005b0a:	e7d9      	b.n	8005ac0 <_printf_common+0x98>

08005b0c <_printf_i>:
 8005b0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b10:	7e0f      	ldrb	r7, [r1, #24]
 8005b12:	4691      	mov	r9, r2
 8005b14:	2f78      	cmp	r7, #120	@ 0x78
 8005b16:	4680      	mov	r8, r0
 8005b18:	460c      	mov	r4, r1
 8005b1a:	469a      	mov	sl, r3
 8005b1c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b22:	d807      	bhi.n	8005b34 <_printf_i+0x28>
 8005b24:	2f62      	cmp	r7, #98	@ 0x62
 8005b26:	d80a      	bhi.n	8005b3e <_printf_i+0x32>
 8005b28:	2f00      	cmp	r7, #0
 8005b2a:	f000 80d3 	beq.w	8005cd4 <_printf_i+0x1c8>
 8005b2e:	2f58      	cmp	r7, #88	@ 0x58
 8005b30:	f000 80ba 	beq.w	8005ca8 <_printf_i+0x19c>
 8005b34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b3c:	e03a      	b.n	8005bb4 <_printf_i+0xa8>
 8005b3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b42:	2b15      	cmp	r3, #21
 8005b44:	d8f6      	bhi.n	8005b34 <_printf_i+0x28>
 8005b46:	a101      	add	r1, pc, #4	@ (adr r1, 8005b4c <_printf_i+0x40>)
 8005b48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b4c:	08005ba5 	.word	0x08005ba5
 8005b50:	08005bb9 	.word	0x08005bb9
 8005b54:	08005b35 	.word	0x08005b35
 8005b58:	08005b35 	.word	0x08005b35
 8005b5c:	08005b35 	.word	0x08005b35
 8005b60:	08005b35 	.word	0x08005b35
 8005b64:	08005bb9 	.word	0x08005bb9
 8005b68:	08005b35 	.word	0x08005b35
 8005b6c:	08005b35 	.word	0x08005b35
 8005b70:	08005b35 	.word	0x08005b35
 8005b74:	08005b35 	.word	0x08005b35
 8005b78:	08005cbb 	.word	0x08005cbb
 8005b7c:	08005be3 	.word	0x08005be3
 8005b80:	08005c75 	.word	0x08005c75
 8005b84:	08005b35 	.word	0x08005b35
 8005b88:	08005b35 	.word	0x08005b35
 8005b8c:	08005cdd 	.word	0x08005cdd
 8005b90:	08005b35 	.word	0x08005b35
 8005b94:	08005be3 	.word	0x08005be3
 8005b98:	08005b35 	.word	0x08005b35
 8005b9c:	08005b35 	.word	0x08005b35
 8005ba0:	08005c7d 	.word	0x08005c7d
 8005ba4:	6833      	ldr	r3, [r6, #0]
 8005ba6:	1d1a      	adds	r2, r3, #4
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	6032      	str	r2, [r6, #0]
 8005bac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005bb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e09e      	b.n	8005cf6 <_printf_i+0x1ea>
 8005bb8:	6833      	ldr	r3, [r6, #0]
 8005bba:	6820      	ldr	r0, [r4, #0]
 8005bbc:	1d19      	adds	r1, r3, #4
 8005bbe:	6031      	str	r1, [r6, #0]
 8005bc0:	0606      	lsls	r6, r0, #24
 8005bc2:	d501      	bpl.n	8005bc8 <_printf_i+0xbc>
 8005bc4:	681d      	ldr	r5, [r3, #0]
 8005bc6:	e003      	b.n	8005bd0 <_printf_i+0xc4>
 8005bc8:	0645      	lsls	r5, r0, #25
 8005bca:	d5fb      	bpl.n	8005bc4 <_printf_i+0xb8>
 8005bcc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005bd0:	2d00      	cmp	r5, #0
 8005bd2:	da03      	bge.n	8005bdc <_printf_i+0xd0>
 8005bd4:	232d      	movs	r3, #45	@ 0x2d
 8005bd6:	426d      	negs	r5, r5
 8005bd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bdc:	230a      	movs	r3, #10
 8005bde:	4859      	ldr	r0, [pc, #356]	@ (8005d44 <_printf_i+0x238>)
 8005be0:	e011      	b.n	8005c06 <_printf_i+0xfa>
 8005be2:	6821      	ldr	r1, [r4, #0]
 8005be4:	6833      	ldr	r3, [r6, #0]
 8005be6:	0608      	lsls	r0, r1, #24
 8005be8:	f853 5b04 	ldr.w	r5, [r3], #4
 8005bec:	d402      	bmi.n	8005bf4 <_printf_i+0xe8>
 8005bee:	0649      	lsls	r1, r1, #25
 8005bf0:	bf48      	it	mi
 8005bf2:	b2ad      	uxthmi	r5, r5
 8005bf4:	2f6f      	cmp	r7, #111	@ 0x6f
 8005bf6:	6033      	str	r3, [r6, #0]
 8005bf8:	bf14      	ite	ne
 8005bfa:	230a      	movne	r3, #10
 8005bfc:	2308      	moveq	r3, #8
 8005bfe:	4851      	ldr	r0, [pc, #324]	@ (8005d44 <_printf_i+0x238>)
 8005c00:	2100      	movs	r1, #0
 8005c02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c06:	6866      	ldr	r6, [r4, #4]
 8005c08:	2e00      	cmp	r6, #0
 8005c0a:	bfa8      	it	ge
 8005c0c:	6821      	ldrge	r1, [r4, #0]
 8005c0e:	60a6      	str	r6, [r4, #8]
 8005c10:	bfa4      	itt	ge
 8005c12:	f021 0104 	bicge.w	r1, r1, #4
 8005c16:	6021      	strge	r1, [r4, #0]
 8005c18:	b90d      	cbnz	r5, 8005c1e <_printf_i+0x112>
 8005c1a:	2e00      	cmp	r6, #0
 8005c1c:	d04b      	beq.n	8005cb6 <_printf_i+0x1aa>
 8005c1e:	4616      	mov	r6, r2
 8005c20:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c24:	fb03 5711 	mls	r7, r3, r1, r5
 8005c28:	5dc7      	ldrb	r7, [r0, r7]
 8005c2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c2e:	462f      	mov	r7, r5
 8005c30:	42bb      	cmp	r3, r7
 8005c32:	460d      	mov	r5, r1
 8005c34:	d9f4      	bls.n	8005c20 <_printf_i+0x114>
 8005c36:	2b08      	cmp	r3, #8
 8005c38:	d10b      	bne.n	8005c52 <_printf_i+0x146>
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	07df      	lsls	r7, r3, #31
 8005c3e:	d508      	bpl.n	8005c52 <_printf_i+0x146>
 8005c40:	6923      	ldr	r3, [r4, #16]
 8005c42:	6861      	ldr	r1, [r4, #4]
 8005c44:	4299      	cmp	r1, r3
 8005c46:	bfde      	ittt	le
 8005c48:	2330      	movle	r3, #48	@ 0x30
 8005c4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c52:	1b92      	subs	r2, r2, r6
 8005c54:	6122      	str	r2, [r4, #16]
 8005c56:	464b      	mov	r3, r9
 8005c58:	4621      	mov	r1, r4
 8005c5a:	4640      	mov	r0, r8
 8005c5c:	f8cd a000 	str.w	sl, [sp]
 8005c60:	aa03      	add	r2, sp, #12
 8005c62:	f7ff fee1 	bl	8005a28 <_printf_common>
 8005c66:	3001      	adds	r0, #1
 8005c68:	d14a      	bne.n	8005d00 <_printf_i+0x1f4>
 8005c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c6e:	b004      	add	sp, #16
 8005c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c74:	6823      	ldr	r3, [r4, #0]
 8005c76:	f043 0320 	orr.w	r3, r3, #32
 8005c7a:	6023      	str	r3, [r4, #0]
 8005c7c:	2778      	movs	r7, #120	@ 0x78
 8005c7e:	4832      	ldr	r0, [pc, #200]	@ (8005d48 <_printf_i+0x23c>)
 8005c80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c84:	6823      	ldr	r3, [r4, #0]
 8005c86:	6831      	ldr	r1, [r6, #0]
 8005c88:	061f      	lsls	r7, r3, #24
 8005c8a:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c8e:	d402      	bmi.n	8005c96 <_printf_i+0x18a>
 8005c90:	065f      	lsls	r7, r3, #25
 8005c92:	bf48      	it	mi
 8005c94:	b2ad      	uxthmi	r5, r5
 8005c96:	6031      	str	r1, [r6, #0]
 8005c98:	07d9      	lsls	r1, r3, #31
 8005c9a:	bf44      	itt	mi
 8005c9c:	f043 0320 	orrmi.w	r3, r3, #32
 8005ca0:	6023      	strmi	r3, [r4, #0]
 8005ca2:	b11d      	cbz	r5, 8005cac <_printf_i+0x1a0>
 8005ca4:	2310      	movs	r3, #16
 8005ca6:	e7ab      	b.n	8005c00 <_printf_i+0xf4>
 8005ca8:	4826      	ldr	r0, [pc, #152]	@ (8005d44 <_printf_i+0x238>)
 8005caa:	e7e9      	b.n	8005c80 <_printf_i+0x174>
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	f023 0320 	bic.w	r3, r3, #32
 8005cb2:	6023      	str	r3, [r4, #0]
 8005cb4:	e7f6      	b.n	8005ca4 <_printf_i+0x198>
 8005cb6:	4616      	mov	r6, r2
 8005cb8:	e7bd      	b.n	8005c36 <_printf_i+0x12a>
 8005cba:	6833      	ldr	r3, [r6, #0]
 8005cbc:	6825      	ldr	r5, [r4, #0]
 8005cbe:	1d18      	adds	r0, r3, #4
 8005cc0:	6961      	ldr	r1, [r4, #20]
 8005cc2:	6030      	str	r0, [r6, #0]
 8005cc4:	062e      	lsls	r6, r5, #24
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	d501      	bpl.n	8005cce <_printf_i+0x1c2>
 8005cca:	6019      	str	r1, [r3, #0]
 8005ccc:	e002      	b.n	8005cd4 <_printf_i+0x1c8>
 8005cce:	0668      	lsls	r0, r5, #25
 8005cd0:	d5fb      	bpl.n	8005cca <_printf_i+0x1be>
 8005cd2:	8019      	strh	r1, [r3, #0]
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	4616      	mov	r6, r2
 8005cd8:	6123      	str	r3, [r4, #16]
 8005cda:	e7bc      	b.n	8005c56 <_printf_i+0x14a>
 8005cdc:	6833      	ldr	r3, [r6, #0]
 8005cde:	2100      	movs	r1, #0
 8005ce0:	1d1a      	adds	r2, r3, #4
 8005ce2:	6032      	str	r2, [r6, #0]
 8005ce4:	681e      	ldr	r6, [r3, #0]
 8005ce6:	6862      	ldr	r2, [r4, #4]
 8005ce8:	4630      	mov	r0, r6
 8005cea:	f000 facd 	bl	8006288 <memchr>
 8005cee:	b108      	cbz	r0, 8005cf4 <_printf_i+0x1e8>
 8005cf0:	1b80      	subs	r0, r0, r6
 8005cf2:	6060      	str	r0, [r4, #4]
 8005cf4:	6863      	ldr	r3, [r4, #4]
 8005cf6:	6123      	str	r3, [r4, #16]
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cfe:	e7aa      	b.n	8005c56 <_printf_i+0x14a>
 8005d00:	4632      	mov	r2, r6
 8005d02:	4649      	mov	r1, r9
 8005d04:	4640      	mov	r0, r8
 8005d06:	6923      	ldr	r3, [r4, #16]
 8005d08:	47d0      	blx	sl
 8005d0a:	3001      	adds	r0, #1
 8005d0c:	d0ad      	beq.n	8005c6a <_printf_i+0x15e>
 8005d0e:	6823      	ldr	r3, [r4, #0]
 8005d10:	079b      	lsls	r3, r3, #30
 8005d12:	d413      	bmi.n	8005d3c <_printf_i+0x230>
 8005d14:	68e0      	ldr	r0, [r4, #12]
 8005d16:	9b03      	ldr	r3, [sp, #12]
 8005d18:	4298      	cmp	r0, r3
 8005d1a:	bfb8      	it	lt
 8005d1c:	4618      	movlt	r0, r3
 8005d1e:	e7a6      	b.n	8005c6e <_printf_i+0x162>
 8005d20:	2301      	movs	r3, #1
 8005d22:	4632      	mov	r2, r6
 8005d24:	4649      	mov	r1, r9
 8005d26:	4640      	mov	r0, r8
 8005d28:	47d0      	blx	sl
 8005d2a:	3001      	adds	r0, #1
 8005d2c:	d09d      	beq.n	8005c6a <_printf_i+0x15e>
 8005d2e:	3501      	adds	r5, #1
 8005d30:	68e3      	ldr	r3, [r4, #12]
 8005d32:	9903      	ldr	r1, [sp, #12]
 8005d34:	1a5b      	subs	r3, r3, r1
 8005d36:	42ab      	cmp	r3, r5
 8005d38:	dcf2      	bgt.n	8005d20 <_printf_i+0x214>
 8005d3a:	e7eb      	b.n	8005d14 <_printf_i+0x208>
 8005d3c:	2500      	movs	r5, #0
 8005d3e:	f104 0619 	add.w	r6, r4, #25
 8005d42:	e7f5      	b.n	8005d30 <_printf_i+0x224>
 8005d44:	08007119 	.word	0x08007119
 8005d48:	0800712a 	.word	0x0800712a

08005d4c <_scanf_chars>:
 8005d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d50:	4615      	mov	r5, r2
 8005d52:	688a      	ldr	r2, [r1, #8]
 8005d54:	4680      	mov	r8, r0
 8005d56:	460c      	mov	r4, r1
 8005d58:	b932      	cbnz	r2, 8005d68 <_scanf_chars+0x1c>
 8005d5a:	698a      	ldr	r2, [r1, #24]
 8005d5c:	2a00      	cmp	r2, #0
 8005d5e:	bf14      	ite	ne
 8005d60:	f04f 32ff 	movne.w	r2, #4294967295
 8005d64:	2201      	moveq	r2, #1
 8005d66:	608a      	str	r2, [r1, #8]
 8005d68:	2700      	movs	r7, #0
 8005d6a:	6822      	ldr	r2, [r4, #0]
 8005d6c:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8005dfc <_scanf_chars+0xb0>
 8005d70:	06d1      	lsls	r1, r2, #27
 8005d72:	bf5f      	itttt	pl
 8005d74:	681a      	ldrpl	r2, [r3, #0]
 8005d76:	1d11      	addpl	r1, r2, #4
 8005d78:	6019      	strpl	r1, [r3, #0]
 8005d7a:	6816      	ldrpl	r6, [r2, #0]
 8005d7c:	69a0      	ldr	r0, [r4, #24]
 8005d7e:	b188      	cbz	r0, 8005da4 <_scanf_chars+0x58>
 8005d80:	2801      	cmp	r0, #1
 8005d82:	d107      	bne.n	8005d94 <_scanf_chars+0x48>
 8005d84:	682b      	ldr	r3, [r5, #0]
 8005d86:	781a      	ldrb	r2, [r3, #0]
 8005d88:	6963      	ldr	r3, [r4, #20]
 8005d8a:	5c9b      	ldrb	r3, [r3, r2]
 8005d8c:	b953      	cbnz	r3, 8005da4 <_scanf_chars+0x58>
 8005d8e:	2f00      	cmp	r7, #0
 8005d90:	d031      	beq.n	8005df6 <_scanf_chars+0xaa>
 8005d92:	e022      	b.n	8005dda <_scanf_chars+0x8e>
 8005d94:	2802      	cmp	r0, #2
 8005d96:	d120      	bne.n	8005dda <_scanf_chars+0x8e>
 8005d98:	682b      	ldr	r3, [r5, #0]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8005da0:	071b      	lsls	r3, r3, #28
 8005da2:	d41a      	bmi.n	8005dda <_scanf_chars+0x8e>
 8005da4:	6823      	ldr	r3, [r4, #0]
 8005da6:	3701      	adds	r7, #1
 8005da8:	06da      	lsls	r2, r3, #27
 8005daa:	bf5e      	ittt	pl
 8005dac:	682b      	ldrpl	r3, [r5, #0]
 8005dae:	781b      	ldrbpl	r3, [r3, #0]
 8005db0:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005db4:	682a      	ldr	r2, [r5, #0]
 8005db6:	686b      	ldr	r3, [r5, #4]
 8005db8:	3201      	adds	r2, #1
 8005dba:	602a      	str	r2, [r5, #0]
 8005dbc:	68a2      	ldr	r2, [r4, #8]
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	3a01      	subs	r2, #1
 8005dc2:	606b      	str	r3, [r5, #4]
 8005dc4:	60a2      	str	r2, [r4, #8]
 8005dc6:	b142      	cbz	r2, 8005dda <_scanf_chars+0x8e>
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	dcd7      	bgt.n	8005d7c <_scanf_chars+0x30>
 8005dcc:	4629      	mov	r1, r5
 8005dce:	4640      	mov	r0, r8
 8005dd0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005dd4:	4798      	blx	r3
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	d0d0      	beq.n	8005d7c <_scanf_chars+0x30>
 8005dda:	6823      	ldr	r3, [r4, #0]
 8005ddc:	f013 0310 	ands.w	r3, r3, #16
 8005de0:	d105      	bne.n	8005dee <_scanf_chars+0xa2>
 8005de2:	68e2      	ldr	r2, [r4, #12]
 8005de4:	3201      	adds	r2, #1
 8005de6:	60e2      	str	r2, [r4, #12]
 8005de8:	69a2      	ldr	r2, [r4, #24]
 8005dea:	b102      	cbz	r2, 8005dee <_scanf_chars+0xa2>
 8005dec:	7033      	strb	r3, [r6, #0]
 8005dee:	2000      	movs	r0, #0
 8005df0:	6923      	ldr	r3, [r4, #16]
 8005df2:	443b      	add	r3, r7
 8005df4:	6123      	str	r3, [r4, #16]
 8005df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dfa:	bf00      	nop
 8005dfc:	08007157 	.word	0x08007157

08005e00 <_scanf_i>:
 8005e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e04:	460c      	mov	r4, r1
 8005e06:	4698      	mov	r8, r3
 8005e08:	4b72      	ldr	r3, [pc, #456]	@ (8005fd4 <_scanf_i+0x1d4>)
 8005e0a:	b087      	sub	sp, #28
 8005e0c:	4682      	mov	sl, r0
 8005e0e:	4616      	mov	r6, r2
 8005e10:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005e14:	ab03      	add	r3, sp, #12
 8005e16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005e1a:	4b6f      	ldr	r3, [pc, #444]	@ (8005fd8 <_scanf_i+0x1d8>)
 8005e1c:	69a1      	ldr	r1, [r4, #24]
 8005e1e:	4a6f      	ldr	r2, [pc, #444]	@ (8005fdc <_scanf_i+0x1dc>)
 8005e20:	4627      	mov	r7, r4
 8005e22:	2903      	cmp	r1, #3
 8005e24:	bf08      	it	eq
 8005e26:	461a      	moveq	r2, r3
 8005e28:	68a3      	ldr	r3, [r4, #8]
 8005e2a:	9201      	str	r2, [sp, #4]
 8005e2c:	1e5a      	subs	r2, r3, #1
 8005e2e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005e32:	bf81      	itttt	hi
 8005e34:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005e38:	eb03 0905 	addhi.w	r9, r3, r5
 8005e3c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005e40:	60a3      	strhi	r3, [r4, #8]
 8005e42:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005e46:	bf98      	it	ls
 8005e48:	f04f 0900 	movls.w	r9, #0
 8005e4c:	463d      	mov	r5, r7
 8005e4e:	f04f 0b00 	mov.w	fp, #0
 8005e52:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8005e56:	6023      	str	r3, [r4, #0]
 8005e58:	6831      	ldr	r1, [r6, #0]
 8005e5a:	ab03      	add	r3, sp, #12
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	7809      	ldrb	r1, [r1, #0]
 8005e60:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005e64:	f000 fa10 	bl	8006288 <memchr>
 8005e68:	b328      	cbz	r0, 8005eb6 <_scanf_i+0xb6>
 8005e6a:	f1bb 0f01 	cmp.w	fp, #1
 8005e6e:	d159      	bne.n	8005f24 <_scanf_i+0x124>
 8005e70:	6862      	ldr	r2, [r4, #4]
 8005e72:	b92a      	cbnz	r2, 8005e80 <_scanf_i+0x80>
 8005e74:	2108      	movs	r1, #8
 8005e76:	6822      	ldr	r2, [r4, #0]
 8005e78:	6061      	str	r1, [r4, #4]
 8005e7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e7e:	6022      	str	r2, [r4, #0]
 8005e80:	6822      	ldr	r2, [r4, #0]
 8005e82:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8005e86:	6022      	str	r2, [r4, #0]
 8005e88:	68a2      	ldr	r2, [r4, #8]
 8005e8a:	1e51      	subs	r1, r2, #1
 8005e8c:	60a1      	str	r1, [r4, #8]
 8005e8e:	b192      	cbz	r2, 8005eb6 <_scanf_i+0xb6>
 8005e90:	6832      	ldr	r2, [r6, #0]
 8005e92:	1c51      	adds	r1, r2, #1
 8005e94:	6031      	str	r1, [r6, #0]
 8005e96:	7812      	ldrb	r2, [r2, #0]
 8005e98:	f805 2b01 	strb.w	r2, [r5], #1
 8005e9c:	6872      	ldr	r2, [r6, #4]
 8005e9e:	3a01      	subs	r2, #1
 8005ea0:	2a00      	cmp	r2, #0
 8005ea2:	6072      	str	r2, [r6, #4]
 8005ea4:	dc07      	bgt.n	8005eb6 <_scanf_i+0xb6>
 8005ea6:	4631      	mov	r1, r6
 8005ea8:	4650      	mov	r0, sl
 8005eaa:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8005eae:	4790      	blx	r2
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	f040 8085 	bne.w	8005fc0 <_scanf_i+0x1c0>
 8005eb6:	f10b 0b01 	add.w	fp, fp, #1
 8005eba:	f1bb 0f03 	cmp.w	fp, #3
 8005ebe:	d1cb      	bne.n	8005e58 <_scanf_i+0x58>
 8005ec0:	6863      	ldr	r3, [r4, #4]
 8005ec2:	b90b      	cbnz	r3, 8005ec8 <_scanf_i+0xc8>
 8005ec4:	230a      	movs	r3, #10
 8005ec6:	6063      	str	r3, [r4, #4]
 8005ec8:	6863      	ldr	r3, [r4, #4]
 8005eca:	4945      	ldr	r1, [pc, #276]	@ (8005fe0 <_scanf_i+0x1e0>)
 8005ecc:	6960      	ldr	r0, [r4, #20]
 8005ece:	1ac9      	subs	r1, r1, r3
 8005ed0:	f000 f91d 	bl	800610e <__sccl>
 8005ed4:	f04f 0b00 	mov.w	fp, #0
 8005ed8:	68a3      	ldr	r3, [r4, #8]
 8005eda:	6822      	ldr	r2, [r4, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d03d      	beq.n	8005f5c <_scanf_i+0x15c>
 8005ee0:	6831      	ldr	r1, [r6, #0]
 8005ee2:	6960      	ldr	r0, [r4, #20]
 8005ee4:	f891 c000 	ldrb.w	ip, [r1]
 8005ee8:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005eec:	2800      	cmp	r0, #0
 8005eee:	d035      	beq.n	8005f5c <_scanf_i+0x15c>
 8005ef0:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8005ef4:	d124      	bne.n	8005f40 <_scanf_i+0x140>
 8005ef6:	0510      	lsls	r0, r2, #20
 8005ef8:	d522      	bpl.n	8005f40 <_scanf_i+0x140>
 8005efa:	f10b 0b01 	add.w	fp, fp, #1
 8005efe:	f1b9 0f00 	cmp.w	r9, #0
 8005f02:	d003      	beq.n	8005f0c <_scanf_i+0x10c>
 8005f04:	3301      	adds	r3, #1
 8005f06:	f109 39ff 	add.w	r9, r9, #4294967295
 8005f0a:	60a3      	str	r3, [r4, #8]
 8005f0c:	6873      	ldr	r3, [r6, #4]
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	6073      	str	r3, [r6, #4]
 8005f14:	dd1b      	ble.n	8005f4e <_scanf_i+0x14e>
 8005f16:	6833      	ldr	r3, [r6, #0]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	6033      	str	r3, [r6, #0]
 8005f1c:	68a3      	ldr	r3, [r4, #8]
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	60a3      	str	r3, [r4, #8]
 8005f22:	e7d9      	b.n	8005ed8 <_scanf_i+0xd8>
 8005f24:	f1bb 0f02 	cmp.w	fp, #2
 8005f28:	d1ae      	bne.n	8005e88 <_scanf_i+0x88>
 8005f2a:	6822      	ldr	r2, [r4, #0]
 8005f2c:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8005f30:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8005f34:	d1bf      	bne.n	8005eb6 <_scanf_i+0xb6>
 8005f36:	2110      	movs	r1, #16
 8005f38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f3c:	6061      	str	r1, [r4, #4]
 8005f3e:	e7a2      	b.n	8005e86 <_scanf_i+0x86>
 8005f40:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8005f44:	6022      	str	r2, [r4, #0]
 8005f46:	780b      	ldrb	r3, [r1, #0]
 8005f48:	f805 3b01 	strb.w	r3, [r5], #1
 8005f4c:	e7de      	b.n	8005f0c <_scanf_i+0x10c>
 8005f4e:	4631      	mov	r1, r6
 8005f50:	4650      	mov	r0, sl
 8005f52:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005f56:	4798      	blx	r3
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	d0df      	beq.n	8005f1c <_scanf_i+0x11c>
 8005f5c:	6823      	ldr	r3, [r4, #0]
 8005f5e:	05d9      	lsls	r1, r3, #23
 8005f60:	d50d      	bpl.n	8005f7e <_scanf_i+0x17e>
 8005f62:	42bd      	cmp	r5, r7
 8005f64:	d909      	bls.n	8005f7a <_scanf_i+0x17a>
 8005f66:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005f6a:	4632      	mov	r2, r6
 8005f6c:	4650      	mov	r0, sl
 8005f6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f72:	f105 39ff 	add.w	r9, r5, #4294967295
 8005f76:	4798      	blx	r3
 8005f78:	464d      	mov	r5, r9
 8005f7a:	42bd      	cmp	r5, r7
 8005f7c:	d028      	beq.n	8005fd0 <_scanf_i+0x1d0>
 8005f7e:	6822      	ldr	r2, [r4, #0]
 8005f80:	f012 0210 	ands.w	r2, r2, #16
 8005f84:	d113      	bne.n	8005fae <_scanf_i+0x1ae>
 8005f86:	702a      	strb	r2, [r5, #0]
 8005f88:	4639      	mov	r1, r7
 8005f8a:	6863      	ldr	r3, [r4, #4]
 8005f8c:	4650      	mov	r0, sl
 8005f8e:	9e01      	ldr	r6, [sp, #4]
 8005f90:	47b0      	blx	r6
 8005f92:	f8d8 3000 	ldr.w	r3, [r8]
 8005f96:	6821      	ldr	r1, [r4, #0]
 8005f98:	1d1a      	adds	r2, r3, #4
 8005f9a:	f8c8 2000 	str.w	r2, [r8]
 8005f9e:	f011 0f20 	tst.w	r1, #32
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	d00f      	beq.n	8005fc6 <_scanf_i+0x1c6>
 8005fa6:	6018      	str	r0, [r3, #0]
 8005fa8:	68e3      	ldr	r3, [r4, #12]
 8005faa:	3301      	adds	r3, #1
 8005fac:	60e3      	str	r3, [r4, #12]
 8005fae:	2000      	movs	r0, #0
 8005fb0:	6923      	ldr	r3, [r4, #16]
 8005fb2:	1bed      	subs	r5, r5, r7
 8005fb4:	445d      	add	r5, fp
 8005fb6:	442b      	add	r3, r5
 8005fb8:	6123      	str	r3, [r4, #16]
 8005fba:	b007      	add	sp, #28
 8005fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fc0:	f04f 0b00 	mov.w	fp, #0
 8005fc4:	e7ca      	b.n	8005f5c <_scanf_i+0x15c>
 8005fc6:	07ca      	lsls	r2, r1, #31
 8005fc8:	bf4c      	ite	mi
 8005fca:	8018      	strhmi	r0, [r3, #0]
 8005fcc:	6018      	strpl	r0, [r3, #0]
 8005fce:	e7eb      	b.n	8005fa8 <_scanf_i+0x1a8>
 8005fd0:	2001      	movs	r0, #1
 8005fd2:	e7f2      	b.n	8005fba <_scanf_i+0x1ba>
 8005fd4:	080070bc 	.word	0x080070bc
 8005fd8:	080063f5 	.word	0x080063f5
 8005fdc:	080064d5 	.word	0x080064d5
 8005fe0:	0800714b 	.word	0x0800714b

08005fe4 <__swhatbuf_r>:
 8005fe4:	b570      	push	{r4, r5, r6, lr}
 8005fe6:	460c      	mov	r4, r1
 8005fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fec:	4615      	mov	r5, r2
 8005fee:	2900      	cmp	r1, #0
 8005ff0:	461e      	mov	r6, r3
 8005ff2:	b096      	sub	sp, #88	@ 0x58
 8005ff4:	da0c      	bge.n	8006010 <__swhatbuf_r+0x2c>
 8005ff6:	89a3      	ldrh	r3, [r4, #12]
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005ffe:	bf14      	ite	ne
 8006000:	2340      	movne	r3, #64	@ 0x40
 8006002:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006006:	2000      	movs	r0, #0
 8006008:	6031      	str	r1, [r6, #0]
 800600a:	602b      	str	r3, [r5, #0]
 800600c:	b016      	add	sp, #88	@ 0x58
 800600e:	bd70      	pop	{r4, r5, r6, pc}
 8006010:	466a      	mov	r2, sp
 8006012:	f000 f907 	bl	8006224 <_fstat_r>
 8006016:	2800      	cmp	r0, #0
 8006018:	dbed      	blt.n	8005ff6 <__swhatbuf_r+0x12>
 800601a:	9901      	ldr	r1, [sp, #4]
 800601c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006020:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006024:	4259      	negs	r1, r3
 8006026:	4159      	adcs	r1, r3
 8006028:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800602c:	e7eb      	b.n	8006006 <__swhatbuf_r+0x22>

0800602e <__smakebuf_r>:
 800602e:	898b      	ldrh	r3, [r1, #12]
 8006030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006032:	079d      	lsls	r5, r3, #30
 8006034:	4606      	mov	r6, r0
 8006036:	460c      	mov	r4, r1
 8006038:	d507      	bpl.n	800604a <__smakebuf_r+0x1c>
 800603a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800603e:	6023      	str	r3, [r4, #0]
 8006040:	6123      	str	r3, [r4, #16]
 8006042:	2301      	movs	r3, #1
 8006044:	6163      	str	r3, [r4, #20]
 8006046:	b003      	add	sp, #12
 8006048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800604a:	466a      	mov	r2, sp
 800604c:	ab01      	add	r3, sp, #4
 800604e:	f7ff ffc9 	bl	8005fe4 <__swhatbuf_r>
 8006052:	9f00      	ldr	r7, [sp, #0]
 8006054:	4605      	mov	r5, r0
 8006056:	4639      	mov	r1, r7
 8006058:	4630      	mov	r0, r6
 800605a:	f7fe fff7 	bl	800504c <_malloc_r>
 800605e:	b948      	cbnz	r0, 8006074 <__smakebuf_r+0x46>
 8006060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006064:	059a      	lsls	r2, r3, #22
 8006066:	d4ee      	bmi.n	8006046 <__smakebuf_r+0x18>
 8006068:	f023 0303 	bic.w	r3, r3, #3
 800606c:	f043 0302 	orr.w	r3, r3, #2
 8006070:	81a3      	strh	r3, [r4, #12]
 8006072:	e7e2      	b.n	800603a <__smakebuf_r+0xc>
 8006074:	89a3      	ldrh	r3, [r4, #12]
 8006076:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800607a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800607e:	81a3      	strh	r3, [r4, #12]
 8006080:	9b01      	ldr	r3, [sp, #4]
 8006082:	6020      	str	r0, [r4, #0]
 8006084:	b15b      	cbz	r3, 800609e <__smakebuf_r+0x70>
 8006086:	4630      	mov	r0, r6
 8006088:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800608c:	f000 f8dc 	bl	8006248 <_isatty_r>
 8006090:	b128      	cbz	r0, 800609e <__smakebuf_r+0x70>
 8006092:	89a3      	ldrh	r3, [r4, #12]
 8006094:	f023 0303 	bic.w	r3, r3, #3
 8006098:	f043 0301 	orr.w	r3, r3, #1
 800609c:	81a3      	strh	r3, [r4, #12]
 800609e:	89a3      	ldrh	r3, [r4, #12]
 80060a0:	431d      	orrs	r5, r3
 80060a2:	81a5      	strh	r5, [r4, #12]
 80060a4:	e7cf      	b.n	8006046 <__smakebuf_r+0x18>

080060a6 <_putc_r>:
 80060a6:	b570      	push	{r4, r5, r6, lr}
 80060a8:	460d      	mov	r5, r1
 80060aa:	4614      	mov	r4, r2
 80060ac:	4606      	mov	r6, r0
 80060ae:	b118      	cbz	r0, 80060b8 <_putc_r+0x12>
 80060b0:	6a03      	ldr	r3, [r0, #32]
 80060b2:	b90b      	cbnz	r3, 80060b8 <_putc_r+0x12>
 80060b4:	f7fe fcde 	bl	8004a74 <__sinit>
 80060b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060ba:	07d8      	lsls	r0, r3, #31
 80060bc:	d405      	bmi.n	80060ca <_putc_r+0x24>
 80060be:	89a3      	ldrh	r3, [r4, #12]
 80060c0:	0599      	lsls	r1, r3, #22
 80060c2:	d402      	bmi.n	80060ca <_putc_r+0x24>
 80060c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060c6:	f7fe ff46 	bl	8004f56 <__retarget_lock_acquire_recursive>
 80060ca:	68a3      	ldr	r3, [r4, #8]
 80060cc:	3b01      	subs	r3, #1
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	60a3      	str	r3, [r4, #8]
 80060d2:	da05      	bge.n	80060e0 <_putc_r+0x3a>
 80060d4:	69a2      	ldr	r2, [r4, #24]
 80060d6:	4293      	cmp	r3, r2
 80060d8:	db12      	blt.n	8006100 <_putc_r+0x5a>
 80060da:	b2eb      	uxtb	r3, r5
 80060dc:	2b0a      	cmp	r3, #10
 80060de:	d00f      	beq.n	8006100 <_putc_r+0x5a>
 80060e0:	6823      	ldr	r3, [r4, #0]
 80060e2:	1c5a      	adds	r2, r3, #1
 80060e4:	6022      	str	r2, [r4, #0]
 80060e6:	701d      	strb	r5, [r3, #0]
 80060e8:	b2ed      	uxtb	r5, r5
 80060ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060ec:	07da      	lsls	r2, r3, #31
 80060ee:	d405      	bmi.n	80060fc <_putc_r+0x56>
 80060f0:	89a3      	ldrh	r3, [r4, #12]
 80060f2:	059b      	lsls	r3, r3, #22
 80060f4:	d402      	bmi.n	80060fc <_putc_r+0x56>
 80060f6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060f8:	f7fe ff2e 	bl	8004f58 <__retarget_lock_release_recursive>
 80060fc:	4628      	mov	r0, r5
 80060fe:	bd70      	pop	{r4, r5, r6, pc}
 8006100:	4629      	mov	r1, r5
 8006102:	4622      	mov	r2, r4
 8006104:	4630      	mov	r0, r6
 8006106:	f7fe fe06 	bl	8004d16 <__swbuf_r>
 800610a:	4605      	mov	r5, r0
 800610c:	e7ed      	b.n	80060ea <_putc_r+0x44>

0800610e <__sccl>:
 800610e:	b570      	push	{r4, r5, r6, lr}
 8006110:	780b      	ldrb	r3, [r1, #0]
 8006112:	4604      	mov	r4, r0
 8006114:	2b5e      	cmp	r3, #94	@ 0x5e
 8006116:	bf0b      	itete	eq
 8006118:	784b      	ldrbeq	r3, [r1, #1]
 800611a:	1c4a      	addne	r2, r1, #1
 800611c:	1c8a      	addeq	r2, r1, #2
 800611e:	2100      	movne	r1, #0
 8006120:	bf08      	it	eq
 8006122:	2101      	moveq	r1, #1
 8006124:	3801      	subs	r0, #1
 8006126:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800612a:	f800 1f01 	strb.w	r1, [r0, #1]!
 800612e:	42a8      	cmp	r0, r5
 8006130:	d1fb      	bne.n	800612a <__sccl+0x1c>
 8006132:	b90b      	cbnz	r3, 8006138 <__sccl+0x2a>
 8006134:	1e50      	subs	r0, r2, #1
 8006136:	bd70      	pop	{r4, r5, r6, pc}
 8006138:	f081 0101 	eor.w	r1, r1, #1
 800613c:	4610      	mov	r0, r2
 800613e:	54e1      	strb	r1, [r4, r3]
 8006140:	4602      	mov	r2, r0
 8006142:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006146:	2d2d      	cmp	r5, #45	@ 0x2d
 8006148:	d005      	beq.n	8006156 <__sccl+0x48>
 800614a:	2d5d      	cmp	r5, #93	@ 0x5d
 800614c:	d016      	beq.n	800617c <__sccl+0x6e>
 800614e:	2d00      	cmp	r5, #0
 8006150:	d0f1      	beq.n	8006136 <__sccl+0x28>
 8006152:	462b      	mov	r3, r5
 8006154:	e7f2      	b.n	800613c <__sccl+0x2e>
 8006156:	7846      	ldrb	r6, [r0, #1]
 8006158:	2e5d      	cmp	r6, #93	@ 0x5d
 800615a:	d0fa      	beq.n	8006152 <__sccl+0x44>
 800615c:	42b3      	cmp	r3, r6
 800615e:	dcf8      	bgt.n	8006152 <__sccl+0x44>
 8006160:	461a      	mov	r2, r3
 8006162:	3002      	adds	r0, #2
 8006164:	3201      	adds	r2, #1
 8006166:	4296      	cmp	r6, r2
 8006168:	54a1      	strb	r1, [r4, r2]
 800616a:	dcfb      	bgt.n	8006164 <__sccl+0x56>
 800616c:	1af2      	subs	r2, r6, r3
 800616e:	3a01      	subs	r2, #1
 8006170:	42b3      	cmp	r3, r6
 8006172:	bfa8      	it	ge
 8006174:	2200      	movge	r2, #0
 8006176:	1c5d      	adds	r5, r3, #1
 8006178:	18ab      	adds	r3, r5, r2
 800617a:	e7e1      	b.n	8006140 <__sccl+0x32>
 800617c:	4610      	mov	r0, r2
 800617e:	e7da      	b.n	8006136 <__sccl+0x28>

08006180 <__submore>:
 8006180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006184:	460c      	mov	r4, r1
 8006186:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006188:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800618c:	4299      	cmp	r1, r3
 800618e:	d11b      	bne.n	80061c8 <__submore+0x48>
 8006190:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006194:	f7fe ff5a 	bl	800504c <_malloc_r>
 8006198:	b918      	cbnz	r0, 80061a2 <__submore+0x22>
 800619a:	f04f 30ff 	mov.w	r0, #4294967295
 800619e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80061a6:	63a3      	str	r3, [r4, #56]	@ 0x38
 80061a8:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80061ac:	6360      	str	r0, [r4, #52]	@ 0x34
 80061ae:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80061b2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80061b6:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80061ba:	7043      	strb	r3, [r0, #1]
 80061bc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80061c0:	7003      	strb	r3, [r0, #0]
 80061c2:	6020      	str	r0, [r4, #0]
 80061c4:	2000      	movs	r0, #0
 80061c6:	e7ea      	b.n	800619e <__submore+0x1e>
 80061c8:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80061ca:	0077      	lsls	r7, r6, #1
 80061cc:	463a      	mov	r2, r7
 80061ce:	f000 f869 	bl	80062a4 <_realloc_r>
 80061d2:	4605      	mov	r5, r0
 80061d4:	2800      	cmp	r0, #0
 80061d6:	d0e0      	beq.n	800619a <__submore+0x1a>
 80061d8:	eb00 0806 	add.w	r8, r0, r6
 80061dc:	4601      	mov	r1, r0
 80061de:	4632      	mov	r2, r6
 80061e0:	4640      	mov	r0, r8
 80061e2:	f7fe feba 	bl	8004f5a <memcpy>
 80061e6:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80061ea:	f8c4 8000 	str.w	r8, [r4]
 80061ee:	e7e9      	b.n	80061c4 <__submore+0x44>

080061f0 <memmove>:
 80061f0:	4288      	cmp	r0, r1
 80061f2:	b510      	push	{r4, lr}
 80061f4:	eb01 0402 	add.w	r4, r1, r2
 80061f8:	d902      	bls.n	8006200 <memmove+0x10>
 80061fa:	4284      	cmp	r4, r0
 80061fc:	4623      	mov	r3, r4
 80061fe:	d807      	bhi.n	8006210 <memmove+0x20>
 8006200:	1e43      	subs	r3, r0, #1
 8006202:	42a1      	cmp	r1, r4
 8006204:	d008      	beq.n	8006218 <memmove+0x28>
 8006206:	f811 2b01 	ldrb.w	r2, [r1], #1
 800620a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800620e:	e7f8      	b.n	8006202 <memmove+0x12>
 8006210:	4601      	mov	r1, r0
 8006212:	4402      	add	r2, r0
 8006214:	428a      	cmp	r2, r1
 8006216:	d100      	bne.n	800621a <memmove+0x2a>
 8006218:	bd10      	pop	{r4, pc}
 800621a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800621e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006222:	e7f7      	b.n	8006214 <memmove+0x24>

08006224 <_fstat_r>:
 8006224:	b538      	push	{r3, r4, r5, lr}
 8006226:	2300      	movs	r3, #0
 8006228:	4d06      	ldr	r5, [pc, #24]	@ (8006244 <_fstat_r+0x20>)
 800622a:	4604      	mov	r4, r0
 800622c:	4608      	mov	r0, r1
 800622e:	4611      	mov	r1, r2
 8006230:	602b      	str	r3, [r5, #0]
 8006232:	f7fd f9ed 	bl	8003610 <_fstat>
 8006236:	1c43      	adds	r3, r0, #1
 8006238:	d102      	bne.n	8006240 <_fstat_r+0x1c>
 800623a:	682b      	ldr	r3, [r5, #0]
 800623c:	b103      	cbz	r3, 8006240 <_fstat_r+0x1c>
 800623e:	6023      	str	r3, [r4, #0]
 8006240:	bd38      	pop	{r3, r4, r5, pc}
 8006242:	bf00      	nop
 8006244:	200057a4 	.word	0x200057a4

08006248 <_isatty_r>:
 8006248:	b538      	push	{r3, r4, r5, lr}
 800624a:	2300      	movs	r3, #0
 800624c:	4d05      	ldr	r5, [pc, #20]	@ (8006264 <_isatty_r+0x1c>)
 800624e:	4604      	mov	r4, r0
 8006250:	4608      	mov	r0, r1
 8006252:	602b      	str	r3, [r5, #0]
 8006254:	f7fd f9eb 	bl	800362e <_isatty>
 8006258:	1c43      	adds	r3, r0, #1
 800625a:	d102      	bne.n	8006262 <_isatty_r+0x1a>
 800625c:	682b      	ldr	r3, [r5, #0]
 800625e:	b103      	cbz	r3, 8006262 <_isatty_r+0x1a>
 8006260:	6023      	str	r3, [r4, #0]
 8006262:	bd38      	pop	{r3, r4, r5, pc}
 8006264:	200057a4 	.word	0x200057a4

08006268 <_sbrk_r>:
 8006268:	b538      	push	{r3, r4, r5, lr}
 800626a:	2300      	movs	r3, #0
 800626c:	4d05      	ldr	r5, [pc, #20]	@ (8006284 <_sbrk_r+0x1c>)
 800626e:	4604      	mov	r4, r0
 8006270:	4608      	mov	r0, r1
 8006272:	602b      	str	r3, [r5, #0]
 8006274:	f7fd f9f2 	bl	800365c <_sbrk>
 8006278:	1c43      	adds	r3, r0, #1
 800627a:	d102      	bne.n	8006282 <_sbrk_r+0x1a>
 800627c:	682b      	ldr	r3, [r5, #0]
 800627e:	b103      	cbz	r3, 8006282 <_sbrk_r+0x1a>
 8006280:	6023      	str	r3, [r4, #0]
 8006282:	bd38      	pop	{r3, r4, r5, pc}
 8006284:	200057a4 	.word	0x200057a4

08006288 <memchr>:
 8006288:	4603      	mov	r3, r0
 800628a:	b510      	push	{r4, lr}
 800628c:	b2c9      	uxtb	r1, r1
 800628e:	4402      	add	r2, r0
 8006290:	4293      	cmp	r3, r2
 8006292:	4618      	mov	r0, r3
 8006294:	d101      	bne.n	800629a <memchr+0x12>
 8006296:	2000      	movs	r0, #0
 8006298:	e003      	b.n	80062a2 <memchr+0x1a>
 800629a:	7804      	ldrb	r4, [r0, #0]
 800629c:	3301      	adds	r3, #1
 800629e:	428c      	cmp	r4, r1
 80062a0:	d1f6      	bne.n	8006290 <memchr+0x8>
 80062a2:	bd10      	pop	{r4, pc}

080062a4 <_realloc_r>:
 80062a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062a8:	4680      	mov	r8, r0
 80062aa:	4615      	mov	r5, r2
 80062ac:	460c      	mov	r4, r1
 80062ae:	b921      	cbnz	r1, 80062ba <_realloc_r+0x16>
 80062b0:	4611      	mov	r1, r2
 80062b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062b6:	f7fe bec9 	b.w	800504c <_malloc_r>
 80062ba:	b92a      	cbnz	r2, 80062c8 <_realloc_r+0x24>
 80062bc:	f7fe fe5c 	bl	8004f78 <_free_r>
 80062c0:	2400      	movs	r4, #0
 80062c2:	4620      	mov	r0, r4
 80062c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062c8:	f000 f906 	bl	80064d8 <_malloc_usable_size_r>
 80062cc:	4285      	cmp	r5, r0
 80062ce:	4606      	mov	r6, r0
 80062d0:	d802      	bhi.n	80062d8 <_realloc_r+0x34>
 80062d2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80062d6:	d8f4      	bhi.n	80062c2 <_realloc_r+0x1e>
 80062d8:	4629      	mov	r1, r5
 80062da:	4640      	mov	r0, r8
 80062dc:	f7fe feb6 	bl	800504c <_malloc_r>
 80062e0:	4607      	mov	r7, r0
 80062e2:	2800      	cmp	r0, #0
 80062e4:	d0ec      	beq.n	80062c0 <_realloc_r+0x1c>
 80062e6:	42b5      	cmp	r5, r6
 80062e8:	462a      	mov	r2, r5
 80062ea:	4621      	mov	r1, r4
 80062ec:	bf28      	it	cs
 80062ee:	4632      	movcs	r2, r6
 80062f0:	f7fe fe33 	bl	8004f5a <memcpy>
 80062f4:	4621      	mov	r1, r4
 80062f6:	4640      	mov	r0, r8
 80062f8:	f7fe fe3e 	bl	8004f78 <_free_r>
 80062fc:	463c      	mov	r4, r7
 80062fe:	e7e0      	b.n	80062c2 <_realloc_r+0x1e>

08006300 <_strtol_l.constprop.0>:
 8006300:	2b24      	cmp	r3, #36	@ 0x24
 8006302:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006306:	4686      	mov	lr, r0
 8006308:	4690      	mov	r8, r2
 800630a:	d801      	bhi.n	8006310 <_strtol_l.constprop.0+0x10>
 800630c:	2b01      	cmp	r3, #1
 800630e:	d106      	bne.n	800631e <_strtol_l.constprop.0+0x1e>
 8006310:	f7fe fdf6 	bl	8004f00 <__errno>
 8006314:	2316      	movs	r3, #22
 8006316:	6003      	str	r3, [r0, #0]
 8006318:	2000      	movs	r0, #0
 800631a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800631e:	460d      	mov	r5, r1
 8006320:	4833      	ldr	r0, [pc, #204]	@ (80063f0 <_strtol_l.constprop.0+0xf0>)
 8006322:	462a      	mov	r2, r5
 8006324:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006328:	5d06      	ldrb	r6, [r0, r4]
 800632a:	f016 0608 	ands.w	r6, r6, #8
 800632e:	d1f8      	bne.n	8006322 <_strtol_l.constprop.0+0x22>
 8006330:	2c2d      	cmp	r4, #45	@ 0x2d
 8006332:	d12d      	bne.n	8006390 <_strtol_l.constprop.0+0x90>
 8006334:	2601      	movs	r6, #1
 8006336:	782c      	ldrb	r4, [r5, #0]
 8006338:	1c95      	adds	r5, r2, #2
 800633a:	f033 0210 	bics.w	r2, r3, #16
 800633e:	d109      	bne.n	8006354 <_strtol_l.constprop.0+0x54>
 8006340:	2c30      	cmp	r4, #48	@ 0x30
 8006342:	d12a      	bne.n	800639a <_strtol_l.constprop.0+0x9a>
 8006344:	782a      	ldrb	r2, [r5, #0]
 8006346:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800634a:	2a58      	cmp	r2, #88	@ 0x58
 800634c:	d125      	bne.n	800639a <_strtol_l.constprop.0+0x9a>
 800634e:	2310      	movs	r3, #16
 8006350:	786c      	ldrb	r4, [r5, #1]
 8006352:	3502      	adds	r5, #2
 8006354:	2200      	movs	r2, #0
 8006356:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800635a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800635e:	fbbc f9f3 	udiv	r9, ip, r3
 8006362:	4610      	mov	r0, r2
 8006364:	fb03 ca19 	mls	sl, r3, r9, ip
 8006368:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800636c:	2f09      	cmp	r7, #9
 800636e:	d81b      	bhi.n	80063a8 <_strtol_l.constprop.0+0xa8>
 8006370:	463c      	mov	r4, r7
 8006372:	42a3      	cmp	r3, r4
 8006374:	dd27      	ble.n	80063c6 <_strtol_l.constprop.0+0xc6>
 8006376:	1c57      	adds	r7, r2, #1
 8006378:	d007      	beq.n	800638a <_strtol_l.constprop.0+0x8a>
 800637a:	4581      	cmp	r9, r0
 800637c:	d320      	bcc.n	80063c0 <_strtol_l.constprop.0+0xc0>
 800637e:	d101      	bne.n	8006384 <_strtol_l.constprop.0+0x84>
 8006380:	45a2      	cmp	sl, r4
 8006382:	db1d      	blt.n	80063c0 <_strtol_l.constprop.0+0xc0>
 8006384:	2201      	movs	r2, #1
 8006386:	fb00 4003 	mla	r0, r0, r3, r4
 800638a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800638e:	e7eb      	b.n	8006368 <_strtol_l.constprop.0+0x68>
 8006390:	2c2b      	cmp	r4, #43	@ 0x2b
 8006392:	bf04      	itt	eq
 8006394:	782c      	ldrbeq	r4, [r5, #0]
 8006396:	1c95      	addeq	r5, r2, #2
 8006398:	e7cf      	b.n	800633a <_strtol_l.constprop.0+0x3a>
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1da      	bne.n	8006354 <_strtol_l.constprop.0+0x54>
 800639e:	2c30      	cmp	r4, #48	@ 0x30
 80063a0:	bf0c      	ite	eq
 80063a2:	2308      	moveq	r3, #8
 80063a4:	230a      	movne	r3, #10
 80063a6:	e7d5      	b.n	8006354 <_strtol_l.constprop.0+0x54>
 80063a8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80063ac:	2f19      	cmp	r7, #25
 80063ae:	d801      	bhi.n	80063b4 <_strtol_l.constprop.0+0xb4>
 80063b0:	3c37      	subs	r4, #55	@ 0x37
 80063b2:	e7de      	b.n	8006372 <_strtol_l.constprop.0+0x72>
 80063b4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80063b8:	2f19      	cmp	r7, #25
 80063ba:	d804      	bhi.n	80063c6 <_strtol_l.constprop.0+0xc6>
 80063bc:	3c57      	subs	r4, #87	@ 0x57
 80063be:	e7d8      	b.n	8006372 <_strtol_l.constprop.0+0x72>
 80063c0:	f04f 32ff 	mov.w	r2, #4294967295
 80063c4:	e7e1      	b.n	800638a <_strtol_l.constprop.0+0x8a>
 80063c6:	1c53      	adds	r3, r2, #1
 80063c8:	d108      	bne.n	80063dc <_strtol_l.constprop.0+0xdc>
 80063ca:	2322      	movs	r3, #34	@ 0x22
 80063cc:	4660      	mov	r0, ip
 80063ce:	f8ce 3000 	str.w	r3, [lr]
 80063d2:	f1b8 0f00 	cmp.w	r8, #0
 80063d6:	d0a0      	beq.n	800631a <_strtol_l.constprop.0+0x1a>
 80063d8:	1e69      	subs	r1, r5, #1
 80063da:	e006      	b.n	80063ea <_strtol_l.constprop.0+0xea>
 80063dc:	b106      	cbz	r6, 80063e0 <_strtol_l.constprop.0+0xe0>
 80063de:	4240      	negs	r0, r0
 80063e0:	f1b8 0f00 	cmp.w	r8, #0
 80063e4:	d099      	beq.n	800631a <_strtol_l.constprop.0+0x1a>
 80063e6:	2a00      	cmp	r2, #0
 80063e8:	d1f6      	bne.n	80063d8 <_strtol_l.constprop.0+0xd8>
 80063ea:	f8c8 1000 	str.w	r1, [r8]
 80063ee:	e794      	b.n	800631a <_strtol_l.constprop.0+0x1a>
 80063f0:	08007157 	.word	0x08007157

080063f4 <_strtol_r>:
 80063f4:	f7ff bf84 	b.w	8006300 <_strtol_l.constprop.0>

080063f8 <_strtoul_l.constprop.0>:
 80063f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063fc:	4686      	mov	lr, r0
 80063fe:	460d      	mov	r5, r1
 8006400:	4e33      	ldr	r6, [pc, #204]	@ (80064d0 <_strtoul_l.constprop.0+0xd8>)
 8006402:	4628      	mov	r0, r5
 8006404:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006408:	5d37      	ldrb	r7, [r6, r4]
 800640a:	f017 0708 	ands.w	r7, r7, #8
 800640e:	d1f8      	bne.n	8006402 <_strtoul_l.constprop.0+0xa>
 8006410:	2c2d      	cmp	r4, #45	@ 0x2d
 8006412:	d12f      	bne.n	8006474 <_strtoul_l.constprop.0+0x7c>
 8006414:	2701      	movs	r7, #1
 8006416:	782c      	ldrb	r4, [r5, #0]
 8006418:	1c85      	adds	r5, r0, #2
 800641a:	f033 0010 	bics.w	r0, r3, #16
 800641e:	d109      	bne.n	8006434 <_strtoul_l.constprop.0+0x3c>
 8006420:	2c30      	cmp	r4, #48	@ 0x30
 8006422:	d12c      	bne.n	800647e <_strtoul_l.constprop.0+0x86>
 8006424:	7828      	ldrb	r0, [r5, #0]
 8006426:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800642a:	2858      	cmp	r0, #88	@ 0x58
 800642c:	d127      	bne.n	800647e <_strtoul_l.constprop.0+0x86>
 800642e:	2310      	movs	r3, #16
 8006430:	786c      	ldrb	r4, [r5, #1]
 8006432:	3502      	adds	r5, #2
 8006434:	f04f 38ff 	mov.w	r8, #4294967295
 8006438:	fbb8 f8f3 	udiv	r8, r8, r3
 800643c:	2600      	movs	r6, #0
 800643e:	fb03 f908 	mul.w	r9, r3, r8
 8006442:	4630      	mov	r0, r6
 8006444:	ea6f 0909 	mvn.w	r9, r9
 8006448:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800644c:	f1bc 0f09 	cmp.w	ip, #9
 8006450:	d81c      	bhi.n	800648c <_strtoul_l.constprop.0+0x94>
 8006452:	4664      	mov	r4, ip
 8006454:	42a3      	cmp	r3, r4
 8006456:	dd2a      	ble.n	80064ae <_strtoul_l.constprop.0+0xb6>
 8006458:	f1b6 3fff 	cmp.w	r6, #4294967295
 800645c:	d007      	beq.n	800646e <_strtoul_l.constprop.0+0x76>
 800645e:	4580      	cmp	r8, r0
 8006460:	d322      	bcc.n	80064a8 <_strtoul_l.constprop.0+0xb0>
 8006462:	d101      	bne.n	8006468 <_strtoul_l.constprop.0+0x70>
 8006464:	45a1      	cmp	r9, r4
 8006466:	db1f      	blt.n	80064a8 <_strtoul_l.constprop.0+0xb0>
 8006468:	2601      	movs	r6, #1
 800646a:	fb00 4003 	mla	r0, r0, r3, r4
 800646e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006472:	e7e9      	b.n	8006448 <_strtoul_l.constprop.0+0x50>
 8006474:	2c2b      	cmp	r4, #43	@ 0x2b
 8006476:	bf04      	itt	eq
 8006478:	782c      	ldrbeq	r4, [r5, #0]
 800647a:	1c85      	addeq	r5, r0, #2
 800647c:	e7cd      	b.n	800641a <_strtoul_l.constprop.0+0x22>
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1d8      	bne.n	8006434 <_strtoul_l.constprop.0+0x3c>
 8006482:	2c30      	cmp	r4, #48	@ 0x30
 8006484:	bf0c      	ite	eq
 8006486:	2308      	moveq	r3, #8
 8006488:	230a      	movne	r3, #10
 800648a:	e7d3      	b.n	8006434 <_strtoul_l.constprop.0+0x3c>
 800648c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8006490:	f1bc 0f19 	cmp.w	ip, #25
 8006494:	d801      	bhi.n	800649a <_strtoul_l.constprop.0+0xa2>
 8006496:	3c37      	subs	r4, #55	@ 0x37
 8006498:	e7dc      	b.n	8006454 <_strtoul_l.constprop.0+0x5c>
 800649a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800649e:	f1bc 0f19 	cmp.w	ip, #25
 80064a2:	d804      	bhi.n	80064ae <_strtoul_l.constprop.0+0xb6>
 80064a4:	3c57      	subs	r4, #87	@ 0x57
 80064a6:	e7d5      	b.n	8006454 <_strtoul_l.constprop.0+0x5c>
 80064a8:	f04f 36ff 	mov.w	r6, #4294967295
 80064ac:	e7df      	b.n	800646e <_strtoul_l.constprop.0+0x76>
 80064ae:	1c73      	adds	r3, r6, #1
 80064b0:	d106      	bne.n	80064c0 <_strtoul_l.constprop.0+0xc8>
 80064b2:	2322      	movs	r3, #34	@ 0x22
 80064b4:	4630      	mov	r0, r6
 80064b6:	f8ce 3000 	str.w	r3, [lr]
 80064ba:	b932      	cbnz	r2, 80064ca <_strtoul_l.constprop.0+0xd2>
 80064bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064c0:	b107      	cbz	r7, 80064c4 <_strtoul_l.constprop.0+0xcc>
 80064c2:	4240      	negs	r0, r0
 80064c4:	2a00      	cmp	r2, #0
 80064c6:	d0f9      	beq.n	80064bc <_strtoul_l.constprop.0+0xc4>
 80064c8:	b106      	cbz	r6, 80064cc <_strtoul_l.constprop.0+0xd4>
 80064ca:	1e69      	subs	r1, r5, #1
 80064cc:	6011      	str	r1, [r2, #0]
 80064ce:	e7f5      	b.n	80064bc <_strtoul_l.constprop.0+0xc4>
 80064d0:	08007157 	.word	0x08007157

080064d4 <_strtoul_r>:
 80064d4:	f7ff bf90 	b.w	80063f8 <_strtoul_l.constprop.0>

080064d8 <_malloc_usable_size_r>:
 80064d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064dc:	1f18      	subs	r0, r3, #4
 80064de:	2b00      	cmp	r3, #0
 80064e0:	bfbc      	itt	lt
 80064e2:	580b      	ldrlt	r3, [r1, r0]
 80064e4:	18c0      	addlt	r0, r0, r3
 80064e6:	4770      	bx	lr

080064e8 <_init>:
 80064e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ea:	bf00      	nop
 80064ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ee:	bc08      	pop	{r3}
 80064f0:	469e      	mov	lr, r3
 80064f2:	4770      	bx	lr

080064f4 <_fini>:
 80064f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064f6:	bf00      	nop
 80064f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064fa:	bc08      	pop	{r3}
 80064fc:	469e      	mov	lr, r3
 80064fe:	4770      	bx	lr
