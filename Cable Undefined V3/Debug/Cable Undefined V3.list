
Cable Undefined V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a84  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b38  08003c68  08003c68  00004c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047a0  080047a0  00006d20  2**0
                  CONTENTS
  4 .ARM          00000008  080047a0  080047a0  000057a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047a8  080047a8  00006d20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047a8  080047a8  000057a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047ac  080047ac  000057ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000d20  20000000  080047b0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  20000d20  080054d0  00006d20  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010f4  080054d0  000070f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006d20  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005c24  00000000  00000000  00006d49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001565  00000000  00000000  0000c96d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f0  00000000  00000000  0000ded8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000051e  00000000  00000000  0000e5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c2ae  00000000  00000000  0000eae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005f25  00000000  00000000  0002ad94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009787b  00000000  00000000  00030cb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8534  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027d8  00000000  00000000  000c8578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000cad50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000d20 	.word	0x20000d20
 8000200:	00000000 	.word	0x00000000
 8000204:	08003c50 	.word	0x08003c50

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000d24 	.word	0x20000d24
 8000220:	08003c50 	.word	0x08003c50

08000224 <strcmp>:
 8000224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800022c:	2a01      	cmp	r2, #1
 800022e:	bf28      	it	cs
 8000230:	429a      	cmpcs	r2, r3
 8000232:	d0f7      	beq.n	8000224 <strcmp>
 8000234:	1ad0      	subs	r0, r2, r3
 8000236:	4770      	bx	lr

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000248:	b480      	push	{r7}
 800024a:	b085      	sub	sp, #20
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f003 0307 	and.w	r3, r3, #7
 8000256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000258:	4b0c      	ldr	r3, [pc, #48]	@ (800028c <__NVIC_SetPriorityGrouping+0x44>)
 800025a:	68db      	ldr	r3, [r3, #12]
 800025c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800025e:	68ba      	ldr	r2, [r7, #8]
 8000260:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000264:	4013      	ands	r3, r2
 8000266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800026c:	68bb      	ldr	r3, [r7, #8]
 800026e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000270:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000274:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800027a:	4a04      	ldr	r2, [pc, #16]	@ (800028c <__NVIC_SetPriorityGrouping+0x44>)
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	60d3      	str	r3, [r2, #12]
}
 8000280:	bf00      	nop
 8000282:	3714      	adds	r7, #20
 8000284:	46bd      	mov	sp, r7
 8000286:	bc80      	pop	{r7}
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	e000ed00 	.word	0xe000ed00

08000290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000294:	4b04      	ldr	r3, [pc, #16]	@ (80002a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000296:	68db      	ldr	r3, [r3, #12]
 8000298:	0a1b      	lsrs	r3, r3, #8
 800029a:	f003 0307 	and.w	r3, r3, #7
}
 800029e:	4618      	mov	r0, r3
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bc80      	pop	{r7}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000ed00 	.word	0xe000ed00

080002ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	6039      	str	r1, [r7, #0]
 80002b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	db0a      	blt.n	80002d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	490c      	ldr	r1, [pc, #48]	@ (80002f8 <__NVIC_SetPriority+0x4c>)
 80002c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ca:	0112      	lsls	r2, r2, #4
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	440b      	add	r3, r1
 80002d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002d4:	e00a      	b.n	80002ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	4908      	ldr	r1, [pc, #32]	@ (80002fc <__NVIC_SetPriority+0x50>)
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	f003 030f 	and.w	r3, r3, #15
 80002e2:	3b04      	subs	r3, #4
 80002e4:	0112      	lsls	r2, r2, #4
 80002e6:	b2d2      	uxtb	r2, r2
 80002e8:	440b      	add	r3, r1
 80002ea:	761a      	strb	r2, [r3, #24]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	e000e100 	.word	0xe000e100
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000300:	b480      	push	{r7}
 8000302:	b089      	sub	sp, #36	@ 0x24
 8000304:	af00      	add	r7, sp, #0
 8000306:	60f8      	str	r0, [r7, #12]
 8000308:	60b9      	str	r1, [r7, #8]
 800030a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	f003 0307 	and.w	r3, r3, #7
 8000312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000314:	69fb      	ldr	r3, [r7, #28]
 8000316:	f1c3 0307 	rsb	r3, r3, #7
 800031a:	2b04      	cmp	r3, #4
 800031c:	bf28      	it	cs
 800031e:	2304      	movcs	r3, #4
 8000320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000322:	69fb      	ldr	r3, [r7, #28]
 8000324:	3304      	adds	r3, #4
 8000326:	2b06      	cmp	r3, #6
 8000328:	d902      	bls.n	8000330 <NVIC_EncodePriority+0x30>
 800032a:	69fb      	ldr	r3, [r7, #28]
 800032c:	3b03      	subs	r3, #3
 800032e:	e000      	b.n	8000332 <NVIC_EncodePriority+0x32>
 8000330:	2300      	movs	r3, #0
 8000332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000334:	f04f 32ff 	mov.w	r2, #4294967295
 8000338:	69bb      	ldr	r3, [r7, #24]
 800033a:	fa02 f303 	lsl.w	r3, r2, r3
 800033e:	43da      	mvns	r2, r3
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	401a      	ands	r2, r3
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000348:	f04f 31ff 	mov.w	r1, #4294967295
 800034c:	697b      	ldr	r3, [r7, #20]
 800034e:	fa01 f303 	lsl.w	r3, r1, r3
 8000352:	43d9      	mvns	r1, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000358:	4313      	orrs	r3, r2
         );
}
 800035a:	4618      	mov	r0, r3
 800035c:	3724      	adds	r7, #36	@ 0x24
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr

08000364 <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000364:	b480      	push	{r7}
 8000366:	b089      	sub	sp, #36	@ 0x24
 8000368:	af00      	add	r7, sp, #0
 800036a:	60f8      	str	r0, [r7, #12]
 800036c:	60b9      	str	r1, [r7, #8]
 800036e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	332c      	adds	r3, #44	@ 0x2c
 8000374:	4619      	mov	r1, r3
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800037c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000380:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000382:	69ba      	ldr	r2, [r7, #24]
 8000384:	fa92 f2a2 	rbit	r2, r2
 8000388:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800038a:	697a      	ldr	r2, [r7, #20]
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	b2d2      	uxtb	r2, r2
 8000392:	40d3      	lsrs	r3, r2
 8000394:	009b      	lsls	r3, r3, #2
 8000396:	440b      	add	r3, r1
 8000398:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 800039a:	69fb      	ldr	r3, [r7, #28]
 800039c:	681a      	ldr	r2, [r3, #0]
 800039e:	68bb      	ldr	r3, [r7, #8]
 80003a0:	f003 031f 	and.w	r3, r3, #31
 80003a4:	211f      	movs	r1, #31
 80003a6:	fa01 f303 	lsl.w	r3, r1, r3
 80003aa:	43db      	mvns	r3, r3
 80003ac:	401a      	ands	r2, r3
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	f003 011f 	and.w	r1, r3, #31
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	f003 031f 	and.w	r3, r3, #31
 80003ba:	fa01 f303 	lsl.w	r3, r1, r3
 80003be:	431a      	orrs	r2, r3
 80003c0:	69fb      	ldr	r3, [r7, #28]
 80003c2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80003c4:	bf00      	nop
 80003c6:	3724      	adds	r7, #36	@ 0x24
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr

080003ce <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80003ce:	b480      	push	{r7}
 80003d0:	b08d      	sub	sp, #52	@ 0x34
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	60f8      	str	r0, [r7, #12]
 80003d6:	60b9      	str	r1, [r7, #8]
 80003d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	330c      	adds	r3, #12
 80003de:	4619      	mov	r1, r3
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80003e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80003ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003ec:	69ba      	ldr	r2, [r7, #24]
 80003ee:	fa92 f2a2 	rbit	r2, r2
 80003f2:	617a      	str	r2, [r7, #20]
  return result;
 80003f4:	697a      	ldr	r2, [r7, #20]
 80003f6:	fab2 f282 	clz	r2, r2
 80003fa:	b2d2      	uxtb	r2, r2
 80003fc:	40d3      	lsrs	r3, r2
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	440b      	add	r3, r1
 8000402:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  MODIFY_REG(*preg,
 8000404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000406:	681a      	ldr	r2, [r3, #0]
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 800040e:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8000412:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000414:	6a39      	ldr	r1, [r7, #32]
 8000416:	fa91 f1a1 	rbit	r1, r1
 800041a:	61f9      	str	r1, [r7, #28]
  return result;
 800041c:	69f9      	ldr	r1, [r7, #28]
 800041e:	fab1 f181 	clz	r1, r1
 8000422:	b2c9      	uxtb	r1, r1
 8000424:	40cb      	lsrs	r3, r1
 8000426:	2107      	movs	r1, #7
 8000428:	fa01 f303 	lsl.w	r3, r1, r3
 800042c:	43db      	mvns	r3, r3
 800042e:	401a      	ands	r2, r3
 8000430:	68bb      	ldr	r3, [r7, #8]
 8000432:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8000436:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 800043a:	62b9      	str	r1, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800043c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800043e:	fa91 f1a1 	rbit	r1, r1
 8000442:	6279      	str	r1, [r7, #36]	@ 0x24
  return result;
 8000444:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000446:	fab1 f181 	clz	r1, r1
 800044a:	b2c9      	uxtb	r1, r1
 800044c:	40cb      	lsrs	r3, r1
 800044e:	6879      	ldr	r1, [r7, #4]
 8000450:	fa01 f303 	lsl.w	r3, r1, r3
 8000454:	431a      	orrs	r2, r3
 8000456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000458:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 800045a:	bf00      	nop
 800045c:	3734      	adds	r7, #52	@ 0x34
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr

08000464 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000468:	4b04      	ldr	r3, [pc, #16]	@ (800047c <LL_RCC_HSE_Enable+0x18>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a03      	ldr	r2, [pc, #12]	@ (800047c <LL_RCC_HSE_Enable+0x18>)
 800046e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000472:	6013      	str	r3, [r2, #0]
}
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	bc80      	pop	{r7}
 800047a:	4770      	bx	lr
 800047c:	40021000 	.word	0x40021000

08000480 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000484:	4b06      	ldr	r3, [pc, #24]	@ (80004a0 <LL_RCC_HSE_IsReady+0x20>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800048c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000490:	bf0c      	ite	eq
 8000492:	2301      	moveq	r3, #1
 8000494:	2300      	movne	r3, #0
 8000496:	b2db      	uxtb	r3, r3
}
 8000498:	4618      	mov	r0, r3
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr
 80004a0:	40021000 	.word	0x40021000

080004a4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80004ac:	4b06      	ldr	r3, [pc, #24]	@ (80004c8 <LL_RCC_SetSysClkSource+0x24>)
 80004ae:	685b      	ldr	r3, [r3, #4]
 80004b0:	f023 0203 	bic.w	r2, r3, #3
 80004b4:	4904      	ldr	r1, [pc, #16]	@ (80004c8 <LL_RCC_SetSysClkSource+0x24>)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	604b      	str	r3, [r1, #4]
}
 80004bc:	bf00      	nop
 80004be:	370c      	adds	r7, #12
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	40021000 	.word	0x40021000

080004cc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80004d0:	4b03      	ldr	r3, [pc, #12]	@ (80004e0 <LL_RCC_GetSysClkSource+0x14>)
 80004d2:	685b      	ldr	r3, [r3, #4]
 80004d4:	f003 030c 	and.w	r3, r3, #12
}
 80004d8:	4618      	mov	r0, r3
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr
 80004e0:	40021000 	.word	0x40021000

080004e4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80004ec:	4b06      	ldr	r3, [pc, #24]	@ (8000508 <LL_RCC_SetAHBPrescaler+0x24>)
 80004ee:	685b      	ldr	r3, [r3, #4]
 80004f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80004f4:	4904      	ldr	r1, [pc, #16]	@ (8000508 <LL_RCC_SetAHBPrescaler+0x24>)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4313      	orrs	r3, r2
 80004fa:	604b      	str	r3, [r1, #4]
}
 80004fc:	bf00      	nop
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	40021000 	.word	0x40021000

0800050c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000514:	4b06      	ldr	r3, [pc, #24]	@ (8000530 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800051c:	4904      	ldr	r1, [pc, #16]	@ (8000530 <LL_RCC_SetAPB1Prescaler+0x24>)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4313      	orrs	r3, r2
 8000522:	604b      	str	r3, [r1, #4]
}
 8000524:	bf00      	nop
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	40021000 	.word	0x40021000

08000534 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800053c:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <LL_RCC_SetAPB2Prescaler+0x24>)
 800053e:	685b      	ldr	r3, [r3, #4]
 8000540:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000544:	4904      	ldr	r1, [pc, #16]	@ (8000558 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4313      	orrs	r3, r2
 800054a:	604b      	str	r3, [r1, #4]
}
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	bc80      	pop	{r7}
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	40021000 	.word	0x40021000

0800055c <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8000564:	4b06      	ldr	r3, [pc, #24]	@ (8000580 <LL_RCC_SetADCClockSource+0x24>)
 8000566:	685b      	ldr	r3, [r3, #4]
 8000568:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800056c:	4904      	ldr	r1, [pc, #16]	@ (8000580 <LL_RCC_SetADCClockSource+0x24>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4313      	orrs	r3, r2
 8000572:	604b      	str	r3, [r1, #4]
}
 8000574:	bf00      	nop
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40021000 	.word	0x40021000

08000584 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000588:	4b04      	ldr	r3, [pc, #16]	@ (800059c <LL_RCC_PLL_Enable+0x18>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a03      	ldr	r2, [pc, #12]	@ (800059c <LL_RCC_PLL_Enable+0x18>)
 800058e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000592:	6013      	str	r3, [r2, #0]
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr
 800059c:	40021000 	.word	0x40021000

080005a0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80005a4:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <LL_RCC_PLL_IsReady+0x20>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80005ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80005b0:	bf0c      	ite	eq
 80005b2:	2301      	moveq	r3, #1
 80005b4:	2300      	movne	r3, #0
 80005b6:	b2db      	uxtb	r3, r3
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr
 80005c0:	40021000 	.word	0x40021000

080005c4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80005ce:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <LL_RCC_PLL_ConfigDomain_SYS+0x50>)
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	430b      	orrs	r3, r1
 80005e0:	490c      	ldr	r1, [pc, #48]	@ (8000614 <LL_RCC_PLL_ConfigDomain_SYS+0x50>)
 80005e2:	4313      	orrs	r3, r2
 80005e4:	604b      	str	r3, [r1, #4]
             (Source & (RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE)) | PLLMul);
#if defined(RCC_CFGR2_PREDIV1)
#if defined(RCC_CFGR2_PREDIV1SRC)
  MODIFY_REG(RCC->CFGR2, (RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC),
 80005e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000614 <LL_RCC_PLL_ConfigDomain_SYS+0x50>)
 80005e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80005ee:	f023 030f 	bic.w	r3, r3, #15
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	f002 010f 	and.w	r1, r2, #15
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	0912      	lsrs	r2, r2, #4
 80005fc:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 8000600:	430a      	orrs	r2, r1
 8000602:	4904      	ldr	r1, [pc, #16]	@ (8000614 <LL_RCC_PLL_ConfigDomain_SYS+0x50>)
 8000604:	4313      	orrs	r3, r2
 8000606:	62cb      	str	r3, [r1, #44]	@ 0x2c
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	40021000 	.word	0x40021000

08000618 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000620:	4b08      	ldr	r3, [pc, #32]	@ (8000644 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000622:	69da      	ldr	r2, [r3, #28]
 8000624:	4907      	ldr	r1, [pc, #28]	@ (8000644 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4313      	orrs	r3, r2
 800062a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800062c:	4b05      	ldr	r3, [pc, #20]	@ (8000644 <LL_APB1_GRP1_EnableClock+0x2c>)
 800062e:	69da      	ldr	r2, [r3, #28]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4013      	ands	r3, r2
 8000634:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000636:	68fb      	ldr	r3, [r7, #12]
}
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	40021000 	.word	0x40021000

08000648 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000650:	4b08      	ldr	r3, [pc, #32]	@ (8000674 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000652:	699a      	ldr	r2, [r3, #24]
 8000654:	4907      	ldr	r1, [pc, #28]	@ (8000674 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4313      	orrs	r3, r2
 800065a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800065c:	4b05      	ldr	r3, [pc, #20]	@ (8000674 <LL_APB2_GRP1_EnableClock+0x2c>)
 800065e:	699a      	ldr	r2, [r3, #24]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4013      	ands	r3, r2
 8000664:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000666:	68fb      	ldr	r3, [r7, #12]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	40021000 	.word	0x40021000

08000678 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000680:	4b06      	ldr	r3, [pc, #24]	@ (800069c <LL_FLASH_SetLatency+0x24>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f023 0207 	bic.w	r2, r3, #7
 8000688:	4904      	ldr	r1, [pc, #16]	@ (800069c <LL_FLASH_SetLatency+0x24>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4313      	orrs	r3, r2
 800068e:	600b      	str	r3, [r1, #0]
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	40022000 	.word	0x40022000

080006a0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80006a4:	4b03      	ldr	r3, [pc, #12]	@ (80006b4 <LL_FLASH_GetLatency+0x14>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 0307 	and.w	r3, r3, #7
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr
 80006b4:	40022000 	.word	0x40022000

080006b8 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	60da      	str	r2, [r3, #12]
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr

080006d6 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80006d6:	b480      	push	{r7}
 80006d8:	b083      	sub	sp, #12
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	691b      	ldr	r3, [r3, #16]
 80006e2:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	615a      	str	r2, [r3, #20]
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr

08000700 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f003 0320 	and.w	r3, r3, #32
 8000710:	2b20      	cmp	r3, #32
 8000712:	bf0c      	ite	eq
 8000714:	2301      	moveq	r3, #1
 8000716:	2300      	movne	r3, #0
 8000718:	b2db      	uxtb	r3, r3
}
 800071a:	4618      	mov	r0, r3
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr

08000724 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000734:	2b40      	cmp	r3, #64	@ 0x40
 8000736:	bf0c      	ite	eq
 8000738:	2301      	moveq	r3, #1
 800073a:	2300      	movne	r3, #0
 800073c:	b2db      	uxtb	r3, r3
}
 800073e:	4618      	mov	r0, r3
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr

08000748 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000758:	2b80      	cmp	r3, #128	@ 0x80
 800075a:	bf0c      	ite	eq
 800075c:	2301      	moveq	r3, #1
 800075e:	2300      	movne	r3, #0
 8000760:	b2db      	uxtb	r3, r3
}
 8000762:	4618      	mov	r0, r3
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr

0800076c <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	b2db      	uxtb	r3, r3
}
 800077a:	4618      	mov	r0, r3
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr

08000784 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	460b      	mov	r3, r1
 800078e:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000790:	78fa      	ldrb	r2, [r7, #3]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	605a      	str	r2, [r3, #4]
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr

080007a0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	0a1b      	lsrs	r3, r3, #8
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	611a      	str	r2, [r3, #16]
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr

080007be <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007be:	b480      	push	{r7}
 80007c0:	b083      	sub	sp, #12
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
 80007c6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	0a1b      	lsrs	r3, r3, #8
 80007cc:	b29a      	uxth	r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	615a      	str	r2, [r3, #20]
}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr

080007dc <LL_GPIO_AF_EnableRemap_USART2>:
  * @rmtoll MAPR          USART2_REMAP           LL_GPIO_AF_EnableRemap_USART2
  * @note  ENABLE: Remap     (CTS/PD3, RTS/PD4, TX/PD5, RX/PD6, CK/PD7)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_USART2(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_USART2_REMAP | AFIO_MAPR_SWJ_CFG);
 80007e0:	4b05      	ldr	r3, [pc, #20]	@ (80007f8 <LL_GPIO_AF_EnableRemap_USART2+0x1c>)
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	4a04      	ldr	r2, [pc, #16]	@ (80007f8 <LL_GPIO_AF_EnableRemap_USART2+0x1c>)
 80007e6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80007ea:	f043 0308 	orr.w	r3, r3, #8
 80007ee:	6053      	str	r3, [r2, #4]
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	40010000 	.word	0x40010000

080007fc <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000800:	4b05      	ldr	r3, [pc, #20]	@ (8000818 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000808:	4a03      	ldr	r2, [pc, #12]	@ (8000818 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 800080a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800080e:	6053      	str	r3, [r2, #4]
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	40010000 	.word	0x40010000

0800081c <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Погледни чата с г-н Стефанов, _write e блокираща функция

int _write(int file, char *ptr, int len) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	e011      	b.n	8000852 <_write+0x36>
        while (!LL_USART_IsActiveFlag_TXE(USART2));  // Wait until TX buffer is empty
 800082e:	bf00      	nop
 8000830:	4810      	ldr	r0, [pc, #64]	@ (8000874 <_write+0x58>)
 8000832:	f7ff ff89 	bl	8000748 <LL_USART_IsActiveFlag_TXE>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d0f9      	beq.n	8000830 <_write+0x14>
        LL_USART_TransmitData8(USART2, ptr[i]);      // Send byte
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	68ba      	ldr	r2, [r7, #8]
 8000840:	4413      	add	r3, r2
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	4619      	mov	r1, r3
 8000846:	480b      	ldr	r0, [pc, #44]	@ (8000874 <_write+0x58>)
 8000848:	f7ff ff9c 	bl	8000784 <LL_USART_TransmitData8>
    for (int i = 0; i < len; i++) {
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	3301      	adds	r3, #1
 8000850:	617b      	str	r3, [r7, #20]
 8000852:	697a      	ldr	r2, [r7, #20]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	429a      	cmp	r2, r3
 8000858:	dbe9      	blt.n	800082e <_write+0x12>
    }

    while (!LL_USART_IsActiveFlag_TC(USART2));  // Wait for last transmission to complete
 800085a:	bf00      	nop
 800085c:	4805      	ldr	r0, [pc, #20]	@ (8000874 <_write+0x58>)
 800085e:	f7ff ff61 	bl	8000724 <LL_USART_IsActiveFlag_TC>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d0f9      	beq.n	800085c <_write+0x40>
    return len;
 8000868:	687b      	ldr	r3, [r7, #4]
}
 800086a:	4618      	mov	r0, r3
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40004400 	.word	0x40004400

08000878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 800087e:	2001      	movs	r0, #1
 8000880:	f7ff fee2 	bl	8000648 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000884:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000888:	f7ff fec6 	bl	8000618 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800088c:	2003      	movs	r0, #3
 800088e:	f7ff fcdb 	bl	8000248 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000892:	f7ff fcfd 	bl	8000290 <__NVIC_GetPriorityGrouping>
 8000896:	4603      	mov	r3, r0
 8000898:	2200      	movs	r2, #0
 800089a:	210f      	movs	r1, #15
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fd2f 	bl	8000300 <NVIC_EncodePriority>
 80008a2:	4603      	mov	r3, r0
 80008a4:	4619      	mov	r1, r3
 80008a6:	f04f 30ff 	mov.w	r0, #4294967295
 80008aa:	f7ff fcff 	bl	80002ac <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 80008ae:	f7ff ffa5 	bl	80007fc <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b2:	f000 f863 	bl	800097c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b6:	f000 fa0d 	bl	8000cd4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80008ba:	f000 f8a1 	bl	8000a00 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80008be:	f000 f901 	bl	8000ac4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80008c2:	f000 f957 	bl	8000b74 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80008c6:	f000 f9ad 	bl	8000c24 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  LL_GPIO_SetOutputPin(RST_GPIO, RST_PIN);
 80008ca:	4924      	ldr	r1, [pc, #144]	@ (800095c <main+0xe4>)
 80008cc:	4824      	ldr	r0, [pc, #144]	@ (8000960 <main+0xe8>)
 80008ce:	f7ff ff67 	bl	80007a0 <LL_GPIO_SetOutputPin>
  LL_mDelay(20);
 80008d2:	2014      	movs	r0, #20
 80008d4:	f001 fb44 	bl	8001f60 <LL_mDelay>
  LL_GPIO_ResetOutputPin(RST_GPIO, RST_PIN);
 80008d8:	4920      	ldr	r1, [pc, #128]	@ (800095c <main+0xe4>)
 80008da:	4821      	ldr	r0, [pc, #132]	@ (8000960 <main+0xe8>)
 80008dc:	f7ff ff6f 	bl	80007be <LL_GPIO_ResetOutputPin>
  LL_mDelay(20);
 80008e0:	2014      	movs	r0, #20
 80008e2:	f001 fb3d 	bl	8001f60 <LL_mDelay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (LL_USART_IsActiveFlag_RXNE(USART3))
 80008e6:	481f      	ldr	r0, [pc, #124]	@ (8000964 <main+0xec>)
 80008e8:	f7ff ff0a 	bl	8000700 <LL_USART_IsActiveFlag_RXNE>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d0f9      	beq.n	80008e6 <main+0x6e>
	  {  // Check if new byte is received
		  rxByte = LL_USART_ReceiveData8(USART3);  // Read received byte
 80008f2:	481c      	ldr	r0, [pc, #112]	@ (8000964 <main+0xec>)
 80008f4:	f7ff ff3a 	bl	800076c <LL_USART_ReceiveData8>
 80008f8:	4603      	mov	r3, r0
 80008fa:	461a      	mov	r2, r3
 80008fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000968 <main+0xf0>)
 80008fe:	701a      	strb	r2, [r3, #0]
		  // Print the received byte
//		  printf("Received byte: '%c' (0x%02X)\n", rxByte, rxByte);
//		  fflush(stdout);

		  // Store byte in buffer (ensuring it doesn't overflow)
		  if (rxIndex < (RX_BUFFER_SIZE - 1)) {
 8000900:	4b1a      	ldr	r3, [pc, #104]	@ (800096c <main+0xf4>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b62      	cmp	r3, #98	@ 0x62
 8000906:	d80a      	bhi.n	800091e <main+0xa6>
			  rxBuffer[rxIndex++] = rxByte;
 8000908:	4b18      	ldr	r3, [pc, #96]	@ (800096c <main+0xf4>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	1c5a      	adds	r2, r3, #1
 800090e:	b2d1      	uxtb	r1, r2
 8000910:	4a16      	ldr	r2, [pc, #88]	@ (800096c <main+0xf4>)
 8000912:	7011      	strb	r1, [r2, #0]
 8000914:	461a      	mov	r2, r3
 8000916:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <main+0xf0>)
 8000918:	7819      	ldrb	r1, [r3, #0]
 800091a:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <main+0xf8>)
 800091c:	5499      	strb	r1, [r3, r2]
		  }

		  // If newline received, process the command
		  if (rxByte == '\n' || rxByte == '\r') {
 800091e:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <main+0xf0>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b0a      	cmp	r3, #10
 8000924:	d003      	beq.n	800092e <main+0xb6>
 8000926:	4b10      	ldr	r3, [pc, #64]	@ (8000968 <main+0xf0>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b0d      	cmp	r3, #13
 800092c:	d1db      	bne.n	80008e6 <main+0x6e>
			  rxBuffer[rxIndex] = '\0';  // Null-terminate
 800092e:	4b0f      	ldr	r3, [pc, #60]	@ (800096c <main+0xf4>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	461a      	mov	r2, r3
 8000934:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <main+0xf8>)
 8000936:	2100      	movs	r1, #0
 8000938:	5499      	strb	r1, [r3, r2]
			  printf("Received command: %s\n", rxBuffer);
 800093a:	490d      	ldr	r1, [pc, #52]	@ (8000970 <main+0xf8>)
 800093c:	480d      	ldr	r0, [pc, #52]	@ (8000974 <main+0xfc>)
 800093e:	f001 fcbf 	bl	80022c0 <iprintf>
			  fflush(stdout);
 8000942:	4b0d      	ldr	r3, [pc, #52]	@ (8000978 <main+0x100>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	4618      	mov	r0, r3
 800094a:	f001 fbe3 	bl	8002114 <fflush>

			  processCommand((char *)rxBuffer);  // Parse and execute command
 800094e:	4808      	ldr	r0, [pc, #32]	@ (8000970 <main+0xf8>)
 8000950:	f000 fd34 	bl	80013bc <processCommand>
			  rxIndex = 0;  // Reset buffer for next command
 8000954:	4b05      	ldr	r3, [pc, #20]	@ (800096c <main+0xf4>)
 8000956:	2200      	movs	r2, #0
 8000958:	701a      	strb	r2, [r3, #0]
	  if (LL_USART_IsActiveFlag_RXNE(USART3))
 800095a:	e7c4      	b.n	80008e6 <main+0x6e>
 800095c:	04020002 	.word	0x04020002
 8000960:	40010c00 	.word	0x40010c00
 8000964:	40004800 	.word	0x40004800
 8000968:	20000da0 	.word	0x20000da0
 800096c:	20000da1 	.word	0x20000da1
 8000970:	20000d3c 	.word	0x20000d3c
 8000974:	08003c68 	.word	0x08003c68
 8000978:	20000cd0 	.word	0x20000cd0

0800097c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000980:	2002      	movs	r0, #2
 8000982:	f7ff fe79 	bl	8000678 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000986:	bf00      	nop
 8000988:	f7ff fe8a 	bl	80006a0 <LL_FLASH_GetLatency>
 800098c:	4603      	mov	r3, r0
 800098e:	2b02      	cmp	r3, #2
 8000990:	d1fa      	bne.n	8000988 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 8000992:	f7ff fd67 	bl	8000464 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000996:	bf00      	nop
 8000998:	f7ff fd72 	bl	8000480 <LL_RCC_HSE_IsReady>
 800099c:	4603      	mov	r3, r0
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d1fa      	bne.n	8000998 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 80009a2:	f44f 11e0 	mov.w	r1, #1835008	@ 0x1c0000
 80009a6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80009aa:	f7ff fe0b 	bl	80005c4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80009ae:	f7ff fde9 	bl	8000584 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80009b2:	bf00      	nop
 80009b4:	f7ff fdf4 	bl	80005a0 <LL_RCC_PLL_IsReady>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d1fa      	bne.n	80009b4 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80009be:	2000      	movs	r0, #0
 80009c0:	f7ff fd90 	bl	80004e4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80009c4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80009c8:	f7ff fda0 	bl	800050c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80009cc:	2000      	movs	r0, #0
 80009ce:	f7ff fdb1 	bl	8000534 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80009d2:	2002      	movs	r0, #2
 80009d4:	f7ff fd66 	bl	80004a4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80009d8:	bf00      	nop
 80009da:	f7ff fd77 	bl	80004cc <LL_RCC_GetSysClkSource>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b08      	cmp	r3, #8
 80009e2:	d1fa      	bne.n	80009da <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(72000000);
 80009e4:	4805      	ldr	r0, [pc, #20]	@ (80009fc <SystemClock_Config+0x80>)
 80009e6:	f001 faad 	bl	8001f44 <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 80009ea:	4804      	ldr	r0, [pc, #16]	@ (80009fc <SystemClock_Config+0x80>)
 80009ec:	f001 fadc 	bl	8001fa8 <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_8);
 80009f0:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 80009f4:	f7ff fdb2 	bl	800055c <LL_RCC_SetADCClockSource>
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	044aa200 	.word	0x044aa200

08000a00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08e      	sub	sp, #56	@ 0x38
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000a06:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000a10:	2300      	movs	r3, #0
 8000a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000a14:	f107 0318 	add.w	r3, r7, #24
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8000a32:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a36:	f7ff fe07 	bl	8000648 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000a3a:	2004      	movs	r0, #4
 8000a3c:	f7ff fe04 	bl	8000648 <LL_APB2_GRP1_EnableClock>
  PA4   ------> ADC1_IN4
  PA5   ------> ADC1_IN5
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 8000a40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a44:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	481a      	ldr	r0, [pc, #104]	@ (8000ab8 <MX_ADC1_Init+0xb8>)
 8000a50:	f000 ff81 	bl	8001956 <LL_GPIO_Init>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000a54:	2300      	movs	r3, #0
 8000a56:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000a5c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a60:	4619      	mov	r1, r3
 8000a62:	4816      	ldr	r0, [pc, #88]	@ (8000abc <MX_ADC1_Init+0xbc>)
 8000a64:	f000 fe52 	bl	800170c <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000a6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a70:	4619      	mov	r1, r3
 8000a72:	4812      	ldr	r0, [pc, #72]	@ (8000abc <MX_ADC1_Init+0xbc>)
 8000a74:	f000 fe18 	bl	80016a8 <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000a78:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
 8000a7c:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8000a86:	2302      	movs	r3, #2
 8000a88:	627b      	str	r3, [r7, #36]	@ 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000a8e:	f107 0318 	add.w	r3, r7, #24
 8000a92:	4619      	mov	r1, r3
 8000a94:	4809      	ldr	r0, [pc, #36]	@ (8000abc <MX_ADC1_Init+0xbc>)
 8000a96:	f000 fe60 	bl	800175a <LL_ADC_REG_Init>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8000a9a:	4a09      	ldr	r2, [pc, #36]	@ (8000ac0 <MX_ADC1_Init+0xc0>)
 8000a9c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000aa0:	4806      	ldr	r0, [pc, #24]	@ (8000abc <MX_ADC1_Init+0xbc>)
 8000aa2:	f7ff fc5f 	bl	8000364 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	4905      	ldr	r1, [pc, #20]	@ (8000ac0 <MX_ADC1_Init+0xc0>)
 8000aaa:	4804      	ldr	r0, [pc, #16]	@ (8000abc <MX_ADC1_Init+0xbc>)
 8000aac:	f7ff fc8f 	bl	80003ce <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	3738      	adds	r7, #56	@ 0x38
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40010800 	.word	0x40010800
 8000abc:	40012400 	.word	0x40012400
 8000ac0:	02300001 	.word	0x02300001

08000ac4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08c      	sub	sp, #48	@ 0x30
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]
 8000ada:	615a      	str	r2, [r3, #20]
 8000adc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ade:	463b      	mov	r3, r7
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000aec:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000af0:	f7ff fdaa 	bl	8000648 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000af4:	2004      	movs	r0, #4
 8000af6:	f7ff fda7 	bl	8000648 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000afa:	4b1a      	ldr	r3, [pc, #104]	@ (8000b64 <MX_USART1_UART_Init+0xa0>)
 8000afc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000afe:	2309      	movs	r3, #9
 8000b00:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000b02:	2303      	movs	r3, #3
 8000b04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4816      	ldr	r0, [pc, #88]	@ (8000b68 <MX_USART1_UART_Init+0xa4>)
 8000b10:	f000 ff21 	bl	8001956 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000b14:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <MX_USART1_UART_Init+0xa8>)
 8000b16:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000b18:	2304      	movs	r3, #4
 8000b1a:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1c:	463b      	mov	r3, r7
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4811      	ldr	r0, [pc, #68]	@ (8000b68 <MX_USART1_UART_Init+0xa4>)
 8000b22:	f000 ff18 	bl	8001956 <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000b26:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000b2a:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000b38:	230c      	movs	r3, #12
 8000b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4809      	ldr	r0, [pc, #36]	@ (8000b70 <MX_USART1_UART_Init+0xac>)
 8000b4c:	f001 f96e 	bl	8001e2c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8000b50:	4807      	ldr	r0, [pc, #28]	@ (8000b70 <MX_USART1_UART_Init+0xac>)
 8000b52:	f7ff fdc0 	bl	80006d6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000b56:	4806      	ldr	r0, [pc, #24]	@ (8000b70 <MX_USART1_UART_Init+0xac>)
 8000b58:	f7ff fdae 	bl	80006b8 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	3730      	adds	r7, #48	@ 0x30
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	04020002 	.word	0x04020002
 8000b68:	40010800 	.word	0x40010800
 8000b6c:	04040004 	.word	0x04040004
 8000b70:	40013800 	.word	0x40013800

08000b74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08c      	sub	sp, #48	@ 0x30
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	611a      	str	r2, [r3, #16]
 8000b8a:	615a      	str	r2, [r3, #20]
 8000b8c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8e:	463b      	mov	r3, r7
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000b9c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000ba0:	f7ff fd3a 	bl	8000618 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8000ba4:	2020      	movs	r0, #32
 8000ba6:	f7ff fd4f 	bl	8000648 <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PD5   ------> USART2_TX
  PD6   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000baa:	f242 0320 	movw	r3, #8224	@ 0x2020
 8000bae:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000bb0:	2309      	movs	r3, #9
 8000bb2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4816      	ldr	r0, [pc, #88]	@ (8000c1c <MX_USART2_UART_Init+0xa8>)
 8000bc2:	f000 fec8 	bl	8001956 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000bc6:	f244 0340 	movw	r3, #16448	@ 0x4040
 8000bca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000bcc:	2304      	movs	r3, #4
 8000bce:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4811      	ldr	r0, [pc, #68]	@ (8000c1c <MX_USART2_UART_Init+0xa8>)
 8000bd6:	f000 febe 	bl	8001956 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_USART2();
 8000bda:	f7ff fdff 	bl	80007dc <LL_GPIO_AF_EnableRemap_USART2>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000bde:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000be2:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000bf0:	230c      	movs	r3, #12
 8000bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4619      	mov	r1, r3
 8000c02:	4807      	ldr	r0, [pc, #28]	@ (8000c20 <MX_USART2_UART_Init+0xac>)
 8000c04:	f001 f912 	bl	8001e2c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000c08:	4805      	ldr	r0, [pc, #20]	@ (8000c20 <MX_USART2_UART_Init+0xac>)
 8000c0a:	f7ff fd64 	bl	80006d6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000c0e:	4804      	ldr	r0, [pc, #16]	@ (8000c20 <MX_USART2_UART_Init+0xac>)
 8000c10:	f7ff fd52 	bl	80006b8 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	3730      	adds	r7, #48	@ 0x30
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40011400 	.word	0x40011400
 8000c20:	40004400 	.word	0x40004400

08000c24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08c      	sub	sp, #48	@ 0x30
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
 8000c38:	611a      	str	r2, [r3, #16]
 8000c3a:	615a      	str	r2, [r3, #20]
 8000c3c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3e:	463b      	mov	r3, r7
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8000c4c:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8000c50:	f7ff fce2 	bl	8000618 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8000c54:	2008      	movs	r0, #8
 8000c56:	f7ff fcf7 	bl	8000648 <LL_APB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc4 <MX_USART3_UART_Init+0xa0>)
 8000c5c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c5e:	2309      	movs	r3, #9
 8000c60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000c62:	2303      	movs	r3, #3
 8000c64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4816      	ldr	r0, [pc, #88]	@ (8000cc8 <MX_USART3_UART_Init+0xa4>)
 8000c70:	f000 fe71 	bl	8001956 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8000c74:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <MX_USART3_UART_Init+0xa8>)
 8000c76:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000c78:	2304      	movs	r3, #4
 8000c7a:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4811      	ldr	r0, [pc, #68]	@ (8000cc8 <MX_USART3_UART_Init+0xa4>)
 8000c82:	f000 fe68 	bl	8001956 <LL_GPIO_Init>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000c86:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000c8a:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000c98:	230c      	movs	r3, #12
 8000c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART3, &USART_InitStruct);
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4809      	ldr	r0, [pc, #36]	@ (8000cd0 <MX_USART3_UART_Init+0xac>)
 8000cac:	f001 f8be 	bl	8001e2c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8000cb0:	4807      	ldr	r0, [pc, #28]	@ (8000cd0 <MX_USART3_UART_Init+0xac>)
 8000cb2:	f7ff fd10 	bl	80006d6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8000cb6:	4806      	ldr	r0, [pc, #24]	@ (8000cd0 <MX_USART3_UART_Init+0xac>)
 8000cb8:	f7ff fcfe 	bl	80006b8 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	3730      	adds	r7, #48	@ 0x30
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	04040004 	.word	0x04040004
 8000cc8:	40010c00 	.word	0x40010c00
 8000ccc:	04080008 	.word	0x04080008
 8000cd0:	40004800 	.word	0x40004800

08000cd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOE);
 8000ce8:	2040      	movs	r0, #64	@ 0x40
 8000cea:	f7ff fcad 	bl	8000648 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8000cee:	2010      	movs	r0, #16
 8000cf0:	f7ff fcaa 	bl	8000648 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000cf4:	2004      	movs	r0, #4
 8000cf6:	f7ff fca7 	bl	8000648 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8000cfa:	2008      	movs	r0, #8
 8000cfc:	f7ff fca4 	bl	8000648 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8000d00:	2020      	movs	r0, #32
 8000d02:	f7ff fca1 	bl	8000648 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5
 8000d06:	492d      	ldr	r1, [pc, #180]	@ (8000dbc <MX_GPIO_Init+0xe8>)
 8000d08:	482d      	ldr	r0, [pc, #180]	@ (8000dc0 <MX_GPIO_Init+0xec>)
 8000d0a:	f7ff fd58 	bl	80007be <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9
                          |LL_GPIO_PIN_0);

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2
 8000d0e:	492d      	ldr	r1, [pc, #180]	@ (8000dc4 <MX_GPIO_Init+0xf0>)
 8000d10:	482d      	ldr	r0, [pc, #180]	@ (8000dc8 <MX_GPIO_Init+0xf4>)
 8000d12:	f7ff fd54 	bl	80007be <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6
                          |LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_12
 8000d16:	492d      	ldr	r1, [pc, #180]	@ (8000dcc <MX_GPIO_Init+0xf8>)
 8000d18:	482d      	ldr	r0, [pc, #180]	@ (8000dd0 <MX_GPIO_Init+0xfc>)
 8000d1a:	f7ff fd50 	bl	80007be <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_3
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11
 8000d1e:	492d      	ldr	r1, [pc, #180]	@ (8000dd4 <MX_GPIO_Init+0x100>)
 8000d20:	482d      	ldr	r0, [pc, #180]	@ (8000dd8 <MX_GPIO_Init+0x104>)
 8000d22:	f7ff fd4c 	bl	80007be <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15
                          |LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_7);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5
 8000d26:	4b25      	ldr	r3, [pc, #148]	@ (8000dbc <MX_GPIO_Init+0xe8>)
 8000d28:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9
                          |LL_GPIO_PIN_0;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4821      	ldr	r0, [pc, #132]	@ (8000dc0 <MX_GPIO_Init+0xec>)
 8000d3c:	f000 fe0b 	bl	8001956 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2
 8000d40:	4b20      	ldr	r3, [pc, #128]	@ (8000dc4 <MX_GPIO_Init+0xf0>)
 8000d42:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6
                          |LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d44:	2301      	movs	r3, #1
 8000d46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	4619      	mov	r1, r3
 8000d54:	481c      	ldr	r0, [pc, #112]	@ (8000dc8 <MX_GPIO_Init+0xf4>)
 8000d56:	f000 fdfe 	bl	8001956 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_12
 8000d5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dcc <MX_GPIO_Init+0xf8>)
 8000d5c:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_3
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d62:	2302      	movs	r3, #2
 8000d64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4818      	ldr	r0, [pc, #96]	@ (8000dd0 <MX_GPIO_Init+0xfc>)
 8000d70:	f000 fdf1 	bl	8001956 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14
 8000d74:	4b19      	ldr	r3, [pc, #100]	@ (8000ddc <MX_GPIO_Init+0x108>)
 8000d76:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_15;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000d78:	2304      	movs	r3, #4
 8000d7a:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	4619      	mov	r1, r3
 8000d80:	480f      	ldr	r0, [pc, #60]	@ (8000dc0 <MX_GPIO_Init+0xec>)
 8000d82:	f000 fde8 	bl	8001956 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11
 8000d86:	4b13      	ldr	r3, [pc, #76]	@ (8000dd4 <MX_GPIO_Init+0x100>)
 8000d88:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15
                          |LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	4619      	mov	r1, r3
 8000d9a:	480f      	ldr	r0, [pc, #60]	@ (8000dd8 <MX_GPIO_Init+0x104>)
 8000d9c:	f000 fddb 	bl	8001956 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000da0:	f240 2302 	movw	r3, #514	@ 0x202
 8000da4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000da6:	2300      	movs	r3, #0
 8000da8:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	4619      	mov	r1, r3
 8000dae:	4804      	ldr	r0, [pc, #16]	@ (8000dc0 <MX_GPIO_Init+0xec>)
 8000db0:	f000 fdd1 	bl	8001956 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000db4:	bf00      	nop
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	0403fdff 	.word	0x0403fdff
 8000dc0:	40011800 	.word	0x40011800
 8000dc4:	0423ffff 	.word	0x0423ffff
 8000dc8:	40011000 	.word	0x40011000
 8000dcc:	04f3ffff 	.word	0x04f3ffff
 8000dd0:	40010c00 	.word	0x40010c00
 8000dd4:	04ff9bff 	.word	0x04ff9bff
 8000dd8:	40011400 	.word	0x40011400
 8000ddc:	04f800f8 	.word	0x04f800f8

08000de0 <LL_GPIO_SetOutputPin>:
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	0a1b      	lsrs	r3, r3, #8
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	611a      	str	r2, [r3, #16]
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr

08000dfe <LL_GPIO_ResetOutputPin>:
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
 8000e06:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	0a1b      	lsrs	r3, r3, #8
 8000e0c:	b29a      	uxth	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	615a      	str	r2, [r3, #20]
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr

08000e1c <getPortName>:
    {GPIOE, LL_GPIO_PIN_7, &xPins32, &yPins32},  // CS_32 (PE7)
    {GPIOE, LL_GPIO_PIN_8, &xPins33, &yPins33},  // CS_33 (PE8)
    {GPIOE, LL_GPIO_PIN_9, &xPins34, &yPins34}   // CS_34 (PE9)
};

const char* getPortName(GPIO_TypeDef* port) {
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
    if (port == GPIOA) return "GPIOA";
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a11      	ldr	r2, [pc, #68]	@ (8000e6c <getPortName+0x50>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d101      	bne.n	8000e30 <getPortName+0x14>
 8000e2c:	4b10      	ldr	r3, [pc, #64]	@ (8000e70 <getPortName+0x54>)
 8000e2e:	e018      	b.n	8000e62 <getPortName+0x46>
    if (port == GPIOB) return "GPIOB";
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a10      	ldr	r2, [pc, #64]	@ (8000e74 <getPortName+0x58>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d101      	bne.n	8000e3c <getPortName+0x20>
 8000e38:	4b0f      	ldr	r3, [pc, #60]	@ (8000e78 <getPortName+0x5c>)
 8000e3a:	e012      	b.n	8000e62 <getPortName+0x46>
    if (port == GPIOC) return "GPIOC";
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a0f      	ldr	r2, [pc, #60]	@ (8000e7c <getPortName+0x60>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d101      	bne.n	8000e48 <getPortName+0x2c>
 8000e44:	4b0e      	ldr	r3, [pc, #56]	@ (8000e80 <getPortName+0x64>)
 8000e46:	e00c      	b.n	8000e62 <getPortName+0x46>
    if (port == GPIOD) return "GPIOD";
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e84 <getPortName+0x68>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d101      	bne.n	8000e54 <getPortName+0x38>
 8000e50:	4b0d      	ldr	r3, [pc, #52]	@ (8000e88 <getPortName+0x6c>)
 8000e52:	e006      	b.n	8000e62 <getPortName+0x46>
    if (port == GPIOE) return "GPIOE";
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a0d      	ldr	r2, [pc, #52]	@ (8000e8c <getPortName+0x70>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d101      	bne.n	8000e60 <getPortName+0x44>
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e90 <getPortName+0x74>)
 8000e5e:	e000      	b.n	8000e62 <getPortName+0x46>
    return "UNKNOWN";
 8000e60:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <getPortName+0x78>)
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr
 8000e6c:	40010800 	.word	0x40010800
 8000e70:	08004170 	.word	0x08004170
 8000e74:	40010c00 	.word	0x40010c00
 8000e78:	08004178 	.word	0x08004178
 8000e7c:	40011000 	.word	0x40011000
 8000e80:	08004180 	.word	0x08004180
 8000e84:	40011400 	.word	0x40011400
 8000e88:	08004188 	.word	0x08004188
 8000e8c:	40011800 	.word	0x40011800
 8000e90:	08004190 	.word	0x08004190
 8000e94:	08004198 	.word	0x08004198

08000e98 <setConnection>:

MainTrack mainTracks[32] = {0};

// Set connection function with dynamic CS handling
void setConnection(int x, int y, MUX mux, uint8_t mode) {
 8000e98:	b082      	sub	sp, #8
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
 8000ea2:	6039      	str	r1, [r7, #0]
 8000ea4:	f107 0110 	add.w	r1, r7, #16
 8000ea8:	e881 000c 	stmia.w	r1, {r2, r3}
    if (x < 0 || x > 15 || y < 0 || y > 7) {
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f2c0 80b1 	blt.w	8001016 <setConnection+0x17e>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2b0f      	cmp	r3, #15
 8000eb8:	f300 80ad 	bgt.w	8001016 <setConnection+0x17e>
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f2c0 80a9 	blt.w	8001016 <setConnection+0x17e>
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	2b07      	cmp	r3, #7
 8000ec8:	f300 80a5 	bgt.w	8001016 <setConnection+0x17e>
        return;
    }


    // Activate multiplexer using the struct for CS
    LL_GPIO_ResetOutputPin(mux.port, mux.pin);
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	8aba      	ldrh	r2, [r7, #20]
 8000ed0:	4611      	mov	r1, r2
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff ff93 	bl	8000dfe <LL_GPIO_ResetOutputPin>
    LL_mDelay(20);
 8000ed8:	2014      	movs	r0, #20
 8000eda:	f001 f841 	bl	8001f60 <LL_mDelay>
    LL_GPIO_SetOutputPin(mux.port, mux.pin);
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	8aba      	ldrh	r2, [r7, #20]
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff7b 	bl	8000de0 <LL_GPIO_SetOutputPin>

    // Set X address
    // Set X address
    (x & 0x01) ? LL_GPIO_SetOutputPin(AX_GPIO, AX0_PIN) : LL_GPIO_ResetOutputPin(AX_GPIO, AX0_PIN);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d005      	beq.n	8000f00 <setConnection+0x68>
 8000ef4:	f244 0140 	movw	r1, #16448	@ 0x4040
 8000ef8:	484a      	ldr	r0, [pc, #296]	@ (8001024 <setConnection+0x18c>)
 8000efa:	f7ff ff71 	bl	8000de0 <LL_GPIO_SetOutputPin>
 8000efe:	e004      	b.n	8000f0a <setConnection+0x72>
 8000f00:	f244 0140 	movw	r1, #16448	@ 0x4040
 8000f04:	4847      	ldr	r0, [pc, #284]	@ (8001024 <setConnection+0x18c>)
 8000f06:	f7ff ff7a 	bl	8000dfe <LL_GPIO_ResetOutputPin>
    (x & 0x02) ? LL_GPIO_SetOutputPin(AX_GPIO, AX1_PIN) : LL_GPIO_ResetOutputPin(AX_GPIO, AX1_PIN);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f003 0302 	and.w	r3, r3, #2
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d005      	beq.n	8000f20 <setConnection+0x88>
 8000f14:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000f18:	4842      	ldr	r0, [pc, #264]	@ (8001024 <setConnection+0x18c>)
 8000f1a:	f7ff ff61 	bl	8000de0 <LL_GPIO_SetOutputPin>
 8000f1e:	e004      	b.n	8000f2a <setConnection+0x92>
 8000f20:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000f24:	483f      	ldr	r0, [pc, #252]	@ (8001024 <setConnection+0x18c>)
 8000f26:	f7ff ff6a 	bl	8000dfe <LL_GPIO_ResetOutputPin>
    (x & 0x04) ? LL_GPIO_SetOutputPin(AX_GPIO, AX2_PIN) : LL_GPIO_ResetOutputPin(AX_GPIO, AX2_PIN);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f003 0304 	and.w	r3, r3, #4
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d005      	beq.n	8000f40 <setConnection+0xa8>
 8000f34:	f640 0108 	movw	r1, #2056	@ 0x808
 8000f38:	483a      	ldr	r0, [pc, #232]	@ (8001024 <setConnection+0x18c>)
 8000f3a:	f7ff ff51 	bl	8000de0 <LL_GPIO_SetOutputPin>
 8000f3e:	e004      	b.n	8000f4a <setConnection+0xb2>
 8000f40:	f640 0108 	movw	r1, #2056	@ 0x808
 8000f44:	4837      	ldr	r0, [pc, #220]	@ (8001024 <setConnection+0x18c>)
 8000f46:	f7ff ff5a 	bl	8000dfe <LL_GPIO_ResetOutputPin>
    (x & 0x08) ? LL_GPIO_SetOutputPin(AX_GPIO, AX3_PIN) : LL_GPIO_ResetOutputPin(AX_GPIO, AX3_PIN);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f003 0308 	and.w	r3, r3, #8
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d005      	beq.n	8000f60 <setConnection+0xc8>
 8000f54:	f242 0120 	movw	r1, #8224	@ 0x2020
 8000f58:	4832      	ldr	r0, [pc, #200]	@ (8001024 <setConnection+0x18c>)
 8000f5a:	f7ff ff41 	bl	8000de0 <LL_GPIO_SetOutputPin>
 8000f5e:	e004      	b.n	8000f6a <setConnection+0xd2>
 8000f60:	f242 0120 	movw	r1, #8224	@ 0x2020
 8000f64:	482f      	ldr	r0, [pc, #188]	@ (8001024 <setConnection+0x18c>)
 8000f66:	f7ff ff4a 	bl	8000dfe <LL_GPIO_ResetOutputPin>

    // Set Y address
    (y & 0x01) ? LL_GPIO_SetOutputPin(AY_GPIO, AY0_PIN) : LL_GPIO_ResetOutputPin(AY_GPIO, AY0_PIN);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d005      	beq.n	8000f80 <setConnection+0xe8>
 8000f74:	f240 1101 	movw	r1, #257	@ 0x101
 8000f78:	482a      	ldr	r0, [pc, #168]	@ (8001024 <setConnection+0x18c>)
 8000f7a:	f7ff ff31 	bl	8000de0 <LL_GPIO_SetOutputPin>
 8000f7e:	e004      	b.n	8000f8a <setConnection+0xf2>
 8000f80:	f240 1101 	movw	r1, #257	@ 0x101
 8000f84:	4827      	ldr	r0, [pc, #156]	@ (8001024 <setConnection+0x18c>)
 8000f86:	f7ff ff3a 	bl	8000dfe <LL_GPIO_ResetOutputPin>
    (y & 0x02) ? LL_GPIO_SetOutputPin(AY_GPIO, AY1_PIN) : LL_GPIO_ResetOutputPin(AY_GPIO, AY1_PIN);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d005      	beq.n	8000fa0 <setConnection+0x108>
 8000f94:	f240 2102 	movw	r1, #514	@ 0x202
 8000f98:	4822      	ldr	r0, [pc, #136]	@ (8001024 <setConnection+0x18c>)
 8000f9a:	f7ff ff21 	bl	8000de0 <LL_GPIO_SetOutputPin>
 8000f9e:	e004      	b.n	8000faa <setConnection+0x112>
 8000fa0:	f240 2102 	movw	r1, #514	@ 0x202
 8000fa4:	481f      	ldr	r0, [pc, #124]	@ (8001024 <setConnection+0x18c>)
 8000fa6:	f7ff ff2a 	bl	8000dfe <LL_GPIO_ResetOutputPin>
    (y & 0x04) ? LL_GPIO_SetOutputPin(AY_GPIO, AY2_PIN) : LL_GPIO_ResetOutputPin(AY_GPIO, AY2_PIN);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	f003 0304 	and.w	r3, r3, #4
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d005      	beq.n	8000fc0 <setConnection+0x128>
 8000fb4:	f240 4104 	movw	r1, #1028	@ 0x404
 8000fb8:	481a      	ldr	r0, [pc, #104]	@ (8001024 <setConnection+0x18c>)
 8000fba:	f7ff ff11 	bl	8000de0 <LL_GPIO_SetOutputPin>
 8000fbe:	e004      	b.n	8000fca <setConnection+0x132>
 8000fc0:	f240 4104 	movw	r1, #1028	@ 0x404
 8000fc4:	4817      	ldr	r0, [pc, #92]	@ (8001024 <setConnection+0x18c>)
 8000fc6:	f7ff ff1a 	bl	8000dfe <LL_GPIO_ResetOutputPin>


    // Set data pin
    mode ? LL_GPIO_SetOutputPin(DAT_GPIO, DAT_PIN) : LL_GPIO_ResetOutputPin(DAT_GPIO, DAT_PIN);
 8000fca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d005      	beq.n	8000fde <setConnection+0x146>
 8000fd2:	f248 0180 	movw	r1, #32896	@ 0x8080
 8000fd6:	4813      	ldr	r0, [pc, #76]	@ (8001024 <setConnection+0x18c>)
 8000fd8:	f7ff ff02 	bl	8000de0 <LL_GPIO_SetOutputPin>
 8000fdc:	e004      	b.n	8000fe8 <setConnection+0x150>
 8000fde:	f248 0180 	movw	r1, #32896	@ 0x8080
 8000fe2:	4810      	ldr	r0, [pc, #64]	@ (8001024 <setConnection+0x18c>)
 8000fe4:	f7ff ff0b 	bl	8000dfe <LL_GPIO_ResetOutputPin>

    // Strobe signal
    LL_mDelay(20);
 8000fe8:	2014      	movs	r0, #20
 8000fea:	f000 ffb9 	bl	8001f60 <LL_mDelay>
	LL_GPIO_SetOutputPin(STB_GPIO, STB_PIN);
 8000fee:	490e      	ldr	r1, [pc, #56]	@ (8001028 <setConnection+0x190>)
 8000ff0:	480c      	ldr	r0, [pc, #48]	@ (8001024 <setConnection+0x18c>)
 8000ff2:	f7ff fef5 	bl	8000de0 <LL_GPIO_SetOutputPin>
	LL_mDelay(20);
 8000ff6:	2014      	movs	r0, #20
 8000ff8:	f000 ffb2 	bl	8001f60 <LL_mDelay>
	LL_GPIO_ResetOutputPin(STB_GPIO, STB_PIN);
 8000ffc:	490a      	ldr	r1, [pc, #40]	@ (8001028 <setConnection+0x190>)
 8000ffe:	4809      	ldr	r0, [pc, #36]	@ (8001024 <setConnection+0x18c>)
 8001000:	f7ff fefd 	bl	8000dfe <LL_GPIO_ResetOutputPin>

	LL_mDelay(200);
 8001004:	20c8      	movs	r0, #200	@ 0xc8
 8001006:	f000 ffab 	bl	8001f60 <LL_mDelay>

	LL_GPIO_ResetOutputPin(DAT_GPIO, DAT_PIN);
 800100a:	f248 0180 	movw	r1, #32896	@ 0x8080
 800100e:	4805      	ldr	r0, [pc, #20]	@ (8001024 <setConnection+0x18c>)
 8001010:	f7ff fef5 	bl	8000dfe <LL_GPIO_ResetOutputPin>
 8001014:	e000      	b.n	8001018 <setConnection+0x180>
        return;
 8001016:	bf00      	nop
}
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001020:	b002      	add	sp, #8
 8001022:	4770      	bx	lr
 8001024:	40010c00 	.word	0x40010c00
 8001028:	04010001 	.word	0x04010001

0800102c <route>:

void route(int breadboardPin1, int breadboardPin2, int net_id, MUX *muxes, size_t muxCount, uint8_t mode, RGB rgb) {
 800102c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800102e:	b0a5      	sub	sp, #148	@ 0x94
 8001030:	af0c      	add	r7, sp, #48	@ 0x30
 8001032:	61f8      	str	r0, [r7, #28]
 8001034:	61b9      	str	r1, [r7, #24]
 8001036:	617a      	str	r2, [r7, #20]
 8001038:	613b      	str	r3, [r7, #16]

    char pin1Name[6], pin2Name[6];
    snprintf(pin1Name, sizeof(pin1Name), "B_%d", breadboardPin1);
 800103a:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	4a9c      	ldr	r2, [pc, #624]	@ (80012b4 <route+0x288>)
 8001042:	2106      	movs	r1, #6
 8001044:	f001 f9ac 	bl	80023a0 <sniprintf>
    snprintf(pin2Name, sizeof(pin2Name), "B_%d", breadboardPin2);
 8001048:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	4a99      	ldr	r2, [pc, #612]	@ (80012b4 <route+0x288>)
 8001050:	2106      	movs	r1, #6
 8001052:	f001 f9a5 	bl	80023a0 <sniprintf>


    printf("Routing %s to %s with net ID: %d\n", pin1Name, pin2Name, net_id);
 8001056:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800105a:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	4895      	ldr	r0, [pc, #596]	@ (80012b8 <route+0x28c>)
 8001062:	f001 f92d 	bl	80022c0 <iprintf>
    fflush(stdout);
 8001066:	4b95      	ldr	r3, [pc, #596]	@ (80012bc <route+0x290>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	4618      	mov	r0, r3
 800106e:	f001 f851 	bl	8002114 <fflush>

    int xIndex1 = -1, yIndex1 = -1;
 8001072:	f04f 33ff 	mov.w	r3, #4294967295
 8001076:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001078:	f04f 33ff 	mov.w	r3, #4294967295
 800107c:	65bb      	str	r3, [r7, #88]	@ 0x58
    int xIndex2 = -1, yIndex2 = -1;
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	657b      	str	r3, [r7, #84]	@ 0x54
 8001084:	f04f 33ff 	mov.w	r3, #4294967295
 8001088:	653b      	str	r3, [r7, #80]	@ 0x50
    MUX *mux1 = NULL;
 800108a:	2300      	movs	r3, #0
 800108c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    MUX *mux2 = NULL;
 800108e:	2300      	movs	r3, #0
 8001090:	64bb      	str	r3, [r7, #72]	@ 0x48
    MainTrack *selectedTrack = NULL;
 8001092:	2300      	movs	r3, #0
 8001094:	647b      	str	r3, [r7, #68]	@ 0x44
    int muxIndex = -1;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	637b      	str	r3, [r7, #52]	@ 0x34

    // Find an available or existing main track for the given net ID
    for (int x = 0; x < 32; ++x) {
 800109c:	2300      	movs	r3, #0
 800109e:	643b      	str	r3, [r7, #64]	@ 0x40
 80010a0:	e02c      	b.n	80010fc <route+0xd0>
        if (mainTracks[x].net_id == net_id) {
 80010a2:	4a87      	ldr	r2, [pc, #540]	@ (80012c0 <route+0x294>)
 80010a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010a6:	011b      	lsls	r3, r3, #4
 80010a8:	4413      	add	r3, r2
 80010aa:	3304      	adds	r3, #4
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d105      	bne.n	80010c0 <route+0x94>
            selectedTrack = &mainTracks[x];  // Reuse existing track if net ID matches
 80010b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010b6:	011b      	lsls	r3, r3, #4
 80010b8:	4a81      	ldr	r2, [pc, #516]	@ (80012c0 <route+0x294>)
 80010ba:	4413      	add	r3, r2
 80010bc:	647b      	str	r3, [r7, #68]	@ 0x44
            break;
 80010be:	e020      	b.n	8001102 <route+0xd6>
        } else if (!mainTracks[x].is_used) {
 80010c0:	4a7f      	ldr	r2, [pc, #508]	@ (80012c0 <route+0x294>)
 80010c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010c4:	011b      	lsls	r3, r3, #4
 80010c6:	4413      	add	r3, r2
 80010c8:	3308      	adds	r3, #8
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d112      	bne.n	80010f6 <route+0xca>
            selectedTrack = &mainTracks[x];  // Assign new track if available
 80010d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010d2:	011b      	lsls	r3, r3, #4
 80010d4:	4a7a      	ldr	r2, [pc, #488]	@ (80012c0 <route+0x294>)
 80010d6:	4413      	add	r3, r2
 80010d8:	647b      	str	r3, [r7, #68]	@ 0x44
            selectedTrack->is_used = 1;
 80010da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80010dc:	2201      	movs	r2, #1
 80010de:	609a      	str	r2, [r3, #8]
            selectedTrack->net_id = net_id;
 80010e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	605a      	str	r2, [r3, #4]
            selectedTrack->track_id = x; // Assign track ID here
 80010e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80010e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80010ea:	601a      	str	r2, [r3, #0]
            printf("Selected Track id: %d\n", x);
 80010ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80010ee:	4875      	ldr	r0, [pc, #468]	@ (80012c4 <route+0x298>)
 80010f0:	f001 f8e6 	bl	80022c0 <iprintf>
            break;
 80010f4:	e005      	b.n	8001102 <route+0xd6>
    for (int x = 0; x < 32; ++x) {
 80010f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010f8:	3301      	adds	r3, #1
 80010fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80010fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010fe:	2b1f      	cmp	r3, #31
 8001100:	ddcf      	ble.n	80010a2 <route+0x76>
        }
    }

    if (!selectedTrack) {
 8001102:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001104:	2b00      	cmp	r3, #0
 8001106:	d104      	bne.n	8001112 <route+0xe6>
        printf("Error: No available main track for net ID %d\n", net_id);
 8001108:	6979      	ldr	r1, [r7, #20]
 800110a:	486f      	ldr	r0, [pc, #444]	@ (80012c8 <route+0x29c>)
 800110c:	f001 f8d8 	bl	80022c0 <iprintf>
 8001110:	e148      	b.n	80013a4 <route+0x378>
        return;
    }

    // Update connection counter based on mode
	if (mode == 1) {
 8001112:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8001116:	2b01      	cmp	r3, #1
 8001118:	d10d      	bne.n	8001136 <route+0x10a>
		selectedTrack->current_connections++; // Increment current connections
 800111a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	1c5a      	adds	r2, r3, #1
 8001120:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001122:	60da      	str	r2, [r3, #12]
		printf("Main Track %d incremented. Current connections: %d\n", selectedTrack->track_id, selectedTrack->current_connections);
 8001124:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001126:	6819      	ldr	r1, [r3, #0]
 8001128:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	461a      	mov	r2, r3
 800112e:	4867      	ldr	r0, [pc, #412]	@ (80012cc <route+0x2a0>)
 8001130:	f001 f8c6 	bl	80022c0 <iprintf>
 8001134:	e025      	b.n	8001182 <route+0x156>
	} else if (mode == 0) {
 8001136:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800113a:	2b00      	cmp	r3, #0
 800113c:	d121      	bne.n	8001182 <route+0x156>
		selectedTrack->current_connections--; // Decrement current connections
 800113e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	1e5a      	subs	r2, r3, #1
 8001144:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001146:	60da      	str	r2, [r3, #12]
		if (selectedTrack->current_connections <= 0) { // If counter is 0, free track
 8001148:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	2b00      	cmp	r3, #0
 800114e:	dc10      	bgt.n	8001172 <route+0x146>
			printf("Main Track %d is now free\n", selectedTrack->track_id);
 8001150:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4619      	mov	r1, r3
 8001156:	485e      	ldr	r0, [pc, #376]	@ (80012d0 <route+0x2a4>)
 8001158:	f001 f8b2 	bl	80022c0 <iprintf>
			selectedTrack->is_used = 0;
 800115c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
			selectedTrack->net_id = -1;
 8001162:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001164:	f04f 32ff 	mov.w	r2, #4294967295
 8001168:	605a      	str	r2, [r3, #4]
			selectedTrack->current_connections = 0;
 800116a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800116c:	2200      	movs	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
 8001170:	e007      	b.n	8001182 <route+0x156>
		}else{
			printf("Main Track %d decremented, but still occupied. Current connections: %d\n", selectedTrack->track_id, selectedTrack->current_connections);
 8001172:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001174:	6819      	ldr	r1, [r3, #0]
 8001176:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	461a      	mov	r2, r3
 800117c:	4855      	ldr	r0, [pc, #340]	@ (80012d4 <route+0x2a8>)
 800117e:	f001 f89f 	bl	80022c0 <iprintf>

		}
	}

    muxIndex = (selectedTrack->track_id < 16) ? 0 : 1;
 8001182:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b0f      	cmp	r3, #15
 8001188:	bfcc      	ite	gt
 800118a:	2301      	movgt	r3, #1
 800118c:	2300      	movle	r3, #0
 800118e:	b2db      	uxtb	r3, r3
 8001190:	637b      	str	r3, [r7, #52]	@ 0x34

        for (size_t i = muxIndex; i < muxCount; i += 2) {
 8001192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001194:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001196:	e05b      	b.n	8001250 <route+0x224>
            for (int y = 0; y < 8; ++y) {
 8001198:	2300      	movs	r3, #0
 800119a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800119c:	e04c      	b.n	8001238 <route+0x20c>
                if (strcmp((*muxes[i].yPins)[y], pin1Name) == 0 && mux1 == NULL) {
 800119e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011a0:	011b      	lsls	r3, r3, #4
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4413      	add	r3, r2
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80011aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ae:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f835 	bl	8000224 <strcmp>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d113      	bne.n	80011e8 <route+0x1bc>
 80011c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d110      	bne.n	80011e8 <route+0x1bc>
                    xIndex1 = selectedTrack->track_id % 16;
 80011c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	425a      	negs	r2, r3
 80011cc:	f003 030f 	and.w	r3, r3, #15
 80011d0:	f002 020f 	and.w	r2, r2, #15
 80011d4:	bf58      	it	pl
 80011d6:	4253      	negpl	r3, r2
 80011d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    yIndex1 = y;
 80011da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011dc:	65bb      	str	r3, [r7, #88]	@ 0x58
                    mux1 = &muxes[i];
 80011de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011e0:	011b      	lsls	r3, r3, #4
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4413      	add	r3, r2
 80011e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }
                if (strcmp((*muxes[i].yPins)[y], pin2Name) == 0 && mux2 == NULL) {
 80011e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4413      	add	r3, r2
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80011f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80011fc:	4611      	mov	r1, r2
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f810 	bl	8000224 <strcmp>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d113      	bne.n	8001232 <route+0x206>
 800120a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800120c:	2b00      	cmp	r3, #0
 800120e:	d110      	bne.n	8001232 <route+0x206>
                    xIndex2 = selectedTrack->track_id % 16;
 8001210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	425a      	negs	r2, r3
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	f002 020f 	and.w	r2, r2, #15
 800121e:	bf58      	it	pl
 8001220:	4253      	negpl	r3, r2
 8001222:	657b      	str	r3, [r7, #84]	@ 0x54
                    yIndex2 = y;
 8001224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001226:	653b      	str	r3, [r7, #80]	@ 0x50
                    mux2 = &muxes[i];
 8001228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800122a:	011b      	lsls	r3, r3, #4
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4413      	add	r3, r2
 8001230:	64bb      	str	r3, [r7, #72]	@ 0x48
            for (int y = 0; y < 8; ++y) {
 8001232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001234:	3301      	adds	r3, #1
 8001236:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800123a:	2b07      	cmp	r3, #7
 800123c:	ddaf      	ble.n	800119e <route+0x172>
                }
            }
            if (mux1 && mux2) break;
 800123e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001240:	2b00      	cmp	r3, #0
 8001242:	d002      	beq.n	800124a <route+0x21e>
 8001244:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001246:	2b00      	cmp	r3, #0
 8001248:	d107      	bne.n	800125a <route+0x22e>
        for (size_t i = muxIndex; i < muxCount; i += 2) {
 800124a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800124c:	3302      	adds	r3, #2
 800124e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001250:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001252:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001254:	429a      	cmp	r2, r3
 8001256:	d39f      	bcc.n	8001198 <route+0x16c>
 8001258:	e000      	b.n	800125c <route+0x230>
            if (mux1 && mux2) break;
 800125a:	bf00      	nop
        }

        if (mux1 && mux2) {
 800125c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 8097 	beq.w	8001392 <route+0x366>
 8001264:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001266:	2b00      	cmp	r3, #0
 8001268:	f000 8093 	beq.w	8001392 <route+0x366>
        	printf("%s (X:%d, Y:%d) at MUX[%d] CS: %s, Pin: %d, Main Track: %d\n"
 800126c:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8001270:	2b00      	cmp	r3, #0
 8001272:	d002      	beq.n	800127a <route+0x24e>
 8001274:	4b18      	ldr	r3, [pc, #96]	@ (80012d8 <route+0x2ac>)
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	e001      	b.n	800127e <route+0x252>
 800127a:	4b18      	ldr	r3, [pc, #96]	@ (80012dc <route+0x2b0>)
 800127c:	60fb      	str	r3, [r7, #12]
        			"%s (X:%d, Y:%d) at MUX[%d] CS: %s, Pin: %d, Main Track: %d\n\n",
        	                mode ? "Connecting" : "Disconnecting",
        	                xIndex1, yIndex1, mux1 - muxes + 1, getPortName(mux1->port), __builtin_ctz(mux1->pin), selectedTrack->track_id,
 800127e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	111b      	asrs	r3, r3, #4
        	printf("%s (X:%d, Y:%d) at MUX[%d] CS: %s, Pin: %d, Main Track: %d\n"
 8001286:	1c5c      	adds	r4, r3, #1
 8001288:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fdc5 	bl	8000e1c <getPortName>
 8001292:	6078      	str	r0, [r7, #4]
        	                xIndex1, yIndex1, mux1 - muxes + 1, getPortName(mux1->port), __builtin_ctz(mux1->pin), selectedTrack->track_id,
 8001294:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001296:	889b      	ldrh	r3, [r3, #4]
        	printf("%s (X:%d, Y:%d) at MUX[%d] CS: %s, Pin: %d, Main Track: %d\n"
 8001298:	fa93 f5a3 	rbit	r5, r3
 800129c:	fab5 f585 	clz	r5, r5
 80012a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80012a2:	681e      	ldr	r6, [r3, #0]
 80012a4:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d019      	beq.n	80012e0 <route+0x2b4>
 80012ac:	4b0a      	ldr	r3, [pc, #40]	@ (80012d8 <route+0x2ac>)
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	e018      	b.n	80012e4 <route+0x2b8>
 80012b2:	bf00      	nop
 80012b4:	080041a0 	.word	0x080041a0
 80012b8:	080041a8 	.word	0x080041a8
 80012bc:	20000cd0 	.word	0x20000cd0
 80012c0:	20000da4 	.word	0x20000da4
 80012c4:	080041cc 	.word	0x080041cc
 80012c8:	080041e4 	.word	0x080041e4
 80012cc:	08004214 	.word	0x08004214
 80012d0:	08004248 	.word	0x08004248
 80012d4:	08004264 	.word	0x08004264
 80012d8:	080042ac 	.word	0x080042ac
 80012dc:	080042b8 	.word	0x080042b8
 80012e0:	4b32      	ldr	r3, [pc, #200]	@ (80013ac <route+0x380>)
 80012e2:	60bb      	str	r3, [r7, #8]
							mode ? "Connecting" : "Disconnecting",
        	                xIndex2, yIndex2, mux2 - muxes + 1, getPortName(mux2->port), __builtin_ctz(mux2->pin), selectedTrack->track_id);
 80012e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	111b      	asrs	r3, r3, #4
        	printf("%s (X:%d, Y:%d) at MUX[%d] CS: %s, Pin: %d, Main Track: %d\n"
 80012ec:	3301      	adds	r3, #1
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fd91 	bl	8000e1c <getPortName>
 80012fa:	4601      	mov	r1, r0
        	                xIndex2, yIndex2, mux2 - muxes + 1, getPortName(mux2->port), __builtin_ctz(mux2->pin), selectedTrack->track_id);
 80012fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012fe:	889b      	ldrh	r3, [r3, #4]
        	printf("%s (X:%d, Y:%d) at MUX[%d] CS: %s, Pin: %d, Main Track: %d\n"
 8001300:	fa93 f3a3 	rbit	r3, r3
 8001304:	fab3 f383 	clz	r3, r3
 8001308:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800130a:	6812      	ldr	r2, [r2, #0]
 800130c:	920a      	str	r2, [sp, #40]	@ 0x28
 800130e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001310:	9108      	str	r1, [sp, #32]
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	9307      	str	r3, [sp, #28]
 8001316:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001318:	9306      	str	r3, [sp, #24]
 800131a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800131c:	9305      	str	r3, [sp, #20]
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	9304      	str	r3, [sp, #16]
 8001322:	9603      	str	r6, [sp, #12]
 8001324:	9502      	str	r5, [sp, #8]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	9301      	str	r3, [sp, #4]
 800132a:	9400      	str	r4, [sp, #0]
 800132c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800132e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001330:	68f9      	ldr	r1, [r7, #12]
 8001332:	481f      	ldr	r0, [pc, #124]	@ (80013b0 <route+0x384>)
 8001334:	f000 ffc4 	bl	80022c0 <iprintf>
        	        fflush(stdout);
 8001338:	4b1e      	ldr	r3, [pc, #120]	@ (80013b4 <route+0x388>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	4618      	mov	r0, r3
 8001340:	f000 fee8 	bl	8002114 <fflush>
			fflush(stdout);
 8001344:	4b1b      	ldr	r3, [pc, #108]	@ (80013b4 <route+0x388>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	4618      	mov	r0, r3
 800134c:	f000 fee2 	bl	8002114 <fflush>


            setConnection(xIndex1, yIndex1, *mux1, mode);
 8001350:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001352:	f897 207c 	ldrb.w	r2, [r7, #124]	@ 0x7c
 8001356:	9202      	str	r2, [sp, #8]
 8001358:	466c      	mov	r4, sp
 800135a:	f103 0208 	add.w	r2, r3, #8
 800135e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001362:	e884 0003 	stmia.w	r4, {r0, r1}
 8001366:	cb0c      	ldmia	r3, {r2, r3}
 8001368:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800136a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800136c:	f7ff fd94 	bl	8000e98 <setConnection>
            setConnection(xIndex2, yIndex2, *mux2, mode);
 8001370:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001372:	f897 207c 	ldrb.w	r2, [r7, #124]	@ 0x7c
 8001376:	9202      	str	r2, [sp, #8]
 8001378:	466c      	mov	r4, sp
 800137a:	f103 0208 	add.w	r2, r3, #8
 800137e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001382:	e884 0003 	stmia.w	r4, {r0, r1}
 8001386:	cb0c      	ldmia	r3, {r2, r3}
 8001388:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800138a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800138c:	f7ff fd84 	bl	8000e98 <setConnection>
 8001390:	e008      	b.n	80013a4 <route+0x378>

// 			  Activate leds

        } else {
            printf("Error: Unable to route pins - No available MUX found!\n");
 8001392:	4809      	ldr	r0, [pc, #36]	@ (80013b8 <route+0x38c>)
 8001394:	f000 fffc 	bl	8002390 <puts>
            fflush(stdout);
 8001398:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <route+0x388>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 feb8 	bl	8002114 <fflush>
        }
    }
 80013a4:	3764      	adds	r7, #100	@ 0x64
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013aa:	bf00      	nop
 80013ac:	080042b8 	.word	0x080042b8
 80013b0:	080042c8 	.word	0x080042c8
 80013b4:	20000cd0 	.word	0x20000cd0
 80013b8:	08004340 	.word	0x08004340

080013bc <processCommand>:

void processCommand(char *command) {
 80013bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013be:	b097      	sub	sp, #92	@ 0x5c
 80013c0:	af06      	add	r7, sp, #24
 80013c2:	60f8      	str	r0, [r7, #12]
    int pin1, pin2, net_id, mode, r, g, b;

    if (strncmp(command, "ROUTE", 5) == 0) {  // Check if it's a "ROUTE" command
 80013c4:	2205      	movs	r2, #5
 80013c6:	4932      	ldr	r1, [pc, #200]	@ (8001490 <processCommand+0xd4>)
 80013c8:	68f8      	ldr	r0, [r7, #12]
 80013ca:	f001 f929 	bl	8002620 <strncmp>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d159      	bne.n	8001488 <processCommand+0xcc>
        int parsed = sscanf(command, "ROUTE %d %d %d %d %d %d %d",
 80013d4:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80013d8:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80013dc:	f107 0320 	add.w	r3, r7, #32
 80013e0:	9304      	str	r3, [sp, #16]
 80013e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e6:	9303      	str	r3, [sp, #12]
 80013e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013ec:	9302      	str	r3, [sp, #8]
 80013ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	460b      	mov	r3, r1
 80013fc:	4925      	ldr	r1, [pc, #148]	@ (8001494 <processCommand+0xd8>)
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f001 f802 	bl	8002408 <siscanf>
 8001404:	63f8      	str	r0, [r7, #60]	@ 0x3c
                            &pin1, &pin2, &net_id, &mode, &r, &g, &b);
        if (parsed == 7) {  // Ensure all arguments were parsed
 8001406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001408:	2b07      	cmp	r3, #7
 800140a:	d134      	bne.n	8001476 <processCommand+0xba>
            RGB color = {r, g, b};
 800140c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001412:	61bb      	str	r3, [r7, #24]
 8001414:	6a3b      	ldr	r3, [r7, #32]
 8001416:	61fb      	str	r3, [r7, #28]
            printf("Calling route with: Pin1=%d, Pin2=%d, NetID=%d, Mode=%d, RGB(%d,%d,%d)\n",
 8001418:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 800141a:	6b7d      	ldr	r5, [r7, #52]	@ 0x34
 800141c:	6b3e      	ldr	r6, [r7, #48]	@ 0x30
 800141e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001420:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001422:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001424:	6a38      	ldr	r0, [r7, #32]
 8001426:	9003      	str	r0, [sp, #12]
 8001428:	9102      	str	r1, [sp, #8]
 800142a:	9201      	str	r2, [sp, #4]
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	4633      	mov	r3, r6
 8001430:	462a      	mov	r2, r5
 8001432:	4621      	mov	r1, r4
 8001434:	4818      	ldr	r0, [pc, #96]	@ (8001498 <processCommand+0xdc>)
 8001436:	f000 ff43 	bl	80022c0 <iprintf>
                   pin1, pin2, net_id, mode, r, g, b);
            fflush(stdout);
 800143a:	4b18      	ldr	r3, [pc, #96]	@ (800149c <processCommand+0xe0>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	4618      	mov	r0, r3
 8001442:	f000 fe67 	bl	8002114 <fflush>

            route(pin1, pin2, net_id, muxes, sizeof(muxes) / sizeof(muxes[0]), mode, color);
 8001446:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8001448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800144e:	607a      	str	r2, [r7, #4]
 8001450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001452:	b2dd      	uxtb	r5, r3
 8001454:	ac02      	add	r4, sp, #8
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800145e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001462:	9501      	str	r5, [sp, #4]
 8001464:	2322      	movs	r3, #34	@ 0x22
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	4b0d      	ldr	r3, [pc, #52]	@ (80014a0 <processCommand+0xe4>)
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	4630      	mov	r0, r6
 8001470:	f7ff fddc 	bl	800102c <route>
        } else {
            printf("Error: Invalid ROUTE command format!\n");
            fflush(stdout);
        }
    }
}
 8001474:	e008      	b.n	8001488 <processCommand+0xcc>
            printf("Error: Invalid ROUTE command format!\n");
 8001476:	480b      	ldr	r0, [pc, #44]	@ (80014a4 <processCommand+0xe8>)
 8001478:	f000 ff8a 	bl	8002390 <puts>
            fflush(stdout);
 800147c:	4b07      	ldr	r3, [pc, #28]	@ (800149c <processCommand+0xe0>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	4618      	mov	r0, r3
 8001484:	f000 fe46 	bl	8002114 <fflush>
}
 8001488:	bf00      	nop
 800148a:	3744      	adds	r7, #68	@ 0x44
 800148c:	46bd      	mov	sp, r7
 800148e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001490:	08004378 	.word	0x08004378
 8001494:	08004380 	.word	0x08004380
 8001498:	0800439c 	.word	0x0800439c
 800149c:	20000cd0 	.word	0x20000cd0
 80014a0:	08004418 	.word	0x08004418
 80014a4:	080043e4 	.word	0x080043e4

080014a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <NMI_Handler+0x4>

080014b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <HardFault_Handler+0x4>

080014b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <MemManage_Handler+0x4>

080014c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <BusFault_Handler+0x4>

080014c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <UsageFault_Handler+0x4>

080014d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr

080014dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr

080014e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	e00a      	b.n	8001528 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001512:	f3af 8000 	nop.w
 8001516:	4601      	mov	r1, r0
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	1c5a      	adds	r2, r3, #1
 800151c:	60ba      	str	r2, [r7, #8]
 800151e:	b2ca      	uxtb	r2, r1
 8001520:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	3301      	adds	r3, #1
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	429a      	cmp	r2, r3
 800152e:	dbf0      	blt.n	8001512 <_read+0x12>
  }

  return len;
 8001530:	687b      	ldr	r3, [r7, #4]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <_close>:
  }
  return len;
}

int _close(int file)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001560:	605a      	str	r2, [r3, #4]
  return 0;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr

0800156e <_isatty>:

int _isatty(int file)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001576:	2301      	movs	r3, #1
}
 8001578:	4618      	mov	r0, r3
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr

08001582 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001582:	b480      	push	{r7}
 8001584:	b085      	sub	sp, #20
 8001586:	af00      	add	r7, sp, #0
 8001588:	60f8      	str	r0, [r7, #12]
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
	...

0800159c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a4:	4a14      	ldr	r2, [pc, #80]	@ (80015f8 <_sbrk+0x5c>)
 80015a6:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <_sbrk+0x60>)
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b0:	4b13      	ldr	r3, [pc, #76]	@ (8001600 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d102      	bne.n	80015be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b8:	4b11      	ldr	r3, [pc, #68]	@ (8001600 <_sbrk+0x64>)
 80015ba:	4a12      	ldr	r2, [pc, #72]	@ (8001604 <_sbrk+0x68>)
 80015bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015be:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d207      	bcs.n	80015dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015cc:	f001 f880 	bl	80026d0 <__errno>
 80015d0:	4603      	mov	r3, r0
 80015d2:	220c      	movs	r2, #12
 80015d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
 80015da:	e009      	b.n	80015f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015dc:	4b08      	ldr	r3, [pc, #32]	@ (8001600 <_sbrk+0x64>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015e2:	4b07      	ldr	r3, [pc, #28]	@ (8001600 <_sbrk+0x64>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	4a05      	ldr	r2, [pc, #20]	@ (8001600 <_sbrk+0x64>)
 80015ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ee:	68fb      	ldr	r3, [r7, #12]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20010000 	.word	0x20010000
 80015fc:	00000400 	.word	0x00000400
 8001600:	20000fa4 	.word	0x20000fa4
 8001604:	200010f8 	.word	0x200010f8

08001608 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr

08001614 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001614:	f7ff fff8 	bl	8001608 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001618:	480b      	ldr	r0, [pc, #44]	@ (8001648 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800161a:	490c      	ldr	r1, [pc, #48]	@ (800164c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800161c:	4a0c      	ldr	r2, [pc, #48]	@ (8001650 <LoopFillZerobss+0x16>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001620:	e002      	b.n	8001628 <LoopCopyDataInit>

08001622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001626:	3304      	adds	r3, #4

08001628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800162c:	d3f9      	bcc.n	8001622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162e:	4a09      	ldr	r2, [pc, #36]	@ (8001654 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001630:	4c09      	ldr	r4, [pc, #36]	@ (8001658 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001634:	e001      	b.n	800163a <LoopFillZerobss>

08001636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001638:	3204      	adds	r2, #4

0800163a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800163c:	d3fb      	bcc.n	8001636 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800163e:	f001 f84d 	bl	80026dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001642:	f7ff f919 	bl	8000878 <main>
  bx lr
 8001646:	4770      	bx	lr
  ldr r0, =_sdata
 8001648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800164c:	20000d20 	.word	0x20000d20
  ldr r2, =_sidata
 8001650:	080047b0 	.word	0x080047b0
  ldr r2, =_sbss
 8001654:	20000d20 	.word	0x20000d20
  ldr r4, =_ebss
 8001658:	200010f4 	.word	0x200010f4

0800165c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800165c:	e7fe      	b.n	800165c <ADC1_2_IRQHandler>

0800165e <LL_ADC_REG_SetSequencerLength>:
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800166c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr

08001682 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b01      	cmp	r3, #1
 8001694:	bf0c      	ite	eq
 8001696:	2301      	moveq	r3, #1
 8001698:	2300      	movne	r3, #0
 800169a:	b2db      	uxtb	r3, r3
}
 800169c:	4618      	mov	r0, r3
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr
	...

080016a8 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 80016a8:	b590      	push	{r4, r7, lr}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80016b2:	2300      	movs	r3, #0
 80016b4:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 80016b6:	4813      	ldr	r0, [pc, #76]	@ (8001704 <LL_ADC_CommonInit+0x5c>)
 80016b8:	f7ff ffe3 	bl	8001682 <LL_ADC_IsEnabled>
 80016bc:	4604      	mov	r4, r0
 80016be:	4812      	ldr	r0, [pc, #72]	@ (8001708 <LL_ADC_CommonInit+0x60>)
 80016c0:	f7ff ffdf 	bl	8001682 <LL_ADC_IsEnabled>
 80016c4:	4603      	mov	r3, r0
 80016c6:	4323      	orrs	r3, r4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d114      	bne.n	80016f6 <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d009      	beq.n	80016e8 <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	431a      	orrs	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	e008      	b.n	80016fa <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	e001      	b.n	80016fa <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	bd90      	pop	{r4, r7, pc}
 8001704:	40012400 	.word	0x40012400
 8001708:	40012800 	.word	0x40012800

0800170c <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001716:	2300      	movs	r3, #0
 8001718:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff ffb1 	bl	8001682 <LL_ADC_IsEnabled>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d112      	bne.n	800174c <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	431a      	orrs	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	e001      	b.n	8001750 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001750:	7bfb      	ldrb	r3, [r7, #15]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b084      	sub	sp, #16
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001764:	2300      	movs	r3, #0
 8001766:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff ff8a 	bl	8001682 <LL_ADC_IsEnabled>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d131      	bne.n	80017d8 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00c      	beq.n	8001796 <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	6859      	ldr	r1, [r3, #4]
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	430b      	orrs	r3, r1
 800178e:	431a      	orrs	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	e008      	b.n	80017a8 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	431a      	orrs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 80017b0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	6811      	ldr	r1, [r2, #0]
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	68d2      	ldr	r2, [r2, #12]
 80017bc:	4311      	orrs	r1, r2
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	6912      	ldr	r2, [r2, #16]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	431a      	orrs	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	4619      	mov	r1, r3
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ff44 	bl	800165e <LL_ADC_REG_SetSequencerLength>
 80017d6:	e001      	b.n	80017dc <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <LL_GPIO_SetPinMode>:
{
 80017e6:	b490      	push	{r4, r7}
 80017e8:	b088      	sub	sp, #32
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	60f8      	str	r0, [r7, #12]
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	461a      	mov	r2, r3
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	0e1b      	lsrs	r3, r3, #24
 80017fa:	4413      	add	r3, r2
 80017fc:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80017fe:	6822      	ldr	r2, [r4, #0]
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	fa93 f3a3 	rbit	r3, r3
 800180a:	613b      	str	r3, [r7, #16]
  return result;
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	fab3 f383 	clz	r3, r3
 8001812:	b2db      	uxtb	r3, r3
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	210f      	movs	r1, #15
 8001818:	fa01 f303 	lsl.w	r3, r1, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	401a      	ands	r2, r3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	fa93 f3a3 	rbit	r3, r3
 800182a:	61bb      	str	r3, [r7, #24]
  return result;
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	fab3 f383 	clz	r3, r3
 8001832:	b2db      	uxtb	r3, r3
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	fa01 f303 	lsl.w	r3, r1, r3
 800183c:	4313      	orrs	r3, r2
 800183e:	6023      	str	r3, [r4, #0]
}
 8001840:	bf00      	nop
 8001842:	3720      	adds	r7, #32
 8001844:	46bd      	mov	sp, r7
 8001846:	bc90      	pop	{r4, r7}
 8001848:	4770      	bx	lr

0800184a <LL_GPIO_SetPinSpeed>:
{
 800184a:	b490      	push	{r4, r7}
 800184c:	b088      	sub	sp, #32
 800184e:	af00      	add	r7, sp, #0
 8001850:	60f8      	str	r0, [r7, #12]
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	461a      	mov	r2, r3
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	0e1b      	lsrs	r3, r3, #24
 800185e:	4413      	add	r3, r2
 8001860:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8001862:	6822      	ldr	r2, [r4, #0]
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	fa93 f3a3 	rbit	r3, r3
 800186e:	613b      	str	r3, [r7, #16]
  return result;
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	fab3 f383 	clz	r3, r3
 8001876:	b2db      	uxtb	r3, r3
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	2103      	movs	r1, #3
 800187c:	fa01 f303 	lsl.w	r3, r1, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	401a      	ands	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	fa93 f3a3 	rbit	r3, r3
 800188e:	61bb      	str	r3, [r7, #24]
  return result;
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	fab3 f383 	clz	r3, r3
 8001896:	b2db      	uxtb	r3, r3
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	fa01 f303 	lsl.w	r3, r1, r3
 80018a0:	4313      	orrs	r3, r2
 80018a2:	6023      	str	r3, [r4, #0]
}
 80018a4:	bf00      	nop
 80018a6:	3720      	adds	r7, #32
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc90      	pop	{r4, r7}
 80018ac:	4770      	bx	lr

080018ae <LL_GPIO_SetPinOutputType>:
{
 80018ae:	b490      	push	{r4, r7}
 80018b0:	b088      	sub	sp, #32
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	461a      	mov	r2, r3
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	0e1b      	lsrs	r3, r3, #24
 80018c2:	4413      	add	r3, r2
 80018c4:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80018c6:	6822      	ldr	r2, [r4, #0]
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	fa93 f3a3 	rbit	r3, r3
 80018d2:	613b      	str	r3, [r7, #16]
  return result;
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	fab3 f383 	clz	r3, r3
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	2104      	movs	r1, #4
 80018e0:	fa01 f303 	lsl.w	r3, r1, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	401a      	ands	r2, r3
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	fa93 f3a3 	rbit	r3, r3
 80018f2:	61bb      	str	r3, [r7, #24]
  return result;
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	fab3 f383 	clz	r3, r3
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	fa01 f303 	lsl.w	r3, r1, r3
 8001904:	4313      	orrs	r3, r2
 8001906:	6023      	str	r3, [r4, #0]
}
 8001908:	bf00      	nop
 800190a:	3720      	adds	r7, #32
 800190c:	46bd      	mov	sp, r7
 800190e:	bc90      	pop	{r4, r7}
 8001910:	4770      	bx	lr

08001912 <LL_GPIO_SetPinPull>:
{
 8001912:	b480      	push	{r7}
 8001914:	b087      	sub	sp, #28
 8001916:	af00      	add	r7, sp, #0
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	68da      	ldr	r2, [r3, #12]
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	0a1b      	lsrs	r3, r3, #8
 8001926:	43db      	mvns	r3, r3
 8001928:	401a      	ands	r2, r3
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	0a1b      	lsrs	r3, r3, #8
 800192e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	fa93 f3a3 	rbit	r3, r3
 8001936:	613b      	str	r3, [r7, #16]
  return result;
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	fab3 f383 	clz	r3, r3
 800193e:	b2db      	uxtb	r3, r3
 8001940:	4619      	mov	r1, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	408b      	lsls	r3, r1
 8001946:	431a      	orrs	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	60da      	str	r2, [r3, #12]
}
 800194c:	bf00      	nop
 800194e:	371c      	adds	r7, #28
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr

08001956 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b088      	sub	sp, #32
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	021b      	lsls	r3, r3, #8
 8001966:	0c1b      	lsrs	r3, r3, #16
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	fa93 f3a3 	rbit	r3, r3
 8001974:	60fb      	str	r3, [r7, #12]
  return result;
 8001976:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8001978:	fab3 f383 	clz	r3, r3
 800197c:	b2db      	uxtb	r3, r3
 800197e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8001980:	e044      	b.n	8001a0c <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8001982:	2201      	movs	r2, #1
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	409a      	lsls	r2, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	4013      	ands	r3, r2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d03a      	beq.n	8001a06 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	2b07      	cmp	r3, #7
 8001994:	d806      	bhi.n	80019a4 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8001996:	f240 1201 	movw	r2, #257	@ 0x101
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	61bb      	str	r3, [r7, #24]
 80019a2:	e008      	b.n	80019b6 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	3b08      	subs	r3, #8
 80019a8:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80019b4:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b08      	cmp	r3, #8
 80019bc:	d106      	bne.n	80019cc <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	461a      	mov	r2, r3
 80019c4:	69b9      	ldr	r1, [r7, #24]
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff ffa3 	bl	8001912 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	461a      	mov	r2, r3
 80019d2:	69b9      	ldr	r1, [r7, #24]
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff ff06 	bl	80017e6 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d003      	beq.n	80019ea <LL_GPIO_Init+0x94>
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b09      	cmp	r3, #9
 80019e8:	d10d      	bne.n	8001a06 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	461a      	mov	r2, r3
 80019f0:	69b9      	ldr	r1, [r7, #24]
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff ff29 	bl	800184a <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	461a      	mov	r2, r3
 80019fe:	69b9      	ldr	r1, [r7, #24]
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff ff54 	bl	80018ae <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	fa22 f303 	lsr.w	r3, r2, r3
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1b4      	bne.n	8001982 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3720      	adds	r7, #32
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <LL_RCC_HSE_GetPrediv2>:
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV2));
 8001a28:	4b03      	ldr	r3, [pc, #12]	@ (8001a38 <LL_RCC_HSE_GetPrediv2+0x14>)
 8001a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	40021000 	.word	0x40021000

08001a3c <LL_RCC_GetSysClkSource>:
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001a40:	4b03      	ldr	r3, [pc, #12]	@ (8001a50 <LL_RCC_GetSysClkSource+0x14>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 030c 	and.w	r3, r3, #12
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr
 8001a50:	40021000 	.word	0x40021000

08001a54 <LL_RCC_GetAHBPrescaler>:
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001a58:	4b03      	ldr	r3, [pc, #12]	@ (8001a68 <LL_RCC_GetAHBPrescaler+0x14>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr
 8001a68:	40021000 	.word	0x40021000

08001a6c <LL_RCC_GetAPB1Prescaler>:
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001a70:	4b03      	ldr	r3, [pc, #12]	@ (8001a80 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr
 8001a80:	40021000 	.word	0x40021000

08001a84 <LL_RCC_GetAPB2Prescaler>:
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001a88:	4b03      	ldr	r3, [pc, #12]	@ (8001a98 <LL_RCC_GetAPB2Prescaler+0x14>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr
 8001a98:	40021000 	.word	0x40021000

08001a9c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
 8001aa2:	4b09      	ldr	r3, [pc, #36]	@ (8001ac8 <LL_RCC_PLL_GetMainSource+0x2c>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aaa:	607b      	str	r3, [r7, #4]
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
 8001aac:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <LL_RCC_PLL_GetMainSource+0x2c>)
 8001aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab0:	011b      	lsls	r3, r3, #4
 8001ab2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ab6:	603b      	str	r3, [r7, #0]
  return (uint32_t)(pllsrc | predivsrc);
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	4313      	orrs	r3, r2
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr
 8001ac8:	40021000 	.word	0x40021000

08001acc <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8001ad0:	4b03      	ldr	r3, [pc, #12]	@ (8001ae0 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr
 8001ae0:	40021000 	.word	0x40021000

08001ae4 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
 8001ae8:	4b03      	ldr	r3, [pc, #12]	@ (8001af8 <LL_RCC_PLL_GetPrediv+0x14>)
 8001aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aec:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
#endif /*RCC_CFGR2_PREDIV1*/
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr
 8001af8:	40021000 	.word	0x40021000

08001afc <LL_RCC_PLL2_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL2_MUL_14
  *         @arg @ref LL_RCC_PLL2_MUL_16
  *         @arg @ref LL_RCC_PLL2_MUL_20
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetMultiplicator(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL2MUL));
 8001b00:	4b03      	ldr	r3, [pc, #12]	@ (8001b10 <LL_RCC_PLL2_GetMultiplicator+0x14>)
 8001b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b04:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr
 8001b10:	40021000 	.word	0x40021000

08001b14 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001b1c:	f000 f820 	bl	8001b60 <RCC_GetSystemClockFreq>
 8001b20:	4602      	mov	r2, r0
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 f83e 	bl	8001bac <RCC_GetHCLKClockFreq>
 8001b30:	4602      	mov	r2, r0
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 f84c 	bl	8001bd8 <RCC_GetPCLK1ClockFreq>
 8001b40:	4602      	mov	r2, r0
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 f858 	bl	8001c00 <RCC_GetPCLK2ClockFreq>
 8001b50:	4602      	mov	r2, r0
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	60da      	str	r2, [r3, #12]
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001b6a:	f7ff ff67 	bl	8001a3c <LL_RCC_GetSysClkSource>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d00c      	beq.n	8001b8e <RCC_GetSystemClockFreq+0x2e>
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d80e      	bhi.n	8001b96 <RCC_GetSystemClockFreq+0x36>
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d002      	beq.n	8001b82 <RCC_GetSystemClockFreq+0x22>
 8001b7c:	2b04      	cmp	r3, #4
 8001b7e:	d003      	beq.n	8001b88 <RCC_GetSystemClockFreq+0x28>
 8001b80:	e009      	b.n	8001b96 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001b82:	4b09      	ldr	r3, [pc, #36]	@ (8001ba8 <RCC_GetSystemClockFreq+0x48>)
 8001b84:	607b      	str	r3, [r7, #4]
      break;
 8001b86:	e009      	b.n	8001b9c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001b88:	4b07      	ldr	r3, [pc, #28]	@ (8001ba8 <RCC_GetSystemClockFreq+0x48>)
 8001b8a:	607b      	str	r3, [r7, #4]
      break;
 8001b8c:	e006      	b.n	8001b9c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001b8e:	f000 f84b 	bl	8001c28 <RCC_PLL_GetFreqDomain_SYS>
 8001b92:	6078      	str	r0, [r7, #4]
      break;
 8001b94:	e002      	b.n	8001b9c <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8001b96:	4b04      	ldr	r3, [pc, #16]	@ (8001ba8 <RCC_GetSystemClockFreq+0x48>)
 8001b98:	607b      	str	r3, [r7, #4]
      break;
 8001b9a:	bf00      	nop
  }

  return frequency;
 8001b9c:	687b      	ldr	r3, [r7, #4]
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	007a1200 	.word	0x007a1200

08001bac <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001bb4:	f7ff ff4e 	bl	8001a54 <LL_RCC_GetAHBPrescaler>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	091b      	lsrs	r3, r3, #4
 8001bbc:	f003 030f 	and.w	r3, r3, #15
 8001bc0:	4a04      	ldr	r2, [pc, #16]	@ (8001bd4 <RCC_GetHCLKClockFreq+0x28>)
 8001bc2:	5cd3      	ldrb	r3, [r2, r3]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	40d3      	lsrs	r3, r2
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	08004638 	.word	0x08004638

08001bd8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001be0:	f7ff ff44 	bl	8001a6c <LL_RCC_GetAPB1Prescaler>
 8001be4:	4603      	mov	r3, r0
 8001be6:	0a1b      	lsrs	r3, r3, #8
 8001be8:	4a04      	ldr	r2, [pc, #16]	@ (8001bfc <RCC_GetPCLK1ClockFreq+0x24>)
 8001bea:	5cd3      	ldrb	r3, [r2, r3]
 8001bec:	461a      	mov	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	40d3      	lsrs	r3, r2
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	08004648 	.word	0x08004648

08001c00 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001c08:	f7ff ff3c 	bl	8001a84 <LL_RCC_GetAPB2Prescaler>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	0adb      	lsrs	r3, r3, #11
 8001c10:	4a04      	ldr	r2, [pc, #16]	@ (8001c24 <RCC_GetPCLK2ClockFreq+0x24>)
 8001c12:	5cd3      	ldrb	r3, [r2, r3]
 8001c14:	461a      	mov	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	40d3      	lsrs	r3, r2
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	08004648 	.word	0x08004648

08001c28 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001c28:	b590      	push	{r4, r7, lr}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	2300      	movs	r3, #0
 8001c34:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001c36:	f7ff ff31 	bl	8001a9c <LL_RCC_PLL_GetMainSource>
 8001c3a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8001c42:	d017      	beq.n	8001c74 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8001c4a:	d81e      	bhi.n	8001c8a <RCC_PLL_GetFreqDomain_SYS+0x62>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d004      	beq.n	8001c5c <RCC_PLL_GetFreqDomain_SYS+0x34>
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c58:	d003      	beq.n	8001c62 <RCC_PLL_GetFreqDomain_SYS+0x3a>
 8001c5a:	e016      	b.n	8001c8a <RCC_PLL_GetFreqDomain_SYS+0x62>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc8 <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 8001c5e:	607b      	str	r3, [r7, #4]
      break;
 8001c60:	e016      	b.n	8001c90 <RCC_PLL_GetFreqDomain_SYS+0x68>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8001c62:	f7ff ff3f 	bl	8001ae4 <LL_RCC_PLL_GetPrediv>
 8001c66:	4603      	mov	r3, r0
 8001c68:	3301      	adds	r3, #1
 8001c6a:	4a18      	ldr	r2, [pc, #96]	@ (8001ccc <RCC_PLL_GetFreqDomain_SYS+0xa4>)
 8001c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c70:	607b      	str	r3, [r7, #4]
      break;
 8001c72:	e00d      	b.n	8001c90 <RCC_PLL_GetFreqDomain_SYS+0x68>

#if defined(RCC_PLL2_SUPPORT)
    case LL_RCC_PLLSOURCE_PLL2:       /* PLL2 used as PLL clock source */
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
 8001c74:	f000 f82c 	bl	8001cd0 <RCC_PLL2_GetFreqClockFreq>
 8001c78:	4604      	mov	r4, r0
 8001c7a:	f7ff ff33 	bl	8001ae4 <LL_RCC_PLL_GetPrediv>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	3301      	adds	r3, #1
 8001c82:	fbb4 f3f3 	udiv	r3, r4, r3
 8001c86:	607b      	str	r3, [r7, #4]
      break;
 8001c88:	e002      	b.n	8001c90 <RCC_PLL_GetFreqDomain_SYS+0x68>
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8001c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc8 <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 8001c8c:	607b      	str	r3, [r7, #4]
      break;
 8001c8e:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8001c90:	f7ff ff1c 	bl	8001acc <LL_RCC_PLL_GetMultiplicator>
 8001c94:	4603      	mov	r3, r0
 8001c96:	f5b3 1f50 	cmp.w	r3, #3407872	@ 0x340000
 8001c9a:	d00a      	beq.n	8001cb2 <RCC_PLL_GetFreqDomain_SYS+0x8a>
 8001c9c:	f7ff ff16 	bl	8001acc <LL_RCC_PLL_GetMultiplicator>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	0c9b      	lsrs	r3, r3, #18
 8001ca4:	f003 030f 	and.w	r3, r3, #15
 8001ca8:	3302      	adds	r3, #2
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	fb02 f303 	mul.w	r3, r2, r3
 8001cb0:	e006      	b.n	8001cc0 <RCC_PLL_GetFreqDomain_SYS+0x98>
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	4413      	add	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	085b      	lsrs	r3, r3, #1
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd90      	pop	{r4, r7, pc}
 8001cc8:	003d0900 	.word	0x003d0900
 8001ccc:	007a1200 	.word	0x007a1200

08001cd0 <RCC_PLL2_GetFreqClockFreq>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL2_GetFreqClockFreq(void)
{
 8001cd0:	b598      	push	{r3, r4, r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  return __LL_RCC_CALC_PLL2CLK_FREQ(HSE_VALUE, LL_RCC_PLL2_GetMultiplicator(), LL_RCC_HSE_GetPrediv2());
 8001cd4:	f7ff ff12 	bl	8001afc <LL_RCC_PLL2_GetMultiplicator>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	0a1b      	lsrs	r3, r3, #8
 8001cdc:	4a07      	ldr	r2, [pc, #28]	@ (8001cfc <RCC_PLL2_GetFreqClockFreq+0x2c>)
 8001cde:	fb02 f303 	mul.w	r3, r2, r3
 8001ce2:	f503 0474 	add.w	r4, r3, #15990784	@ 0xf40000
 8001ce6:	f504 5410 	add.w	r4, r4, #9216	@ 0x2400
 8001cea:	f7ff fe9b 	bl	8001a24 <LL_RCC_HSE_GetPrediv2>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	091b      	lsrs	r3, r3, #4
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	bd98      	pop	{r3, r4, r7, pc}
 8001cfc:	007a1200 	.word	0x007a1200

08001d00 <LL_USART_IsEnabled>:
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d14:	bf0c      	ite	eq
 8001d16:	2301      	moveq	r3, #1
 8001d18:	2300      	movne	r3, #0
 8001d1a:	b2db      	uxtb	r3, r3
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <LL_USART_SetStopBitsLength>:
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	611a      	str	r2, [r3, #16]
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr

08001d4a <LL_USART_SetHWFlowCtrl>:
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	615a      	str	r2, [r3, #20]
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr
	...

08001d70 <LL_USART_SetBaudRate>:
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001d7c:	68ba      	ldr	r2, [r7, #8]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	009a      	lsls	r2, r3, #2
 8001d86:	441a      	add	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d90:	4a25      	ldr	r2, [pc, #148]	@ (8001e28 <LL_USART_SetBaudRate+0xb8>)
 8001d92:	fba2 2303 	umull	r2, r3, r2, r3
 8001d96:	095b      	lsrs	r3, r3, #5
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	b299      	uxth	r1, r3
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	009a      	lsls	r2, r3, #2
 8001da8:	441a      	add	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	fbb2 f2f3 	udiv	r2, r2, r3
 8001db2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e28 <LL_USART_SetBaudRate+0xb8>)
 8001db4:	fba3 0302 	umull	r0, r3, r3, r2
 8001db8:	095b      	lsrs	r3, r3, #5
 8001dba:	2064      	movs	r0, #100	@ 0x64
 8001dbc:	fb00 f303 	mul.w	r3, r0, r3
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	3332      	adds	r3, #50	@ 0x32
 8001dc6:	4a18      	ldr	r2, [pc, #96]	@ (8001e28 <LL_USART_SetBaudRate+0xb8>)
 8001dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dcc:	095b      	lsrs	r3, r3, #5
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	440b      	add	r3, r1
 8001dd8:	b299      	uxth	r1, r3
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	009a      	lsls	r2, r3, #2
 8001de4:	441a      	add	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dee:	4b0e      	ldr	r3, [pc, #56]	@ (8001e28 <LL_USART_SetBaudRate+0xb8>)
 8001df0:	fba3 0302 	umull	r0, r3, r3, r2
 8001df4:	095b      	lsrs	r3, r3, #5
 8001df6:	2064      	movs	r0, #100	@ 0x64
 8001df8:	fb00 f303 	mul.w	r3, r0, r3
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	011b      	lsls	r3, r3, #4
 8001e00:	3332      	adds	r3, #50	@ 0x32
 8001e02:	4a09      	ldr	r2, [pc, #36]	@ (8001e28 <LL_USART_SetBaudRate+0xb8>)
 8001e04:	fba2 2303 	umull	r2, r3, r2, r3
 8001e08:	095b      	lsrs	r3, r3, #5
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	f003 030f 	and.w	r3, r3, #15
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	440b      	add	r3, r1
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	461a      	mov	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	609a      	str	r2, [r3, #8]
}
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	51eb851f 	.word	0x51eb851f

08001e2c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff ff5e 	bl	8001d00 <LL_USART_IsEnabled>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d153      	bne.n	8001ef2 <LL_USART_Init+0xc6>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001e52:	f023 030c 	bic.w	r3, r3, #12
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	6851      	ldr	r1, [r2, #4]
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	68d2      	ldr	r2, [r2, #12]
 8001e5e:	4311      	orrs	r1, r2
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	6912      	ldr	r2, [r2, #16]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	4619      	mov	r1, r3
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff ff57 	bl	8001d26 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff ff63 	bl	8001d4a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8001e84:	f107 0308 	add.w	r3, r7, #8
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff fe43 	bl	8001b14 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a1a      	ldr	r2, [pc, #104]	@ (8001efc <LL_USART_Init+0xd0>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d102      	bne.n	8001e9c <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	61bb      	str	r3, [r7, #24]
 8001e9a:	e01a      	b.n	8001ed2 <LL_USART_Init+0xa6>
    }
    else if (USARTx == USART2)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a18      	ldr	r2, [pc, #96]	@ (8001f00 <LL_USART_Init+0xd4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d102      	bne.n	8001eaa <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	61bb      	str	r3, [r7, #24]
 8001ea8:	e013      	b.n	8001ed2 <LL_USART_Init+0xa6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a15      	ldr	r2, [pc, #84]	@ (8001f04 <LL_USART_Init+0xd8>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d102      	bne.n	8001eb8 <LL_USART_Init+0x8c>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	61bb      	str	r3, [r7, #24]
 8001eb6:	e00c      	b.n	8001ed2 <LL_USART_Init+0xa6>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a13      	ldr	r2, [pc, #76]	@ (8001f08 <LL_USART_Init+0xdc>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d102      	bne.n	8001ec6 <LL_USART_Init+0x9a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	61bb      	str	r3, [r7, #24]
 8001ec4:	e005      	b.n	8001ed2 <LL_USART_Init+0xa6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a10      	ldr	r2, [pc, #64]	@ (8001f0c <LL_USART_Init+0xe0>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d101      	bne.n	8001ed2 <LL_USART_Init+0xa6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00c      	beq.n	8001ef2 <LL_USART_Init+0xc6>
        && (USART_InitStruct->BaudRate != 0U))
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d008      	beq.n	8001ef2 <LL_USART_Init+0xc6>
    {
      status = SUCCESS;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8001ee8:	461a      	mov	r2, r3
 8001eea:	69b9      	ldr	r1, [r7, #24]
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7ff ff3f 	bl	8001d70 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001ef2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3720      	adds	r7, #32
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40013800 	.word	0x40013800
 8001f00:	40004400 	.word	0x40004400
 8001f04:	40004800 	.word	0x40004800
 8001f08:	40004c00 	.word	0x40004c00
 8001f0c:	40005000 	.word	0x40005000

08001f10 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f22:	4a07      	ldr	r2, [pc, #28]	@ (8001f40 <LL_InitTick+0x30>)
 8001f24:	3b01      	subs	r3, #1
 8001f26:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001f28:	4b05      	ldr	r3, [pc, #20]	@ (8001f40 <LL_InitTick+0x30>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f2e:	4b04      	ldr	r3, [pc, #16]	@ (8001f40 <LL_InitTick+0x30>)
 8001f30:	2205      	movs	r2, #5
 8001f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	e000e010 	.word	0xe000e010

08001f44 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001f4c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff ffdd 	bl	8001f10 <LL_InitTick>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001f68:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa4 <LL_mDelay+0x44>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001f6e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f76:	d00c      	beq.n	8001f92 <LL_mDelay+0x32>
  {
    Delay++;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001f7e:	e008      	b.n	8001f92 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001f80:	4b08      	ldr	r3, [pc, #32]	@ (8001fa4 <LL_mDelay+0x44>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d002      	beq.n	8001f92 <LL_mDelay+0x32>
    {
      Delay--;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1f3      	bne.n	8001f80 <LL_mDelay+0x20>
    }
  }
}
 8001f98:	bf00      	nop
 8001f9a:	bf00      	nop
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	e000e010 	.word	0xe000e010

08001fa8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001fb0:	4a03      	ldr	r2, [pc, #12]	@ (8001fc0 <LL_SetSystemCoreClock+0x18>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6013      	str	r3, [r2, #0]
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr
 8001fc0:	20000cc0 	.word	0x20000cc0

08001fc4 <__sflush_r>:
 8001fc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fca:	0716      	lsls	r6, r2, #28
 8001fcc:	4605      	mov	r5, r0
 8001fce:	460c      	mov	r4, r1
 8001fd0:	d454      	bmi.n	800207c <__sflush_r+0xb8>
 8001fd2:	684b      	ldr	r3, [r1, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	dc02      	bgt.n	8001fde <__sflush_r+0x1a>
 8001fd8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	dd48      	ble.n	8002070 <__sflush_r+0xac>
 8001fde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001fe0:	2e00      	cmp	r6, #0
 8001fe2:	d045      	beq.n	8002070 <__sflush_r+0xac>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001fea:	682f      	ldr	r7, [r5, #0]
 8001fec:	6a21      	ldr	r1, [r4, #32]
 8001fee:	602b      	str	r3, [r5, #0]
 8001ff0:	d030      	beq.n	8002054 <__sflush_r+0x90>
 8001ff2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001ff4:	89a3      	ldrh	r3, [r4, #12]
 8001ff6:	0759      	lsls	r1, r3, #29
 8001ff8:	d505      	bpl.n	8002006 <__sflush_r+0x42>
 8001ffa:	6863      	ldr	r3, [r4, #4]
 8001ffc:	1ad2      	subs	r2, r2, r3
 8001ffe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002000:	b10b      	cbz	r3, 8002006 <__sflush_r+0x42>
 8002002:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002004:	1ad2      	subs	r2, r2, r3
 8002006:	2300      	movs	r3, #0
 8002008:	4628      	mov	r0, r5
 800200a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800200c:	6a21      	ldr	r1, [r4, #32]
 800200e:	47b0      	blx	r6
 8002010:	1c43      	adds	r3, r0, #1
 8002012:	89a3      	ldrh	r3, [r4, #12]
 8002014:	d106      	bne.n	8002024 <__sflush_r+0x60>
 8002016:	6829      	ldr	r1, [r5, #0]
 8002018:	291d      	cmp	r1, #29
 800201a:	d82b      	bhi.n	8002074 <__sflush_r+0xb0>
 800201c:	4a28      	ldr	r2, [pc, #160]	@ (80020c0 <__sflush_r+0xfc>)
 800201e:	410a      	asrs	r2, r1
 8002020:	07d6      	lsls	r6, r2, #31
 8002022:	d427      	bmi.n	8002074 <__sflush_r+0xb0>
 8002024:	2200      	movs	r2, #0
 8002026:	6062      	str	r2, [r4, #4]
 8002028:	6922      	ldr	r2, [r4, #16]
 800202a:	04d9      	lsls	r1, r3, #19
 800202c:	6022      	str	r2, [r4, #0]
 800202e:	d504      	bpl.n	800203a <__sflush_r+0x76>
 8002030:	1c42      	adds	r2, r0, #1
 8002032:	d101      	bne.n	8002038 <__sflush_r+0x74>
 8002034:	682b      	ldr	r3, [r5, #0]
 8002036:	b903      	cbnz	r3, 800203a <__sflush_r+0x76>
 8002038:	6560      	str	r0, [r4, #84]	@ 0x54
 800203a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800203c:	602f      	str	r7, [r5, #0]
 800203e:	b1b9      	cbz	r1, 8002070 <__sflush_r+0xac>
 8002040:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002044:	4299      	cmp	r1, r3
 8002046:	d002      	beq.n	800204e <__sflush_r+0x8a>
 8002048:	4628      	mov	r0, r5
 800204a:	f000 fb6f 	bl	800272c <_free_r>
 800204e:	2300      	movs	r3, #0
 8002050:	6363      	str	r3, [r4, #52]	@ 0x34
 8002052:	e00d      	b.n	8002070 <__sflush_r+0xac>
 8002054:	2301      	movs	r3, #1
 8002056:	4628      	mov	r0, r5
 8002058:	47b0      	blx	r6
 800205a:	4602      	mov	r2, r0
 800205c:	1c50      	adds	r0, r2, #1
 800205e:	d1c9      	bne.n	8001ff4 <__sflush_r+0x30>
 8002060:	682b      	ldr	r3, [r5, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0c6      	beq.n	8001ff4 <__sflush_r+0x30>
 8002066:	2b1d      	cmp	r3, #29
 8002068:	d001      	beq.n	800206e <__sflush_r+0xaa>
 800206a:	2b16      	cmp	r3, #22
 800206c:	d11d      	bne.n	80020aa <__sflush_r+0xe6>
 800206e:	602f      	str	r7, [r5, #0]
 8002070:	2000      	movs	r0, #0
 8002072:	e021      	b.n	80020b8 <__sflush_r+0xf4>
 8002074:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002078:	b21b      	sxth	r3, r3
 800207a:	e01a      	b.n	80020b2 <__sflush_r+0xee>
 800207c:	690f      	ldr	r7, [r1, #16]
 800207e:	2f00      	cmp	r7, #0
 8002080:	d0f6      	beq.n	8002070 <__sflush_r+0xac>
 8002082:	0793      	lsls	r3, r2, #30
 8002084:	bf18      	it	ne
 8002086:	2300      	movne	r3, #0
 8002088:	680e      	ldr	r6, [r1, #0]
 800208a:	bf08      	it	eq
 800208c:	694b      	ldreq	r3, [r1, #20]
 800208e:	1bf6      	subs	r6, r6, r7
 8002090:	600f      	str	r7, [r1, #0]
 8002092:	608b      	str	r3, [r1, #8]
 8002094:	2e00      	cmp	r6, #0
 8002096:	ddeb      	ble.n	8002070 <__sflush_r+0xac>
 8002098:	4633      	mov	r3, r6
 800209a:	463a      	mov	r2, r7
 800209c:	4628      	mov	r0, r5
 800209e:	6a21      	ldr	r1, [r4, #32]
 80020a0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80020a4:	47e0      	blx	ip
 80020a6:	2800      	cmp	r0, #0
 80020a8:	dc07      	bgt.n	80020ba <__sflush_r+0xf6>
 80020aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020b2:	f04f 30ff 	mov.w	r0, #4294967295
 80020b6:	81a3      	strh	r3, [r4, #12]
 80020b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020ba:	4407      	add	r7, r0
 80020bc:	1a36      	subs	r6, r6, r0
 80020be:	e7e9      	b.n	8002094 <__sflush_r+0xd0>
 80020c0:	dfbffffe 	.word	0xdfbffffe

080020c4 <_fflush_r>:
 80020c4:	b538      	push	{r3, r4, r5, lr}
 80020c6:	690b      	ldr	r3, [r1, #16]
 80020c8:	4605      	mov	r5, r0
 80020ca:	460c      	mov	r4, r1
 80020cc:	b913      	cbnz	r3, 80020d4 <_fflush_r+0x10>
 80020ce:	2500      	movs	r5, #0
 80020d0:	4628      	mov	r0, r5
 80020d2:	bd38      	pop	{r3, r4, r5, pc}
 80020d4:	b118      	cbz	r0, 80020de <_fflush_r+0x1a>
 80020d6:	6a03      	ldr	r3, [r0, #32]
 80020d8:	b90b      	cbnz	r3, 80020de <_fflush_r+0x1a>
 80020da:	f000 f8bb 	bl	8002254 <__sinit>
 80020de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0f3      	beq.n	80020ce <_fflush_r+0xa>
 80020e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80020e8:	07d0      	lsls	r0, r2, #31
 80020ea:	d404      	bmi.n	80020f6 <_fflush_r+0x32>
 80020ec:	0599      	lsls	r1, r3, #22
 80020ee:	d402      	bmi.n	80020f6 <_fflush_r+0x32>
 80020f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80020f2:	f000 fb18 	bl	8002726 <__retarget_lock_acquire_recursive>
 80020f6:	4628      	mov	r0, r5
 80020f8:	4621      	mov	r1, r4
 80020fa:	f7ff ff63 	bl	8001fc4 <__sflush_r>
 80020fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002100:	4605      	mov	r5, r0
 8002102:	07da      	lsls	r2, r3, #31
 8002104:	d4e4      	bmi.n	80020d0 <_fflush_r+0xc>
 8002106:	89a3      	ldrh	r3, [r4, #12]
 8002108:	059b      	lsls	r3, r3, #22
 800210a:	d4e1      	bmi.n	80020d0 <_fflush_r+0xc>
 800210c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800210e:	f000 fb0b 	bl	8002728 <__retarget_lock_release_recursive>
 8002112:	e7dd      	b.n	80020d0 <_fflush_r+0xc>

08002114 <fflush>:
 8002114:	4601      	mov	r1, r0
 8002116:	b920      	cbnz	r0, 8002122 <fflush+0xe>
 8002118:	4a04      	ldr	r2, [pc, #16]	@ (800212c <fflush+0x18>)
 800211a:	4905      	ldr	r1, [pc, #20]	@ (8002130 <fflush+0x1c>)
 800211c:	4805      	ldr	r0, [pc, #20]	@ (8002134 <fflush+0x20>)
 800211e:	f000 b8b1 	b.w	8002284 <_fwalk_sglue>
 8002122:	4b05      	ldr	r3, [pc, #20]	@ (8002138 <fflush+0x24>)
 8002124:	6818      	ldr	r0, [r3, #0]
 8002126:	f7ff bfcd 	b.w	80020c4 <_fflush_r>
 800212a:	bf00      	nop
 800212c:	20000cc4 	.word	0x20000cc4
 8002130:	080020c5 	.word	0x080020c5
 8002134:	20000cd4 	.word	0x20000cd4
 8002138:	20000cd0 	.word	0x20000cd0

0800213c <std>:
 800213c:	2300      	movs	r3, #0
 800213e:	b510      	push	{r4, lr}
 8002140:	4604      	mov	r4, r0
 8002142:	e9c0 3300 	strd	r3, r3, [r0]
 8002146:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800214a:	6083      	str	r3, [r0, #8]
 800214c:	8181      	strh	r1, [r0, #12]
 800214e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002150:	81c2      	strh	r2, [r0, #14]
 8002152:	6183      	str	r3, [r0, #24]
 8002154:	4619      	mov	r1, r3
 8002156:	2208      	movs	r2, #8
 8002158:	305c      	adds	r0, #92	@ 0x5c
 800215a:	f000 fa59 	bl	8002610 <memset>
 800215e:	4b0d      	ldr	r3, [pc, #52]	@ (8002194 <std+0x58>)
 8002160:	6224      	str	r4, [r4, #32]
 8002162:	6263      	str	r3, [r4, #36]	@ 0x24
 8002164:	4b0c      	ldr	r3, [pc, #48]	@ (8002198 <std+0x5c>)
 8002166:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002168:	4b0c      	ldr	r3, [pc, #48]	@ (800219c <std+0x60>)
 800216a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800216c:	4b0c      	ldr	r3, [pc, #48]	@ (80021a0 <std+0x64>)
 800216e:	6323      	str	r3, [r4, #48]	@ 0x30
 8002170:	4b0c      	ldr	r3, [pc, #48]	@ (80021a4 <std+0x68>)
 8002172:	429c      	cmp	r4, r3
 8002174:	d006      	beq.n	8002184 <std+0x48>
 8002176:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800217a:	4294      	cmp	r4, r2
 800217c:	d002      	beq.n	8002184 <std+0x48>
 800217e:	33d0      	adds	r3, #208	@ 0xd0
 8002180:	429c      	cmp	r4, r3
 8002182:	d105      	bne.n	8002190 <std+0x54>
 8002184:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800218c:	f000 baca 	b.w	8002724 <__retarget_lock_init_recursive>
 8002190:	bd10      	pop	{r4, pc}
 8002192:	bf00      	nop
 8002194:	0800245d 	.word	0x0800245d
 8002198:	08002483 	.word	0x08002483
 800219c:	080024bb 	.word	0x080024bb
 80021a0:	080024df 	.word	0x080024df
 80021a4:	20000fa8 	.word	0x20000fa8

080021a8 <stdio_exit_handler>:
 80021a8:	4a02      	ldr	r2, [pc, #8]	@ (80021b4 <stdio_exit_handler+0xc>)
 80021aa:	4903      	ldr	r1, [pc, #12]	@ (80021b8 <stdio_exit_handler+0x10>)
 80021ac:	4803      	ldr	r0, [pc, #12]	@ (80021bc <stdio_exit_handler+0x14>)
 80021ae:	f000 b869 	b.w	8002284 <_fwalk_sglue>
 80021b2:	bf00      	nop
 80021b4:	20000cc4 	.word	0x20000cc4
 80021b8:	080020c5 	.word	0x080020c5
 80021bc:	20000cd4 	.word	0x20000cd4

080021c0 <cleanup_stdio>:
 80021c0:	6841      	ldr	r1, [r0, #4]
 80021c2:	4b0c      	ldr	r3, [pc, #48]	@ (80021f4 <cleanup_stdio+0x34>)
 80021c4:	b510      	push	{r4, lr}
 80021c6:	4299      	cmp	r1, r3
 80021c8:	4604      	mov	r4, r0
 80021ca:	d001      	beq.n	80021d0 <cleanup_stdio+0x10>
 80021cc:	f7ff ff7a 	bl	80020c4 <_fflush_r>
 80021d0:	68a1      	ldr	r1, [r4, #8]
 80021d2:	4b09      	ldr	r3, [pc, #36]	@ (80021f8 <cleanup_stdio+0x38>)
 80021d4:	4299      	cmp	r1, r3
 80021d6:	d002      	beq.n	80021de <cleanup_stdio+0x1e>
 80021d8:	4620      	mov	r0, r4
 80021da:	f7ff ff73 	bl	80020c4 <_fflush_r>
 80021de:	68e1      	ldr	r1, [r4, #12]
 80021e0:	4b06      	ldr	r3, [pc, #24]	@ (80021fc <cleanup_stdio+0x3c>)
 80021e2:	4299      	cmp	r1, r3
 80021e4:	d004      	beq.n	80021f0 <cleanup_stdio+0x30>
 80021e6:	4620      	mov	r0, r4
 80021e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021ec:	f7ff bf6a 	b.w	80020c4 <_fflush_r>
 80021f0:	bd10      	pop	{r4, pc}
 80021f2:	bf00      	nop
 80021f4:	20000fa8 	.word	0x20000fa8
 80021f8:	20001010 	.word	0x20001010
 80021fc:	20001078 	.word	0x20001078

08002200 <global_stdio_init.part.0>:
 8002200:	b510      	push	{r4, lr}
 8002202:	4b0b      	ldr	r3, [pc, #44]	@ (8002230 <global_stdio_init.part.0+0x30>)
 8002204:	4c0b      	ldr	r4, [pc, #44]	@ (8002234 <global_stdio_init.part.0+0x34>)
 8002206:	4a0c      	ldr	r2, [pc, #48]	@ (8002238 <global_stdio_init.part.0+0x38>)
 8002208:	4620      	mov	r0, r4
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	2104      	movs	r1, #4
 800220e:	2200      	movs	r2, #0
 8002210:	f7ff ff94 	bl	800213c <std>
 8002214:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002218:	2201      	movs	r2, #1
 800221a:	2109      	movs	r1, #9
 800221c:	f7ff ff8e 	bl	800213c <std>
 8002220:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002224:	2202      	movs	r2, #2
 8002226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800222a:	2112      	movs	r1, #18
 800222c:	f7ff bf86 	b.w	800213c <std>
 8002230:	200010e0 	.word	0x200010e0
 8002234:	20000fa8 	.word	0x20000fa8
 8002238:	080021a9 	.word	0x080021a9

0800223c <__sfp_lock_acquire>:
 800223c:	4801      	ldr	r0, [pc, #4]	@ (8002244 <__sfp_lock_acquire+0x8>)
 800223e:	f000 ba72 	b.w	8002726 <__retarget_lock_acquire_recursive>
 8002242:	bf00      	nop
 8002244:	200010e9 	.word	0x200010e9

08002248 <__sfp_lock_release>:
 8002248:	4801      	ldr	r0, [pc, #4]	@ (8002250 <__sfp_lock_release+0x8>)
 800224a:	f000 ba6d 	b.w	8002728 <__retarget_lock_release_recursive>
 800224e:	bf00      	nop
 8002250:	200010e9 	.word	0x200010e9

08002254 <__sinit>:
 8002254:	b510      	push	{r4, lr}
 8002256:	4604      	mov	r4, r0
 8002258:	f7ff fff0 	bl	800223c <__sfp_lock_acquire>
 800225c:	6a23      	ldr	r3, [r4, #32]
 800225e:	b11b      	cbz	r3, 8002268 <__sinit+0x14>
 8002260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002264:	f7ff bff0 	b.w	8002248 <__sfp_lock_release>
 8002268:	4b04      	ldr	r3, [pc, #16]	@ (800227c <__sinit+0x28>)
 800226a:	6223      	str	r3, [r4, #32]
 800226c:	4b04      	ldr	r3, [pc, #16]	@ (8002280 <__sinit+0x2c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1f5      	bne.n	8002260 <__sinit+0xc>
 8002274:	f7ff ffc4 	bl	8002200 <global_stdio_init.part.0>
 8002278:	e7f2      	b.n	8002260 <__sinit+0xc>
 800227a:	bf00      	nop
 800227c:	080021c1 	.word	0x080021c1
 8002280:	200010e0 	.word	0x200010e0

08002284 <_fwalk_sglue>:
 8002284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002288:	4607      	mov	r7, r0
 800228a:	4688      	mov	r8, r1
 800228c:	4614      	mov	r4, r2
 800228e:	2600      	movs	r6, #0
 8002290:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002294:	f1b9 0901 	subs.w	r9, r9, #1
 8002298:	d505      	bpl.n	80022a6 <_fwalk_sglue+0x22>
 800229a:	6824      	ldr	r4, [r4, #0]
 800229c:	2c00      	cmp	r4, #0
 800229e:	d1f7      	bne.n	8002290 <_fwalk_sglue+0xc>
 80022a0:	4630      	mov	r0, r6
 80022a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022a6:	89ab      	ldrh	r3, [r5, #12]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d907      	bls.n	80022bc <_fwalk_sglue+0x38>
 80022ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80022b0:	3301      	adds	r3, #1
 80022b2:	d003      	beq.n	80022bc <_fwalk_sglue+0x38>
 80022b4:	4629      	mov	r1, r5
 80022b6:	4638      	mov	r0, r7
 80022b8:	47c0      	blx	r8
 80022ba:	4306      	orrs	r6, r0
 80022bc:	3568      	adds	r5, #104	@ 0x68
 80022be:	e7e9      	b.n	8002294 <_fwalk_sglue+0x10>

080022c0 <iprintf>:
 80022c0:	b40f      	push	{r0, r1, r2, r3}
 80022c2:	b507      	push	{r0, r1, r2, lr}
 80022c4:	4906      	ldr	r1, [pc, #24]	@ (80022e0 <iprintf+0x20>)
 80022c6:	ab04      	add	r3, sp, #16
 80022c8:	6808      	ldr	r0, [r1, #0]
 80022ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80022ce:	6881      	ldr	r1, [r0, #8]
 80022d0:	9301      	str	r3, [sp, #4]
 80022d2:	f000 fe6b 	bl	8002fac <_vfiprintf_r>
 80022d6:	b003      	add	sp, #12
 80022d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80022dc:	b004      	add	sp, #16
 80022de:	4770      	bx	lr
 80022e0:	20000cd0 	.word	0x20000cd0

080022e4 <_puts_r>:
 80022e4:	6a03      	ldr	r3, [r0, #32]
 80022e6:	b570      	push	{r4, r5, r6, lr}
 80022e8:	4605      	mov	r5, r0
 80022ea:	460e      	mov	r6, r1
 80022ec:	6884      	ldr	r4, [r0, #8]
 80022ee:	b90b      	cbnz	r3, 80022f4 <_puts_r+0x10>
 80022f0:	f7ff ffb0 	bl	8002254 <__sinit>
 80022f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80022f6:	07db      	lsls	r3, r3, #31
 80022f8:	d405      	bmi.n	8002306 <_puts_r+0x22>
 80022fa:	89a3      	ldrh	r3, [r4, #12]
 80022fc:	0598      	lsls	r0, r3, #22
 80022fe:	d402      	bmi.n	8002306 <_puts_r+0x22>
 8002300:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002302:	f000 fa10 	bl	8002726 <__retarget_lock_acquire_recursive>
 8002306:	89a3      	ldrh	r3, [r4, #12]
 8002308:	0719      	lsls	r1, r3, #28
 800230a:	d502      	bpl.n	8002312 <_puts_r+0x2e>
 800230c:	6923      	ldr	r3, [r4, #16]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d135      	bne.n	800237e <_puts_r+0x9a>
 8002312:	4621      	mov	r1, r4
 8002314:	4628      	mov	r0, r5
 8002316:	f000 f925 	bl	8002564 <__swsetup_r>
 800231a:	b380      	cbz	r0, 800237e <_puts_r+0x9a>
 800231c:	f04f 35ff 	mov.w	r5, #4294967295
 8002320:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002322:	07da      	lsls	r2, r3, #31
 8002324:	d405      	bmi.n	8002332 <_puts_r+0x4e>
 8002326:	89a3      	ldrh	r3, [r4, #12]
 8002328:	059b      	lsls	r3, r3, #22
 800232a:	d402      	bmi.n	8002332 <_puts_r+0x4e>
 800232c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800232e:	f000 f9fb 	bl	8002728 <__retarget_lock_release_recursive>
 8002332:	4628      	mov	r0, r5
 8002334:	bd70      	pop	{r4, r5, r6, pc}
 8002336:	2b00      	cmp	r3, #0
 8002338:	da04      	bge.n	8002344 <_puts_r+0x60>
 800233a:	69a2      	ldr	r2, [r4, #24]
 800233c:	429a      	cmp	r2, r3
 800233e:	dc17      	bgt.n	8002370 <_puts_r+0x8c>
 8002340:	290a      	cmp	r1, #10
 8002342:	d015      	beq.n	8002370 <_puts_r+0x8c>
 8002344:	6823      	ldr	r3, [r4, #0]
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	6022      	str	r2, [r4, #0]
 800234a:	7019      	strb	r1, [r3, #0]
 800234c:	68a3      	ldr	r3, [r4, #8]
 800234e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002352:	3b01      	subs	r3, #1
 8002354:	60a3      	str	r3, [r4, #8]
 8002356:	2900      	cmp	r1, #0
 8002358:	d1ed      	bne.n	8002336 <_puts_r+0x52>
 800235a:	2b00      	cmp	r3, #0
 800235c:	da11      	bge.n	8002382 <_puts_r+0x9e>
 800235e:	4622      	mov	r2, r4
 8002360:	210a      	movs	r1, #10
 8002362:	4628      	mov	r0, r5
 8002364:	f000 f8bf 	bl	80024e6 <__swbuf_r>
 8002368:	3001      	adds	r0, #1
 800236a:	d0d7      	beq.n	800231c <_puts_r+0x38>
 800236c:	250a      	movs	r5, #10
 800236e:	e7d7      	b.n	8002320 <_puts_r+0x3c>
 8002370:	4622      	mov	r2, r4
 8002372:	4628      	mov	r0, r5
 8002374:	f000 f8b7 	bl	80024e6 <__swbuf_r>
 8002378:	3001      	adds	r0, #1
 800237a:	d1e7      	bne.n	800234c <_puts_r+0x68>
 800237c:	e7ce      	b.n	800231c <_puts_r+0x38>
 800237e:	3e01      	subs	r6, #1
 8002380:	e7e4      	b.n	800234c <_puts_r+0x68>
 8002382:	6823      	ldr	r3, [r4, #0]
 8002384:	1c5a      	adds	r2, r3, #1
 8002386:	6022      	str	r2, [r4, #0]
 8002388:	220a      	movs	r2, #10
 800238a:	701a      	strb	r2, [r3, #0]
 800238c:	e7ee      	b.n	800236c <_puts_r+0x88>
	...

08002390 <puts>:
 8002390:	4b02      	ldr	r3, [pc, #8]	@ (800239c <puts+0xc>)
 8002392:	4601      	mov	r1, r0
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	f7ff bfa5 	b.w	80022e4 <_puts_r>
 800239a:	bf00      	nop
 800239c:	20000cd0 	.word	0x20000cd0

080023a0 <sniprintf>:
 80023a0:	b40c      	push	{r2, r3}
 80023a2:	b530      	push	{r4, r5, lr}
 80023a4:	4b17      	ldr	r3, [pc, #92]	@ (8002404 <sniprintf+0x64>)
 80023a6:	1e0c      	subs	r4, r1, #0
 80023a8:	681d      	ldr	r5, [r3, #0]
 80023aa:	b09d      	sub	sp, #116	@ 0x74
 80023ac:	da08      	bge.n	80023c0 <sniprintf+0x20>
 80023ae:	238b      	movs	r3, #139	@ 0x8b
 80023b0:	f04f 30ff 	mov.w	r0, #4294967295
 80023b4:	602b      	str	r3, [r5, #0]
 80023b6:	b01d      	add	sp, #116	@ 0x74
 80023b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80023bc:	b002      	add	sp, #8
 80023be:	4770      	bx	lr
 80023c0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80023c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80023c8:	bf0c      	ite	eq
 80023ca:	4623      	moveq	r3, r4
 80023cc:	f104 33ff 	addne.w	r3, r4, #4294967295
 80023d0:	9304      	str	r3, [sp, #16]
 80023d2:	9307      	str	r3, [sp, #28]
 80023d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023d8:	9002      	str	r0, [sp, #8]
 80023da:	9006      	str	r0, [sp, #24]
 80023dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80023e0:	4628      	mov	r0, r5
 80023e2:	ab21      	add	r3, sp, #132	@ 0x84
 80023e4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80023e6:	a902      	add	r1, sp, #8
 80023e8:	9301      	str	r3, [sp, #4]
 80023ea:	f000 faf1 	bl	80029d0 <_svfiprintf_r>
 80023ee:	1c43      	adds	r3, r0, #1
 80023f0:	bfbc      	itt	lt
 80023f2:	238b      	movlt	r3, #139	@ 0x8b
 80023f4:	602b      	strlt	r3, [r5, #0]
 80023f6:	2c00      	cmp	r4, #0
 80023f8:	d0dd      	beq.n	80023b6 <sniprintf+0x16>
 80023fa:	2200      	movs	r2, #0
 80023fc:	9b02      	ldr	r3, [sp, #8]
 80023fe:	701a      	strb	r2, [r3, #0]
 8002400:	e7d9      	b.n	80023b6 <sniprintf+0x16>
 8002402:	bf00      	nop
 8002404:	20000cd0 	.word	0x20000cd0

08002408 <siscanf>:
 8002408:	b40e      	push	{r1, r2, r3}
 800240a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800240e:	b530      	push	{r4, r5, lr}
 8002410:	b09c      	sub	sp, #112	@ 0x70
 8002412:	ac1f      	add	r4, sp, #124	@ 0x7c
 8002414:	f854 5b04 	ldr.w	r5, [r4], #4
 8002418:	f8ad 2014 	strh.w	r2, [sp, #20]
 800241c:	9002      	str	r0, [sp, #8]
 800241e:	9006      	str	r0, [sp, #24]
 8002420:	f7fd ff0a 	bl	8000238 <strlen>
 8002424:	4b0b      	ldr	r3, [pc, #44]	@ (8002454 <siscanf+0x4c>)
 8002426:	9003      	str	r0, [sp, #12]
 8002428:	930b      	str	r3, [sp, #44]	@ 0x2c
 800242a:	2300      	movs	r3, #0
 800242c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800242e:	9314      	str	r3, [sp, #80]	@ 0x50
 8002430:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002434:	9007      	str	r0, [sp, #28]
 8002436:	4808      	ldr	r0, [pc, #32]	@ (8002458 <siscanf+0x50>)
 8002438:	f8ad 3016 	strh.w	r3, [sp, #22]
 800243c:	462a      	mov	r2, r5
 800243e:	4623      	mov	r3, r4
 8002440:	a902      	add	r1, sp, #8
 8002442:	6800      	ldr	r0, [r0, #0]
 8002444:	9401      	str	r4, [sp, #4]
 8002446:	f000 fc17 	bl	8002c78 <__ssvfiscanf_r>
 800244a:	b01c      	add	sp, #112	@ 0x70
 800244c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002450:	b003      	add	sp, #12
 8002452:	4770      	bx	lr
 8002454:	0800247f 	.word	0x0800247f
 8002458:	20000cd0 	.word	0x20000cd0

0800245c <__sread>:
 800245c:	b510      	push	{r4, lr}
 800245e:	460c      	mov	r4, r1
 8002460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002464:	f000 f910 	bl	8002688 <_read_r>
 8002468:	2800      	cmp	r0, #0
 800246a:	bfab      	itete	ge
 800246c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800246e:	89a3      	ldrhlt	r3, [r4, #12]
 8002470:	181b      	addge	r3, r3, r0
 8002472:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002476:	bfac      	ite	ge
 8002478:	6563      	strge	r3, [r4, #84]	@ 0x54
 800247a:	81a3      	strhlt	r3, [r4, #12]
 800247c:	bd10      	pop	{r4, pc}

0800247e <__seofread>:
 800247e:	2000      	movs	r0, #0
 8002480:	4770      	bx	lr

08002482 <__swrite>:
 8002482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002486:	461f      	mov	r7, r3
 8002488:	898b      	ldrh	r3, [r1, #12]
 800248a:	4605      	mov	r5, r0
 800248c:	05db      	lsls	r3, r3, #23
 800248e:	460c      	mov	r4, r1
 8002490:	4616      	mov	r6, r2
 8002492:	d505      	bpl.n	80024a0 <__swrite+0x1e>
 8002494:	2302      	movs	r3, #2
 8002496:	2200      	movs	r2, #0
 8002498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800249c:	f000 f8e2 	bl	8002664 <_lseek_r>
 80024a0:	89a3      	ldrh	r3, [r4, #12]
 80024a2:	4632      	mov	r2, r6
 80024a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80024a8:	81a3      	strh	r3, [r4, #12]
 80024aa:	4628      	mov	r0, r5
 80024ac:	463b      	mov	r3, r7
 80024ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80024b6:	f000 b8f9 	b.w	80026ac <_write_r>

080024ba <__sseek>:
 80024ba:	b510      	push	{r4, lr}
 80024bc:	460c      	mov	r4, r1
 80024be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024c2:	f000 f8cf 	bl	8002664 <_lseek_r>
 80024c6:	1c43      	adds	r3, r0, #1
 80024c8:	89a3      	ldrh	r3, [r4, #12]
 80024ca:	bf15      	itete	ne
 80024cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80024ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80024d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80024d6:	81a3      	strheq	r3, [r4, #12]
 80024d8:	bf18      	it	ne
 80024da:	81a3      	strhne	r3, [r4, #12]
 80024dc:	bd10      	pop	{r4, pc}

080024de <__sclose>:
 80024de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024e2:	f000 b8af 	b.w	8002644 <_close_r>

080024e6 <__swbuf_r>:
 80024e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024e8:	460e      	mov	r6, r1
 80024ea:	4614      	mov	r4, r2
 80024ec:	4605      	mov	r5, r0
 80024ee:	b118      	cbz	r0, 80024f8 <__swbuf_r+0x12>
 80024f0:	6a03      	ldr	r3, [r0, #32]
 80024f2:	b90b      	cbnz	r3, 80024f8 <__swbuf_r+0x12>
 80024f4:	f7ff feae 	bl	8002254 <__sinit>
 80024f8:	69a3      	ldr	r3, [r4, #24]
 80024fa:	60a3      	str	r3, [r4, #8]
 80024fc:	89a3      	ldrh	r3, [r4, #12]
 80024fe:	071a      	lsls	r2, r3, #28
 8002500:	d501      	bpl.n	8002506 <__swbuf_r+0x20>
 8002502:	6923      	ldr	r3, [r4, #16]
 8002504:	b943      	cbnz	r3, 8002518 <__swbuf_r+0x32>
 8002506:	4621      	mov	r1, r4
 8002508:	4628      	mov	r0, r5
 800250a:	f000 f82b 	bl	8002564 <__swsetup_r>
 800250e:	b118      	cbz	r0, 8002518 <__swbuf_r+0x32>
 8002510:	f04f 37ff 	mov.w	r7, #4294967295
 8002514:	4638      	mov	r0, r7
 8002516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002518:	6823      	ldr	r3, [r4, #0]
 800251a:	6922      	ldr	r2, [r4, #16]
 800251c:	b2f6      	uxtb	r6, r6
 800251e:	1a98      	subs	r0, r3, r2
 8002520:	6963      	ldr	r3, [r4, #20]
 8002522:	4637      	mov	r7, r6
 8002524:	4283      	cmp	r3, r0
 8002526:	dc05      	bgt.n	8002534 <__swbuf_r+0x4e>
 8002528:	4621      	mov	r1, r4
 800252a:	4628      	mov	r0, r5
 800252c:	f7ff fdca 	bl	80020c4 <_fflush_r>
 8002530:	2800      	cmp	r0, #0
 8002532:	d1ed      	bne.n	8002510 <__swbuf_r+0x2a>
 8002534:	68a3      	ldr	r3, [r4, #8]
 8002536:	3b01      	subs	r3, #1
 8002538:	60a3      	str	r3, [r4, #8]
 800253a:	6823      	ldr	r3, [r4, #0]
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	6022      	str	r2, [r4, #0]
 8002540:	701e      	strb	r6, [r3, #0]
 8002542:	6962      	ldr	r2, [r4, #20]
 8002544:	1c43      	adds	r3, r0, #1
 8002546:	429a      	cmp	r2, r3
 8002548:	d004      	beq.n	8002554 <__swbuf_r+0x6e>
 800254a:	89a3      	ldrh	r3, [r4, #12]
 800254c:	07db      	lsls	r3, r3, #31
 800254e:	d5e1      	bpl.n	8002514 <__swbuf_r+0x2e>
 8002550:	2e0a      	cmp	r6, #10
 8002552:	d1df      	bne.n	8002514 <__swbuf_r+0x2e>
 8002554:	4621      	mov	r1, r4
 8002556:	4628      	mov	r0, r5
 8002558:	f7ff fdb4 	bl	80020c4 <_fflush_r>
 800255c:	2800      	cmp	r0, #0
 800255e:	d0d9      	beq.n	8002514 <__swbuf_r+0x2e>
 8002560:	e7d6      	b.n	8002510 <__swbuf_r+0x2a>
	...

08002564 <__swsetup_r>:
 8002564:	b538      	push	{r3, r4, r5, lr}
 8002566:	4b29      	ldr	r3, [pc, #164]	@ (800260c <__swsetup_r+0xa8>)
 8002568:	4605      	mov	r5, r0
 800256a:	6818      	ldr	r0, [r3, #0]
 800256c:	460c      	mov	r4, r1
 800256e:	b118      	cbz	r0, 8002578 <__swsetup_r+0x14>
 8002570:	6a03      	ldr	r3, [r0, #32]
 8002572:	b90b      	cbnz	r3, 8002578 <__swsetup_r+0x14>
 8002574:	f7ff fe6e 	bl	8002254 <__sinit>
 8002578:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800257c:	0719      	lsls	r1, r3, #28
 800257e:	d422      	bmi.n	80025c6 <__swsetup_r+0x62>
 8002580:	06da      	lsls	r2, r3, #27
 8002582:	d407      	bmi.n	8002594 <__swsetup_r+0x30>
 8002584:	2209      	movs	r2, #9
 8002586:	602a      	str	r2, [r5, #0]
 8002588:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800258c:	f04f 30ff 	mov.w	r0, #4294967295
 8002590:	81a3      	strh	r3, [r4, #12]
 8002592:	e033      	b.n	80025fc <__swsetup_r+0x98>
 8002594:	0758      	lsls	r0, r3, #29
 8002596:	d512      	bpl.n	80025be <__swsetup_r+0x5a>
 8002598:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800259a:	b141      	cbz	r1, 80025ae <__swsetup_r+0x4a>
 800259c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80025a0:	4299      	cmp	r1, r3
 80025a2:	d002      	beq.n	80025aa <__swsetup_r+0x46>
 80025a4:	4628      	mov	r0, r5
 80025a6:	f000 f8c1 	bl	800272c <_free_r>
 80025aa:	2300      	movs	r3, #0
 80025ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80025ae:	89a3      	ldrh	r3, [r4, #12]
 80025b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80025b4:	81a3      	strh	r3, [r4, #12]
 80025b6:	2300      	movs	r3, #0
 80025b8:	6063      	str	r3, [r4, #4]
 80025ba:	6923      	ldr	r3, [r4, #16]
 80025bc:	6023      	str	r3, [r4, #0]
 80025be:	89a3      	ldrh	r3, [r4, #12]
 80025c0:	f043 0308 	orr.w	r3, r3, #8
 80025c4:	81a3      	strh	r3, [r4, #12]
 80025c6:	6923      	ldr	r3, [r4, #16]
 80025c8:	b94b      	cbnz	r3, 80025de <__swsetup_r+0x7a>
 80025ca:	89a3      	ldrh	r3, [r4, #12]
 80025cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80025d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025d4:	d003      	beq.n	80025de <__swsetup_r+0x7a>
 80025d6:	4621      	mov	r1, r4
 80025d8:	4628      	mov	r0, r5
 80025da:	f001 f902 	bl	80037e2 <__smakebuf_r>
 80025de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025e2:	f013 0201 	ands.w	r2, r3, #1
 80025e6:	d00a      	beq.n	80025fe <__swsetup_r+0x9a>
 80025e8:	2200      	movs	r2, #0
 80025ea:	60a2      	str	r2, [r4, #8]
 80025ec:	6962      	ldr	r2, [r4, #20]
 80025ee:	4252      	negs	r2, r2
 80025f0:	61a2      	str	r2, [r4, #24]
 80025f2:	6922      	ldr	r2, [r4, #16]
 80025f4:	b942      	cbnz	r2, 8002608 <__swsetup_r+0xa4>
 80025f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80025fa:	d1c5      	bne.n	8002588 <__swsetup_r+0x24>
 80025fc:	bd38      	pop	{r3, r4, r5, pc}
 80025fe:	0799      	lsls	r1, r3, #30
 8002600:	bf58      	it	pl
 8002602:	6962      	ldrpl	r2, [r4, #20]
 8002604:	60a2      	str	r2, [r4, #8]
 8002606:	e7f4      	b.n	80025f2 <__swsetup_r+0x8e>
 8002608:	2000      	movs	r0, #0
 800260a:	e7f7      	b.n	80025fc <__swsetup_r+0x98>
 800260c:	20000cd0 	.word	0x20000cd0

08002610 <memset>:
 8002610:	4603      	mov	r3, r0
 8002612:	4402      	add	r2, r0
 8002614:	4293      	cmp	r3, r2
 8002616:	d100      	bne.n	800261a <memset+0xa>
 8002618:	4770      	bx	lr
 800261a:	f803 1b01 	strb.w	r1, [r3], #1
 800261e:	e7f9      	b.n	8002614 <memset+0x4>

08002620 <strncmp>:
 8002620:	b510      	push	{r4, lr}
 8002622:	b16a      	cbz	r2, 8002640 <strncmp+0x20>
 8002624:	3901      	subs	r1, #1
 8002626:	1884      	adds	r4, r0, r2
 8002628:	f810 2b01 	ldrb.w	r2, [r0], #1
 800262c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8002630:	429a      	cmp	r2, r3
 8002632:	d103      	bne.n	800263c <strncmp+0x1c>
 8002634:	42a0      	cmp	r0, r4
 8002636:	d001      	beq.n	800263c <strncmp+0x1c>
 8002638:	2a00      	cmp	r2, #0
 800263a:	d1f5      	bne.n	8002628 <strncmp+0x8>
 800263c:	1ad0      	subs	r0, r2, r3
 800263e:	bd10      	pop	{r4, pc}
 8002640:	4610      	mov	r0, r2
 8002642:	e7fc      	b.n	800263e <strncmp+0x1e>

08002644 <_close_r>:
 8002644:	b538      	push	{r3, r4, r5, lr}
 8002646:	2300      	movs	r3, #0
 8002648:	4d05      	ldr	r5, [pc, #20]	@ (8002660 <_close_r+0x1c>)
 800264a:	4604      	mov	r4, r0
 800264c:	4608      	mov	r0, r1
 800264e:	602b      	str	r3, [r5, #0]
 8002650:	f7fe ff73 	bl	800153a <_close>
 8002654:	1c43      	adds	r3, r0, #1
 8002656:	d102      	bne.n	800265e <_close_r+0x1a>
 8002658:	682b      	ldr	r3, [r5, #0]
 800265a:	b103      	cbz	r3, 800265e <_close_r+0x1a>
 800265c:	6023      	str	r3, [r4, #0]
 800265e:	bd38      	pop	{r3, r4, r5, pc}
 8002660:	200010e4 	.word	0x200010e4

08002664 <_lseek_r>:
 8002664:	b538      	push	{r3, r4, r5, lr}
 8002666:	4604      	mov	r4, r0
 8002668:	4608      	mov	r0, r1
 800266a:	4611      	mov	r1, r2
 800266c:	2200      	movs	r2, #0
 800266e:	4d05      	ldr	r5, [pc, #20]	@ (8002684 <_lseek_r+0x20>)
 8002670:	602a      	str	r2, [r5, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	f7fe ff85 	bl	8001582 <_lseek>
 8002678:	1c43      	adds	r3, r0, #1
 800267a:	d102      	bne.n	8002682 <_lseek_r+0x1e>
 800267c:	682b      	ldr	r3, [r5, #0]
 800267e:	b103      	cbz	r3, 8002682 <_lseek_r+0x1e>
 8002680:	6023      	str	r3, [r4, #0]
 8002682:	bd38      	pop	{r3, r4, r5, pc}
 8002684:	200010e4 	.word	0x200010e4

08002688 <_read_r>:
 8002688:	b538      	push	{r3, r4, r5, lr}
 800268a:	4604      	mov	r4, r0
 800268c:	4608      	mov	r0, r1
 800268e:	4611      	mov	r1, r2
 8002690:	2200      	movs	r2, #0
 8002692:	4d05      	ldr	r5, [pc, #20]	@ (80026a8 <_read_r+0x20>)
 8002694:	602a      	str	r2, [r5, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	f7fe ff32 	bl	8001500 <_read>
 800269c:	1c43      	adds	r3, r0, #1
 800269e:	d102      	bne.n	80026a6 <_read_r+0x1e>
 80026a0:	682b      	ldr	r3, [r5, #0]
 80026a2:	b103      	cbz	r3, 80026a6 <_read_r+0x1e>
 80026a4:	6023      	str	r3, [r4, #0]
 80026a6:	bd38      	pop	{r3, r4, r5, pc}
 80026a8:	200010e4 	.word	0x200010e4

080026ac <_write_r>:
 80026ac:	b538      	push	{r3, r4, r5, lr}
 80026ae:	4604      	mov	r4, r0
 80026b0:	4608      	mov	r0, r1
 80026b2:	4611      	mov	r1, r2
 80026b4:	2200      	movs	r2, #0
 80026b6:	4d05      	ldr	r5, [pc, #20]	@ (80026cc <_write_r+0x20>)
 80026b8:	602a      	str	r2, [r5, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	f7fe f8ae 	bl	800081c <_write>
 80026c0:	1c43      	adds	r3, r0, #1
 80026c2:	d102      	bne.n	80026ca <_write_r+0x1e>
 80026c4:	682b      	ldr	r3, [r5, #0]
 80026c6:	b103      	cbz	r3, 80026ca <_write_r+0x1e>
 80026c8:	6023      	str	r3, [r4, #0]
 80026ca:	bd38      	pop	{r3, r4, r5, pc}
 80026cc:	200010e4 	.word	0x200010e4

080026d0 <__errno>:
 80026d0:	4b01      	ldr	r3, [pc, #4]	@ (80026d8 <__errno+0x8>)
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	20000cd0 	.word	0x20000cd0

080026dc <__libc_init_array>:
 80026dc:	b570      	push	{r4, r5, r6, lr}
 80026de:	2600      	movs	r6, #0
 80026e0:	4d0c      	ldr	r5, [pc, #48]	@ (8002714 <__libc_init_array+0x38>)
 80026e2:	4c0d      	ldr	r4, [pc, #52]	@ (8002718 <__libc_init_array+0x3c>)
 80026e4:	1b64      	subs	r4, r4, r5
 80026e6:	10a4      	asrs	r4, r4, #2
 80026e8:	42a6      	cmp	r6, r4
 80026ea:	d109      	bne.n	8002700 <__libc_init_array+0x24>
 80026ec:	f001 fab0 	bl	8003c50 <_init>
 80026f0:	2600      	movs	r6, #0
 80026f2:	4d0a      	ldr	r5, [pc, #40]	@ (800271c <__libc_init_array+0x40>)
 80026f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002720 <__libc_init_array+0x44>)
 80026f6:	1b64      	subs	r4, r4, r5
 80026f8:	10a4      	asrs	r4, r4, #2
 80026fa:	42a6      	cmp	r6, r4
 80026fc:	d105      	bne.n	800270a <__libc_init_array+0x2e>
 80026fe:	bd70      	pop	{r4, r5, r6, pc}
 8002700:	f855 3b04 	ldr.w	r3, [r5], #4
 8002704:	4798      	blx	r3
 8002706:	3601      	adds	r6, #1
 8002708:	e7ee      	b.n	80026e8 <__libc_init_array+0xc>
 800270a:	f855 3b04 	ldr.w	r3, [r5], #4
 800270e:	4798      	blx	r3
 8002710:	3601      	adds	r6, #1
 8002712:	e7f2      	b.n	80026fa <__libc_init_array+0x1e>
 8002714:	080047a8 	.word	0x080047a8
 8002718:	080047a8 	.word	0x080047a8
 800271c:	080047a8 	.word	0x080047a8
 8002720:	080047ac 	.word	0x080047ac

08002724 <__retarget_lock_init_recursive>:
 8002724:	4770      	bx	lr

08002726 <__retarget_lock_acquire_recursive>:
 8002726:	4770      	bx	lr

08002728 <__retarget_lock_release_recursive>:
 8002728:	4770      	bx	lr
	...

0800272c <_free_r>:
 800272c:	b538      	push	{r3, r4, r5, lr}
 800272e:	4605      	mov	r5, r0
 8002730:	2900      	cmp	r1, #0
 8002732:	d040      	beq.n	80027b6 <_free_r+0x8a>
 8002734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002738:	1f0c      	subs	r4, r1, #4
 800273a:	2b00      	cmp	r3, #0
 800273c:	bfb8      	it	lt
 800273e:	18e4      	addlt	r4, r4, r3
 8002740:	f000 f8de 	bl	8002900 <__malloc_lock>
 8002744:	4a1c      	ldr	r2, [pc, #112]	@ (80027b8 <_free_r+0x8c>)
 8002746:	6813      	ldr	r3, [r2, #0]
 8002748:	b933      	cbnz	r3, 8002758 <_free_r+0x2c>
 800274a:	6063      	str	r3, [r4, #4]
 800274c:	6014      	str	r4, [r2, #0]
 800274e:	4628      	mov	r0, r5
 8002750:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002754:	f000 b8da 	b.w	800290c <__malloc_unlock>
 8002758:	42a3      	cmp	r3, r4
 800275a:	d908      	bls.n	800276e <_free_r+0x42>
 800275c:	6820      	ldr	r0, [r4, #0]
 800275e:	1821      	adds	r1, r4, r0
 8002760:	428b      	cmp	r3, r1
 8002762:	bf01      	itttt	eq
 8002764:	6819      	ldreq	r1, [r3, #0]
 8002766:	685b      	ldreq	r3, [r3, #4]
 8002768:	1809      	addeq	r1, r1, r0
 800276a:	6021      	streq	r1, [r4, #0]
 800276c:	e7ed      	b.n	800274a <_free_r+0x1e>
 800276e:	461a      	mov	r2, r3
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	b10b      	cbz	r3, 8002778 <_free_r+0x4c>
 8002774:	42a3      	cmp	r3, r4
 8002776:	d9fa      	bls.n	800276e <_free_r+0x42>
 8002778:	6811      	ldr	r1, [r2, #0]
 800277a:	1850      	adds	r0, r2, r1
 800277c:	42a0      	cmp	r0, r4
 800277e:	d10b      	bne.n	8002798 <_free_r+0x6c>
 8002780:	6820      	ldr	r0, [r4, #0]
 8002782:	4401      	add	r1, r0
 8002784:	1850      	adds	r0, r2, r1
 8002786:	4283      	cmp	r3, r0
 8002788:	6011      	str	r1, [r2, #0]
 800278a:	d1e0      	bne.n	800274e <_free_r+0x22>
 800278c:	6818      	ldr	r0, [r3, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	4408      	add	r0, r1
 8002792:	6010      	str	r0, [r2, #0]
 8002794:	6053      	str	r3, [r2, #4]
 8002796:	e7da      	b.n	800274e <_free_r+0x22>
 8002798:	d902      	bls.n	80027a0 <_free_r+0x74>
 800279a:	230c      	movs	r3, #12
 800279c:	602b      	str	r3, [r5, #0]
 800279e:	e7d6      	b.n	800274e <_free_r+0x22>
 80027a0:	6820      	ldr	r0, [r4, #0]
 80027a2:	1821      	adds	r1, r4, r0
 80027a4:	428b      	cmp	r3, r1
 80027a6:	bf01      	itttt	eq
 80027a8:	6819      	ldreq	r1, [r3, #0]
 80027aa:	685b      	ldreq	r3, [r3, #4]
 80027ac:	1809      	addeq	r1, r1, r0
 80027ae:	6021      	streq	r1, [r4, #0]
 80027b0:	6063      	str	r3, [r4, #4]
 80027b2:	6054      	str	r4, [r2, #4]
 80027b4:	e7cb      	b.n	800274e <_free_r+0x22>
 80027b6:	bd38      	pop	{r3, r4, r5, pc}
 80027b8:	200010f0 	.word	0x200010f0

080027bc <sbrk_aligned>:
 80027bc:	b570      	push	{r4, r5, r6, lr}
 80027be:	4e0f      	ldr	r6, [pc, #60]	@ (80027fc <sbrk_aligned+0x40>)
 80027c0:	460c      	mov	r4, r1
 80027c2:	6831      	ldr	r1, [r6, #0]
 80027c4:	4605      	mov	r5, r0
 80027c6:	b911      	cbnz	r1, 80027ce <sbrk_aligned+0x12>
 80027c8:	f001 f8f4 	bl	80039b4 <_sbrk_r>
 80027cc:	6030      	str	r0, [r6, #0]
 80027ce:	4621      	mov	r1, r4
 80027d0:	4628      	mov	r0, r5
 80027d2:	f001 f8ef 	bl	80039b4 <_sbrk_r>
 80027d6:	1c43      	adds	r3, r0, #1
 80027d8:	d103      	bne.n	80027e2 <sbrk_aligned+0x26>
 80027da:	f04f 34ff 	mov.w	r4, #4294967295
 80027de:	4620      	mov	r0, r4
 80027e0:	bd70      	pop	{r4, r5, r6, pc}
 80027e2:	1cc4      	adds	r4, r0, #3
 80027e4:	f024 0403 	bic.w	r4, r4, #3
 80027e8:	42a0      	cmp	r0, r4
 80027ea:	d0f8      	beq.n	80027de <sbrk_aligned+0x22>
 80027ec:	1a21      	subs	r1, r4, r0
 80027ee:	4628      	mov	r0, r5
 80027f0:	f001 f8e0 	bl	80039b4 <_sbrk_r>
 80027f4:	3001      	adds	r0, #1
 80027f6:	d1f2      	bne.n	80027de <sbrk_aligned+0x22>
 80027f8:	e7ef      	b.n	80027da <sbrk_aligned+0x1e>
 80027fa:	bf00      	nop
 80027fc:	200010ec 	.word	0x200010ec

08002800 <_malloc_r>:
 8002800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002804:	1ccd      	adds	r5, r1, #3
 8002806:	f025 0503 	bic.w	r5, r5, #3
 800280a:	3508      	adds	r5, #8
 800280c:	2d0c      	cmp	r5, #12
 800280e:	bf38      	it	cc
 8002810:	250c      	movcc	r5, #12
 8002812:	2d00      	cmp	r5, #0
 8002814:	4606      	mov	r6, r0
 8002816:	db01      	blt.n	800281c <_malloc_r+0x1c>
 8002818:	42a9      	cmp	r1, r5
 800281a:	d904      	bls.n	8002826 <_malloc_r+0x26>
 800281c:	230c      	movs	r3, #12
 800281e:	6033      	str	r3, [r6, #0]
 8002820:	2000      	movs	r0, #0
 8002822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002826:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80028fc <_malloc_r+0xfc>
 800282a:	f000 f869 	bl	8002900 <__malloc_lock>
 800282e:	f8d8 3000 	ldr.w	r3, [r8]
 8002832:	461c      	mov	r4, r3
 8002834:	bb44      	cbnz	r4, 8002888 <_malloc_r+0x88>
 8002836:	4629      	mov	r1, r5
 8002838:	4630      	mov	r0, r6
 800283a:	f7ff ffbf 	bl	80027bc <sbrk_aligned>
 800283e:	1c43      	adds	r3, r0, #1
 8002840:	4604      	mov	r4, r0
 8002842:	d158      	bne.n	80028f6 <_malloc_r+0xf6>
 8002844:	f8d8 4000 	ldr.w	r4, [r8]
 8002848:	4627      	mov	r7, r4
 800284a:	2f00      	cmp	r7, #0
 800284c:	d143      	bne.n	80028d6 <_malloc_r+0xd6>
 800284e:	2c00      	cmp	r4, #0
 8002850:	d04b      	beq.n	80028ea <_malloc_r+0xea>
 8002852:	6823      	ldr	r3, [r4, #0]
 8002854:	4639      	mov	r1, r7
 8002856:	4630      	mov	r0, r6
 8002858:	eb04 0903 	add.w	r9, r4, r3
 800285c:	f001 f8aa 	bl	80039b4 <_sbrk_r>
 8002860:	4581      	cmp	r9, r0
 8002862:	d142      	bne.n	80028ea <_malloc_r+0xea>
 8002864:	6821      	ldr	r1, [r4, #0]
 8002866:	4630      	mov	r0, r6
 8002868:	1a6d      	subs	r5, r5, r1
 800286a:	4629      	mov	r1, r5
 800286c:	f7ff ffa6 	bl	80027bc <sbrk_aligned>
 8002870:	3001      	adds	r0, #1
 8002872:	d03a      	beq.n	80028ea <_malloc_r+0xea>
 8002874:	6823      	ldr	r3, [r4, #0]
 8002876:	442b      	add	r3, r5
 8002878:	6023      	str	r3, [r4, #0]
 800287a:	f8d8 3000 	ldr.w	r3, [r8]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	bb62      	cbnz	r2, 80028dc <_malloc_r+0xdc>
 8002882:	f8c8 7000 	str.w	r7, [r8]
 8002886:	e00f      	b.n	80028a8 <_malloc_r+0xa8>
 8002888:	6822      	ldr	r2, [r4, #0]
 800288a:	1b52      	subs	r2, r2, r5
 800288c:	d420      	bmi.n	80028d0 <_malloc_r+0xd0>
 800288e:	2a0b      	cmp	r2, #11
 8002890:	d917      	bls.n	80028c2 <_malloc_r+0xc2>
 8002892:	1961      	adds	r1, r4, r5
 8002894:	42a3      	cmp	r3, r4
 8002896:	6025      	str	r5, [r4, #0]
 8002898:	bf18      	it	ne
 800289a:	6059      	strne	r1, [r3, #4]
 800289c:	6863      	ldr	r3, [r4, #4]
 800289e:	bf08      	it	eq
 80028a0:	f8c8 1000 	streq.w	r1, [r8]
 80028a4:	5162      	str	r2, [r4, r5]
 80028a6:	604b      	str	r3, [r1, #4]
 80028a8:	4630      	mov	r0, r6
 80028aa:	f000 f82f 	bl	800290c <__malloc_unlock>
 80028ae:	f104 000b 	add.w	r0, r4, #11
 80028b2:	1d23      	adds	r3, r4, #4
 80028b4:	f020 0007 	bic.w	r0, r0, #7
 80028b8:	1ac2      	subs	r2, r0, r3
 80028ba:	bf1c      	itt	ne
 80028bc:	1a1b      	subne	r3, r3, r0
 80028be:	50a3      	strne	r3, [r4, r2]
 80028c0:	e7af      	b.n	8002822 <_malloc_r+0x22>
 80028c2:	6862      	ldr	r2, [r4, #4]
 80028c4:	42a3      	cmp	r3, r4
 80028c6:	bf0c      	ite	eq
 80028c8:	f8c8 2000 	streq.w	r2, [r8]
 80028cc:	605a      	strne	r2, [r3, #4]
 80028ce:	e7eb      	b.n	80028a8 <_malloc_r+0xa8>
 80028d0:	4623      	mov	r3, r4
 80028d2:	6864      	ldr	r4, [r4, #4]
 80028d4:	e7ae      	b.n	8002834 <_malloc_r+0x34>
 80028d6:	463c      	mov	r4, r7
 80028d8:	687f      	ldr	r7, [r7, #4]
 80028da:	e7b6      	b.n	800284a <_malloc_r+0x4a>
 80028dc:	461a      	mov	r2, r3
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	42a3      	cmp	r3, r4
 80028e2:	d1fb      	bne.n	80028dc <_malloc_r+0xdc>
 80028e4:	2300      	movs	r3, #0
 80028e6:	6053      	str	r3, [r2, #4]
 80028e8:	e7de      	b.n	80028a8 <_malloc_r+0xa8>
 80028ea:	230c      	movs	r3, #12
 80028ec:	4630      	mov	r0, r6
 80028ee:	6033      	str	r3, [r6, #0]
 80028f0:	f000 f80c 	bl	800290c <__malloc_unlock>
 80028f4:	e794      	b.n	8002820 <_malloc_r+0x20>
 80028f6:	6005      	str	r5, [r0, #0]
 80028f8:	e7d6      	b.n	80028a8 <_malloc_r+0xa8>
 80028fa:	bf00      	nop
 80028fc:	200010f0 	.word	0x200010f0

08002900 <__malloc_lock>:
 8002900:	4801      	ldr	r0, [pc, #4]	@ (8002908 <__malloc_lock+0x8>)
 8002902:	f7ff bf10 	b.w	8002726 <__retarget_lock_acquire_recursive>
 8002906:	bf00      	nop
 8002908:	200010e8 	.word	0x200010e8

0800290c <__malloc_unlock>:
 800290c:	4801      	ldr	r0, [pc, #4]	@ (8002914 <__malloc_unlock+0x8>)
 800290e:	f7ff bf0b 	b.w	8002728 <__retarget_lock_release_recursive>
 8002912:	bf00      	nop
 8002914:	200010e8 	.word	0x200010e8

08002918 <__ssputs_r>:
 8002918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800291c:	461f      	mov	r7, r3
 800291e:	688e      	ldr	r6, [r1, #8]
 8002920:	4682      	mov	sl, r0
 8002922:	42be      	cmp	r6, r7
 8002924:	460c      	mov	r4, r1
 8002926:	4690      	mov	r8, r2
 8002928:	680b      	ldr	r3, [r1, #0]
 800292a:	d82d      	bhi.n	8002988 <__ssputs_r+0x70>
 800292c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002930:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002934:	d026      	beq.n	8002984 <__ssputs_r+0x6c>
 8002936:	6965      	ldr	r5, [r4, #20]
 8002938:	6909      	ldr	r1, [r1, #16]
 800293a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800293e:	eba3 0901 	sub.w	r9, r3, r1
 8002942:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002946:	1c7b      	adds	r3, r7, #1
 8002948:	444b      	add	r3, r9
 800294a:	106d      	asrs	r5, r5, #1
 800294c:	429d      	cmp	r5, r3
 800294e:	bf38      	it	cc
 8002950:	461d      	movcc	r5, r3
 8002952:	0553      	lsls	r3, r2, #21
 8002954:	d527      	bpl.n	80029a6 <__ssputs_r+0x8e>
 8002956:	4629      	mov	r1, r5
 8002958:	f7ff ff52 	bl	8002800 <_malloc_r>
 800295c:	4606      	mov	r6, r0
 800295e:	b360      	cbz	r0, 80029ba <__ssputs_r+0xa2>
 8002960:	464a      	mov	r2, r9
 8002962:	6921      	ldr	r1, [r4, #16]
 8002964:	f001 f844 	bl	80039f0 <memcpy>
 8002968:	89a3      	ldrh	r3, [r4, #12]
 800296a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800296e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002972:	81a3      	strh	r3, [r4, #12]
 8002974:	6126      	str	r6, [r4, #16]
 8002976:	444e      	add	r6, r9
 8002978:	6026      	str	r6, [r4, #0]
 800297a:	463e      	mov	r6, r7
 800297c:	6165      	str	r5, [r4, #20]
 800297e:	eba5 0509 	sub.w	r5, r5, r9
 8002982:	60a5      	str	r5, [r4, #8]
 8002984:	42be      	cmp	r6, r7
 8002986:	d900      	bls.n	800298a <__ssputs_r+0x72>
 8002988:	463e      	mov	r6, r7
 800298a:	4632      	mov	r2, r6
 800298c:	4641      	mov	r1, r8
 800298e:	6820      	ldr	r0, [r4, #0]
 8002990:	f000 ffd4 	bl	800393c <memmove>
 8002994:	2000      	movs	r0, #0
 8002996:	68a3      	ldr	r3, [r4, #8]
 8002998:	1b9b      	subs	r3, r3, r6
 800299a:	60a3      	str	r3, [r4, #8]
 800299c:	6823      	ldr	r3, [r4, #0]
 800299e:	4433      	add	r3, r6
 80029a0:	6023      	str	r3, [r4, #0]
 80029a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029a6:	462a      	mov	r2, r5
 80029a8:	f001 f830 	bl	8003a0c <_realloc_r>
 80029ac:	4606      	mov	r6, r0
 80029ae:	2800      	cmp	r0, #0
 80029b0:	d1e0      	bne.n	8002974 <__ssputs_r+0x5c>
 80029b2:	4650      	mov	r0, sl
 80029b4:	6921      	ldr	r1, [r4, #16]
 80029b6:	f7ff feb9 	bl	800272c <_free_r>
 80029ba:	230c      	movs	r3, #12
 80029bc:	f8ca 3000 	str.w	r3, [sl]
 80029c0:	89a3      	ldrh	r3, [r4, #12]
 80029c2:	f04f 30ff 	mov.w	r0, #4294967295
 80029c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029ca:	81a3      	strh	r3, [r4, #12]
 80029cc:	e7e9      	b.n	80029a2 <__ssputs_r+0x8a>
	...

080029d0 <_svfiprintf_r>:
 80029d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029d4:	4698      	mov	r8, r3
 80029d6:	898b      	ldrh	r3, [r1, #12]
 80029d8:	4607      	mov	r7, r0
 80029da:	061b      	lsls	r3, r3, #24
 80029dc:	460d      	mov	r5, r1
 80029de:	4614      	mov	r4, r2
 80029e0:	b09d      	sub	sp, #116	@ 0x74
 80029e2:	d510      	bpl.n	8002a06 <_svfiprintf_r+0x36>
 80029e4:	690b      	ldr	r3, [r1, #16]
 80029e6:	b973      	cbnz	r3, 8002a06 <_svfiprintf_r+0x36>
 80029e8:	2140      	movs	r1, #64	@ 0x40
 80029ea:	f7ff ff09 	bl	8002800 <_malloc_r>
 80029ee:	6028      	str	r0, [r5, #0]
 80029f0:	6128      	str	r0, [r5, #16]
 80029f2:	b930      	cbnz	r0, 8002a02 <_svfiprintf_r+0x32>
 80029f4:	230c      	movs	r3, #12
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	f04f 30ff 	mov.w	r0, #4294967295
 80029fc:	b01d      	add	sp, #116	@ 0x74
 80029fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a02:	2340      	movs	r3, #64	@ 0x40
 8002a04:	616b      	str	r3, [r5, #20]
 8002a06:	2300      	movs	r3, #0
 8002a08:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a0a:	2320      	movs	r3, #32
 8002a0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002a10:	2330      	movs	r3, #48	@ 0x30
 8002a12:	f04f 0901 	mov.w	r9, #1
 8002a16:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a1a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002bb4 <_svfiprintf_r+0x1e4>
 8002a1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002a22:	4623      	mov	r3, r4
 8002a24:	469a      	mov	sl, r3
 8002a26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a2a:	b10a      	cbz	r2, 8002a30 <_svfiprintf_r+0x60>
 8002a2c:	2a25      	cmp	r2, #37	@ 0x25
 8002a2e:	d1f9      	bne.n	8002a24 <_svfiprintf_r+0x54>
 8002a30:	ebba 0b04 	subs.w	fp, sl, r4
 8002a34:	d00b      	beq.n	8002a4e <_svfiprintf_r+0x7e>
 8002a36:	465b      	mov	r3, fp
 8002a38:	4622      	mov	r2, r4
 8002a3a:	4629      	mov	r1, r5
 8002a3c:	4638      	mov	r0, r7
 8002a3e:	f7ff ff6b 	bl	8002918 <__ssputs_r>
 8002a42:	3001      	adds	r0, #1
 8002a44:	f000 80a7 	beq.w	8002b96 <_svfiprintf_r+0x1c6>
 8002a48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002a4a:	445a      	add	r2, fp
 8002a4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8002a4e:	f89a 3000 	ldrb.w	r3, [sl]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 809f 	beq.w	8002b96 <_svfiprintf_r+0x1c6>
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002a5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a62:	f10a 0a01 	add.w	sl, sl, #1
 8002a66:	9304      	str	r3, [sp, #16]
 8002a68:	9307      	str	r3, [sp, #28]
 8002a6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002a6e:	931a      	str	r3, [sp, #104]	@ 0x68
 8002a70:	4654      	mov	r4, sl
 8002a72:	2205      	movs	r2, #5
 8002a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a78:	484e      	ldr	r0, [pc, #312]	@ (8002bb4 <_svfiprintf_r+0x1e4>)
 8002a7a:	f000 ffab 	bl	80039d4 <memchr>
 8002a7e:	9a04      	ldr	r2, [sp, #16]
 8002a80:	b9d8      	cbnz	r0, 8002aba <_svfiprintf_r+0xea>
 8002a82:	06d0      	lsls	r0, r2, #27
 8002a84:	bf44      	itt	mi
 8002a86:	2320      	movmi	r3, #32
 8002a88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002a8c:	0711      	lsls	r1, r2, #28
 8002a8e:	bf44      	itt	mi
 8002a90:	232b      	movmi	r3, #43	@ 0x2b
 8002a92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002a96:	f89a 3000 	ldrb.w	r3, [sl]
 8002a9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a9c:	d015      	beq.n	8002aca <_svfiprintf_r+0xfa>
 8002a9e:	4654      	mov	r4, sl
 8002aa0:	2000      	movs	r0, #0
 8002aa2:	f04f 0c0a 	mov.w	ip, #10
 8002aa6:	9a07      	ldr	r2, [sp, #28]
 8002aa8:	4621      	mov	r1, r4
 8002aaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002aae:	3b30      	subs	r3, #48	@ 0x30
 8002ab0:	2b09      	cmp	r3, #9
 8002ab2:	d94b      	bls.n	8002b4c <_svfiprintf_r+0x17c>
 8002ab4:	b1b0      	cbz	r0, 8002ae4 <_svfiprintf_r+0x114>
 8002ab6:	9207      	str	r2, [sp, #28]
 8002ab8:	e014      	b.n	8002ae4 <_svfiprintf_r+0x114>
 8002aba:	eba0 0308 	sub.w	r3, r0, r8
 8002abe:	fa09 f303 	lsl.w	r3, r9, r3
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	46a2      	mov	sl, r4
 8002ac6:	9304      	str	r3, [sp, #16]
 8002ac8:	e7d2      	b.n	8002a70 <_svfiprintf_r+0xa0>
 8002aca:	9b03      	ldr	r3, [sp, #12]
 8002acc:	1d19      	adds	r1, r3, #4
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	9103      	str	r1, [sp, #12]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	bfbb      	ittet	lt
 8002ad6:	425b      	neglt	r3, r3
 8002ad8:	f042 0202 	orrlt.w	r2, r2, #2
 8002adc:	9307      	strge	r3, [sp, #28]
 8002ade:	9307      	strlt	r3, [sp, #28]
 8002ae0:	bfb8      	it	lt
 8002ae2:	9204      	strlt	r2, [sp, #16]
 8002ae4:	7823      	ldrb	r3, [r4, #0]
 8002ae6:	2b2e      	cmp	r3, #46	@ 0x2e
 8002ae8:	d10a      	bne.n	8002b00 <_svfiprintf_r+0x130>
 8002aea:	7863      	ldrb	r3, [r4, #1]
 8002aec:	2b2a      	cmp	r3, #42	@ 0x2a
 8002aee:	d132      	bne.n	8002b56 <_svfiprintf_r+0x186>
 8002af0:	9b03      	ldr	r3, [sp, #12]
 8002af2:	3402      	adds	r4, #2
 8002af4:	1d1a      	adds	r2, r3, #4
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	9203      	str	r2, [sp, #12]
 8002afa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002afe:	9305      	str	r3, [sp, #20]
 8002b00:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002bb8 <_svfiprintf_r+0x1e8>
 8002b04:	2203      	movs	r2, #3
 8002b06:	4650      	mov	r0, sl
 8002b08:	7821      	ldrb	r1, [r4, #0]
 8002b0a:	f000 ff63 	bl	80039d4 <memchr>
 8002b0e:	b138      	cbz	r0, 8002b20 <_svfiprintf_r+0x150>
 8002b10:	2240      	movs	r2, #64	@ 0x40
 8002b12:	9b04      	ldr	r3, [sp, #16]
 8002b14:	eba0 000a 	sub.w	r0, r0, sl
 8002b18:	4082      	lsls	r2, r0
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	3401      	adds	r4, #1
 8002b1e:	9304      	str	r3, [sp, #16]
 8002b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b24:	2206      	movs	r2, #6
 8002b26:	4825      	ldr	r0, [pc, #148]	@ (8002bbc <_svfiprintf_r+0x1ec>)
 8002b28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002b2c:	f000 ff52 	bl	80039d4 <memchr>
 8002b30:	2800      	cmp	r0, #0
 8002b32:	d036      	beq.n	8002ba2 <_svfiprintf_r+0x1d2>
 8002b34:	4b22      	ldr	r3, [pc, #136]	@ (8002bc0 <_svfiprintf_r+0x1f0>)
 8002b36:	bb1b      	cbnz	r3, 8002b80 <_svfiprintf_r+0x1b0>
 8002b38:	9b03      	ldr	r3, [sp, #12]
 8002b3a:	3307      	adds	r3, #7
 8002b3c:	f023 0307 	bic.w	r3, r3, #7
 8002b40:	3308      	adds	r3, #8
 8002b42:	9303      	str	r3, [sp, #12]
 8002b44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002b46:	4433      	add	r3, r6
 8002b48:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b4a:	e76a      	b.n	8002a22 <_svfiprintf_r+0x52>
 8002b4c:	460c      	mov	r4, r1
 8002b4e:	2001      	movs	r0, #1
 8002b50:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b54:	e7a8      	b.n	8002aa8 <_svfiprintf_r+0xd8>
 8002b56:	2300      	movs	r3, #0
 8002b58:	f04f 0c0a 	mov.w	ip, #10
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	3401      	adds	r4, #1
 8002b60:	9305      	str	r3, [sp, #20]
 8002b62:	4620      	mov	r0, r4
 8002b64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b68:	3a30      	subs	r2, #48	@ 0x30
 8002b6a:	2a09      	cmp	r2, #9
 8002b6c:	d903      	bls.n	8002b76 <_svfiprintf_r+0x1a6>
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0c6      	beq.n	8002b00 <_svfiprintf_r+0x130>
 8002b72:	9105      	str	r1, [sp, #20]
 8002b74:	e7c4      	b.n	8002b00 <_svfiprintf_r+0x130>
 8002b76:	4604      	mov	r4, r0
 8002b78:	2301      	movs	r3, #1
 8002b7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b7e:	e7f0      	b.n	8002b62 <_svfiprintf_r+0x192>
 8002b80:	ab03      	add	r3, sp, #12
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	462a      	mov	r2, r5
 8002b86:	4638      	mov	r0, r7
 8002b88:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc4 <_svfiprintf_r+0x1f4>)
 8002b8a:	a904      	add	r1, sp, #16
 8002b8c:	f3af 8000 	nop.w
 8002b90:	1c42      	adds	r2, r0, #1
 8002b92:	4606      	mov	r6, r0
 8002b94:	d1d6      	bne.n	8002b44 <_svfiprintf_r+0x174>
 8002b96:	89ab      	ldrh	r3, [r5, #12]
 8002b98:	065b      	lsls	r3, r3, #25
 8002b9a:	f53f af2d 	bmi.w	80029f8 <_svfiprintf_r+0x28>
 8002b9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002ba0:	e72c      	b.n	80029fc <_svfiprintf_r+0x2c>
 8002ba2:	ab03      	add	r3, sp, #12
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	462a      	mov	r2, r5
 8002ba8:	4638      	mov	r0, r7
 8002baa:	4b06      	ldr	r3, [pc, #24]	@ (8002bc4 <_svfiprintf_r+0x1f4>)
 8002bac:	a904      	add	r1, sp, #16
 8002bae:	f000 fb87 	bl	80032c0 <_printf_i>
 8002bb2:	e7ed      	b.n	8002b90 <_svfiprintf_r+0x1c0>
 8002bb4:	08004650 	.word	0x08004650
 8002bb8:	08004656 	.word	0x08004656
 8002bbc:	0800465a 	.word	0x0800465a
 8002bc0:	00000000 	.word	0x00000000
 8002bc4:	08002919 	.word	0x08002919

08002bc8 <_sungetc_r>:
 8002bc8:	b538      	push	{r3, r4, r5, lr}
 8002bca:	1c4b      	adds	r3, r1, #1
 8002bcc:	4614      	mov	r4, r2
 8002bce:	d103      	bne.n	8002bd8 <_sungetc_r+0x10>
 8002bd0:	f04f 35ff 	mov.w	r5, #4294967295
 8002bd4:	4628      	mov	r0, r5
 8002bd6:	bd38      	pop	{r3, r4, r5, pc}
 8002bd8:	8993      	ldrh	r3, [r2, #12]
 8002bda:	b2cd      	uxtb	r5, r1
 8002bdc:	f023 0320 	bic.w	r3, r3, #32
 8002be0:	8193      	strh	r3, [r2, #12]
 8002be2:	6853      	ldr	r3, [r2, #4]
 8002be4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002be6:	b18a      	cbz	r2, 8002c0c <_sungetc_r+0x44>
 8002be8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002bea:	429a      	cmp	r2, r3
 8002bec:	dd08      	ble.n	8002c00 <_sungetc_r+0x38>
 8002bee:	6823      	ldr	r3, [r4, #0]
 8002bf0:	1e5a      	subs	r2, r3, #1
 8002bf2:	6022      	str	r2, [r4, #0]
 8002bf4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8002bf8:	6863      	ldr	r3, [r4, #4]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	6063      	str	r3, [r4, #4]
 8002bfe:	e7e9      	b.n	8002bd4 <_sungetc_r+0xc>
 8002c00:	4621      	mov	r1, r4
 8002c02:	f000 fe63 	bl	80038cc <__submore>
 8002c06:	2800      	cmp	r0, #0
 8002c08:	d0f1      	beq.n	8002bee <_sungetc_r+0x26>
 8002c0a:	e7e1      	b.n	8002bd0 <_sungetc_r+0x8>
 8002c0c:	6921      	ldr	r1, [r4, #16]
 8002c0e:	6822      	ldr	r2, [r4, #0]
 8002c10:	b141      	cbz	r1, 8002c24 <_sungetc_r+0x5c>
 8002c12:	4291      	cmp	r1, r2
 8002c14:	d206      	bcs.n	8002c24 <_sungetc_r+0x5c>
 8002c16:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8002c1a:	42a9      	cmp	r1, r5
 8002c1c:	d102      	bne.n	8002c24 <_sungetc_r+0x5c>
 8002c1e:	3a01      	subs	r2, #1
 8002c20:	6022      	str	r2, [r4, #0]
 8002c22:	e7ea      	b.n	8002bfa <_sungetc_r+0x32>
 8002c24:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8002c28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002c2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8002c2e:	2303      	movs	r3, #3
 8002c30:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002c32:	4623      	mov	r3, r4
 8002c34:	f803 5f46 	strb.w	r5, [r3, #70]!
 8002c38:	6023      	str	r3, [r4, #0]
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e7de      	b.n	8002bfc <_sungetc_r+0x34>

08002c3e <__ssrefill_r>:
 8002c3e:	b510      	push	{r4, lr}
 8002c40:	460c      	mov	r4, r1
 8002c42:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8002c44:	b169      	cbz	r1, 8002c62 <__ssrefill_r+0x24>
 8002c46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002c4a:	4299      	cmp	r1, r3
 8002c4c:	d001      	beq.n	8002c52 <__ssrefill_r+0x14>
 8002c4e:	f7ff fd6d 	bl	800272c <_free_r>
 8002c52:	2000      	movs	r0, #0
 8002c54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002c56:	6360      	str	r0, [r4, #52]	@ 0x34
 8002c58:	6063      	str	r3, [r4, #4]
 8002c5a:	b113      	cbz	r3, 8002c62 <__ssrefill_r+0x24>
 8002c5c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002c5e:	6023      	str	r3, [r4, #0]
 8002c60:	bd10      	pop	{r4, pc}
 8002c62:	6923      	ldr	r3, [r4, #16]
 8002c64:	f04f 30ff 	mov.w	r0, #4294967295
 8002c68:	6023      	str	r3, [r4, #0]
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	6063      	str	r3, [r4, #4]
 8002c6e:	89a3      	ldrh	r3, [r4, #12]
 8002c70:	f043 0320 	orr.w	r3, r3, #32
 8002c74:	81a3      	strh	r3, [r4, #12]
 8002c76:	e7f3      	b.n	8002c60 <__ssrefill_r+0x22>

08002c78 <__ssvfiscanf_r>:
 8002c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c7c:	460c      	mov	r4, r1
 8002c7e:	2100      	movs	r1, #0
 8002c80:	4606      	mov	r6, r0
 8002c82:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8002c86:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8002c8a:	49aa      	ldr	r1, [pc, #680]	@ (8002f34 <__ssvfiscanf_r+0x2bc>)
 8002c8c:	f10d 0804 	add.w	r8, sp, #4
 8002c90:	91a0      	str	r1, [sp, #640]	@ 0x280
 8002c92:	49a9      	ldr	r1, [pc, #676]	@ (8002f38 <__ssvfiscanf_r+0x2c0>)
 8002c94:	4fa9      	ldr	r7, [pc, #676]	@ (8002f3c <__ssvfiscanf_r+0x2c4>)
 8002c96:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8002c9a:	91a1      	str	r1, [sp, #644]	@ 0x284
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	7813      	ldrb	r3, [r2, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 8159 	beq.w	8002f58 <__ssvfiscanf_r+0x2e0>
 8002ca6:	5cf9      	ldrb	r1, [r7, r3]
 8002ca8:	1c55      	adds	r5, r2, #1
 8002caa:	f011 0108 	ands.w	r1, r1, #8
 8002cae:	d019      	beq.n	8002ce4 <__ssvfiscanf_r+0x6c>
 8002cb0:	6863      	ldr	r3, [r4, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	dd0f      	ble.n	8002cd6 <__ssvfiscanf_r+0x5e>
 8002cb6:	6823      	ldr	r3, [r4, #0]
 8002cb8:	781a      	ldrb	r2, [r3, #0]
 8002cba:	5cba      	ldrb	r2, [r7, r2]
 8002cbc:	0712      	lsls	r2, r2, #28
 8002cbe:	d401      	bmi.n	8002cc4 <__ssvfiscanf_r+0x4c>
 8002cc0:	462a      	mov	r2, r5
 8002cc2:	e7ec      	b.n	8002c9e <__ssvfiscanf_r+0x26>
 8002cc4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	3201      	adds	r2, #1
 8002cca:	9245      	str	r2, [sp, #276]	@ 0x114
 8002ccc:	6862      	ldr	r2, [r4, #4]
 8002cce:	6023      	str	r3, [r4, #0]
 8002cd0:	3a01      	subs	r2, #1
 8002cd2:	6062      	str	r2, [r4, #4]
 8002cd4:	e7ec      	b.n	8002cb0 <__ssvfiscanf_r+0x38>
 8002cd6:	4621      	mov	r1, r4
 8002cd8:	4630      	mov	r0, r6
 8002cda:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8002cdc:	4798      	blx	r3
 8002cde:	2800      	cmp	r0, #0
 8002ce0:	d0e9      	beq.n	8002cb6 <__ssvfiscanf_r+0x3e>
 8002ce2:	e7ed      	b.n	8002cc0 <__ssvfiscanf_r+0x48>
 8002ce4:	2b25      	cmp	r3, #37	@ 0x25
 8002ce6:	d012      	beq.n	8002d0e <__ssvfiscanf_r+0x96>
 8002ce8:	4699      	mov	r9, r3
 8002cea:	6863      	ldr	r3, [r4, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f340 8094 	ble.w	8002e1a <__ssvfiscanf_r+0x1a2>
 8002cf2:	6822      	ldr	r2, [r4, #0]
 8002cf4:	7813      	ldrb	r3, [r2, #0]
 8002cf6:	454b      	cmp	r3, r9
 8002cf8:	f040 812e 	bne.w	8002f58 <__ssvfiscanf_r+0x2e0>
 8002cfc:	6863      	ldr	r3, [r4, #4]
 8002cfe:	3201      	adds	r2, #1
 8002d00:	3b01      	subs	r3, #1
 8002d02:	6063      	str	r3, [r4, #4]
 8002d04:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8002d06:	6022      	str	r2, [r4, #0]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	9345      	str	r3, [sp, #276]	@ 0x114
 8002d0c:	e7d8      	b.n	8002cc0 <__ssvfiscanf_r+0x48>
 8002d0e:	9141      	str	r1, [sp, #260]	@ 0x104
 8002d10:	9143      	str	r1, [sp, #268]	@ 0x10c
 8002d12:	7853      	ldrb	r3, [r2, #1]
 8002d14:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d16:	bf04      	itt	eq
 8002d18:	2310      	moveq	r3, #16
 8002d1a:	1c95      	addeq	r5, r2, #2
 8002d1c:	f04f 020a 	mov.w	r2, #10
 8002d20:	bf08      	it	eq
 8002d22:	9341      	streq	r3, [sp, #260]	@ 0x104
 8002d24:	46a9      	mov	r9, r5
 8002d26:	f819 1b01 	ldrb.w	r1, [r9], #1
 8002d2a:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8002d2e:	2b09      	cmp	r3, #9
 8002d30:	d91e      	bls.n	8002d70 <__ssvfiscanf_r+0xf8>
 8002d32:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 8002f40 <__ssvfiscanf_r+0x2c8>
 8002d36:	2203      	movs	r2, #3
 8002d38:	4650      	mov	r0, sl
 8002d3a:	f000 fe4b 	bl	80039d4 <memchr>
 8002d3e:	b138      	cbz	r0, 8002d50 <__ssvfiscanf_r+0xd8>
 8002d40:	2301      	movs	r3, #1
 8002d42:	464d      	mov	r5, r9
 8002d44:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8002d46:	eba0 000a 	sub.w	r0, r0, sl
 8002d4a:	4083      	lsls	r3, r0
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	9341      	str	r3, [sp, #260]	@ 0x104
 8002d50:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002d54:	2b78      	cmp	r3, #120	@ 0x78
 8002d56:	d806      	bhi.n	8002d66 <__ssvfiscanf_r+0xee>
 8002d58:	2b57      	cmp	r3, #87	@ 0x57
 8002d5a:	d810      	bhi.n	8002d7e <__ssvfiscanf_r+0x106>
 8002d5c:	2b25      	cmp	r3, #37	@ 0x25
 8002d5e:	d0c3      	beq.n	8002ce8 <__ssvfiscanf_r+0x70>
 8002d60:	d856      	bhi.n	8002e10 <__ssvfiscanf_r+0x198>
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d064      	beq.n	8002e30 <__ssvfiscanf_r+0x1b8>
 8002d66:	2303      	movs	r3, #3
 8002d68:	9347      	str	r3, [sp, #284]	@ 0x11c
 8002d6a:	230a      	movs	r3, #10
 8002d6c:	9342      	str	r3, [sp, #264]	@ 0x108
 8002d6e:	e077      	b.n	8002e60 <__ssvfiscanf_r+0x1e8>
 8002d70:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8002d72:	464d      	mov	r5, r9
 8002d74:	fb02 1103 	mla	r1, r2, r3, r1
 8002d78:	3930      	subs	r1, #48	@ 0x30
 8002d7a:	9143      	str	r1, [sp, #268]	@ 0x10c
 8002d7c:	e7d2      	b.n	8002d24 <__ssvfiscanf_r+0xac>
 8002d7e:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8002d82:	2a20      	cmp	r2, #32
 8002d84:	d8ef      	bhi.n	8002d66 <__ssvfiscanf_r+0xee>
 8002d86:	a101      	add	r1, pc, #4	@ (adr r1, 8002d8c <__ssvfiscanf_r+0x114>)
 8002d88:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002d8c:	08002e3f 	.word	0x08002e3f
 8002d90:	08002d67 	.word	0x08002d67
 8002d94:	08002d67 	.word	0x08002d67
 8002d98:	08002e99 	.word	0x08002e99
 8002d9c:	08002d67 	.word	0x08002d67
 8002da0:	08002d67 	.word	0x08002d67
 8002da4:	08002d67 	.word	0x08002d67
 8002da8:	08002d67 	.word	0x08002d67
 8002dac:	08002d67 	.word	0x08002d67
 8002db0:	08002d67 	.word	0x08002d67
 8002db4:	08002d67 	.word	0x08002d67
 8002db8:	08002eaf 	.word	0x08002eaf
 8002dbc:	08002e95 	.word	0x08002e95
 8002dc0:	08002e17 	.word	0x08002e17
 8002dc4:	08002e17 	.word	0x08002e17
 8002dc8:	08002e17 	.word	0x08002e17
 8002dcc:	08002d67 	.word	0x08002d67
 8002dd0:	08002e51 	.word	0x08002e51
 8002dd4:	08002d67 	.word	0x08002d67
 8002dd8:	08002d67 	.word	0x08002d67
 8002ddc:	08002d67 	.word	0x08002d67
 8002de0:	08002d67 	.word	0x08002d67
 8002de4:	08002ebf 	.word	0x08002ebf
 8002de8:	08002e59 	.word	0x08002e59
 8002dec:	08002e37 	.word	0x08002e37
 8002df0:	08002d67 	.word	0x08002d67
 8002df4:	08002d67 	.word	0x08002d67
 8002df8:	08002ebb 	.word	0x08002ebb
 8002dfc:	08002d67 	.word	0x08002d67
 8002e00:	08002e95 	.word	0x08002e95
 8002e04:	08002d67 	.word	0x08002d67
 8002e08:	08002d67 	.word	0x08002d67
 8002e0c:	08002e3f 	.word	0x08002e3f
 8002e10:	3b45      	subs	r3, #69	@ 0x45
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d8a7      	bhi.n	8002d66 <__ssvfiscanf_r+0xee>
 8002e16:	2305      	movs	r3, #5
 8002e18:	e021      	b.n	8002e5e <__ssvfiscanf_r+0x1e6>
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	4630      	mov	r0, r6
 8002e1e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8002e20:	4798      	blx	r3
 8002e22:	2800      	cmp	r0, #0
 8002e24:	f43f af65 	beq.w	8002cf2 <__ssvfiscanf_r+0x7a>
 8002e28:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8002e2a:	2800      	cmp	r0, #0
 8002e2c:	f040 808c 	bne.w	8002f48 <__ssvfiscanf_r+0x2d0>
 8002e30:	f04f 30ff 	mov.w	r0, #4294967295
 8002e34:	e08c      	b.n	8002f50 <__ssvfiscanf_r+0x2d8>
 8002e36:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8002e38:	f042 0220 	orr.w	r2, r2, #32
 8002e3c:	9241      	str	r2, [sp, #260]	@ 0x104
 8002e3e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8002e40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e44:	9241      	str	r2, [sp, #260]	@ 0x104
 8002e46:	2210      	movs	r2, #16
 8002e48:	2b6e      	cmp	r3, #110	@ 0x6e
 8002e4a:	9242      	str	r2, [sp, #264]	@ 0x108
 8002e4c:	d902      	bls.n	8002e54 <__ssvfiscanf_r+0x1dc>
 8002e4e:	e005      	b.n	8002e5c <__ssvfiscanf_r+0x1e4>
 8002e50:	2300      	movs	r3, #0
 8002e52:	9342      	str	r3, [sp, #264]	@ 0x108
 8002e54:	2303      	movs	r3, #3
 8002e56:	e002      	b.n	8002e5e <__ssvfiscanf_r+0x1e6>
 8002e58:	2308      	movs	r3, #8
 8002e5a:	9342      	str	r3, [sp, #264]	@ 0x108
 8002e5c:	2304      	movs	r3, #4
 8002e5e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8002e60:	6863      	ldr	r3, [r4, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	dd39      	ble.n	8002eda <__ssvfiscanf_r+0x262>
 8002e66:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8002e68:	0659      	lsls	r1, r3, #25
 8002e6a:	d404      	bmi.n	8002e76 <__ssvfiscanf_r+0x1fe>
 8002e6c:	6823      	ldr	r3, [r4, #0]
 8002e6e:	781a      	ldrb	r2, [r3, #0]
 8002e70:	5cba      	ldrb	r2, [r7, r2]
 8002e72:	0712      	lsls	r2, r2, #28
 8002e74:	d438      	bmi.n	8002ee8 <__ssvfiscanf_r+0x270>
 8002e76:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	dc47      	bgt.n	8002f0c <__ssvfiscanf_r+0x294>
 8002e7c:	466b      	mov	r3, sp
 8002e7e:	4622      	mov	r2, r4
 8002e80:	4630      	mov	r0, r6
 8002e82:	a941      	add	r1, sp, #260	@ 0x104
 8002e84:	f000 fb3c 	bl	8003500 <_scanf_chars>
 8002e88:	2801      	cmp	r0, #1
 8002e8a:	d065      	beq.n	8002f58 <__ssvfiscanf_r+0x2e0>
 8002e8c:	2802      	cmp	r0, #2
 8002e8e:	f47f af17 	bne.w	8002cc0 <__ssvfiscanf_r+0x48>
 8002e92:	e7c9      	b.n	8002e28 <__ssvfiscanf_r+0x1b0>
 8002e94:	220a      	movs	r2, #10
 8002e96:	e7d7      	b.n	8002e48 <__ssvfiscanf_r+0x1d0>
 8002e98:	4629      	mov	r1, r5
 8002e9a:	4640      	mov	r0, r8
 8002e9c:	f000 fcdd 	bl	800385a <__sccl>
 8002ea0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8002ea2:	4605      	mov	r5, r0
 8002ea4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ea8:	9341      	str	r3, [sp, #260]	@ 0x104
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e7d7      	b.n	8002e5e <__ssvfiscanf_r+0x1e6>
 8002eae:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8002eb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002eb4:	9341      	str	r3, [sp, #260]	@ 0x104
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	e7d1      	b.n	8002e5e <__ssvfiscanf_r+0x1e6>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e7cf      	b.n	8002e5e <__ssvfiscanf_r+0x1e6>
 8002ebe:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8002ec0:	06c3      	lsls	r3, r0, #27
 8002ec2:	f53f aefd 	bmi.w	8002cc0 <__ssvfiscanf_r+0x48>
 8002ec6:	9b00      	ldr	r3, [sp, #0]
 8002ec8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8002eca:	1d19      	adds	r1, r3, #4
 8002ecc:	9100      	str	r1, [sp, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	07c0      	lsls	r0, r0, #31
 8002ed2:	bf4c      	ite	mi
 8002ed4:	801a      	strhmi	r2, [r3, #0]
 8002ed6:	601a      	strpl	r2, [r3, #0]
 8002ed8:	e6f2      	b.n	8002cc0 <__ssvfiscanf_r+0x48>
 8002eda:	4621      	mov	r1, r4
 8002edc:	4630      	mov	r0, r6
 8002ede:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8002ee0:	4798      	blx	r3
 8002ee2:	2800      	cmp	r0, #0
 8002ee4:	d0bf      	beq.n	8002e66 <__ssvfiscanf_r+0x1ee>
 8002ee6:	e79f      	b.n	8002e28 <__ssvfiscanf_r+0x1b0>
 8002ee8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8002eea:	3201      	adds	r2, #1
 8002eec:	9245      	str	r2, [sp, #276]	@ 0x114
 8002eee:	6862      	ldr	r2, [r4, #4]
 8002ef0:	3a01      	subs	r2, #1
 8002ef2:	2a00      	cmp	r2, #0
 8002ef4:	6062      	str	r2, [r4, #4]
 8002ef6:	dd02      	ble.n	8002efe <__ssvfiscanf_r+0x286>
 8002ef8:	3301      	adds	r3, #1
 8002efa:	6023      	str	r3, [r4, #0]
 8002efc:	e7b6      	b.n	8002e6c <__ssvfiscanf_r+0x1f4>
 8002efe:	4621      	mov	r1, r4
 8002f00:	4630      	mov	r0, r6
 8002f02:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8002f04:	4798      	blx	r3
 8002f06:	2800      	cmp	r0, #0
 8002f08:	d0b0      	beq.n	8002e6c <__ssvfiscanf_r+0x1f4>
 8002f0a:	e78d      	b.n	8002e28 <__ssvfiscanf_r+0x1b0>
 8002f0c:	2b04      	cmp	r3, #4
 8002f0e:	dc06      	bgt.n	8002f1e <__ssvfiscanf_r+0x2a6>
 8002f10:	466b      	mov	r3, sp
 8002f12:	4622      	mov	r2, r4
 8002f14:	4630      	mov	r0, r6
 8002f16:	a941      	add	r1, sp, #260	@ 0x104
 8002f18:	f000 fb4c 	bl	80035b4 <_scanf_i>
 8002f1c:	e7b4      	b.n	8002e88 <__ssvfiscanf_r+0x210>
 8002f1e:	4b09      	ldr	r3, [pc, #36]	@ (8002f44 <__ssvfiscanf_r+0x2cc>)
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f43f aecd 	beq.w	8002cc0 <__ssvfiscanf_r+0x48>
 8002f26:	466b      	mov	r3, sp
 8002f28:	4622      	mov	r2, r4
 8002f2a:	4630      	mov	r0, r6
 8002f2c:	a941      	add	r1, sp, #260	@ 0x104
 8002f2e:	f3af 8000 	nop.w
 8002f32:	e7a9      	b.n	8002e88 <__ssvfiscanf_r+0x210>
 8002f34:	08002bc9 	.word	0x08002bc9
 8002f38:	08002c3f 	.word	0x08002c3f
 8002f3c:	0800469f 	.word	0x0800469f
 8002f40:	08004656 	.word	0x08004656
 8002f44:	00000000 	.word	0x00000000
 8002f48:	89a3      	ldrh	r3, [r4, #12]
 8002f4a:	065b      	lsls	r3, r3, #25
 8002f4c:	f53f af70 	bmi.w	8002e30 <__ssvfiscanf_r+0x1b8>
 8002f50:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8002f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f58:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8002f5a:	e7f9      	b.n	8002f50 <__ssvfiscanf_r+0x2d8>

08002f5c <__sfputc_r>:
 8002f5c:	6893      	ldr	r3, [r2, #8]
 8002f5e:	b410      	push	{r4}
 8002f60:	3b01      	subs	r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	6093      	str	r3, [r2, #8]
 8002f66:	da07      	bge.n	8002f78 <__sfputc_r+0x1c>
 8002f68:	6994      	ldr	r4, [r2, #24]
 8002f6a:	42a3      	cmp	r3, r4
 8002f6c:	db01      	blt.n	8002f72 <__sfputc_r+0x16>
 8002f6e:	290a      	cmp	r1, #10
 8002f70:	d102      	bne.n	8002f78 <__sfputc_r+0x1c>
 8002f72:	bc10      	pop	{r4}
 8002f74:	f7ff bab7 	b.w	80024e6 <__swbuf_r>
 8002f78:	6813      	ldr	r3, [r2, #0]
 8002f7a:	1c58      	adds	r0, r3, #1
 8002f7c:	6010      	str	r0, [r2, #0]
 8002f7e:	7019      	strb	r1, [r3, #0]
 8002f80:	4608      	mov	r0, r1
 8002f82:	bc10      	pop	{r4}
 8002f84:	4770      	bx	lr

08002f86 <__sfputs_r>:
 8002f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f88:	4606      	mov	r6, r0
 8002f8a:	460f      	mov	r7, r1
 8002f8c:	4614      	mov	r4, r2
 8002f8e:	18d5      	adds	r5, r2, r3
 8002f90:	42ac      	cmp	r4, r5
 8002f92:	d101      	bne.n	8002f98 <__sfputs_r+0x12>
 8002f94:	2000      	movs	r0, #0
 8002f96:	e007      	b.n	8002fa8 <__sfputs_r+0x22>
 8002f98:	463a      	mov	r2, r7
 8002f9a:	4630      	mov	r0, r6
 8002f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fa0:	f7ff ffdc 	bl	8002f5c <__sfputc_r>
 8002fa4:	1c43      	adds	r3, r0, #1
 8002fa6:	d1f3      	bne.n	8002f90 <__sfputs_r+0xa>
 8002fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002fac <_vfiprintf_r>:
 8002fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fb0:	460d      	mov	r5, r1
 8002fb2:	4614      	mov	r4, r2
 8002fb4:	4698      	mov	r8, r3
 8002fb6:	4606      	mov	r6, r0
 8002fb8:	b09d      	sub	sp, #116	@ 0x74
 8002fba:	b118      	cbz	r0, 8002fc4 <_vfiprintf_r+0x18>
 8002fbc:	6a03      	ldr	r3, [r0, #32]
 8002fbe:	b90b      	cbnz	r3, 8002fc4 <_vfiprintf_r+0x18>
 8002fc0:	f7ff f948 	bl	8002254 <__sinit>
 8002fc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002fc6:	07d9      	lsls	r1, r3, #31
 8002fc8:	d405      	bmi.n	8002fd6 <_vfiprintf_r+0x2a>
 8002fca:	89ab      	ldrh	r3, [r5, #12]
 8002fcc:	059a      	lsls	r2, r3, #22
 8002fce:	d402      	bmi.n	8002fd6 <_vfiprintf_r+0x2a>
 8002fd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002fd2:	f7ff fba8 	bl	8002726 <__retarget_lock_acquire_recursive>
 8002fd6:	89ab      	ldrh	r3, [r5, #12]
 8002fd8:	071b      	lsls	r3, r3, #28
 8002fda:	d501      	bpl.n	8002fe0 <_vfiprintf_r+0x34>
 8002fdc:	692b      	ldr	r3, [r5, #16]
 8002fde:	b99b      	cbnz	r3, 8003008 <_vfiprintf_r+0x5c>
 8002fe0:	4629      	mov	r1, r5
 8002fe2:	4630      	mov	r0, r6
 8002fe4:	f7ff fabe 	bl	8002564 <__swsetup_r>
 8002fe8:	b170      	cbz	r0, 8003008 <_vfiprintf_r+0x5c>
 8002fea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002fec:	07dc      	lsls	r4, r3, #31
 8002fee:	d504      	bpl.n	8002ffa <_vfiprintf_r+0x4e>
 8002ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff4:	b01d      	add	sp, #116	@ 0x74
 8002ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ffa:	89ab      	ldrh	r3, [r5, #12]
 8002ffc:	0598      	lsls	r0, r3, #22
 8002ffe:	d4f7      	bmi.n	8002ff0 <_vfiprintf_r+0x44>
 8003000:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003002:	f7ff fb91 	bl	8002728 <__retarget_lock_release_recursive>
 8003006:	e7f3      	b.n	8002ff0 <_vfiprintf_r+0x44>
 8003008:	2300      	movs	r3, #0
 800300a:	9309      	str	r3, [sp, #36]	@ 0x24
 800300c:	2320      	movs	r3, #32
 800300e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003012:	2330      	movs	r3, #48	@ 0x30
 8003014:	f04f 0901 	mov.w	r9, #1
 8003018:	f8cd 800c 	str.w	r8, [sp, #12]
 800301c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80031c8 <_vfiprintf_r+0x21c>
 8003020:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003024:	4623      	mov	r3, r4
 8003026:	469a      	mov	sl, r3
 8003028:	f813 2b01 	ldrb.w	r2, [r3], #1
 800302c:	b10a      	cbz	r2, 8003032 <_vfiprintf_r+0x86>
 800302e:	2a25      	cmp	r2, #37	@ 0x25
 8003030:	d1f9      	bne.n	8003026 <_vfiprintf_r+0x7a>
 8003032:	ebba 0b04 	subs.w	fp, sl, r4
 8003036:	d00b      	beq.n	8003050 <_vfiprintf_r+0xa4>
 8003038:	465b      	mov	r3, fp
 800303a:	4622      	mov	r2, r4
 800303c:	4629      	mov	r1, r5
 800303e:	4630      	mov	r0, r6
 8003040:	f7ff ffa1 	bl	8002f86 <__sfputs_r>
 8003044:	3001      	adds	r0, #1
 8003046:	f000 80a7 	beq.w	8003198 <_vfiprintf_r+0x1ec>
 800304a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800304c:	445a      	add	r2, fp
 800304e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003050:	f89a 3000 	ldrb.w	r3, [sl]
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 809f 	beq.w	8003198 <_vfiprintf_r+0x1ec>
 800305a:	2300      	movs	r3, #0
 800305c:	f04f 32ff 	mov.w	r2, #4294967295
 8003060:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003064:	f10a 0a01 	add.w	sl, sl, #1
 8003068:	9304      	str	r3, [sp, #16]
 800306a:	9307      	str	r3, [sp, #28]
 800306c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003070:	931a      	str	r3, [sp, #104]	@ 0x68
 8003072:	4654      	mov	r4, sl
 8003074:	2205      	movs	r2, #5
 8003076:	f814 1b01 	ldrb.w	r1, [r4], #1
 800307a:	4853      	ldr	r0, [pc, #332]	@ (80031c8 <_vfiprintf_r+0x21c>)
 800307c:	f000 fcaa 	bl	80039d4 <memchr>
 8003080:	9a04      	ldr	r2, [sp, #16]
 8003082:	b9d8      	cbnz	r0, 80030bc <_vfiprintf_r+0x110>
 8003084:	06d1      	lsls	r1, r2, #27
 8003086:	bf44      	itt	mi
 8003088:	2320      	movmi	r3, #32
 800308a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800308e:	0713      	lsls	r3, r2, #28
 8003090:	bf44      	itt	mi
 8003092:	232b      	movmi	r3, #43	@ 0x2b
 8003094:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003098:	f89a 3000 	ldrb.w	r3, [sl]
 800309c:	2b2a      	cmp	r3, #42	@ 0x2a
 800309e:	d015      	beq.n	80030cc <_vfiprintf_r+0x120>
 80030a0:	4654      	mov	r4, sl
 80030a2:	2000      	movs	r0, #0
 80030a4:	f04f 0c0a 	mov.w	ip, #10
 80030a8:	9a07      	ldr	r2, [sp, #28]
 80030aa:	4621      	mov	r1, r4
 80030ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030b0:	3b30      	subs	r3, #48	@ 0x30
 80030b2:	2b09      	cmp	r3, #9
 80030b4:	d94b      	bls.n	800314e <_vfiprintf_r+0x1a2>
 80030b6:	b1b0      	cbz	r0, 80030e6 <_vfiprintf_r+0x13a>
 80030b8:	9207      	str	r2, [sp, #28]
 80030ba:	e014      	b.n	80030e6 <_vfiprintf_r+0x13a>
 80030bc:	eba0 0308 	sub.w	r3, r0, r8
 80030c0:	fa09 f303 	lsl.w	r3, r9, r3
 80030c4:	4313      	orrs	r3, r2
 80030c6:	46a2      	mov	sl, r4
 80030c8:	9304      	str	r3, [sp, #16]
 80030ca:	e7d2      	b.n	8003072 <_vfiprintf_r+0xc6>
 80030cc:	9b03      	ldr	r3, [sp, #12]
 80030ce:	1d19      	adds	r1, r3, #4
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	9103      	str	r1, [sp, #12]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	bfbb      	ittet	lt
 80030d8:	425b      	neglt	r3, r3
 80030da:	f042 0202 	orrlt.w	r2, r2, #2
 80030de:	9307      	strge	r3, [sp, #28]
 80030e0:	9307      	strlt	r3, [sp, #28]
 80030e2:	bfb8      	it	lt
 80030e4:	9204      	strlt	r2, [sp, #16]
 80030e6:	7823      	ldrb	r3, [r4, #0]
 80030e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80030ea:	d10a      	bne.n	8003102 <_vfiprintf_r+0x156>
 80030ec:	7863      	ldrb	r3, [r4, #1]
 80030ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80030f0:	d132      	bne.n	8003158 <_vfiprintf_r+0x1ac>
 80030f2:	9b03      	ldr	r3, [sp, #12]
 80030f4:	3402      	adds	r4, #2
 80030f6:	1d1a      	adds	r2, r3, #4
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	9203      	str	r2, [sp, #12]
 80030fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003100:	9305      	str	r3, [sp, #20]
 8003102:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80031cc <_vfiprintf_r+0x220>
 8003106:	2203      	movs	r2, #3
 8003108:	4650      	mov	r0, sl
 800310a:	7821      	ldrb	r1, [r4, #0]
 800310c:	f000 fc62 	bl	80039d4 <memchr>
 8003110:	b138      	cbz	r0, 8003122 <_vfiprintf_r+0x176>
 8003112:	2240      	movs	r2, #64	@ 0x40
 8003114:	9b04      	ldr	r3, [sp, #16]
 8003116:	eba0 000a 	sub.w	r0, r0, sl
 800311a:	4082      	lsls	r2, r0
 800311c:	4313      	orrs	r3, r2
 800311e:	3401      	adds	r4, #1
 8003120:	9304      	str	r3, [sp, #16]
 8003122:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003126:	2206      	movs	r2, #6
 8003128:	4829      	ldr	r0, [pc, #164]	@ (80031d0 <_vfiprintf_r+0x224>)
 800312a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800312e:	f000 fc51 	bl	80039d4 <memchr>
 8003132:	2800      	cmp	r0, #0
 8003134:	d03f      	beq.n	80031b6 <_vfiprintf_r+0x20a>
 8003136:	4b27      	ldr	r3, [pc, #156]	@ (80031d4 <_vfiprintf_r+0x228>)
 8003138:	bb1b      	cbnz	r3, 8003182 <_vfiprintf_r+0x1d6>
 800313a:	9b03      	ldr	r3, [sp, #12]
 800313c:	3307      	adds	r3, #7
 800313e:	f023 0307 	bic.w	r3, r3, #7
 8003142:	3308      	adds	r3, #8
 8003144:	9303      	str	r3, [sp, #12]
 8003146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003148:	443b      	add	r3, r7
 800314a:	9309      	str	r3, [sp, #36]	@ 0x24
 800314c:	e76a      	b.n	8003024 <_vfiprintf_r+0x78>
 800314e:	460c      	mov	r4, r1
 8003150:	2001      	movs	r0, #1
 8003152:	fb0c 3202 	mla	r2, ip, r2, r3
 8003156:	e7a8      	b.n	80030aa <_vfiprintf_r+0xfe>
 8003158:	2300      	movs	r3, #0
 800315a:	f04f 0c0a 	mov.w	ip, #10
 800315e:	4619      	mov	r1, r3
 8003160:	3401      	adds	r4, #1
 8003162:	9305      	str	r3, [sp, #20]
 8003164:	4620      	mov	r0, r4
 8003166:	f810 2b01 	ldrb.w	r2, [r0], #1
 800316a:	3a30      	subs	r2, #48	@ 0x30
 800316c:	2a09      	cmp	r2, #9
 800316e:	d903      	bls.n	8003178 <_vfiprintf_r+0x1cc>
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0c6      	beq.n	8003102 <_vfiprintf_r+0x156>
 8003174:	9105      	str	r1, [sp, #20]
 8003176:	e7c4      	b.n	8003102 <_vfiprintf_r+0x156>
 8003178:	4604      	mov	r4, r0
 800317a:	2301      	movs	r3, #1
 800317c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003180:	e7f0      	b.n	8003164 <_vfiprintf_r+0x1b8>
 8003182:	ab03      	add	r3, sp, #12
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	462a      	mov	r2, r5
 8003188:	4630      	mov	r0, r6
 800318a:	4b13      	ldr	r3, [pc, #76]	@ (80031d8 <_vfiprintf_r+0x22c>)
 800318c:	a904      	add	r1, sp, #16
 800318e:	f3af 8000 	nop.w
 8003192:	4607      	mov	r7, r0
 8003194:	1c78      	adds	r0, r7, #1
 8003196:	d1d6      	bne.n	8003146 <_vfiprintf_r+0x19a>
 8003198:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800319a:	07d9      	lsls	r1, r3, #31
 800319c:	d405      	bmi.n	80031aa <_vfiprintf_r+0x1fe>
 800319e:	89ab      	ldrh	r3, [r5, #12]
 80031a0:	059a      	lsls	r2, r3, #22
 80031a2:	d402      	bmi.n	80031aa <_vfiprintf_r+0x1fe>
 80031a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80031a6:	f7ff fabf 	bl	8002728 <__retarget_lock_release_recursive>
 80031aa:	89ab      	ldrh	r3, [r5, #12]
 80031ac:	065b      	lsls	r3, r3, #25
 80031ae:	f53f af1f 	bmi.w	8002ff0 <_vfiprintf_r+0x44>
 80031b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80031b4:	e71e      	b.n	8002ff4 <_vfiprintf_r+0x48>
 80031b6:	ab03      	add	r3, sp, #12
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	462a      	mov	r2, r5
 80031bc:	4630      	mov	r0, r6
 80031be:	4b06      	ldr	r3, [pc, #24]	@ (80031d8 <_vfiprintf_r+0x22c>)
 80031c0:	a904      	add	r1, sp, #16
 80031c2:	f000 f87d 	bl	80032c0 <_printf_i>
 80031c6:	e7e4      	b.n	8003192 <_vfiprintf_r+0x1e6>
 80031c8:	08004650 	.word	0x08004650
 80031cc:	08004656 	.word	0x08004656
 80031d0:	0800465a 	.word	0x0800465a
 80031d4:	00000000 	.word	0x00000000
 80031d8:	08002f87 	.word	0x08002f87

080031dc <_printf_common>:
 80031dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031e0:	4616      	mov	r6, r2
 80031e2:	4698      	mov	r8, r3
 80031e4:	688a      	ldr	r2, [r1, #8]
 80031e6:	690b      	ldr	r3, [r1, #16]
 80031e8:	4607      	mov	r7, r0
 80031ea:	4293      	cmp	r3, r2
 80031ec:	bfb8      	it	lt
 80031ee:	4613      	movlt	r3, r2
 80031f0:	6033      	str	r3, [r6, #0]
 80031f2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80031f6:	460c      	mov	r4, r1
 80031f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80031fc:	b10a      	cbz	r2, 8003202 <_printf_common+0x26>
 80031fe:	3301      	adds	r3, #1
 8003200:	6033      	str	r3, [r6, #0]
 8003202:	6823      	ldr	r3, [r4, #0]
 8003204:	0699      	lsls	r1, r3, #26
 8003206:	bf42      	ittt	mi
 8003208:	6833      	ldrmi	r3, [r6, #0]
 800320a:	3302      	addmi	r3, #2
 800320c:	6033      	strmi	r3, [r6, #0]
 800320e:	6825      	ldr	r5, [r4, #0]
 8003210:	f015 0506 	ands.w	r5, r5, #6
 8003214:	d106      	bne.n	8003224 <_printf_common+0x48>
 8003216:	f104 0a19 	add.w	sl, r4, #25
 800321a:	68e3      	ldr	r3, [r4, #12]
 800321c:	6832      	ldr	r2, [r6, #0]
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	42ab      	cmp	r3, r5
 8003222:	dc2b      	bgt.n	800327c <_printf_common+0xa0>
 8003224:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003228:	6822      	ldr	r2, [r4, #0]
 800322a:	3b00      	subs	r3, #0
 800322c:	bf18      	it	ne
 800322e:	2301      	movne	r3, #1
 8003230:	0692      	lsls	r2, r2, #26
 8003232:	d430      	bmi.n	8003296 <_printf_common+0xba>
 8003234:	4641      	mov	r1, r8
 8003236:	4638      	mov	r0, r7
 8003238:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800323c:	47c8      	blx	r9
 800323e:	3001      	adds	r0, #1
 8003240:	d023      	beq.n	800328a <_printf_common+0xae>
 8003242:	6823      	ldr	r3, [r4, #0]
 8003244:	6922      	ldr	r2, [r4, #16]
 8003246:	f003 0306 	and.w	r3, r3, #6
 800324a:	2b04      	cmp	r3, #4
 800324c:	bf14      	ite	ne
 800324e:	2500      	movne	r5, #0
 8003250:	6833      	ldreq	r3, [r6, #0]
 8003252:	f04f 0600 	mov.w	r6, #0
 8003256:	bf08      	it	eq
 8003258:	68e5      	ldreq	r5, [r4, #12]
 800325a:	f104 041a 	add.w	r4, r4, #26
 800325e:	bf08      	it	eq
 8003260:	1aed      	subeq	r5, r5, r3
 8003262:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003266:	bf08      	it	eq
 8003268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800326c:	4293      	cmp	r3, r2
 800326e:	bfc4      	itt	gt
 8003270:	1a9b      	subgt	r3, r3, r2
 8003272:	18ed      	addgt	r5, r5, r3
 8003274:	42b5      	cmp	r5, r6
 8003276:	d11a      	bne.n	80032ae <_printf_common+0xd2>
 8003278:	2000      	movs	r0, #0
 800327a:	e008      	b.n	800328e <_printf_common+0xb2>
 800327c:	2301      	movs	r3, #1
 800327e:	4652      	mov	r2, sl
 8003280:	4641      	mov	r1, r8
 8003282:	4638      	mov	r0, r7
 8003284:	47c8      	blx	r9
 8003286:	3001      	adds	r0, #1
 8003288:	d103      	bne.n	8003292 <_printf_common+0xb6>
 800328a:	f04f 30ff 	mov.w	r0, #4294967295
 800328e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003292:	3501      	adds	r5, #1
 8003294:	e7c1      	b.n	800321a <_printf_common+0x3e>
 8003296:	2030      	movs	r0, #48	@ 0x30
 8003298:	18e1      	adds	r1, r4, r3
 800329a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800329e:	1c5a      	adds	r2, r3, #1
 80032a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80032a4:	4422      	add	r2, r4
 80032a6:	3302      	adds	r3, #2
 80032a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80032ac:	e7c2      	b.n	8003234 <_printf_common+0x58>
 80032ae:	2301      	movs	r3, #1
 80032b0:	4622      	mov	r2, r4
 80032b2:	4641      	mov	r1, r8
 80032b4:	4638      	mov	r0, r7
 80032b6:	47c8      	blx	r9
 80032b8:	3001      	adds	r0, #1
 80032ba:	d0e6      	beq.n	800328a <_printf_common+0xae>
 80032bc:	3601      	adds	r6, #1
 80032be:	e7d9      	b.n	8003274 <_printf_common+0x98>

080032c0 <_printf_i>:
 80032c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032c4:	7e0f      	ldrb	r7, [r1, #24]
 80032c6:	4691      	mov	r9, r2
 80032c8:	2f78      	cmp	r7, #120	@ 0x78
 80032ca:	4680      	mov	r8, r0
 80032cc:	460c      	mov	r4, r1
 80032ce:	469a      	mov	sl, r3
 80032d0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80032d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80032d6:	d807      	bhi.n	80032e8 <_printf_i+0x28>
 80032d8:	2f62      	cmp	r7, #98	@ 0x62
 80032da:	d80a      	bhi.n	80032f2 <_printf_i+0x32>
 80032dc:	2f00      	cmp	r7, #0
 80032de:	f000 80d3 	beq.w	8003488 <_printf_i+0x1c8>
 80032e2:	2f58      	cmp	r7, #88	@ 0x58
 80032e4:	f000 80ba 	beq.w	800345c <_printf_i+0x19c>
 80032e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80032ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80032f0:	e03a      	b.n	8003368 <_printf_i+0xa8>
 80032f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80032f6:	2b15      	cmp	r3, #21
 80032f8:	d8f6      	bhi.n	80032e8 <_printf_i+0x28>
 80032fa:	a101      	add	r1, pc, #4	@ (adr r1, 8003300 <_printf_i+0x40>)
 80032fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003300:	08003359 	.word	0x08003359
 8003304:	0800336d 	.word	0x0800336d
 8003308:	080032e9 	.word	0x080032e9
 800330c:	080032e9 	.word	0x080032e9
 8003310:	080032e9 	.word	0x080032e9
 8003314:	080032e9 	.word	0x080032e9
 8003318:	0800336d 	.word	0x0800336d
 800331c:	080032e9 	.word	0x080032e9
 8003320:	080032e9 	.word	0x080032e9
 8003324:	080032e9 	.word	0x080032e9
 8003328:	080032e9 	.word	0x080032e9
 800332c:	0800346f 	.word	0x0800346f
 8003330:	08003397 	.word	0x08003397
 8003334:	08003429 	.word	0x08003429
 8003338:	080032e9 	.word	0x080032e9
 800333c:	080032e9 	.word	0x080032e9
 8003340:	08003491 	.word	0x08003491
 8003344:	080032e9 	.word	0x080032e9
 8003348:	08003397 	.word	0x08003397
 800334c:	080032e9 	.word	0x080032e9
 8003350:	080032e9 	.word	0x080032e9
 8003354:	08003431 	.word	0x08003431
 8003358:	6833      	ldr	r3, [r6, #0]
 800335a:	1d1a      	adds	r2, r3, #4
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6032      	str	r2, [r6, #0]
 8003360:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003364:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003368:	2301      	movs	r3, #1
 800336a:	e09e      	b.n	80034aa <_printf_i+0x1ea>
 800336c:	6833      	ldr	r3, [r6, #0]
 800336e:	6820      	ldr	r0, [r4, #0]
 8003370:	1d19      	adds	r1, r3, #4
 8003372:	6031      	str	r1, [r6, #0]
 8003374:	0606      	lsls	r6, r0, #24
 8003376:	d501      	bpl.n	800337c <_printf_i+0xbc>
 8003378:	681d      	ldr	r5, [r3, #0]
 800337a:	e003      	b.n	8003384 <_printf_i+0xc4>
 800337c:	0645      	lsls	r5, r0, #25
 800337e:	d5fb      	bpl.n	8003378 <_printf_i+0xb8>
 8003380:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003384:	2d00      	cmp	r5, #0
 8003386:	da03      	bge.n	8003390 <_printf_i+0xd0>
 8003388:	232d      	movs	r3, #45	@ 0x2d
 800338a:	426d      	negs	r5, r5
 800338c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003390:	230a      	movs	r3, #10
 8003392:	4859      	ldr	r0, [pc, #356]	@ (80034f8 <_printf_i+0x238>)
 8003394:	e011      	b.n	80033ba <_printf_i+0xfa>
 8003396:	6821      	ldr	r1, [r4, #0]
 8003398:	6833      	ldr	r3, [r6, #0]
 800339a:	0608      	lsls	r0, r1, #24
 800339c:	f853 5b04 	ldr.w	r5, [r3], #4
 80033a0:	d402      	bmi.n	80033a8 <_printf_i+0xe8>
 80033a2:	0649      	lsls	r1, r1, #25
 80033a4:	bf48      	it	mi
 80033a6:	b2ad      	uxthmi	r5, r5
 80033a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80033aa:	6033      	str	r3, [r6, #0]
 80033ac:	bf14      	ite	ne
 80033ae:	230a      	movne	r3, #10
 80033b0:	2308      	moveq	r3, #8
 80033b2:	4851      	ldr	r0, [pc, #324]	@ (80034f8 <_printf_i+0x238>)
 80033b4:	2100      	movs	r1, #0
 80033b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80033ba:	6866      	ldr	r6, [r4, #4]
 80033bc:	2e00      	cmp	r6, #0
 80033be:	bfa8      	it	ge
 80033c0:	6821      	ldrge	r1, [r4, #0]
 80033c2:	60a6      	str	r6, [r4, #8]
 80033c4:	bfa4      	itt	ge
 80033c6:	f021 0104 	bicge.w	r1, r1, #4
 80033ca:	6021      	strge	r1, [r4, #0]
 80033cc:	b90d      	cbnz	r5, 80033d2 <_printf_i+0x112>
 80033ce:	2e00      	cmp	r6, #0
 80033d0:	d04b      	beq.n	800346a <_printf_i+0x1aa>
 80033d2:	4616      	mov	r6, r2
 80033d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80033d8:	fb03 5711 	mls	r7, r3, r1, r5
 80033dc:	5dc7      	ldrb	r7, [r0, r7]
 80033de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80033e2:	462f      	mov	r7, r5
 80033e4:	42bb      	cmp	r3, r7
 80033e6:	460d      	mov	r5, r1
 80033e8:	d9f4      	bls.n	80033d4 <_printf_i+0x114>
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d10b      	bne.n	8003406 <_printf_i+0x146>
 80033ee:	6823      	ldr	r3, [r4, #0]
 80033f0:	07df      	lsls	r7, r3, #31
 80033f2:	d508      	bpl.n	8003406 <_printf_i+0x146>
 80033f4:	6923      	ldr	r3, [r4, #16]
 80033f6:	6861      	ldr	r1, [r4, #4]
 80033f8:	4299      	cmp	r1, r3
 80033fa:	bfde      	ittt	le
 80033fc:	2330      	movle	r3, #48	@ 0x30
 80033fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003402:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003406:	1b92      	subs	r2, r2, r6
 8003408:	6122      	str	r2, [r4, #16]
 800340a:	464b      	mov	r3, r9
 800340c:	4621      	mov	r1, r4
 800340e:	4640      	mov	r0, r8
 8003410:	f8cd a000 	str.w	sl, [sp]
 8003414:	aa03      	add	r2, sp, #12
 8003416:	f7ff fee1 	bl	80031dc <_printf_common>
 800341a:	3001      	adds	r0, #1
 800341c:	d14a      	bne.n	80034b4 <_printf_i+0x1f4>
 800341e:	f04f 30ff 	mov.w	r0, #4294967295
 8003422:	b004      	add	sp, #16
 8003424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003428:	6823      	ldr	r3, [r4, #0]
 800342a:	f043 0320 	orr.w	r3, r3, #32
 800342e:	6023      	str	r3, [r4, #0]
 8003430:	2778      	movs	r7, #120	@ 0x78
 8003432:	4832      	ldr	r0, [pc, #200]	@ (80034fc <_printf_i+0x23c>)
 8003434:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003438:	6823      	ldr	r3, [r4, #0]
 800343a:	6831      	ldr	r1, [r6, #0]
 800343c:	061f      	lsls	r7, r3, #24
 800343e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003442:	d402      	bmi.n	800344a <_printf_i+0x18a>
 8003444:	065f      	lsls	r7, r3, #25
 8003446:	bf48      	it	mi
 8003448:	b2ad      	uxthmi	r5, r5
 800344a:	6031      	str	r1, [r6, #0]
 800344c:	07d9      	lsls	r1, r3, #31
 800344e:	bf44      	itt	mi
 8003450:	f043 0320 	orrmi.w	r3, r3, #32
 8003454:	6023      	strmi	r3, [r4, #0]
 8003456:	b11d      	cbz	r5, 8003460 <_printf_i+0x1a0>
 8003458:	2310      	movs	r3, #16
 800345a:	e7ab      	b.n	80033b4 <_printf_i+0xf4>
 800345c:	4826      	ldr	r0, [pc, #152]	@ (80034f8 <_printf_i+0x238>)
 800345e:	e7e9      	b.n	8003434 <_printf_i+0x174>
 8003460:	6823      	ldr	r3, [r4, #0]
 8003462:	f023 0320 	bic.w	r3, r3, #32
 8003466:	6023      	str	r3, [r4, #0]
 8003468:	e7f6      	b.n	8003458 <_printf_i+0x198>
 800346a:	4616      	mov	r6, r2
 800346c:	e7bd      	b.n	80033ea <_printf_i+0x12a>
 800346e:	6833      	ldr	r3, [r6, #0]
 8003470:	6825      	ldr	r5, [r4, #0]
 8003472:	1d18      	adds	r0, r3, #4
 8003474:	6961      	ldr	r1, [r4, #20]
 8003476:	6030      	str	r0, [r6, #0]
 8003478:	062e      	lsls	r6, r5, #24
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	d501      	bpl.n	8003482 <_printf_i+0x1c2>
 800347e:	6019      	str	r1, [r3, #0]
 8003480:	e002      	b.n	8003488 <_printf_i+0x1c8>
 8003482:	0668      	lsls	r0, r5, #25
 8003484:	d5fb      	bpl.n	800347e <_printf_i+0x1be>
 8003486:	8019      	strh	r1, [r3, #0]
 8003488:	2300      	movs	r3, #0
 800348a:	4616      	mov	r6, r2
 800348c:	6123      	str	r3, [r4, #16]
 800348e:	e7bc      	b.n	800340a <_printf_i+0x14a>
 8003490:	6833      	ldr	r3, [r6, #0]
 8003492:	2100      	movs	r1, #0
 8003494:	1d1a      	adds	r2, r3, #4
 8003496:	6032      	str	r2, [r6, #0]
 8003498:	681e      	ldr	r6, [r3, #0]
 800349a:	6862      	ldr	r2, [r4, #4]
 800349c:	4630      	mov	r0, r6
 800349e:	f000 fa99 	bl	80039d4 <memchr>
 80034a2:	b108      	cbz	r0, 80034a8 <_printf_i+0x1e8>
 80034a4:	1b80      	subs	r0, r0, r6
 80034a6:	6060      	str	r0, [r4, #4]
 80034a8:	6863      	ldr	r3, [r4, #4]
 80034aa:	6123      	str	r3, [r4, #16]
 80034ac:	2300      	movs	r3, #0
 80034ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80034b2:	e7aa      	b.n	800340a <_printf_i+0x14a>
 80034b4:	4632      	mov	r2, r6
 80034b6:	4649      	mov	r1, r9
 80034b8:	4640      	mov	r0, r8
 80034ba:	6923      	ldr	r3, [r4, #16]
 80034bc:	47d0      	blx	sl
 80034be:	3001      	adds	r0, #1
 80034c0:	d0ad      	beq.n	800341e <_printf_i+0x15e>
 80034c2:	6823      	ldr	r3, [r4, #0]
 80034c4:	079b      	lsls	r3, r3, #30
 80034c6:	d413      	bmi.n	80034f0 <_printf_i+0x230>
 80034c8:	68e0      	ldr	r0, [r4, #12]
 80034ca:	9b03      	ldr	r3, [sp, #12]
 80034cc:	4298      	cmp	r0, r3
 80034ce:	bfb8      	it	lt
 80034d0:	4618      	movlt	r0, r3
 80034d2:	e7a6      	b.n	8003422 <_printf_i+0x162>
 80034d4:	2301      	movs	r3, #1
 80034d6:	4632      	mov	r2, r6
 80034d8:	4649      	mov	r1, r9
 80034da:	4640      	mov	r0, r8
 80034dc:	47d0      	blx	sl
 80034de:	3001      	adds	r0, #1
 80034e0:	d09d      	beq.n	800341e <_printf_i+0x15e>
 80034e2:	3501      	adds	r5, #1
 80034e4:	68e3      	ldr	r3, [r4, #12]
 80034e6:	9903      	ldr	r1, [sp, #12]
 80034e8:	1a5b      	subs	r3, r3, r1
 80034ea:	42ab      	cmp	r3, r5
 80034ec:	dcf2      	bgt.n	80034d4 <_printf_i+0x214>
 80034ee:	e7eb      	b.n	80034c8 <_printf_i+0x208>
 80034f0:	2500      	movs	r5, #0
 80034f2:	f104 0619 	add.w	r6, r4, #25
 80034f6:	e7f5      	b.n	80034e4 <_printf_i+0x224>
 80034f8:	08004661 	.word	0x08004661
 80034fc:	08004672 	.word	0x08004672

08003500 <_scanf_chars>:
 8003500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003504:	4615      	mov	r5, r2
 8003506:	688a      	ldr	r2, [r1, #8]
 8003508:	4680      	mov	r8, r0
 800350a:	460c      	mov	r4, r1
 800350c:	b932      	cbnz	r2, 800351c <_scanf_chars+0x1c>
 800350e:	698a      	ldr	r2, [r1, #24]
 8003510:	2a00      	cmp	r2, #0
 8003512:	bf14      	ite	ne
 8003514:	f04f 32ff 	movne.w	r2, #4294967295
 8003518:	2201      	moveq	r2, #1
 800351a:	608a      	str	r2, [r1, #8]
 800351c:	2700      	movs	r7, #0
 800351e:	6822      	ldr	r2, [r4, #0]
 8003520:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 80035b0 <_scanf_chars+0xb0>
 8003524:	06d1      	lsls	r1, r2, #27
 8003526:	bf5f      	itttt	pl
 8003528:	681a      	ldrpl	r2, [r3, #0]
 800352a:	1d11      	addpl	r1, r2, #4
 800352c:	6019      	strpl	r1, [r3, #0]
 800352e:	6816      	ldrpl	r6, [r2, #0]
 8003530:	69a0      	ldr	r0, [r4, #24]
 8003532:	b188      	cbz	r0, 8003558 <_scanf_chars+0x58>
 8003534:	2801      	cmp	r0, #1
 8003536:	d107      	bne.n	8003548 <_scanf_chars+0x48>
 8003538:	682b      	ldr	r3, [r5, #0]
 800353a:	781a      	ldrb	r2, [r3, #0]
 800353c:	6963      	ldr	r3, [r4, #20]
 800353e:	5c9b      	ldrb	r3, [r3, r2]
 8003540:	b953      	cbnz	r3, 8003558 <_scanf_chars+0x58>
 8003542:	2f00      	cmp	r7, #0
 8003544:	d031      	beq.n	80035aa <_scanf_chars+0xaa>
 8003546:	e022      	b.n	800358e <_scanf_chars+0x8e>
 8003548:	2802      	cmp	r0, #2
 800354a:	d120      	bne.n	800358e <_scanf_chars+0x8e>
 800354c:	682b      	ldr	r3, [r5, #0]
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	f819 3003 	ldrb.w	r3, [r9, r3]
 8003554:	071b      	lsls	r3, r3, #28
 8003556:	d41a      	bmi.n	800358e <_scanf_chars+0x8e>
 8003558:	6823      	ldr	r3, [r4, #0]
 800355a:	3701      	adds	r7, #1
 800355c:	06da      	lsls	r2, r3, #27
 800355e:	bf5e      	ittt	pl
 8003560:	682b      	ldrpl	r3, [r5, #0]
 8003562:	781b      	ldrbpl	r3, [r3, #0]
 8003564:	f806 3b01 	strbpl.w	r3, [r6], #1
 8003568:	682a      	ldr	r2, [r5, #0]
 800356a:	686b      	ldr	r3, [r5, #4]
 800356c:	3201      	adds	r2, #1
 800356e:	602a      	str	r2, [r5, #0]
 8003570:	68a2      	ldr	r2, [r4, #8]
 8003572:	3b01      	subs	r3, #1
 8003574:	3a01      	subs	r2, #1
 8003576:	606b      	str	r3, [r5, #4]
 8003578:	60a2      	str	r2, [r4, #8]
 800357a:	b142      	cbz	r2, 800358e <_scanf_chars+0x8e>
 800357c:	2b00      	cmp	r3, #0
 800357e:	dcd7      	bgt.n	8003530 <_scanf_chars+0x30>
 8003580:	4629      	mov	r1, r5
 8003582:	4640      	mov	r0, r8
 8003584:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003588:	4798      	blx	r3
 800358a:	2800      	cmp	r0, #0
 800358c:	d0d0      	beq.n	8003530 <_scanf_chars+0x30>
 800358e:	6823      	ldr	r3, [r4, #0]
 8003590:	f013 0310 	ands.w	r3, r3, #16
 8003594:	d105      	bne.n	80035a2 <_scanf_chars+0xa2>
 8003596:	68e2      	ldr	r2, [r4, #12]
 8003598:	3201      	adds	r2, #1
 800359a:	60e2      	str	r2, [r4, #12]
 800359c:	69a2      	ldr	r2, [r4, #24]
 800359e:	b102      	cbz	r2, 80035a2 <_scanf_chars+0xa2>
 80035a0:	7033      	strb	r3, [r6, #0]
 80035a2:	2000      	movs	r0, #0
 80035a4:	6923      	ldr	r3, [r4, #16]
 80035a6:	443b      	add	r3, r7
 80035a8:	6123      	str	r3, [r4, #16]
 80035aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035ae:	bf00      	nop
 80035b0:	0800469f 	.word	0x0800469f

080035b4 <_scanf_i>:
 80035b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035b8:	460c      	mov	r4, r1
 80035ba:	4698      	mov	r8, r3
 80035bc:	4b72      	ldr	r3, [pc, #456]	@ (8003788 <_scanf_i+0x1d4>)
 80035be:	b087      	sub	sp, #28
 80035c0:	4682      	mov	sl, r0
 80035c2:	4616      	mov	r6, r2
 80035c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80035c8:	ab03      	add	r3, sp, #12
 80035ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80035ce:	4b6f      	ldr	r3, [pc, #444]	@ (800378c <_scanf_i+0x1d8>)
 80035d0:	69a1      	ldr	r1, [r4, #24]
 80035d2:	4a6f      	ldr	r2, [pc, #444]	@ (8003790 <_scanf_i+0x1dc>)
 80035d4:	4627      	mov	r7, r4
 80035d6:	2903      	cmp	r1, #3
 80035d8:	bf08      	it	eq
 80035da:	461a      	moveq	r2, r3
 80035dc:	68a3      	ldr	r3, [r4, #8]
 80035de:	9201      	str	r2, [sp, #4]
 80035e0:	1e5a      	subs	r2, r3, #1
 80035e2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80035e6:	bf81      	itttt	hi
 80035e8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80035ec:	eb03 0905 	addhi.w	r9, r3, r5
 80035f0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80035f4:	60a3      	strhi	r3, [r4, #8]
 80035f6:	f857 3b1c 	ldr.w	r3, [r7], #28
 80035fa:	bf98      	it	ls
 80035fc:	f04f 0900 	movls.w	r9, #0
 8003600:	463d      	mov	r5, r7
 8003602:	f04f 0b00 	mov.w	fp, #0
 8003606:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800360a:	6023      	str	r3, [r4, #0]
 800360c:	6831      	ldr	r1, [r6, #0]
 800360e:	ab03      	add	r3, sp, #12
 8003610:	2202      	movs	r2, #2
 8003612:	7809      	ldrb	r1, [r1, #0]
 8003614:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8003618:	f000 f9dc 	bl	80039d4 <memchr>
 800361c:	b328      	cbz	r0, 800366a <_scanf_i+0xb6>
 800361e:	f1bb 0f01 	cmp.w	fp, #1
 8003622:	d159      	bne.n	80036d8 <_scanf_i+0x124>
 8003624:	6862      	ldr	r2, [r4, #4]
 8003626:	b92a      	cbnz	r2, 8003634 <_scanf_i+0x80>
 8003628:	2108      	movs	r1, #8
 800362a:	6822      	ldr	r2, [r4, #0]
 800362c:	6061      	str	r1, [r4, #4]
 800362e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003632:	6022      	str	r2, [r4, #0]
 8003634:	6822      	ldr	r2, [r4, #0]
 8003636:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800363a:	6022      	str	r2, [r4, #0]
 800363c:	68a2      	ldr	r2, [r4, #8]
 800363e:	1e51      	subs	r1, r2, #1
 8003640:	60a1      	str	r1, [r4, #8]
 8003642:	b192      	cbz	r2, 800366a <_scanf_i+0xb6>
 8003644:	6832      	ldr	r2, [r6, #0]
 8003646:	1c51      	adds	r1, r2, #1
 8003648:	6031      	str	r1, [r6, #0]
 800364a:	7812      	ldrb	r2, [r2, #0]
 800364c:	f805 2b01 	strb.w	r2, [r5], #1
 8003650:	6872      	ldr	r2, [r6, #4]
 8003652:	3a01      	subs	r2, #1
 8003654:	2a00      	cmp	r2, #0
 8003656:	6072      	str	r2, [r6, #4]
 8003658:	dc07      	bgt.n	800366a <_scanf_i+0xb6>
 800365a:	4631      	mov	r1, r6
 800365c:	4650      	mov	r0, sl
 800365e:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8003662:	4790      	blx	r2
 8003664:	2800      	cmp	r0, #0
 8003666:	f040 8085 	bne.w	8003774 <_scanf_i+0x1c0>
 800366a:	f10b 0b01 	add.w	fp, fp, #1
 800366e:	f1bb 0f03 	cmp.w	fp, #3
 8003672:	d1cb      	bne.n	800360c <_scanf_i+0x58>
 8003674:	6863      	ldr	r3, [r4, #4]
 8003676:	b90b      	cbnz	r3, 800367c <_scanf_i+0xc8>
 8003678:	230a      	movs	r3, #10
 800367a:	6063      	str	r3, [r4, #4]
 800367c:	6863      	ldr	r3, [r4, #4]
 800367e:	4945      	ldr	r1, [pc, #276]	@ (8003794 <_scanf_i+0x1e0>)
 8003680:	6960      	ldr	r0, [r4, #20]
 8003682:	1ac9      	subs	r1, r1, r3
 8003684:	f000 f8e9 	bl	800385a <__sccl>
 8003688:	f04f 0b00 	mov.w	fp, #0
 800368c:	68a3      	ldr	r3, [r4, #8]
 800368e:	6822      	ldr	r2, [r4, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d03d      	beq.n	8003710 <_scanf_i+0x15c>
 8003694:	6831      	ldr	r1, [r6, #0]
 8003696:	6960      	ldr	r0, [r4, #20]
 8003698:	f891 c000 	ldrb.w	ip, [r1]
 800369c:	f810 000c 	ldrb.w	r0, [r0, ip]
 80036a0:	2800      	cmp	r0, #0
 80036a2:	d035      	beq.n	8003710 <_scanf_i+0x15c>
 80036a4:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80036a8:	d124      	bne.n	80036f4 <_scanf_i+0x140>
 80036aa:	0510      	lsls	r0, r2, #20
 80036ac:	d522      	bpl.n	80036f4 <_scanf_i+0x140>
 80036ae:	f10b 0b01 	add.w	fp, fp, #1
 80036b2:	f1b9 0f00 	cmp.w	r9, #0
 80036b6:	d003      	beq.n	80036c0 <_scanf_i+0x10c>
 80036b8:	3301      	adds	r3, #1
 80036ba:	f109 39ff 	add.w	r9, r9, #4294967295
 80036be:	60a3      	str	r3, [r4, #8]
 80036c0:	6873      	ldr	r3, [r6, #4]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	6073      	str	r3, [r6, #4]
 80036c8:	dd1b      	ble.n	8003702 <_scanf_i+0x14e>
 80036ca:	6833      	ldr	r3, [r6, #0]
 80036cc:	3301      	adds	r3, #1
 80036ce:	6033      	str	r3, [r6, #0]
 80036d0:	68a3      	ldr	r3, [r4, #8]
 80036d2:	3b01      	subs	r3, #1
 80036d4:	60a3      	str	r3, [r4, #8]
 80036d6:	e7d9      	b.n	800368c <_scanf_i+0xd8>
 80036d8:	f1bb 0f02 	cmp.w	fp, #2
 80036dc:	d1ae      	bne.n	800363c <_scanf_i+0x88>
 80036de:	6822      	ldr	r2, [r4, #0]
 80036e0:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80036e4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80036e8:	d1bf      	bne.n	800366a <_scanf_i+0xb6>
 80036ea:	2110      	movs	r1, #16
 80036ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036f0:	6061      	str	r1, [r4, #4]
 80036f2:	e7a2      	b.n	800363a <_scanf_i+0x86>
 80036f4:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80036f8:	6022      	str	r2, [r4, #0]
 80036fa:	780b      	ldrb	r3, [r1, #0]
 80036fc:	f805 3b01 	strb.w	r3, [r5], #1
 8003700:	e7de      	b.n	80036c0 <_scanf_i+0x10c>
 8003702:	4631      	mov	r1, r6
 8003704:	4650      	mov	r0, sl
 8003706:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800370a:	4798      	blx	r3
 800370c:	2800      	cmp	r0, #0
 800370e:	d0df      	beq.n	80036d0 <_scanf_i+0x11c>
 8003710:	6823      	ldr	r3, [r4, #0]
 8003712:	05d9      	lsls	r1, r3, #23
 8003714:	d50d      	bpl.n	8003732 <_scanf_i+0x17e>
 8003716:	42bd      	cmp	r5, r7
 8003718:	d909      	bls.n	800372e <_scanf_i+0x17a>
 800371a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800371e:	4632      	mov	r2, r6
 8003720:	4650      	mov	r0, sl
 8003722:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003726:	f105 39ff 	add.w	r9, r5, #4294967295
 800372a:	4798      	blx	r3
 800372c:	464d      	mov	r5, r9
 800372e:	42bd      	cmp	r5, r7
 8003730:	d028      	beq.n	8003784 <_scanf_i+0x1d0>
 8003732:	6822      	ldr	r2, [r4, #0]
 8003734:	f012 0210 	ands.w	r2, r2, #16
 8003738:	d113      	bne.n	8003762 <_scanf_i+0x1ae>
 800373a:	702a      	strb	r2, [r5, #0]
 800373c:	4639      	mov	r1, r7
 800373e:	6863      	ldr	r3, [r4, #4]
 8003740:	4650      	mov	r0, sl
 8003742:	9e01      	ldr	r6, [sp, #4]
 8003744:	47b0      	blx	r6
 8003746:	f8d8 3000 	ldr.w	r3, [r8]
 800374a:	6821      	ldr	r1, [r4, #0]
 800374c:	1d1a      	adds	r2, r3, #4
 800374e:	f8c8 2000 	str.w	r2, [r8]
 8003752:	f011 0f20 	tst.w	r1, #32
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	d00f      	beq.n	800377a <_scanf_i+0x1c6>
 800375a:	6018      	str	r0, [r3, #0]
 800375c:	68e3      	ldr	r3, [r4, #12]
 800375e:	3301      	adds	r3, #1
 8003760:	60e3      	str	r3, [r4, #12]
 8003762:	2000      	movs	r0, #0
 8003764:	6923      	ldr	r3, [r4, #16]
 8003766:	1bed      	subs	r5, r5, r7
 8003768:	445d      	add	r5, fp
 800376a:	442b      	add	r3, r5
 800376c:	6123      	str	r3, [r4, #16]
 800376e:	b007      	add	sp, #28
 8003770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003774:	f04f 0b00 	mov.w	fp, #0
 8003778:	e7ca      	b.n	8003710 <_scanf_i+0x15c>
 800377a:	07ca      	lsls	r2, r1, #31
 800377c:	bf4c      	ite	mi
 800377e:	8018      	strhmi	r0, [r3, #0]
 8003780:	6018      	strpl	r0, [r3, #0]
 8003782:	e7eb      	b.n	800375c <_scanf_i+0x1a8>
 8003784:	2001      	movs	r0, #1
 8003786:	e7f2      	b.n	800376e <_scanf_i+0x1ba>
 8003788:	0800440c 	.word	0x0800440c
 800378c:	08003b5d 	.word	0x08003b5d
 8003790:	08003c3d 	.word	0x08003c3d
 8003794:	08004693 	.word	0x08004693

08003798 <__swhatbuf_r>:
 8003798:	b570      	push	{r4, r5, r6, lr}
 800379a:	460c      	mov	r4, r1
 800379c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037a0:	4615      	mov	r5, r2
 80037a2:	2900      	cmp	r1, #0
 80037a4:	461e      	mov	r6, r3
 80037a6:	b096      	sub	sp, #88	@ 0x58
 80037a8:	da0c      	bge.n	80037c4 <__swhatbuf_r+0x2c>
 80037aa:	89a3      	ldrh	r3, [r4, #12]
 80037ac:	2100      	movs	r1, #0
 80037ae:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80037b2:	bf14      	ite	ne
 80037b4:	2340      	movne	r3, #64	@ 0x40
 80037b6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80037ba:	2000      	movs	r0, #0
 80037bc:	6031      	str	r1, [r6, #0]
 80037be:	602b      	str	r3, [r5, #0]
 80037c0:	b016      	add	sp, #88	@ 0x58
 80037c2:	bd70      	pop	{r4, r5, r6, pc}
 80037c4:	466a      	mov	r2, sp
 80037c6:	f000 f8d3 	bl	8003970 <_fstat_r>
 80037ca:	2800      	cmp	r0, #0
 80037cc:	dbed      	blt.n	80037aa <__swhatbuf_r+0x12>
 80037ce:	9901      	ldr	r1, [sp, #4]
 80037d0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80037d4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80037d8:	4259      	negs	r1, r3
 80037da:	4159      	adcs	r1, r3
 80037dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037e0:	e7eb      	b.n	80037ba <__swhatbuf_r+0x22>

080037e2 <__smakebuf_r>:
 80037e2:	898b      	ldrh	r3, [r1, #12]
 80037e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037e6:	079d      	lsls	r5, r3, #30
 80037e8:	4606      	mov	r6, r0
 80037ea:	460c      	mov	r4, r1
 80037ec:	d507      	bpl.n	80037fe <__smakebuf_r+0x1c>
 80037ee:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80037f2:	6023      	str	r3, [r4, #0]
 80037f4:	6123      	str	r3, [r4, #16]
 80037f6:	2301      	movs	r3, #1
 80037f8:	6163      	str	r3, [r4, #20]
 80037fa:	b003      	add	sp, #12
 80037fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037fe:	466a      	mov	r2, sp
 8003800:	ab01      	add	r3, sp, #4
 8003802:	f7ff ffc9 	bl	8003798 <__swhatbuf_r>
 8003806:	9f00      	ldr	r7, [sp, #0]
 8003808:	4605      	mov	r5, r0
 800380a:	4639      	mov	r1, r7
 800380c:	4630      	mov	r0, r6
 800380e:	f7fe fff7 	bl	8002800 <_malloc_r>
 8003812:	b948      	cbnz	r0, 8003828 <__smakebuf_r+0x46>
 8003814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003818:	059a      	lsls	r2, r3, #22
 800381a:	d4ee      	bmi.n	80037fa <__smakebuf_r+0x18>
 800381c:	f023 0303 	bic.w	r3, r3, #3
 8003820:	f043 0302 	orr.w	r3, r3, #2
 8003824:	81a3      	strh	r3, [r4, #12]
 8003826:	e7e2      	b.n	80037ee <__smakebuf_r+0xc>
 8003828:	89a3      	ldrh	r3, [r4, #12]
 800382a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800382e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003832:	81a3      	strh	r3, [r4, #12]
 8003834:	9b01      	ldr	r3, [sp, #4]
 8003836:	6020      	str	r0, [r4, #0]
 8003838:	b15b      	cbz	r3, 8003852 <__smakebuf_r+0x70>
 800383a:	4630      	mov	r0, r6
 800383c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003840:	f000 f8a8 	bl	8003994 <_isatty_r>
 8003844:	b128      	cbz	r0, 8003852 <__smakebuf_r+0x70>
 8003846:	89a3      	ldrh	r3, [r4, #12]
 8003848:	f023 0303 	bic.w	r3, r3, #3
 800384c:	f043 0301 	orr.w	r3, r3, #1
 8003850:	81a3      	strh	r3, [r4, #12]
 8003852:	89a3      	ldrh	r3, [r4, #12]
 8003854:	431d      	orrs	r5, r3
 8003856:	81a5      	strh	r5, [r4, #12]
 8003858:	e7cf      	b.n	80037fa <__smakebuf_r+0x18>

0800385a <__sccl>:
 800385a:	b570      	push	{r4, r5, r6, lr}
 800385c:	780b      	ldrb	r3, [r1, #0]
 800385e:	4604      	mov	r4, r0
 8003860:	2b5e      	cmp	r3, #94	@ 0x5e
 8003862:	bf0b      	itete	eq
 8003864:	784b      	ldrbeq	r3, [r1, #1]
 8003866:	1c4a      	addne	r2, r1, #1
 8003868:	1c8a      	addeq	r2, r1, #2
 800386a:	2100      	movne	r1, #0
 800386c:	bf08      	it	eq
 800386e:	2101      	moveq	r1, #1
 8003870:	3801      	subs	r0, #1
 8003872:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8003876:	f800 1f01 	strb.w	r1, [r0, #1]!
 800387a:	42a8      	cmp	r0, r5
 800387c:	d1fb      	bne.n	8003876 <__sccl+0x1c>
 800387e:	b90b      	cbnz	r3, 8003884 <__sccl+0x2a>
 8003880:	1e50      	subs	r0, r2, #1
 8003882:	bd70      	pop	{r4, r5, r6, pc}
 8003884:	f081 0101 	eor.w	r1, r1, #1
 8003888:	4610      	mov	r0, r2
 800388a:	54e1      	strb	r1, [r4, r3]
 800388c:	4602      	mov	r2, r0
 800388e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003892:	2d2d      	cmp	r5, #45	@ 0x2d
 8003894:	d005      	beq.n	80038a2 <__sccl+0x48>
 8003896:	2d5d      	cmp	r5, #93	@ 0x5d
 8003898:	d016      	beq.n	80038c8 <__sccl+0x6e>
 800389a:	2d00      	cmp	r5, #0
 800389c:	d0f1      	beq.n	8003882 <__sccl+0x28>
 800389e:	462b      	mov	r3, r5
 80038a0:	e7f2      	b.n	8003888 <__sccl+0x2e>
 80038a2:	7846      	ldrb	r6, [r0, #1]
 80038a4:	2e5d      	cmp	r6, #93	@ 0x5d
 80038a6:	d0fa      	beq.n	800389e <__sccl+0x44>
 80038a8:	42b3      	cmp	r3, r6
 80038aa:	dcf8      	bgt.n	800389e <__sccl+0x44>
 80038ac:	461a      	mov	r2, r3
 80038ae:	3002      	adds	r0, #2
 80038b0:	3201      	adds	r2, #1
 80038b2:	4296      	cmp	r6, r2
 80038b4:	54a1      	strb	r1, [r4, r2]
 80038b6:	dcfb      	bgt.n	80038b0 <__sccl+0x56>
 80038b8:	1af2      	subs	r2, r6, r3
 80038ba:	3a01      	subs	r2, #1
 80038bc:	42b3      	cmp	r3, r6
 80038be:	bfa8      	it	ge
 80038c0:	2200      	movge	r2, #0
 80038c2:	1c5d      	adds	r5, r3, #1
 80038c4:	18ab      	adds	r3, r5, r2
 80038c6:	e7e1      	b.n	800388c <__sccl+0x32>
 80038c8:	4610      	mov	r0, r2
 80038ca:	e7da      	b.n	8003882 <__sccl+0x28>

080038cc <__submore>:
 80038cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038d0:	460c      	mov	r4, r1
 80038d2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80038d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80038d8:	4299      	cmp	r1, r3
 80038da:	d11b      	bne.n	8003914 <__submore+0x48>
 80038dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80038e0:	f7fe ff8e 	bl	8002800 <_malloc_r>
 80038e4:	b918      	cbnz	r0, 80038ee <__submore+0x22>
 80038e6:	f04f 30ff 	mov.w	r0, #4294967295
 80038ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038f2:	63a3      	str	r3, [r4, #56]	@ 0x38
 80038f4:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80038f8:	6360      	str	r0, [r4, #52]	@ 0x34
 80038fa:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80038fe:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8003902:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8003906:	7043      	strb	r3, [r0, #1]
 8003908:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800390c:	7003      	strb	r3, [r0, #0]
 800390e:	6020      	str	r0, [r4, #0]
 8003910:	2000      	movs	r0, #0
 8003912:	e7ea      	b.n	80038ea <__submore+0x1e>
 8003914:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8003916:	0077      	lsls	r7, r6, #1
 8003918:	463a      	mov	r2, r7
 800391a:	f000 f877 	bl	8003a0c <_realloc_r>
 800391e:	4605      	mov	r5, r0
 8003920:	2800      	cmp	r0, #0
 8003922:	d0e0      	beq.n	80038e6 <__submore+0x1a>
 8003924:	eb00 0806 	add.w	r8, r0, r6
 8003928:	4601      	mov	r1, r0
 800392a:	4632      	mov	r2, r6
 800392c:	4640      	mov	r0, r8
 800392e:	f000 f85f 	bl	80039f0 <memcpy>
 8003932:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8003936:	f8c4 8000 	str.w	r8, [r4]
 800393a:	e7e9      	b.n	8003910 <__submore+0x44>

0800393c <memmove>:
 800393c:	4288      	cmp	r0, r1
 800393e:	b510      	push	{r4, lr}
 8003940:	eb01 0402 	add.w	r4, r1, r2
 8003944:	d902      	bls.n	800394c <memmove+0x10>
 8003946:	4284      	cmp	r4, r0
 8003948:	4623      	mov	r3, r4
 800394a:	d807      	bhi.n	800395c <memmove+0x20>
 800394c:	1e43      	subs	r3, r0, #1
 800394e:	42a1      	cmp	r1, r4
 8003950:	d008      	beq.n	8003964 <memmove+0x28>
 8003952:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003956:	f803 2f01 	strb.w	r2, [r3, #1]!
 800395a:	e7f8      	b.n	800394e <memmove+0x12>
 800395c:	4601      	mov	r1, r0
 800395e:	4402      	add	r2, r0
 8003960:	428a      	cmp	r2, r1
 8003962:	d100      	bne.n	8003966 <memmove+0x2a>
 8003964:	bd10      	pop	{r4, pc}
 8003966:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800396a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800396e:	e7f7      	b.n	8003960 <memmove+0x24>

08003970 <_fstat_r>:
 8003970:	b538      	push	{r3, r4, r5, lr}
 8003972:	2300      	movs	r3, #0
 8003974:	4d06      	ldr	r5, [pc, #24]	@ (8003990 <_fstat_r+0x20>)
 8003976:	4604      	mov	r4, r0
 8003978:	4608      	mov	r0, r1
 800397a:	4611      	mov	r1, r2
 800397c:	602b      	str	r3, [r5, #0]
 800397e:	f7fd fde7 	bl	8001550 <_fstat>
 8003982:	1c43      	adds	r3, r0, #1
 8003984:	d102      	bne.n	800398c <_fstat_r+0x1c>
 8003986:	682b      	ldr	r3, [r5, #0]
 8003988:	b103      	cbz	r3, 800398c <_fstat_r+0x1c>
 800398a:	6023      	str	r3, [r4, #0]
 800398c:	bd38      	pop	{r3, r4, r5, pc}
 800398e:	bf00      	nop
 8003990:	200010e4 	.word	0x200010e4

08003994 <_isatty_r>:
 8003994:	b538      	push	{r3, r4, r5, lr}
 8003996:	2300      	movs	r3, #0
 8003998:	4d05      	ldr	r5, [pc, #20]	@ (80039b0 <_isatty_r+0x1c>)
 800399a:	4604      	mov	r4, r0
 800399c:	4608      	mov	r0, r1
 800399e:	602b      	str	r3, [r5, #0]
 80039a0:	f7fd fde5 	bl	800156e <_isatty>
 80039a4:	1c43      	adds	r3, r0, #1
 80039a6:	d102      	bne.n	80039ae <_isatty_r+0x1a>
 80039a8:	682b      	ldr	r3, [r5, #0]
 80039aa:	b103      	cbz	r3, 80039ae <_isatty_r+0x1a>
 80039ac:	6023      	str	r3, [r4, #0]
 80039ae:	bd38      	pop	{r3, r4, r5, pc}
 80039b0:	200010e4 	.word	0x200010e4

080039b4 <_sbrk_r>:
 80039b4:	b538      	push	{r3, r4, r5, lr}
 80039b6:	2300      	movs	r3, #0
 80039b8:	4d05      	ldr	r5, [pc, #20]	@ (80039d0 <_sbrk_r+0x1c>)
 80039ba:	4604      	mov	r4, r0
 80039bc:	4608      	mov	r0, r1
 80039be:	602b      	str	r3, [r5, #0]
 80039c0:	f7fd fdec 	bl	800159c <_sbrk>
 80039c4:	1c43      	adds	r3, r0, #1
 80039c6:	d102      	bne.n	80039ce <_sbrk_r+0x1a>
 80039c8:	682b      	ldr	r3, [r5, #0]
 80039ca:	b103      	cbz	r3, 80039ce <_sbrk_r+0x1a>
 80039cc:	6023      	str	r3, [r4, #0]
 80039ce:	bd38      	pop	{r3, r4, r5, pc}
 80039d0:	200010e4 	.word	0x200010e4

080039d4 <memchr>:
 80039d4:	4603      	mov	r3, r0
 80039d6:	b510      	push	{r4, lr}
 80039d8:	b2c9      	uxtb	r1, r1
 80039da:	4402      	add	r2, r0
 80039dc:	4293      	cmp	r3, r2
 80039de:	4618      	mov	r0, r3
 80039e0:	d101      	bne.n	80039e6 <memchr+0x12>
 80039e2:	2000      	movs	r0, #0
 80039e4:	e003      	b.n	80039ee <memchr+0x1a>
 80039e6:	7804      	ldrb	r4, [r0, #0]
 80039e8:	3301      	adds	r3, #1
 80039ea:	428c      	cmp	r4, r1
 80039ec:	d1f6      	bne.n	80039dc <memchr+0x8>
 80039ee:	bd10      	pop	{r4, pc}

080039f0 <memcpy>:
 80039f0:	440a      	add	r2, r1
 80039f2:	4291      	cmp	r1, r2
 80039f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80039f8:	d100      	bne.n	80039fc <memcpy+0xc>
 80039fa:	4770      	bx	lr
 80039fc:	b510      	push	{r4, lr}
 80039fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a02:	4291      	cmp	r1, r2
 8003a04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a08:	d1f9      	bne.n	80039fe <memcpy+0xe>
 8003a0a:	bd10      	pop	{r4, pc}

08003a0c <_realloc_r>:
 8003a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a10:	4680      	mov	r8, r0
 8003a12:	4615      	mov	r5, r2
 8003a14:	460c      	mov	r4, r1
 8003a16:	b921      	cbnz	r1, 8003a22 <_realloc_r+0x16>
 8003a18:	4611      	mov	r1, r2
 8003a1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a1e:	f7fe beef 	b.w	8002800 <_malloc_r>
 8003a22:	b92a      	cbnz	r2, 8003a30 <_realloc_r+0x24>
 8003a24:	f7fe fe82 	bl	800272c <_free_r>
 8003a28:	2400      	movs	r4, #0
 8003a2a:	4620      	mov	r0, r4
 8003a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a30:	f000 f906 	bl	8003c40 <_malloc_usable_size_r>
 8003a34:	4285      	cmp	r5, r0
 8003a36:	4606      	mov	r6, r0
 8003a38:	d802      	bhi.n	8003a40 <_realloc_r+0x34>
 8003a3a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003a3e:	d8f4      	bhi.n	8003a2a <_realloc_r+0x1e>
 8003a40:	4629      	mov	r1, r5
 8003a42:	4640      	mov	r0, r8
 8003a44:	f7fe fedc 	bl	8002800 <_malloc_r>
 8003a48:	4607      	mov	r7, r0
 8003a4a:	2800      	cmp	r0, #0
 8003a4c:	d0ec      	beq.n	8003a28 <_realloc_r+0x1c>
 8003a4e:	42b5      	cmp	r5, r6
 8003a50:	462a      	mov	r2, r5
 8003a52:	4621      	mov	r1, r4
 8003a54:	bf28      	it	cs
 8003a56:	4632      	movcs	r2, r6
 8003a58:	f7ff ffca 	bl	80039f0 <memcpy>
 8003a5c:	4621      	mov	r1, r4
 8003a5e:	4640      	mov	r0, r8
 8003a60:	f7fe fe64 	bl	800272c <_free_r>
 8003a64:	463c      	mov	r4, r7
 8003a66:	e7e0      	b.n	8003a2a <_realloc_r+0x1e>

08003a68 <_strtol_l.constprop.0>:
 8003a68:	2b24      	cmp	r3, #36	@ 0x24
 8003a6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a6e:	4686      	mov	lr, r0
 8003a70:	4690      	mov	r8, r2
 8003a72:	d801      	bhi.n	8003a78 <_strtol_l.constprop.0+0x10>
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d106      	bne.n	8003a86 <_strtol_l.constprop.0+0x1e>
 8003a78:	f7fe fe2a 	bl	80026d0 <__errno>
 8003a7c:	2316      	movs	r3, #22
 8003a7e:	6003      	str	r3, [r0, #0]
 8003a80:	2000      	movs	r0, #0
 8003a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a86:	460d      	mov	r5, r1
 8003a88:	4833      	ldr	r0, [pc, #204]	@ (8003b58 <_strtol_l.constprop.0+0xf0>)
 8003a8a:	462a      	mov	r2, r5
 8003a8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003a90:	5d06      	ldrb	r6, [r0, r4]
 8003a92:	f016 0608 	ands.w	r6, r6, #8
 8003a96:	d1f8      	bne.n	8003a8a <_strtol_l.constprop.0+0x22>
 8003a98:	2c2d      	cmp	r4, #45	@ 0x2d
 8003a9a:	d12d      	bne.n	8003af8 <_strtol_l.constprop.0+0x90>
 8003a9c:	2601      	movs	r6, #1
 8003a9e:	782c      	ldrb	r4, [r5, #0]
 8003aa0:	1c95      	adds	r5, r2, #2
 8003aa2:	f033 0210 	bics.w	r2, r3, #16
 8003aa6:	d109      	bne.n	8003abc <_strtol_l.constprop.0+0x54>
 8003aa8:	2c30      	cmp	r4, #48	@ 0x30
 8003aaa:	d12a      	bne.n	8003b02 <_strtol_l.constprop.0+0x9a>
 8003aac:	782a      	ldrb	r2, [r5, #0]
 8003aae:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003ab2:	2a58      	cmp	r2, #88	@ 0x58
 8003ab4:	d125      	bne.n	8003b02 <_strtol_l.constprop.0+0x9a>
 8003ab6:	2310      	movs	r3, #16
 8003ab8:	786c      	ldrb	r4, [r5, #1]
 8003aba:	3502      	adds	r5, #2
 8003abc:	2200      	movs	r2, #0
 8003abe:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003ac2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003ac6:	fbbc f9f3 	udiv	r9, ip, r3
 8003aca:	4610      	mov	r0, r2
 8003acc:	fb03 ca19 	mls	sl, r3, r9, ip
 8003ad0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003ad4:	2f09      	cmp	r7, #9
 8003ad6:	d81b      	bhi.n	8003b10 <_strtol_l.constprop.0+0xa8>
 8003ad8:	463c      	mov	r4, r7
 8003ada:	42a3      	cmp	r3, r4
 8003adc:	dd27      	ble.n	8003b2e <_strtol_l.constprop.0+0xc6>
 8003ade:	1c57      	adds	r7, r2, #1
 8003ae0:	d007      	beq.n	8003af2 <_strtol_l.constprop.0+0x8a>
 8003ae2:	4581      	cmp	r9, r0
 8003ae4:	d320      	bcc.n	8003b28 <_strtol_l.constprop.0+0xc0>
 8003ae6:	d101      	bne.n	8003aec <_strtol_l.constprop.0+0x84>
 8003ae8:	45a2      	cmp	sl, r4
 8003aea:	db1d      	blt.n	8003b28 <_strtol_l.constprop.0+0xc0>
 8003aec:	2201      	movs	r2, #1
 8003aee:	fb00 4003 	mla	r0, r0, r3, r4
 8003af2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003af6:	e7eb      	b.n	8003ad0 <_strtol_l.constprop.0+0x68>
 8003af8:	2c2b      	cmp	r4, #43	@ 0x2b
 8003afa:	bf04      	itt	eq
 8003afc:	782c      	ldrbeq	r4, [r5, #0]
 8003afe:	1c95      	addeq	r5, r2, #2
 8003b00:	e7cf      	b.n	8003aa2 <_strtol_l.constprop.0+0x3a>
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1da      	bne.n	8003abc <_strtol_l.constprop.0+0x54>
 8003b06:	2c30      	cmp	r4, #48	@ 0x30
 8003b08:	bf0c      	ite	eq
 8003b0a:	2308      	moveq	r3, #8
 8003b0c:	230a      	movne	r3, #10
 8003b0e:	e7d5      	b.n	8003abc <_strtol_l.constprop.0+0x54>
 8003b10:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003b14:	2f19      	cmp	r7, #25
 8003b16:	d801      	bhi.n	8003b1c <_strtol_l.constprop.0+0xb4>
 8003b18:	3c37      	subs	r4, #55	@ 0x37
 8003b1a:	e7de      	b.n	8003ada <_strtol_l.constprop.0+0x72>
 8003b1c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003b20:	2f19      	cmp	r7, #25
 8003b22:	d804      	bhi.n	8003b2e <_strtol_l.constprop.0+0xc6>
 8003b24:	3c57      	subs	r4, #87	@ 0x57
 8003b26:	e7d8      	b.n	8003ada <_strtol_l.constprop.0+0x72>
 8003b28:	f04f 32ff 	mov.w	r2, #4294967295
 8003b2c:	e7e1      	b.n	8003af2 <_strtol_l.constprop.0+0x8a>
 8003b2e:	1c53      	adds	r3, r2, #1
 8003b30:	d108      	bne.n	8003b44 <_strtol_l.constprop.0+0xdc>
 8003b32:	2322      	movs	r3, #34	@ 0x22
 8003b34:	4660      	mov	r0, ip
 8003b36:	f8ce 3000 	str.w	r3, [lr]
 8003b3a:	f1b8 0f00 	cmp.w	r8, #0
 8003b3e:	d0a0      	beq.n	8003a82 <_strtol_l.constprop.0+0x1a>
 8003b40:	1e69      	subs	r1, r5, #1
 8003b42:	e006      	b.n	8003b52 <_strtol_l.constprop.0+0xea>
 8003b44:	b106      	cbz	r6, 8003b48 <_strtol_l.constprop.0+0xe0>
 8003b46:	4240      	negs	r0, r0
 8003b48:	f1b8 0f00 	cmp.w	r8, #0
 8003b4c:	d099      	beq.n	8003a82 <_strtol_l.constprop.0+0x1a>
 8003b4e:	2a00      	cmp	r2, #0
 8003b50:	d1f6      	bne.n	8003b40 <_strtol_l.constprop.0+0xd8>
 8003b52:	f8c8 1000 	str.w	r1, [r8]
 8003b56:	e794      	b.n	8003a82 <_strtol_l.constprop.0+0x1a>
 8003b58:	0800469f 	.word	0x0800469f

08003b5c <_strtol_r>:
 8003b5c:	f7ff bf84 	b.w	8003a68 <_strtol_l.constprop.0>

08003b60 <_strtoul_l.constprop.0>:
 8003b60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b64:	4686      	mov	lr, r0
 8003b66:	460d      	mov	r5, r1
 8003b68:	4e33      	ldr	r6, [pc, #204]	@ (8003c38 <_strtoul_l.constprop.0+0xd8>)
 8003b6a:	4628      	mov	r0, r5
 8003b6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003b70:	5d37      	ldrb	r7, [r6, r4]
 8003b72:	f017 0708 	ands.w	r7, r7, #8
 8003b76:	d1f8      	bne.n	8003b6a <_strtoul_l.constprop.0+0xa>
 8003b78:	2c2d      	cmp	r4, #45	@ 0x2d
 8003b7a:	d12f      	bne.n	8003bdc <_strtoul_l.constprop.0+0x7c>
 8003b7c:	2701      	movs	r7, #1
 8003b7e:	782c      	ldrb	r4, [r5, #0]
 8003b80:	1c85      	adds	r5, r0, #2
 8003b82:	f033 0010 	bics.w	r0, r3, #16
 8003b86:	d109      	bne.n	8003b9c <_strtoul_l.constprop.0+0x3c>
 8003b88:	2c30      	cmp	r4, #48	@ 0x30
 8003b8a:	d12c      	bne.n	8003be6 <_strtoul_l.constprop.0+0x86>
 8003b8c:	7828      	ldrb	r0, [r5, #0]
 8003b8e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8003b92:	2858      	cmp	r0, #88	@ 0x58
 8003b94:	d127      	bne.n	8003be6 <_strtoul_l.constprop.0+0x86>
 8003b96:	2310      	movs	r3, #16
 8003b98:	786c      	ldrb	r4, [r5, #1]
 8003b9a:	3502      	adds	r5, #2
 8003b9c:	f04f 38ff 	mov.w	r8, #4294967295
 8003ba0:	fbb8 f8f3 	udiv	r8, r8, r3
 8003ba4:	2600      	movs	r6, #0
 8003ba6:	fb03 f908 	mul.w	r9, r3, r8
 8003baa:	4630      	mov	r0, r6
 8003bac:	ea6f 0909 	mvn.w	r9, r9
 8003bb0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8003bb4:	f1bc 0f09 	cmp.w	ip, #9
 8003bb8:	d81c      	bhi.n	8003bf4 <_strtoul_l.constprop.0+0x94>
 8003bba:	4664      	mov	r4, ip
 8003bbc:	42a3      	cmp	r3, r4
 8003bbe:	dd2a      	ble.n	8003c16 <_strtoul_l.constprop.0+0xb6>
 8003bc0:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003bc4:	d007      	beq.n	8003bd6 <_strtoul_l.constprop.0+0x76>
 8003bc6:	4580      	cmp	r8, r0
 8003bc8:	d322      	bcc.n	8003c10 <_strtoul_l.constprop.0+0xb0>
 8003bca:	d101      	bne.n	8003bd0 <_strtoul_l.constprop.0+0x70>
 8003bcc:	45a1      	cmp	r9, r4
 8003bce:	db1f      	blt.n	8003c10 <_strtoul_l.constprop.0+0xb0>
 8003bd0:	2601      	movs	r6, #1
 8003bd2:	fb00 4003 	mla	r0, r0, r3, r4
 8003bd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003bda:	e7e9      	b.n	8003bb0 <_strtoul_l.constprop.0+0x50>
 8003bdc:	2c2b      	cmp	r4, #43	@ 0x2b
 8003bde:	bf04      	itt	eq
 8003be0:	782c      	ldrbeq	r4, [r5, #0]
 8003be2:	1c85      	addeq	r5, r0, #2
 8003be4:	e7cd      	b.n	8003b82 <_strtoul_l.constprop.0+0x22>
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1d8      	bne.n	8003b9c <_strtoul_l.constprop.0+0x3c>
 8003bea:	2c30      	cmp	r4, #48	@ 0x30
 8003bec:	bf0c      	ite	eq
 8003bee:	2308      	moveq	r3, #8
 8003bf0:	230a      	movne	r3, #10
 8003bf2:	e7d3      	b.n	8003b9c <_strtoul_l.constprop.0+0x3c>
 8003bf4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8003bf8:	f1bc 0f19 	cmp.w	ip, #25
 8003bfc:	d801      	bhi.n	8003c02 <_strtoul_l.constprop.0+0xa2>
 8003bfe:	3c37      	subs	r4, #55	@ 0x37
 8003c00:	e7dc      	b.n	8003bbc <_strtoul_l.constprop.0+0x5c>
 8003c02:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8003c06:	f1bc 0f19 	cmp.w	ip, #25
 8003c0a:	d804      	bhi.n	8003c16 <_strtoul_l.constprop.0+0xb6>
 8003c0c:	3c57      	subs	r4, #87	@ 0x57
 8003c0e:	e7d5      	b.n	8003bbc <_strtoul_l.constprop.0+0x5c>
 8003c10:	f04f 36ff 	mov.w	r6, #4294967295
 8003c14:	e7df      	b.n	8003bd6 <_strtoul_l.constprop.0+0x76>
 8003c16:	1c73      	adds	r3, r6, #1
 8003c18:	d106      	bne.n	8003c28 <_strtoul_l.constprop.0+0xc8>
 8003c1a:	2322      	movs	r3, #34	@ 0x22
 8003c1c:	4630      	mov	r0, r6
 8003c1e:	f8ce 3000 	str.w	r3, [lr]
 8003c22:	b932      	cbnz	r2, 8003c32 <_strtoul_l.constprop.0+0xd2>
 8003c24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c28:	b107      	cbz	r7, 8003c2c <_strtoul_l.constprop.0+0xcc>
 8003c2a:	4240      	negs	r0, r0
 8003c2c:	2a00      	cmp	r2, #0
 8003c2e:	d0f9      	beq.n	8003c24 <_strtoul_l.constprop.0+0xc4>
 8003c30:	b106      	cbz	r6, 8003c34 <_strtoul_l.constprop.0+0xd4>
 8003c32:	1e69      	subs	r1, r5, #1
 8003c34:	6011      	str	r1, [r2, #0]
 8003c36:	e7f5      	b.n	8003c24 <_strtoul_l.constprop.0+0xc4>
 8003c38:	0800469f 	.word	0x0800469f

08003c3c <_strtoul_r>:
 8003c3c:	f7ff bf90 	b.w	8003b60 <_strtoul_l.constprop.0>

08003c40 <_malloc_usable_size_r>:
 8003c40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c44:	1f18      	subs	r0, r3, #4
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	bfbc      	itt	lt
 8003c4a:	580b      	ldrlt	r3, [r1, r0]
 8003c4c:	18c0      	addlt	r0, r0, r3
 8003c4e:	4770      	bx	lr

08003c50 <_init>:
 8003c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c52:	bf00      	nop
 8003c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c56:	bc08      	pop	{r3}
 8003c58:	469e      	mov	lr, r3
 8003c5a:	4770      	bx	lr

08003c5c <_fini>:
 8003c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5e:	bf00      	nop
 8003c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c62:	bc08      	pop	{r3}
 8003c64:	469e      	mov	lr, r3
 8003c66:	4770      	bx	lr
