
Cable Undefined V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c98  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f18  08005e7c  08005e7c  00006e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d94  08006d94  00008d28  2**0
                  CONTENTS
  4 .ARM          00000008  08006d94  08006d94  00007d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d9c  08006d9c  00008d28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d9c  08006d9c  00007d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006da0  08006da0  00007da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000d28  20000000  08006da4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a8  20000d28  08007acc  00008d28  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011d0  08007acc  000091d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008d28  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f046  00000000  00000000  00008d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d57  00000000  00000000  00017d97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  0001aaf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d8b  00000000  00000000  0001bcd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002501e  00000000  00000000  0001ca63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000119c2  00000000  00000000  00041a81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce747  00000000  00000000  00053443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00121b8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057cc  00000000  00000000  00121bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0012739c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000d28 	.word	0x20000d28
 8000200:	00000000 	.word	0x00000000
 8000204:	08005e64 	.word	0x08005e64

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000d2c 	.word	0x20000d2c
 8000220:	08005e64 	.word	0x08005e64

08000224 <strcmp>:
 8000224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800022c:	2a01      	cmp	r2, #1
 800022e:	bf28      	it	cs
 8000230:	429a      	cmpcs	r2, r3
 8000232:	d0f7      	beq.n	8000224 <strcmp>
 8000234:	1ad0      	subs	r0, r2, r3
 8000236:	4770      	bx	lr

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	0a1b      	lsrs	r3, r3, #8
 8000256:	b29a      	uxth	r2, r3
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	611a      	str	r2, [r3, #16]
}
 800025c:	bf00      	nop
 800025e:	370c      	adds	r7, #12
 8000260:	46bd      	mov	sp, r7
 8000262:	bc80      	pop	{r7}
 8000264:	4770      	bx	lr

08000266 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000266:	b480      	push	{r7}
 8000268:	b083      	sub	sp, #12
 800026a:	af00      	add	r7, sp, #0
 800026c:	6078      	str	r0, [r7, #4]
 800026e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	0a1b      	lsrs	r3, r3, #8
 8000274:	b29a      	uxth	r2, r3
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	615a      	str	r2, [r3, #20]
}
 800027a:	bf00      	nop
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr

08000284 <FAULT_CheckAndReport>:
static char msg[20];

/**
 * @brief Check which FAULT occurred and send the appropriate message
 */
void FAULT_CheckAndReport(void) {
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
    // Only process if an interrupt was triggered and message has not been sent
	if (!fault_sent){
 8000288:	4b1b      	ldr	r3, [pc, #108]	@ (80002f8 <FAULT_CheckAndReport+0x74>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	b2db      	uxtb	r3, r3
 800028e:	2b00      	cmp	r3, #0
 8000290:	d12c      	bne.n	80002ec <FAULT_CheckAndReport+0x68>
		if (fault_3v3_triggered && fault_5v_triggered) {
 8000292:	4b1a      	ldr	r3, [pc, #104]	@ (80002fc <FAULT_CheckAndReport+0x78>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	b2db      	uxtb	r3, r3
 8000298:	2b00      	cmp	r3, #0
 800029a:	d00a      	beq.n	80002b2 <FAULT_CheckAndReport+0x2e>
 800029c:	4b18      	ldr	r3, [pc, #96]	@ (8000300 <FAULT_CheckAndReport+0x7c>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d005      	beq.n	80002b2 <FAULT_CheckAndReport+0x2e>
			snprintf(msg, sizeof(msg), "FAULT 3v3 + 5V\n");
 80002a6:	4a17      	ldr	r2, [pc, #92]	@ (8000304 <FAULT_CheckAndReport+0x80>)
 80002a8:	2114      	movs	r1, #20
 80002aa:	4817      	ldr	r0, [pc, #92]	@ (8000308 <FAULT_CheckAndReport+0x84>)
 80002ac:	f004 f94e 	bl	800454c <sniprintf>
 80002b0:	e014      	b.n	80002dc <FAULT_CheckAndReport+0x58>
		} else if (fault_3v3_triggered) {
 80002b2:	4b12      	ldr	r3, [pc, #72]	@ (80002fc <FAULT_CheckAndReport+0x78>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d005      	beq.n	80002c8 <FAULT_CheckAndReport+0x44>
			snprintf(msg, sizeof(msg), "FAULT 3v3\n");
 80002bc:	4a13      	ldr	r2, [pc, #76]	@ (800030c <FAULT_CheckAndReport+0x88>)
 80002be:	2114      	movs	r1, #20
 80002c0:	4811      	ldr	r0, [pc, #68]	@ (8000308 <FAULT_CheckAndReport+0x84>)
 80002c2:	f004 f943 	bl	800454c <sniprintf>
 80002c6:	e009      	b.n	80002dc <FAULT_CheckAndReport+0x58>
		} else if (fault_5v_triggered) {
 80002c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000300 <FAULT_CheckAndReport+0x7c>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d010      	beq.n	80002f4 <FAULT_CheckAndReport+0x70>
			snprintf(msg, sizeof(msg), "FAULT 5V\n");
 80002d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000310 <FAULT_CheckAndReport+0x8c>)
 80002d4:	2114      	movs	r1, #20
 80002d6:	480c      	ldr	r0, [pc, #48]	@ (8000308 <FAULT_CheckAndReport+0x84>)
 80002d8:	f004 f938 	bl	800454c <sniprintf>
			return; // No fault detected
		}


	// Send message via UART1 and UART3
	sendToUART(USART3, msg);
 80002dc:	490a      	ldr	r1, [pc, #40]	@ (8000308 <FAULT_CheckAndReport+0x84>)
 80002de:	480d      	ldr	r0, [pc, #52]	@ (8000314 <FAULT_CheckAndReport+0x90>)
 80002e0:	f002 f8a4 	bl	800242c <sendToUART>
	sendToUART(USART1, msg);
 80002e4:	4908      	ldr	r1, [pc, #32]	@ (8000308 <FAULT_CheckAndReport+0x84>)
 80002e6:	480c      	ldr	r0, [pc, #48]	@ (8000318 <FAULT_CheckAndReport+0x94>)
 80002e8:	f002 f8a0 	bl	800242c <sendToUART>
	}

	// Mark message as sent
	fault_sent = 1;
 80002ec:	4b02      	ldr	r3, [pc, #8]	@ (80002f8 <FAULT_CheckAndReport+0x74>)
 80002ee:	2201      	movs	r2, #1
 80002f0:	701a      	strb	r2, [r3, #0]
 80002f2:	e000      	b.n	80002f6 <FAULT_CheckAndReport+0x72>
			return; // No fault detected
 80002f4:	bf00      	nop
}
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	20000d46 	.word	0x20000d46
 80002fc:	20000d44 	.word	0x20000d44
 8000300:	20000d45 	.word	0x20000d45
 8000304:	08005e7c 	.word	0x08005e7c
 8000308:	20000d48 	.word	0x20000d48
 800030c:	08005e8c 	.word	0x08005e8c
 8000310:	08005e98 	.word	0x08005e98
 8000314:	40004800 	.word	0x40004800
 8000318:	40013800 	.word	0x40013800

0800031c <FAULT_5v_HandleInterrupt>:

/**
 * @brief Handles the 5V FAULT interrupt, only sets flags
 */
void FAULT_5v_HandleInterrupt(void) {
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
    // Set trigger flag when interrupt occurs
	fault_5v_triggered = 1;
 8000320:	4b04      	ldr	r3, [pc, #16]	@ (8000334 <FAULT_5v_HandleInterrupt+0x18>)
 8000322:	2201      	movs	r2, #1
 8000324:	701a      	strb	r2, [r3, #0]
    fault_sent = 0;  // Reset message sent flag to allow new transmission
 8000326:	4b04      	ldr	r3, [pc, #16]	@ (8000338 <FAULT_5v_HandleInterrupt+0x1c>)
 8000328:	2200      	movs	r2, #0
 800032a:	701a      	strb	r2, [r3, #0]
}
 800032c:	bf00      	nop
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr
 8000334:	20000d45 	.word	0x20000d45
 8000338:	20000d46 	.word	0x20000d46

0800033c <FAULT_3v3_HandleInterrupt>:

/**
 * @brief Handles the 5V FAULT interrupt, only sets flags
 */
void FAULT_3v3_HandleInterrupt(void) {
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
    // Set trigger flag when interrupt occurs
	fault_3v3_triggered = 1;
 8000340:	4b04      	ldr	r3, [pc, #16]	@ (8000354 <FAULT_3v3_HandleInterrupt+0x18>)
 8000342:	2201      	movs	r2, #1
 8000344:	701a      	strb	r2, [r3, #0]
    fault_sent = 0;  // Reset message sent flag to allow new transmission
 8000346:	4b04      	ldr	r3, [pc, #16]	@ (8000358 <FAULT_3v3_HandleInterrupt+0x1c>)
 8000348:	2200      	movs	r2, #0
 800034a:	701a      	strb	r2, [r3, #0]
}
 800034c:	bf00      	nop
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr
 8000354:	20000d44 	.word	0x20000d44
 8000358:	20000d46 	.word	0x20000d46

0800035c <FAULT_5v_HandleMsg>:

void FAULT_5v_HandleMsg(void){
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	printf("reseting the protection gpio");
 8000360:	480d      	ldr	r0, [pc, #52]	@ (8000398 <FAULT_5v_HandleMsg+0x3c>)
 8000362:	f004 f87b 	bl	800445c <iprintf>
	fflush(stdout);
 8000366:	4b0d      	ldr	r3, [pc, #52]	@ (800039c <FAULT_5v_HandleMsg+0x40>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	4618      	mov	r0, r3
 800036e:	f003 ff9f 	bl	80042b0 <fflush>

	fault_5v_triggered = 0;
 8000372:	4b0b      	ldr	r3, [pc, #44]	@ (80003a0 <FAULT_5v_HandleMsg+0x44>)
 8000374:	2200      	movs	r2, #0
 8000376:	701a      	strb	r2, [r3, #0]
    fault_sent = 0;
 8000378:	4b0a      	ldr	r3, [pc, #40]	@ (80003a4 <FAULT_5v_HandleMsg+0x48>)
 800037a:	2200      	movs	r2, #0
 800037c:	701a      	strb	r2, [r3, #0]

    LL_GPIO_ResetOutputPin(PROTECTION_GPIO, PROTECTION_PIN);
 800037e:	490a      	ldr	r1, [pc, #40]	@ (80003a8 <FAULT_5v_HandleMsg+0x4c>)
 8000380:	480a      	ldr	r0, [pc, #40]	@ (80003ac <FAULT_5v_HandleMsg+0x50>)
 8000382:	f7ff ff70 	bl	8000266 <LL_GPIO_ResetOutputPin>
    LL_mDelay(20);
 8000386:	2014      	movs	r0, #20
 8000388:	f003 feb8 	bl	80040fc <LL_mDelay>
    LL_GPIO_SetOutputPin(PROTECTION_GPIO, PROTECTION_PIN);
 800038c:	4906      	ldr	r1, [pc, #24]	@ (80003a8 <FAULT_5v_HandleMsg+0x4c>)
 800038e:	4807      	ldr	r0, [pc, #28]	@ (80003ac <FAULT_5v_HandleMsg+0x50>)
 8000390:	f7ff ff5a 	bl	8000248 <LL_GPIO_SetOutputPin>
}
 8000394:	bf00      	nop
 8000396:	bd80      	pop	{r7, pc}
 8000398:	08005ea4 	.word	0x08005ea4
 800039c:	20000cd8 	.word	0x20000cd8
 80003a0:	20000d45 	.word	0x20000d45
 80003a4:	20000d46 	.word	0x20000d46
 80003a8:	04080008 	.word	0x04080008
 80003ac:	40011800 	.word	0x40011800

080003b0 <FAULT_3v3_HandleMsg>:

void FAULT_3v3_HandleMsg(void){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	printf("reseting the protection gpio");
 80003b4:	480d      	ldr	r0, [pc, #52]	@ (80003ec <FAULT_3v3_HandleMsg+0x3c>)
 80003b6:	f004 f851 	bl	800445c <iprintf>
	fflush(stdout);
 80003ba:	4b0d      	ldr	r3, [pc, #52]	@ (80003f0 <FAULT_3v3_HandleMsg+0x40>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	689b      	ldr	r3, [r3, #8]
 80003c0:	4618      	mov	r0, r3
 80003c2:	f003 ff75 	bl	80042b0 <fflush>

	fault_5v_triggered = 0;
 80003c6:	4b0b      	ldr	r3, [pc, #44]	@ (80003f4 <FAULT_3v3_HandleMsg+0x44>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	701a      	strb	r2, [r3, #0]
    fault_sent = 0;
 80003cc:	4b0a      	ldr	r3, [pc, #40]	@ (80003f8 <FAULT_3v3_HandleMsg+0x48>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	701a      	strb	r2, [r3, #0]

    LL_GPIO_ResetOutputPin(PROTECTION_GPIO, PROTECTION_PIN);
 80003d2:	490a      	ldr	r1, [pc, #40]	@ (80003fc <FAULT_3v3_HandleMsg+0x4c>)
 80003d4:	480a      	ldr	r0, [pc, #40]	@ (8000400 <FAULT_3v3_HandleMsg+0x50>)
 80003d6:	f7ff ff46 	bl	8000266 <LL_GPIO_ResetOutputPin>
    LL_mDelay(20);
 80003da:	2014      	movs	r0, #20
 80003dc:	f003 fe8e 	bl	80040fc <LL_mDelay>
    LL_GPIO_SetOutputPin(PROTECTION_GPIO, PROTECTION_PIN);
 80003e0:	4906      	ldr	r1, [pc, #24]	@ (80003fc <FAULT_3v3_HandleMsg+0x4c>)
 80003e2:	4807      	ldr	r0, [pc, #28]	@ (8000400 <FAULT_3v3_HandleMsg+0x50>)
 80003e4:	f7ff ff30 	bl	8000248 <LL_GPIO_SetOutputPin>
}
 80003e8:	bf00      	nop
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	08005ea4 	.word	0x08005ea4
 80003f0:	20000cd8 	.word	0x20000cd8
 80003f4:	20000d45 	.word	0x20000d45
 80003f8:	20000d46 	.word	0x20000d46
 80003fc:	04080008 	.word	0x04080008
 8000400:	40011800 	.word	0x40011800

08000404 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000408:	4b04      	ldr	r3, [pc, #16]	@ (800041c <__NVIC_GetPriorityGrouping+0x18>)
 800040a:	68db      	ldr	r3, [r3, #12]
 800040c:	0a1b      	lsrs	r3, r3, #8
 800040e:	f003 0307 	and.w	r3, r3, #7
}
 8000412:	4618      	mov	r0, r3
 8000414:	46bd      	mov	sp, r7
 8000416:	bc80      	pop	{r7}
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	e000ed00 	.word	0xe000ed00

08000420 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800042a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800042e:	2b00      	cmp	r3, #0
 8000430:	db0b      	blt.n	800044a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	f003 021f 	and.w	r2, r3, #31
 8000438:	4906      	ldr	r1, [pc, #24]	@ (8000454 <__NVIC_EnableIRQ+0x34>)
 800043a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800043e:	095b      	lsrs	r3, r3, #5
 8000440:	2001      	movs	r0, #1
 8000442:	fa00 f202 	lsl.w	r2, r0, r2
 8000446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr
 8000454:	e000e100 	.word	0xe000e100

08000458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	4603      	mov	r3, r0
 8000460:	6039      	str	r1, [r7, #0]
 8000462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000468:	2b00      	cmp	r3, #0
 800046a:	db0a      	blt.n	8000482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	b2da      	uxtb	r2, r3
 8000470:	490c      	ldr	r1, [pc, #48]	@ (80004a4 <__NVIC_SetPriority+0x4c>)
 8000472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000476:	0112      	lsls	r2, r2, #4
 8000478:	b2d2      	uxtb	r2, r2
 800047a:	440b      	add	r3, r1
 800047c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000480:	e00a      	b.n	8000498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	b2da      	uxtb	r2, r3
 8000486:	4908      	ldr	r1, [pc, #32]	@ (80004a8 <__NVIC_SetPriority+0x50>)
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	f003 030f 	and.w	r3, r3, #15
 800048e:	3b04      	subs	r3, #4
 8000490:	0112      	lsls	r2, r2, #4
 8000492:	b2d2      	uxtb	r2, r2
 8000494:	440b      	add	r3, r1
 8000496:	761a      	strb	r2, [r3, #24]
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	e000e100 	.word	0xe000e100
 80004a8:	e000ed00 	.word	0xe000ed00

080004ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b089      	sub	sp, #36	@ 0x24
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	60f8      	str	r0, [r7, #12]
 80004b4:	60b9      	str	r1, [r7, #8]
 80004b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	f003 0307 	and.w	r3, r3, #7
 80004be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004c0:	69fb      	ldr	r3, [r7, #28]
 80004c2:	f1c3 0307 	rsb	r3, r3, #7
 80004c6:	2b04      	cmp	r3, #4
 80004c8:	bf28      	it	cs
 80004ca:	2304      	movcs	r3, #4
 80004cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004ce:	69fb      	ldr	r3, [r7, #28]
 80004d0:	3304      	adds	r3, #4
 80004d2:	2b06      	cmp	r3, #6
 80004d4:	d902      	bls.n	80004dc <NVIC_EncodePriority+0x30>
 80004d6:	69fb      	ldr	r3, [r7, #28]
 80004d8:	3b03      	subs	r3, #3
 80004da:	e000      	b.n	80004de <NVIC_EncodePriority+0x32>
 80004dc:	2300      	movs	r3, #0
 80004de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004e0:	f04f 32ff 	mov.w	r2, #4294967295
 80004e4:	69bb      	ldr	r3, [r7, #24]
 80004e6:	fa02 f303 	lsl.w	r3, r2, r3
 80004ea:	43da      	mvns	r2, r3
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	401a      	ands	r2, r3
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80004f4:	f04f 31ff 	mov.w	r1, #4294967295
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	fa01 f303 	lsl.w	r3, r1, r3
 80004fe:	43d9      	mvns	r1, r3
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000504:	4313      	orrs	r3, r2
         );
}
 8000506:	4618      	mov	r0, r3
 8000508:	3724      	adds	r7, #36	@ 0x24
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr

08000510 <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000510:	b480      	push	{r7}
 8000512:	b089      	sub	sp, #36	@ 0x24
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	332c      	adds	r3, #44	@ 0x2c
 8000520:	4619      	mov	r1, r3
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8000528:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800052c:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800052e:	69ba      	ldr	r2, [r7, #24]
 8000530:	fa92 f2a2 	rbit	r2, r2
 8000534:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000536:	697a      	ldr	r2, [r7, #20]
 8000538:	fab2 f282 	clz	r2, r2
 800053c:	b2d2      	uxtb	r2, r2
 800053e:	40d3      	lsrs	r3, r2
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	440b      	add	r3, r1
 8000544:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 8000546:	69fb      	ldr	r3, [r7, #28]
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	f003 031f 	and.w	r3, r3, #31
 8000550:	211f      	movs	r1, #31
 8000552:	fa01 f303 	lsl.w	r3, r1, r3
 8000556:	43db      	mvns	r3, r3
 8000558:	401a      	ands	r2, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	f003 011f 	and.w	r1, r3, #31
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	f003 031f 	and.w	r3, r3, #31
 8000566:	fa01 f303 	lsl.w	r3, r1, r3
 800056a:	431a      	orrs	r2, r3
 800056c:	69fb      	ldr	r3, [r7, #28]
 800056e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000570:	bf00      	nop
 8000572:	3724      	adds	r7, #36	@ 0x24
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr

0800057a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800057a:	b480      	push	{r7}
 800057c:	b08d      	sub	sp, #52	@ 0x34
 800057e:	af00      	add	r7, sp, #0
 8000580:	60f8      	str	r0, [r7, #12]
 8000582:	60b9      	str	r1, [r7, #8]
 8000584:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	330c      	adds	r3, #12
 800058a:	4619      	mov	r1, r3
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000592:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000596:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000598:	69ba      	ldr	r2, [r7, #24]
 800059a:	fa92 f2a2 	rbit	r2, r2
 800059e:	617a      	str	r2, [r7, #20]
  return result;
 80005a0:	697a      	ldr	r2, [r7, #20]
 80005a2:	fab2 f282 	clz	r2, r2
 80005a6:	b2d2      	uxtb	r2, r2
 80005a8:	40d3      	lsrs	r3, r2
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	440b      	add	r3, r1
 80005ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  MODIFY_REG(*preg,
 80005b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 80005ba:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 80005be:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005c0:	6a39      	ldr	r1, [r7, #32]
 80005c2:	fa91 f1a1 	rbit	r1, r1
 80005c6:	61f9      	str	r1, [r7, #28]
  return result;
 80005c8:	69f9      	ldr	r1, [r7, #28]
 80005ca:	fab1 f181 	clz	r1, r1
 80005ce:	b2c9      	uxtb	r1, r1
 80005d0:	40cb      	lsrs	r3, r1
 80005d2:	2107      	movs	r1, #7
 80005d4:	fa01 f303 	lsl.w	r3, r1, r3
 80005d8:	43db      	mvns	r3, r3
 80005da:	401a      	ands	r2, r3
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 80005e2:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 80005e6:	62b9      	str	r1, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80005ea:	fa91 f1a1 	rbit	r1, r1
 80005ee:	6279      	str	r1, [r7, #36]	@ 0x24
  return result;
 80005f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80005f2:	fab1 f181 	clz	r1, r1
 80005f6:	b2c9      	uxtb	r1, r1
 80005f8:	40cb      	lsrs	r3, r1
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000600:	431a      	orrs	r2, r3
 8000602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000604:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8000606:	bf00      	nop
 8000608:	3734      	adds	r7, #52	@ 0x34
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr

08000610 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000614:	4b04      	ldr	r3, [pc, #16]	@ (8000628 <LL_RCC_HSE_Enable+0x18>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a03      	ldr	r2, [pc, #12]	@ (8000628 <LL_RCC_HSE_Enable+0x18>)
 800061a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800061e:	6013      	str	r3, [r2, #0]
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr
 8000628:	40021000 	.word	0x40021000

0800062c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000630:	4b06      	ldr	r3, [pc, #24]	@ (800064c <LL_RCC_HSE_IsReady+0x20>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000638:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800063c:	bf0c      	ite	eq
 800063e:	2301      	moveq	r3, #1
 8000640:	2300      	movne	r3, #0
 8000642:	b2db      	uxtb	r3, r3
}
 8000644:	4618      	mov	r0, r3
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr
 800064c:	40021000 	.word	0x40021000

08000650 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000658:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <LL_RCC_SetSysClkSource+0x24>)
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	f023 0203 	bic.w	r2, r3, #3
 8000660:	4904      	ldr	r1, [pc, #16]	@ (8000674 <LL_RCC_SetSysClkSource+0x24>)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4313      	orrs	r3, r2
 8000666:	604b      	str	r3, [r1, #4]
}
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	40021000 	.word	0x40021000

08000678 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800067c:	4b03      	ldr	r3, [pc, #12]	@ (800068c <LL_RCC_GetSysClkSource+0x14>)
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	f003 030c 	and.w	r3, r3, #12
}
 8000684:	4618      	mov	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr
 800068c:	40021000 	.word	0x40021000

08000690 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000698:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <LL_RCC_SetAHBPrescaler+0x24>)
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80006a0:	4904      	ldr	r1, [pc, #16]	@ (80006b4 <LL_RCC_SetAHBPrescaler+0x24>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	604b      	str	r3, [r1, #4]
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	40021000 	.word	0x40021000

080006b8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80006c0:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <LL_RCC_SetAPB1Prescaler+0x24>)
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80006c8:	4904      	ldr	r1, [pc, #16]	@ (80006dc <LL_RCC_SetAPB1Prescaler+0x24>)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4313      	orrs	r3, r2
 80006ce:	604b      	str	r3, [r1, #4]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	40021000 	.word	0x40021000

080006e0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80006e8:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <LL_RCC_SetAPB2Prescaler+0x24>)
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80006f0:	4904      	ldr	r1, [pc, #16]	@ (8000704 <LL_RCC_SetAPB2Prescaler+0x24>)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4313      	orrs	r3, r2
 80006f6:	604b      	str	r3, [r1, #4]
}
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	40021000 	.word	0x40021000

08000708 <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8000710:	4b06      	ldr	r3, [pc, #24]	@ (800072c <LL_RCC_SetADCClockSource+0x24>)
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8000718:	4904      	ldr	r1, [pc, #16]	@ (800072c <LL_RCC_SetADCClockSource+0x24>)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4313      	orrs	r3, r2
 800071e:	604b      	str	r3, [r1, #4]
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	40021000 	.word	0x40021000

08000730 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000734:	4b04      	ldr	r3, [pc, #16]	@ (8000748 <LL_RCC_PLL_Enable+0x18>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a03      	ldr	r2, [pc, #12]	@ (8000748 <LL_RCC_PLL_Enable+0x18>)
 800073a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800073e:	6013      	str	r3, [r2, #0]
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	40021000 	.word	0x40021000

0800074c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000750:	4b06      	ldr	r3, [pc, #24]	@ (800076c <LL_RCC_PLL_IsReady+0x20>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000758:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800075c:	bf0c      	ite	eq
 800075e:	2301      	moveq	r3, #1
 8000760:	2300      	movne	r3, #0
 8000762:	b2db      	uxtb	r3, r3
}
 8000764:	4618      	mov	r0, r3
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	40021000 	.word	0x40021000

08000770 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 800077a:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <LL_RCC_PLL_ConfigDomain_SYS+0x50>)
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	430b      	orrs	r3, r1
 800078c:	490c      	ldr	r1, [pc, #48]	@ (80007c0 <LL_RCC_PLL_ConfigDomain_SYS+0x50>)
 800078e:	4313      	orrs	r3, r2
 8000790:	604b      	str	r3, [r1, #4]
             (Source & (RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE)) | PLLMul);
#if defined(RCC_CFGR2_PREDIV1)
#if defined(RCC_CFGR2_PREDIV1SRC)
  MODIFY_REG(RCC->CFGR2, (RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC),
 8000792:	4b0b      	ldr	r3, [pc, #44]	@ (80007c0 <LL_RCC_PLL_ConfigDomain_SYS+0x50>)
 8000794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000796:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800079a:	f023 030f 	bic.w	r3, r3, #15
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	f002 010f 	and.w	r1, r2, #15
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	0912      	lsrs	r2, r2, #4
 80007a8:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 80007ac:	430a      	orrs	r2, r1
 80007ae:	4904      	ldr	r1, [pc, #16]	@ (80007c0 <LL_RCC_PLL_ConfigDomain_SYS+0x50>)
 80007b0:	4313      	orrs	r3, r2
 80007b2:	62cb      	str	r3, [r1, #44]	@ 0x2c
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000

080007c4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80007cc:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80007ce:	69da      	ldr	r2, [r3, #28]
 80007d0:	4907      	ldr	r1, [pc, #28]	@ (80007f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80007d8:	4b05      	ldr	r3, [pc, #20]	@ (80007f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80007da:	69da      	ldr	r2, [r3, #28]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4013      	ands	r3, r2
 80007e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007e2:	68fb      	ldr	r3, [r7, #12]
}
 80007e4:	bf00      	nop
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000

080007f4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80007fc:	4b08      	ldr	r3, [pc, #32]	@ (8000820 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007fe:	699a      	ldr	r2, [r3, #24]
 8000800:	4907      	ldr	r1, [pc, #28]	@ (8000820 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4313      	orrs	r3, r2
 8000806:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000808:	4b05      	ldr	r3, [pc, #20]	@ (8000820 <LL_APB2_GRP1_EnableClock+0x2c>)
 800080a:	699a      	ldr	r2, [r3, #24]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4013      	ands	r3, r2
 8000810:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000812:	68fb      	ldr	r3, [r7, #12]
}
 8000814:	bf00      	nop
 8000816:	3714      	adds	r7, #20
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40021000 	.word	0x40021000

08000824 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <LL_FLASH_SetLatency+0x24>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f023 0207 	bic.w	r2, r3, #7
 8000834:	4904      	ldr	r1, [pc, #16]	@ (8000848 <LL_FLASH_SetLatency+0x24>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4313      	orrs	r3, r2
 800083a:	600b      	str	r3, [r1, #0]
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	40022000 	.word	0x40022000

0800084c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000850:	4b03      	ldr	r3, [pc, #12]	@ (8000860 <LL_FLASH_GetLatency+0x14>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f003 0307 	and.w	r3, r3, #7
}
 8000858:	4618      	mov	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr
 8000860:	40022000 	.word	0x40022000

08000864 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800086c:	4b05      	ldr	r3, [pc, #20]	@ (8000884 <LL_EXTI_EnableIT_0_31+0x20>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	4904      	ldr	r1, [pc, #16]	@ (8000884 <LL_EXTI_EnableIT_0_31+0x20>)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4313      	orrs	r3, r2
 8000876:	600b      	str	r3, [r1, #0]
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	40010400 	.word	0x40010400

08000888 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	3b01      	subs	r3, #1
 8000898:	4a0c      	ldr	r2, [pc, #48]	@ (80008cc <LL_DMA_SetDataTransferDirection+0x44>)
 800089a:	5cd3      	ldrb	r3, [r2, r3]
 800089c:	461a      	mov	r2, r3
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	4413      	add	r3, r2
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80008a8:	f023 0310 	bic.w	r3, r3, #16
 80008ac:	68ba      	ldr	r2, [r7, #8]
 80008ae:	3a01      	subs	r2, #1
 80008b0:	4906      	ldr	r1, [pc, #24]	@ (80008cc <LL_DMA_SetDataTransferDirection+0x44>)
 80008b2:	5c8a      	ldrb	r2, [r1, r2]
 80008b4:	4611      	mov	r1, r2
 80008b6:	68fa      	ldr	r2, [r7, #12]
 80008b8:	440a      	add	r2, r1
 80008ba:	4611      	mov	r1, r2
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	4313      	orrs	r3, r2
 80008c0:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80008c2:	bf00      	nop
 80008c4:	3714      	adds	r7, #20
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr
 80008cc:	080069f4 	.word	0x080069f4

080008d0 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	3b01      	subs	r3, #1
 80008e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000910 <LL_DMA_SetMode+0x40>)
 80008e2:	5cd3      	ldrb	r3, [r2, r3]
 80008e4:	461a      	mov	r2, r3
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	4413      	add	r3, r2
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f023 0220 	bic.w	r2, r3, #32
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	3b01      	subs	r3, #1
 80008f4:	4906      	ldr	r1, [pc, #24]	@ (8000910 <LL_DMA_SetMode+0x40>)
 80008f6:	5ccb      	ldrb	r3, [r1, r3]
 80008f8:	4619      	mov	r1, r3
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	440b      	add	r3, r1
 80008fe:	4619      	mov	r1, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4313      	orrs	r3, r2
 8000904:	600b      	str	r3, [r1, #0]
             Mode);
}
 8000906:	bf00      	nop
 8000908:	3714      	adds	r7, #20
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr
 8000910:	080069f4 	.word	0x080069f4

08000914 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	3b01      	subs	r3, #1
 8000924:	4a0b      	ldr	r2, [pc, #44]	@ (8000954 <LL_DMA_SetPeriphIncMode+0x40>)
 8000926:	5cd3      	ldrb	r3, [r2, r3]
 8000928:	461a      	mov	r2, r3
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	4413      	add	r3, r2
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	3b01      	subs	r3, #1
 8000938:	4906      	ldr	r1, [pc, #24]	@ (8000954 <LL_DMA_SetPeriphIncMode+0x40>)
 800093a:	5ccb      	ldrb	r3, [r1, r3]
 800093c:	4619      	mov	r1, r3
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	440b      	add	r3, r1
 8000942:	4619      	mov	r1, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4313      	orrs	r3, r2
 8000948:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 800094a:	bf00      	nop
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr
 8000954:	080069f4 	.word	0x080069f4

08000958 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	3b01      	subs	r3, #1
 8000968:	4a0b      	ldr	r2, [pc, #44]	@ (8000998 <LL_DMA_SetMemoryIncMode+0x40>)
 800096a:	5cd3      	ldrb	r3, [r2, r3]
 800096c:	461a      	mov	r2, r3
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	4413      	add	r3, r2
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	3b01      	subs	r3, #1
 800097c:	4906      	ldr	r1, [pc, #24]	@ (8000998 <LL_DMA_SetMemoryIncMode+0x40>)
 800097e:	5ccb      	ldrb	r3, [r1, r3]
 8000980:	4619      	mov	r1, r3
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	440b      	add	r3, r1
 8000986:	4619      	mov	r1, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4313      	orrs	r3, r2
 800098c:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 800098e:	bf00      	nop
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	080069f4 	.word	0x080069f4

0800099c <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	4a0b      	ldr	r2, [pc, #44]	@ (80009dc <LL_DMA_SetPeriphSize+0x40>)
 80009ae:	5cd3      	ldrb	r3, [r2, r3]
 80009b0:	461a      	mov	r2, r3
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	4413      	add	r3, r2
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	3b01      	subs	r3, #1
 80009c0:	4906      	ldr	r1, [pc, #24]	@ (80009dc <LL_DMA_SetPeriphSize+0x40>)
 80009c2:	5ccb      	ldrb	r3, [r1, r3]
 80009c4:	4619      	mov	r1, r3
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	440b      	add	r3, r1
 80009ca:	4619      	mov	r1, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80009d2:	bf00      	nop
 80009d4:	3714      	adds	r7, #20
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr
 80009dc:	080069f4 	.word	0x080069f4

080009e0 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	3b01      	subs	r3, #1
 80009f0:	4a0b      	ldr	r2, [pc, #44]	@ (8000a20 <LL_DMA_SetMemorySize+0x40>)
 80009f2:	5cd3      	ldrb	r3, [r2, r3]
 80009f4:	461a      	mov	r2, r3
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	4413      	add	r3, r2
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	4906      	ldr	r1, [pc, #24]	@ (8000a20 <LL_DMA_SetMemorySize+0x40>)
 8000a06:	5ccb      	ldrb	r3, [r1, r3]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	440b      	add	r3, r1
 8000a0e:	4619      	mov	r1, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8000a16:	bf00      	nop
 8000a18:	3714      	adds	r7, #20
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr
 8000a20:	080069f4 	.word	0x080069f4

08000a24 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	4a0b      	ldr	r2, [pc, #44]	@ (8000a64 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000a36:	5cd3      	ldrb	r3, [r2, r3]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	4906      	ldr	r1, [pc, #24]	@ (8000a64 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000a4a:	5ccb      	ldrb	r3, [r1, r3]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	440b      	add	r3, r1
 8000a52:	4619      	mov	r1, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	600b      	str	r3, [r1, #0]
             Priority);
}
 8000a5a:	bf00      	nop
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr
 8000a64:	080069f4 	.word	0x080069f4

08000a68 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	601a      	str	r2, [r3, #0]
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr
	...

08000a88 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d01c      	beq.n	8000ad2 <LL_TIM_OC_DisableFast+0x4a>
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	2b04      	cmp	r3, #4
 8000a9c:	d017      	beq.n	8000ace <LL_TIM_OC_DisableFast+0x46>
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	2b10      	cmp	r3, #16
 8000aa2:	d012      	beq.n	8000aca <LL_TIM_OC_DisableFast+0x42>
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	2b40      	cmp	r3, #64	@ 0x40
 8000aa8:	d00d      	beq.n	8000ac6 <LL_TIM_OC_DisableFast+0x3e>
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ab0:	d007      	beq.n	8000ac2 <LL_TIM_OC_DisableFast+0x3a>
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ab8:	d101      	bne.n	8000abe <LL_TIM_OC_DisableFast+0x36>
 8000aba:	2305      	movs	r3, #5
 8000abc:	e00a      	b.n	8000ad4 <LL_TIM_OC_DisableFast+0x4c>
 8000abe:	2306      	movs	r3, #6
 8000ac0:	e008      	b.n	8000ad4 <LL_TIM_OC_DisableFast+0x4c>
 8000ac2:	2304      	movs	r3, #4
 8000ac4:	e006      	b.n	8000ad4 <LL_TIM_OC_DisableFast+0x4c>
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	e004      	b.n	8000ad4 <LL_TIM_OC_DisableFast+0x4c>
 8000aca:	2302      	movs	r3, #2
 8000acc:	e002      	b.n	8000ad4 <LL_TIM_OC_DisableFast+0x4c>
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e000      	b.n	8000ad4 <LL_TIM_OC_DisableFast+0x4c>
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	3318      	adds	r3, #24
 8000ada:	4619      	mov	r1, r3
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	4a0a      	ldr	r2, [pc, #40]	@ (8000b08 <LL_TIM_OC_DisableFast+0x80>)
 8000ae0:	5cd3      	ldrb	r3, [r2, r3]
 8000ae2:	440b      	add	r3, r1
 8000ae4:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
 8000aec:	4907      	ldr	r1, [pc, #28]	@ (8000b0c <LL_TIM_OC_DisableFast+0x84>)
 8000aee:	5ccb      	ldrb	r3, [r1, r3]
 8000af0:	4619      	mov	r1, r3
 8000af2:	2304      	movs	r3, #4
 8000af4:	408b      	lsls	r3, r1
 8000af6:	43db      	mvns	r3, r3
 8000af8:	401a      	ands	r2, r3
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	601a      	str	r2, [r3, #0]

}
 8000afe:	bf00      	nop
 8000b00:	3714      	adds	r7, #20
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	080069fc 	.word	0x080069fc
 8000b0c:	08006a04 	.word	0x08006a04

08000b10 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d01c      	beq.n	8000b5a <LL_TIM_OC_EnablePreload+0x4a>
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	2b04      	cmp	r3, #4
 8000b24:	d017      	beq.n	8000b56 <LL_TIM_OC_EnablePreload+0x46>
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	2b10      	cmp	r3, #16
 8000b2a:	d012      	beq.n	8000b52 <LL_TIM_OC_EnablePreload+0x42>
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	2b40      	cmp	r3, #64	@ 0x40
 8000b30:	d00d      	beq.n	8000b4e <LL_TIM_OC_EnablePreload+0x3e>
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b38:	d007      	beq.n	8000b4a <LL_TIM_OC_EnablePreload+0x3a>
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b40:	d101      	bne.n	8000b46 <LL_TIM_OC_EnablePreload+0x36>
 8000b42:	2305      	movs	r3, #5
 8000b44:	e00a      	b.n	8000b5c <LL_TIM_OC_EnablePreload+0x4c>
 8000b46:	2306      	movs	r3, #6
 8000b48:	e008      	b.n	8000b5c <LL_TIM_OC_EnablePreload+0x4c>
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	e006      	b.n	8000b5c <LL_TIM_OC_EnablePreload+0x4c>
 8000b4e:	2303      	movs	r3, #3
 8000b50:	e004      	b.n	8000b5c <LL_TIM_OC_EnablePreload+0x4c>
 8000b52:	2302      	movs	r3, #2
 8000b54:	e002      	b.n	8000b5c <LL_TIM_OC_EnablePreload+0x4c>
 8000b56:	2301      	movs	r3, #1
 8000b58:	e000      	b.n	8000b5c <LL_TIM_OC_EnablePreload+0x4c>
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	3318      	adds	r3, #24
 8000b62:	4619      	mov	r1, r3
 8000b64:	7bfb      	ldrb	r3, [r7, #15]
 8000b66:	4a0a      	ldr	r2, [pc, #40]	@ (8000b90 <LL_TIM_OC_EnablePreload+0x80>)
 8000b68:	5cd3      	ldrb	r3, [r2, r3]
 8000b6a:	440b      	add	r3, r1
 8000b6c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	7bfb      	ldrb	r3, [r7, #15]
 8000b74:	4907      	ldr	r1, [pc, #28]	@ (8000b94 <LL_TIM_OC_EnablePreload+0x84>)
 8000b76:	5ccb      	ldrb	r3, [r1, r3]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	2308      	movs	r3, #8
 8000b7c:	408b      	lsls	r3, r1
 8000b7e:	431a      	orrs	r2, r3
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	601a      	str	r2, [r3, #0]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	080069fc 	.word	0x080069fc
 8000b94:	08006a04 	.word	0x08006a04

08000b98 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000baa:	f023 0307 	bic.w	r3, r3, #7
 8000bae:	683a      	ldr	r2, [r7, #0]
 8000bb0:	431a      	orrs	r2, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr

08000bc0 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	431a      	orrs	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	605a      	str	r2, [r3, #4]
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr

08000be4 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr

08000c02 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	60da      	str	r2, [r3, #12]
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr

08000c20 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	691b      	ldr	r3, [r3, #16]
 8000c2c:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	695b      	ldr	r3, [r3, #20]
 8000c38:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	615a      	str	r2, [r3, #20]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr

08000c4a <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b083      	sub	sp, #12
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c5a:	2b40      	cmp	r3, #64	@ 0x40
 8000c5c:	bf0c      	ite	eq
 8000c5e:	2301      	moveq	r3, #1
 8000c60:	2300      	movne	r3, #0
 8000c62:	b2db      	uxtb	r3, r3
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr

08000c6e <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b083      	sub	sp, #12
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c7e:	2b80      	cmp	r3, #128	@ 0x80
 8000c80:	bf0c      	ite	eq
 8000c82:	2301      	moveq	r3, #1
 8000c84:	2300      	movne	r3, #0
 8000c86:	b2db      	uxtb	r3, r3
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr

08000c92 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000c92:	b480      	push	{r7}
 8000c94:	b089      	sub	sp, #36	@ 0x24
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	330c      	adds	r3, #12
 8000c9e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	e853 3f00 	ldrex	r3, [r3]
 8000ca6:	60bb      	str	r3, [r7, #8]
   return(result);
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	f043 0320 	orr.w	r3, r3, #32
 8000cae:	61fb      	str	r3, [r7, #28]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	330c      	adds	r3, #12
 8000cb4:	69fa      	ldr	r2, [r7, #28]
 8000cb6:	61ba      	str	r2, [r7, #24]
 8000cb8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000cba:	6979      	ldr	r1, [r7, #20]
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	e841 2300 	strex	r3, r2, [r1]
 8000cc2:	613b      	str	r3, [r7, #16]
   return(result);
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d1e7      	bne.n	8000c9a <LL_USART_EnableIT_RXNE+0x8>
}
 8000cca:	bf00      	nop
 8000ccc:	bf00      	nop
 8000cce:	3724      	adds	r7, #36	@ 0x24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr

08000cd6 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
 8000cde:	460b      	mov	r3, r1
 8000ce0:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000ce2:	78fa      	ldrb	r2, [r7, #3]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	605a      	str	r2, [r3, #4]
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr

08000cf2 <LL_GPIO_SetPinMode>:
{
 8000cf2:	b490      	push	{r4, r7}
 8000cf4:	b088      	sub	sp, #32
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	60f8      	str	r0, [r7, #12]
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	461a      	mov	r2, r3
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	0e1b      	lsrs	r3, r3, #24
 8000d06:	4413      	add	r3, r2
 8000d08:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000d0a:	6822      	ldr	r2, [r4, #0]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	fa93 f3a3 	rbit	r3, r3
 8000d16:	613b      	str	r3, [r7, #16]
  return result;
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	fab3 f383 	clz	r3, r3
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	210f      	movs	r1, #15
 8000d24:	fa01 f303 	lsl.w	r3, r1, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	fa93 f3a3 	rbit	r3, r3
 8000d36:	61bb      	str	r3, [r7, #24]
  return result;
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	fab3 f383 	clz	r3, r3
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	fa01 f303 	lsl.w	r3, r1, r3
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	6023      	str	r3, [r4, #0]
}
 8000d4c:	bf00      	nop
 8000d4e:	3720      	adds	r7, #32
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc90      	pop	{r4, r7}
 8000d54:	4770      	bx	lr

08000d56 <LL_GPIO_SetOutputPin>:
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
 8000d5e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	0a1b      	lsrs	r3, r3, #8
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	611a      	str	r2, [r3, #16]
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr

08000d74 <LL_GPIO_ResetOutputPin>:
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	0a1b      	lsrs	r3, r3, #8
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	615a      	str	r2, [r3, #20]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr
	...

08000d94 <LL_GPIO_AF_EnableRemap_USART2>:
  * @rmtoll MAPR          USART2_REMAP           LL_GPIO_AF_EnableRemap_USART2
  * @note  ENABLE: Remap     (CTS/PD3, RTS/PD4, TX/PD5, RX/PD6, CK/PD7)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_USART2(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_USART2_REMAP | AFIO_MAPR_SWJ_CFG);
 8000d98:	4b05      	ldr	r3, [pc, #20]	@ (8000db0 <LL_GPIO_AF_EnableRemap_USART2+0x1c>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	4a04      	ldr	r2, [pc, #16]	@ (8000db0 <LL_GPIO_AF_EnableRemap_USART2+0x1c>)
 8000d9e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000da2:	f043 0308 	orr.w	r3, r3, #8
 8000da6:	6053      	str	r3, [r2, #4]
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr
 8000db0:	40010000 	.word	0x40010000

08000db4 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000dbe:	4a13      	ldr	r2, [pc, #76]	@ (8000e0c <LL_GPIO_AF_SetEXTISource+0x58>)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	3302      	adds	r3, #2
 8000dc6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	0c1b      	lsrs	r3, r3, #16
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	ea02 0103 	and.w	r1, r2, r3
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	0c1b      	lsrs	r3, r3, #16
 8000dd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	fa93 f3a3 	rbit	r3, r3
 8000de0:	60bb      	str	r3, [r7, #8]
  return result;
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	fab3 f383 	clz	r3, r3
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	461a      	mov	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	fa03 f202 	lsl.w	r2, r3, r2
 8000df2:	4806      	ldr	r0, [pc, #24]	@ (8000e0c <LL_GPIO_AF_SetEXTISource+0x58>)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	3302      	adds	r3, #2
 8000dfc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	40010000 	.word	0x40010000

08000e10 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Погледни чата с г-н Стефанов, _write e блокираща функция

int _write(int file, char *ptr, int len) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	e011      	b.n	8000e46 <_write+0x36>
        while (!LL_USART_IsActiveFlag_TXE(USART2));  // Wait until TX buffer is empty
 8000e22:	bf00      	nop
 8000e24:	4810      	ldr	r0, [pc, #64]	@ (8000e68 <_write+0x58>)
 8000e26:	f7ff ff22 	bl	8000c6e <LL_USART_IsActiveFlag_TXE>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d0f9      	beq.n	8000e24 <_write+0x14>
        LL_USART_TransmitData8(USART2, ptr[i]);      // Send byte
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	4413      	add	r3, r2
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	480b      	ldr	r0, [pc, #44]	@ (8000e68 <_write+0x58>)
 8000e3c:	f7ff ff4b 	bl	8000cd6 <LL_USART_TransmitData8>
    for (int i = 0; i < len; i++) {
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	3301      	adds	r3, #1
 8000e44:	617b      	str	r3, [r7, #20]
 8000e46:	697a      	ldr	r2, [r7, #20]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	dbe9      	blt.n	8000e22 <_write+0x12>
    }

    while (!LL_USART_IsActiveFlag_TC(USART2));  // Wait for last transmission to complete
 8000e4e:	bf00      	nop
 8000e50:	4805      	ldr	r0, [pc, #20]	@ (8000e68 <_write+0x58>)
 8000e52:	f7ff fefa 	bl	8000c4a <LL_USART_IsActiveFlag_TC>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d0f9      	beq.n	8000e50 <_write+0x40>
    return len;
 8000e5c:	687b      	ldr	r3, [r7, #4]
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40004400 	.word	0x40004400

08000e6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e70:	f001 fe94 	bl	8002b9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e74:	f000 f844 	bl	8000f00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e78:	f000 fb2c 	bl	80014d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e7c:	f000 fb04 	bl	8001488 <MX_DMA_Init>
  MX_ADC1_Init();
 8000e80:	f000 f886 	bl	8000f90 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000e84:	f000 f9d8 	bl	8001238 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000e88:	f000 fa3e 	bl	8001308 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000e8c:	f000 fa94 	bl	80013b8 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000e90:	f000 f8e0 	bl	8001054 <MX_TIM1_Init>
  MX_TIM6_Init();
 8000e94:	f000 f99a 	bl	80011cc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // Enable UART Interupts
  LL_USART_EnableIT_RXNE(USART1);
 8000e98:	4813      	ldr	r0, [pc, #76]	@ (8000ee8 <main+0x7c>)
 8000e9a:	f7ff fefa 	bl	8000c92 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART3);
 8000e9e:	4813      	ldr	r0, [pc, #76]	@ (8000eec <main+0x80>)
 8000ea0:	f7ff fef7 	bl	8000c92 <LL_USART_EnableIT_RXNE>

  // Enable EXTI Fault GPIO Interrupts
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_12);
 8000ea4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000ea8:	f7ff fcdc 	bl	8000864 <LL_EXTI_EnableIT_0_31>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_13);
 8000eac:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000eb0:	f7ff fcd8 	bl	8000864 <LL_EXTI_EnableIT_0_31>

  SignalAnalyzer_Init();
 8000eb4:	f001 fc02 	bl	80026bc <SignalAnalyzer_Init>

  // Reset all Muxes
  LL_GPIO_SetOutputPin(RST_GPIO, RST_PIN);
 8000eb8:	490d      	ldr	r1, [pc, #52]	@ (8000ef0 <main+0x84>)
 8000eba:	480e      	ldr	r0, [pc, #56]	@ (8000ef4 <main+0x88>)
 8000ebc:	f7ff ff4b 	bl	8000d56 <LL_GPIO_SetOutputPin>
  LL_mDelay(20);
 8000ec0:	2014      	movs	r0, #20
 8000ec2:	f003 f91b 	bl	80040fc <LL_mDelay>
  LL_GPIO_ResetOutputPin(RST_GPIO, RST_PIN);
 8000ec6:	490a      	ldr	r1, [pc, #40]	@ (8000ef0 <main+0x84>)
 8000ec8:	480a      	ldr	r0, [pc, #40]	@ (8000ef4 <main+0x88>)
 8000eca:	f7ff ff53 	bl	8000d74 <LL_GPIO_ResetOutputPin>
  LL_mDelay(20);
 8000ece:	2014      	movs	r0, #20
 8000ed0:	f003 f914 	bl	80040fc <LL_mDelay>

  // Enable Protection
  LL_GPIO_SetOutputPin(PROTECTION_GPIO, PROTECTION_PIN);
 8000ed4:	4908      	ldr	r1, [pc, #32]	@ (8000ef8 <main+0x8c>)
 8000ed6:	4809      	ldr	r0, [pc, #36]	@ (8000efc <main+0x90>)
 8000ed8:	f7ff ff3d 	bl	8000d56 <LL_GPIO_SetOutputPin>
	  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		  sendADCData();
 8000edc:	f001 fc4e 	bl	800277c <sendADCData>
		  FAULT_CheckAndReport();  // Only sends UART if a fault was detected
 8000ee0:	f7ff f9d0 	bl	8000284 <FAULT_CheckAndReport>
		  sendADCData();
 8000ee4:	bf00      	nop
 8000ee6:	e7f9      	b.n	8000edc <main+0x70>
 8000ee8:	40013800 	.word	0x40013800
 8000eec:	40004800 	.word	0x40004800
 8000ef0:	04020002 	.word	0x04020002
 8000ef4:	40010c00 	.word	0x40010c00
 8000ef8:	04080008 	.word	0x04080008
 8000efc:	40011800 	.word	0x40011800

08000f00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000f04:	2002      	movs	r0, #2
 8000f06:	f7ff fc8d 	bl	8000824 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000f0a:	bf00      	nop
 8000f0c:	f7ff fc9e 	bl	800084c <LL_FLASH_GetLatency>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d1fa      	bne.n	8000f0c <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 8000f16:	f7ff fb7b 	bl	8000610 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000f1a:	bf00      	nop
 8000f1c:	f7ff fb86 	bl	800062c <LL_RCC_HSE_IsReady>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d1fa      	bne.n	8000f1c <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 8000f26:	f44f 11e0 	mov.w	r1, #1835008	@ 0x1c0000
 8000f2a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8000f2e:	f7ff fc1f 	bl	8000770 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000f32:	f7ff fbfd 	bl	8000730 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000f36:	bf00      	nop
 8000f38:	f7ff fc08 	bl	800074c <LL_RCC_PLL_IsReady>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d1fa      	bne.n	8000f38 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000f42:	2000      	movs	r0, #0
 8000f44:	f7ff fba4 	bl	8000690 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000f48:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000f4c:	f7ff fbb4 	bl	80006b8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000f50:	2000      	movs	r0, #0
 8000f52:	f7ff fbc5 	bl	80006e0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000f56:	2002      	movs	r0, #2
 8000f58:	f7ff fb7a 	bl	8000650 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000f5c:	bf00      	nop
 8000f5e:	f7ff fb8b 	bl	8000678 <LL_RCC_GetSysClkSource>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b08      	cmp	r3, #8
 8000f66:	d1fa      	bne.n	8000f5e <SystemClock_Config+0x5e>
  {

  }
  LL_SetSystemCoreClock(72000000);
 8000f68:	4808      	ldr	r0, [pc, #32]	@ (8000f8c <SystemClock_Config+0x8c>)
 8000f6a:	f003 f8eb 	bl	8004144 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000f6e:	200f      	movs	r0, #15
 8000f70:	f001 fe2a 	bl	8002bc8 <HAL_InitTick>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000f7a:	f000 fb7d 	bl	8001678 <Error_Handler>
  }
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_6);
 8000f7e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000f82:	f7ff fbc1 	bl	8000708 <LL_RCC_SetADCClockSource>
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	044aa200 	.word	0x044aa200

08000f90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08e      	sub	sp, #56	@ 0x38
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000f96:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000fa4:	f107 0318 	add.w	r3, r7, #24
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
 8000fc0:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8000fc2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fc6:	f7ff fc15 	bl	80007f4 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000fca:	2004      	movs	r0, #4
 8000fcc:	f7ff fc12 	bl	80007f4 <LL_APB2_GRP1_EnableClock>
  PA4   ------> ADC1_IN4
  PA5   ------> ADC1_IN5
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 8000fd0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fd4:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	4619      	mov	r1, r3
 8000fde:	481a      	ldr	r0, [pc, #104]	@ (8001048 <MX_ADC1_Init+0xb8>)
 8000fe0:	f002 facf 	bl	8003582 <LL_GPIO_Init>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000fec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4816      	ldr	r0, [pc, #88]	@ (800104c <MX_ADC1_Init+0xbc>)
 8000ff4:	f002 f890 	bl	8003118 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000ffc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001000:	4619      	mov	r1, r3
 8001002:	4812      	ldr	r0, [pc, #72]	@ (800104c <MX_ADC1_Init+0xbc>)
 8001004:	f002 f856 	bl	80030b4 <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001008:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
 800100c:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001012:	2300      	movs	r3, #0
 8001014:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8001016:	2302      	movs	r3, #2
 8001018:	627b      	str	r3, [r7, #36]	@ 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 800101a:	2300      	movs	r3, #0
 800101c:	62bb      	str	r3, [r7, #40]	@ 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800101e:	f107 0318 	add.w	r3, r7, #24
 8001022:	4619      	mov	r1, r3
 8001024:	4809      	ldr	r0, [pc, #36]	@ (800104c <MX_ADC1_Init+0xbc>)
 8001026:	f002 f89e 	bl	8003166 <LL_ADC_REG_Init>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 800102a:	4a09      	ldr	r2, [pc, #36]	@ (8001050 <MX_ADC1_Init+0xc0>)
 800102c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001030:	4806      	ldr	r0, [pc, #24]	@ (800104c <MX_ADC1_Init+0xbc>)
 8001032:	f7ff fa6d 	bl	8000510 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8001036:	2200      	movs	r2, #0
 8001038:	4905      	ldr	r1, [pc, #20]	@ (8001050 <MX_ADC1_Init+0xc0>)
 800103a:	4804      	ldr	r0, [pc, #16]	@ (800104c <MX_ADC1_Init+0xbc>)
 800103c:	f7ff fa9d 	bl	800057a <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001040:	bf00      	nop
 8001042:	3738      	adds	r7, #56	@ 0x38
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40010800 	.word	0x40010800
 800104c:	40012400 	.word	0x40012400
 8001050:	02300001 	.word	0x02300001

08001054 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b098      	sub	sp, #96	@ 0x60
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800105a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800106a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800106e:	2220      	movs	r2, #32
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f003 fba2 	bl	80047bc <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
 8001088:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108a:	463b      	mov	r3, r7
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8001098:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800109c:	f7ff fbaa 	bl	80007f4 <LL_APB2_GRP1_EnableClock>

  /* TIM1 DMA Init */

  /* TIM1_CH1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80010a0:	2210      	movs	r2, #16
 80010a2:	2102      	movs	r1, #2
 80010a4:	4845      	ldr	r0, [pc, #276]	@ (80011bc <MX_TIM1_Init+0x168>)
 80010a6:	f7ff fbef 	bl	8000888 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_VERYHIGH);
 80010aa:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80010ae:	2102      	movs	r1, #2
 80010b0:	4842      	ldr	r0, [pc, #264]	@ (80011bc <MX_TIM1_Init+0x168>)
 80010b2:	f7ff fcb7 	bl	8000a24 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2102      	movs	r1, #2
 80010ba:	4840      	ldr	r0, [pc, #256]	@ (80011bc <MX_TIM1_Init+0x168>)
 80010bc:	f7ff fc08 	bl	80008d0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2102      	movs	r1, #2
 80010c4:	483d      	ldr	r0, [pc, #244]	@ (80011bc <MX_TIM1_Init+0x168>)
 80010c6:	f7ff fc25 	bl	8000914 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 80010ca:	2280      	movs	r2, #128	@ 0x80
 80010cc:	2102      	movs	r1, #2
 80010ce:	483b      	ldr	r0, [pc, #236]	@ (80011bc <MX_TIM1_Init+0x168>)
 80010d0:	f7ff fc42 	bl	8000958 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_HALFWORD);
 80010d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010d8:	2102      	movs	r1, #2
 80010da:	4838      	ldr	r0, [pc, #224]	@ (80011bc <MX_TIM1_Init+0x168>)
 80010dc:	f7ff fc5e 	bl	800099c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_HALFWORD);
 80010e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010e4:	2102      	movs	r1, #2
 80010e6:	4835      	ldr	r0, [pc, #212]	@ (80011bc <MX_TIM1_Init+0x168>)
 80010e8:	f7ff fc7a 	bl	80009e0 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80010f2:	2300      	movs	r3, #0
 80010f4:	653b      	str	r3, [r7, #80]	@ 0x50
  TIM_InitStruct.Autoreload = 89;
 80010f6:	2359      	movs	r3, #89	@ 0x59
 80010f8:	657b      	str	r3, [r7, #84]	@ 0x54
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	65bb      	str	r3, [r7, #88]	@ 0x58
  TIM_InitStruct.RepetitionCounter = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	65fb      	str	r3, [r7, #92]	@ 0x5c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8001102:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001106:	4619      	mov	r1, r3
 8001108:	482d      	ldr	r0, [pc, #180]	@ (80011c0 <MX_TIM1_Init+0x16c>)
 800110a:	f002 fc79 	bl	8003a00 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 800110e:	482c      	ldr	r0, [pc, #176]	@ (80011c0 <MX_TIM1_Init+0x16c>)
 8001110:	f7ff fcaa 	bl	8000a68 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001114:	2100      	movs	r1, #0
 8001116:	482a      	ldr	r0, [pc, #168]	@ (80011c0 <MX_TIM1_Init+0x16c>)
 8001118:	f7ff fd3e 	bl	8000b98 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 800111c:	2101      	movs	r1, #1
 800111e:	4828      	ldr	r0, [pc, #160]	@ (80011c0 <MX_TIM1_Init+0x16c>)
 8001120:	f7ff fcf6 	bl	8000b10 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001124:	2360      	movs	r3, #96	@ 0x60
 8001126:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	633b      	str	r3, [r7, #48]	@ 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	637b      	str	r3, [r7, #52]	@ 0x34
  TIM_OC_InitStruct.CompareValue = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	63bb      	str	r3, [r7, #56]	@ 0x38
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001134:	2300      	movs	r3, #0
 8001136:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001138:	2300      	movs	r3, #0
 800113a:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001140:	2300      	movs	r3, #0
 8001142:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001144:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001148:	461a      	mov	r2, r3
 800114a:	2101      	movs	r1, #1
 800114c:	481c      	ldr	r0, [pc, #112]	@ (80011c0 <MX_TIM1_Init+0x16c>)
 800114e:	f002 fcbf 	bl	8003ad0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8001152:	2101      	movs	r1, #1
 8001154:	481a      	ldr	r0, [pc, #104]	@ (80011c0 <MX_TIM1_Init+0x16c>)
 8001156:	f7ff fc97 	bl	8000a88 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 800115a:	2100      	movs	r1, #0
 800115c:	4818      	ldr	r0, [pc, #96]	@ (80011c0 <MX_TIM1_Init+0x16c>)
 800115e:	f7ff fd2f 	bl	8000bc0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8001162:	4817      	ldr	r0, [pc, #92]	@ (80011c0 <MX_TIM1_Init+0x16c>)
 8001164:	f7ff fd3e 	bl	8000be4 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 800116c:	2300      	movs	r3, #0
 800116e:	61bb      	str	r3, [r7, #24]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.DeadTime = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	f887 3020 	strb.w	r3, [r7, #32]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	847b      	strh	r3, [r7, #34]	@ 0x22
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 800117e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001182:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	62bb      	str	r3, [r7, #40]	@ 0x28
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4619      	mov	r1, r3
 800118e:	480c      	ldr	r0, [pc, #48]	@ (80011c0 <MX_TIM1_Init+0x16c>)
 8001190:	f002 fcdf 	bl	8003b52 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001194:	2008      	movs	r0, #8
 8001196:	f7ff fb2d 	bl	80007f4 <LL_APB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PB13   ------> TIM1_CH1N
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 800119a:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <MX_TIM1_Init+0x170>)
 800119c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800119e:	2309      	movs	r3, #9
 80011a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80011a2:	2303      	movs	r3, #3
 80011a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011aa:	463b      	mov	r3, r7
 80011ac:	4619      	mov	r1, r3
 80011ae:	4806      	ldr	r0, [pc, #24]	@ (80011c8 <MX_TIM1_Init+0x174>)
 80011b0:	f002 f9e7 	bl	8003582 <LL_GPIO_Init>

}
 80011b4:	bf00      	nop
 80011b6:	3760      	adds	r7, #96	@ 0x60
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40020000 	.word	0x40020000
 80011c0:	40012c00 	.word	0x40012c00
 80011c4:	04200020 	.word	0x04200020
 80011c8:	40010c00 	.word	0x40010c00

080011cc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d2:	463b      	mov	r3, r7
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80011da:	4b15      	ldr	r3, [pc, #84]	@ (8001230 <MX_TIM6_Init+0x64>)
 80011dc:	4a15      	ldr	r2, [pc, #84]	@ (8001234 <MX_TIM6_Init+0x68>)
 80011de:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80011e0:	4b13      	ldr	r3, [pc, #76]	@ (8001230 <MX_TIM6_Init+0x64>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e6:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <MX_TIM6_Init+0x64>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80011ec:	4b10      	ldr	r3, [pc, #64]	@ (8001230 <MX_TIM6_Init+0x64>)
 80011ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011f2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <MX_TIM6_Init+0x64>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011fa:	480d      	ldr	r0, [pc, #52]	@ (8001230 <MX_TIM6_Init+0x64>)
 80011fc:	f001 fe09 	bl	8002e12 <HAL_TIM_Base_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001206:	f000 fa37 	bl	8001678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120a:	2300      	movs	r3, #0
 800120c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120e:	2300      	movs	r3, #0
 8001210:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001212:	463b      	mov	r3, r7
 8001214:	4619      	mov	r1, r3
 8001216:	4806      	ldr	r0, [pc, #24]	@ (8001230 <MX_TIM6_Init+0x64>)
 8001218:	f001 fec2 	bl	8002fa0 <HAL_TIMEx_MasterConfigSynchronization>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001222:	f000 fa29 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000d5c 	.word	0x20000d5c
 8001234:	40001000 	.word	0x40001000

08001238 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08c      	sub	sp, #48	@ 0x30
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]
 800124e:	615a      	str	r2, [r3, #20]
 8001250:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001252:	463b      	mov	r3, r7
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001260:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001264:	f7ff fac6 	bl	80007f4 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001268:	2004      	movs	r0, #4
 800126a:	f7ff fac3 	bl	80007f4 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800126e:	4b22      	ldr	r3, [pc, #136]	@ (80012f8 <MX_USART1_UART_Init+0xc0>)
 8001270:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001272:	2309      	movs	r3, #9
 8001274:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001276:	2303      	movs	r3, #3
 8001278:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127e:	463b      	mov	r3, r7
 8001280:	4619      	mov	r1, r3
 8001282:	481e      	ldr	r0, [pc, #120]	@ (80012fc <MX_USART1_UART_Init+0xc4>)
 8001284:	f002 f97d 	bl	8003582 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001288:	4b1d      	ldr	r3, [pc, #116]	@ (8001300 <MX_USART1_UART_Init+0xc8>)
 800128a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 800128c:	2304      	movs	r3, #4
 800128e:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001290:	463b      	mov	r3, r7
 8001292:	4619      	mov	r1, r3
 8001294:	4819      	ldr	r0, [pc, #100]	@ (80012fc <MX_USART1_UART_Init+0xc4>)
 8001296:	f002 f974 	bl	8003582 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800129a:	f7ff f8b3 	bl	8000404 <__NVIC_GetPriorityGrouping>
 800129e:	4603      	mov	r3, r0
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f901 	bl	80004ac <NVIC_EncodePriority>
 80012aa:	4603      	mov	r3, r0
 80012ac:	4619      	mov	r1, r3
 80012ae:	2025      	movs	r0, #37	@ 0x25
 80012b0:	f7ff f8d2 	bl	8000458 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80012b4:	2025      	movs	r0, #37	@ 0x25
 80012b6:	f7ff f8b3 	bl	8000420 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80012ba:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80012be:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80012cc:	230c      	movs	r3, #12
 80012ce:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	4809      	ldr	r0, [pc, #36]	@ (8001304 <MX_USART1_UART_Init+0xcc>)
 80012e0:	f002 fe9a 	bl	8004018 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80012e4:	4807      	ldr	r0, [pc, #28]	@ (8001304 <MX_USART1_UART_Init+0xcc>)
 80012e6:	f7ff fc9b 	bl	8000c20 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80012ea:	4806      	ldr	r0, [pc, #24]	@ (8001304 <MX_USART1_UART_Init+0xcc>)
 80012ec:	f7ff fc89 	bl	8000c02 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012f0:	bf00      	nop
 80012f2:	3730      	adds	r7, #48	@ 0x30
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	04020002 	.word	0x04020002
 80012fc:	40010800 	.word	0x40010800
 8001300:	04040004 	.word	0x04040004
 8001304:	40013800 	.word	0x40013800

08001308 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08c      	sub	sp, #48	@ 0x30
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
 800131c:	611a      	str	r2, [r3, #16]
 800131e:	615a      	str	r2, [r3, #20]
 8001320:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001322:	463b      	mov	r3, r7
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001330:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001334:	f7ff fa46 	bl	80007c4 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8001338:	2020      	movs	r0, #32
 800133a:	f7ff fa5b 	bl	80007f4 <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PD5   ------> USART2_TX
  PD6   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 800133e:	f242 0320 	movw	r3, #8224	@ 0x2020
 8001342:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001344:	2309      	movs	r3, #9
 8001346:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001348:	2303      	movs	r3, #3
 800134a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001350:	463b      	mov	r3, r7
 8001352:	4619      	mov	r1, r3
 8001354:	4816      	ldr	r0, [pc, #88]	@ (80013b0 <MX_USART2_UART_Init+0xa8>)
 8001356:	f002 f914 	bl	8003582 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800135a:	f244 0340 	movw	r3, #16448	@ 0x4040
 800135e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001360:	2304      	movs	r3, #4
 8001362:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001364:	463b      	mov	r3, r7
 8001366:	4619      	mov	r1, r3
 8001368:	4811      	ldr	r0, [pc, #68]	@ (80013b0 <MX_USART2_UART_Init+0xa8>)
 800136a:	f002 f90a 	bl	8003582 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_USART2();
 800136e:	f7ff fd11 	bl	8000d94 <LL_GPIO_AF_EnableRemap_USART2>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001372:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001376:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001378:	2300      	movs	r3, #0
 800137a:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001380:	2300      	movs	r3, #0
 8001382:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001384:	230c      	movs	r3, #12
 8001386:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001388:	2300      	movs	r3, #0
 800138a:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800138c:	2300      	movs	r3, #0
 800138e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	4619      	mov	r1, r3
 8001396:	4807      	ldr	r0, [pc, #28]	@ (80013b4 <MX_USART2_UART_Init+0xac>)
 8001398:	f002 fe3e 	bl	8004018 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800139c:	4805      	ldr	r0, [pc, #20]	@ (80013b4 <MX_USART2_UART_Init+0xac>)
 800139e:	f7ff fc3f 	bl	8000c20 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80013a2:	4804      	ldr	r0, [pc, #16]	@ (80013b4 <MX_USART2_UART_Init+0xac>)
 80013a4:	f7ff fc2d 	bl	8000c02 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	3730      	adds	r7, #48	@ 0x30
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40011400 	.word	0x40011400
 80013b4:	40004400 	.word	0x40004400

080013b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08c      	sub	sp, #48	@ 0x30
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
 80013cc:	611a      	str	r2, [r3, #16]
 80013ce:	615a      	str	r2, [r3, #20]
 80013d0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d2:	463b      	mov	r3, r7
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80013e0:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80013e4:	f7ff f9ee 	bl	80007c4 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80013e8:	2008      	movs	r0, #8
 80013ea:	f7ff fa03 	bl	80007f4 <LL_APB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80013ee:	4b22      	ldr	r3, [pc, #136]	@ (8001478 <MX_USART3_UART_Init+0xc0>)
 80013f0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013f2:	2309      	movs	r3, #9
 80013f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80013f6:	2303      	movs	r3, #3
 80013f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fe:	463b      	mov	r3, r7
 8001400:	4619      	mov	r1, r3
 8001402:	481e      	ldr	r0, [pc, #120]	@ (800147c <MX_USART3_UART_Init+0xc4>)
 8001404:	f002 f8bd 	bl	8003582 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8001408:	4b1d      	ldr	r3, [pc, #116]	@ (8001480 <MX_USART3_UART_Init+0xc8>)
 800140a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 800140c:	2304      	movs	r3, #4
 800140e:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001410:	463b      	mov	r3, r7
 8001412:	4619      	mov	r1, r3
 8001414:	4819      	ldr	r0, [pc, #100]	@ (800147c <MX_USART3_UART_Init+0xc4>)
 8001416:	f002 f8b4 	bl	8003582 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800141a:	f7fe fff3 	bl	8000404 <__NVIC_GetPriorityGrouping>
 800141e:	4603      	mov	r3, r0
 8001420:	2200      	movs	r2, #0
 8001422:	2100      	movs	r1, #0
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f841 	bl	80004ac <NVIC_EncodePriority>
 800142a:	4603      	mov	r3, r0
 800142c:	4619      	mov	r1, r3
 800142e:	2027      	movs	r0, #39	@ 0x27
 8001430:	f7ff f812 	bl	8000458 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8001434:	2027      	movs	r0, #39	@ 0x27
 8001436:	f7fe fff3 	bl	8000420 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800143a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800143e:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001440:	2300      	movs	r3, #0
 8001442:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001444:	2300      	movs	r3, #0
 8001446:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001448:	2300      	movs	r3, #0
 800144a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800144c:	230c      	movs	r3, #12
 800144e:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001450:	2300      	movs	r3, #0
 8001452:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001454:	2300      	movs	r3, #0
 8001456:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART3, &USART_InitStruct);
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	4619      	mov	r1, r3
 800145e:	4809      	ldr	r0, [pc, #36]	@ (8001484 <MX_USART3_UART_Init+0xcc>)
 8001460:	f002 fdda 	bl	8004018 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8001464:	4807      	ldr	r0, [pc, #28]	@ (8001484 <MX_USART3_UART_Init+0xcc>)
 8001466:	f7ff fbdb 	bl	8000c20 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 800146a:	4806      	ldr	r0, [pc, #24]	@ (8001484 <MX_USART3_UART_Init+0xcc>)
 800146c:	f7ff fbc9 	bl	8000c02 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001470:	bf00      	nop
 8001472:	3730      	adds	r7, #48	@ 0x30
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	04040004 	.word	0x04040004
 800147c:	40010c00 	.word	0x40010c00
 8001480:	04080008 	.word	0x04080008
 8001484:	40004800 	.word	0x40004800

08001488 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800148e:	4b10      	ldr	r3, [pc, #64]	@ (80014d0 <MX_DMA_Init+0x48>)
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	4a0f      	ldr	r2, [pc, #60]	@ (80014d0 <MX_DMA_Init+0x48>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6153      	str	r3, [r2, #20]
 800149a:	4b0d      	ldr	r3, [pc, #52]	@ (80014d0 <MX_DMA_Init+0x48>)
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80014a6:	f7fe ffad 	bl	8000404 <__NVIC_GetPriorityGrouping>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2200      	movs	r2, #0
 80014ae:	2100      	movs	r1, #0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7fe fffb 	bl	80004ac <NVIC_EncodePriority>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4619      	mov	r1, r3
 80014ba:	200c      	movs	r0, #12
 80014bc:	f7fe ffcc 	bl	8000458 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80014c0:	200c      	movs	r0, #12
 80014c2:	f7fe ffad 	bl	8000420 <__NVIC_EnableIRQ>

}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40021000 	.word	0x40021000

080014d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80014da:	f107 0318 	add.w	r3, r7, #24
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOE);
 80014f2:	2040      	movs	r0, #64	@ 0x40
 80014f4:	f7ff f97e 	bl	80007f4 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 80014f8:	2010      	movs	r0, #16
 80014fa:	f7ff f97b 	bl	80007f4 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80014fe:	2004      	movs	r0, #4
 8001500:	f7ff f978 	bl	80007f4 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001504:	2008      	movs	r0, #8
 8001506:	f7ff f975 	bl	80007f4 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 800150a:	2020      	movs	r0, #32
 800150c:	f7ff f972 	bl	80007f4 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5
 8001510:	494c      	ldr	r1, [pc, #304]	@ (8001644 <MX_GPIO_Init+0x170>)
 8001512:	484d      	ldr	r0, [pc, #308]	@ (8001648 <MX_GPIO_Init+0x174>)
 8001514:	f7ff fc2e 	bl	8000d74 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9
                          |LL_GPIO_PIN_11|LL_GPIO_PIN_0);

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2
 8001518:	494c      	ldr	r1, [pc, #304]	@ (800164c <MX_GPIO_Init+0x178>)
 800151a:	484d      	ldr	r0, [pc, #308]	@ (8001650 <MX_GPIO_Init+0x17c>)
 800151c:	f7ff fc2a 	bl	8000d74 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6
                          |LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_11);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_12
 8001520:	494c      	ldr	r1, [pc, #304]	@ (8001654 <MX_GPIO_Init+0x180>)
 8001522:	484d      	ldr	r0, [pc, #308]	@ (8001658 <MX_GPIO_Init+0x184>)
 8001524:	f7ff fc26 	bl	8000d74 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11
 8001528:	494c      	ldr	r1, [pc, #304]	@ (800165c <MX_GPIO_Init+0x188>)
 800152a:	484d      	ldr	r0, [pc, #308]	@ (8001660 <MX_GPIO_Init+0x18c>)
 800152c:	f7ff fc22 	bl	8000d74 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15
                          |LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_7);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5
 8001530:	4b44      	ldr	r3, [pc, #272]	@ (8001644 <MX_GPIO_Init+0x170>)
 8001532:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9
                          |LL_GPIO_PIN_11|LL_GPIO_PIN_0;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001534:	2301      	movs	r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001538:	2302      	movs	r3, #2
 800153a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	4619      	mov	r1, r3
 8001544:	4840      	ldr	r0, [pc, #256]	@ (8001648 <MX_GPIO_Init+0x174>)
 8001546:	f002 f81c 	bl	8003582 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2
 800154a:	4b40      	ldr	r3, [pc, #256]	@ (800164c <MX_GPIO_Init+0x178>)
 800154c:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6
                          |LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_11;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800154e:	2301      	movs	r3, #1
 8001550:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001552:	2302      	movs	r3, #2
 8001554:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	4619      	mov	r1, r3
 800155e:	483c      	ldr	r0, [pc, #240]	@ (8001650 <MX_GPIO_Init+0x17c>)
 8001560:	f002 f80f 	bl	8003582 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_12
 8001564:	4b3b      	ldr	r3, [pc, #236]	@ (8001654 <MX_GPIO_Init+0x180>)
 8001566:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8
                          |LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001568:	2301      	movs	r3, #1
 800156a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800156c:	2302      	movs	r3, #2
 800156e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	4619      	mov	r1, r3
 8001578:	4837      	ldr	r0, [pc, #220]	@ (8001658 <MX_GPIO_Init+0x184>)
 800157a:	f002 f802 	bl	8003582 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800157e:	4b39      	ldr	r3, [pc, #228]	@ (8001664 <MX_GPIO_Init+0x190>)
 8001580:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001582:	2304      	movs	r3, #4
 8001584:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	4619      	mov	r1, r3
 800158a:	482f      	ldr	r0, [pc, #188]	@ (8001648 <MX_GPIO_Init+0x174>)
 800158c:	f001 fff9 	bl	8003582 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11
 8001590:	4b32      	ldr	r3, [pc, #200]	@ (800165c <MX_GPIO_Init+0x188>)
 8001592:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15
                          |LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001594:	2301      	movs	r3, #1
 8001596:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001598:	2302      	movs	r3, #2
 800159a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	4619      	mov	r1, r3
 80015a4:	482e      	ldr	r0, [pc, #184]	@ (8001660 <MX_GPIO_Init+0x18c>)
 80015a6:	f001 ffec 	bl	8003582 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80015aa:	f240 2302 	movw	r3, #514	@ 0x202
 80015ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	4619      	mov	r1, r3
 80015b8:	4823      	ldr	r0, [pc, #140]	@ (8001648 <MX_GPIO_Init+0x174>)
 80015ba:	f001 ffe2 	bl	8003582 <LL_GPIO_Init>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTE, LL_GPIO_AF_EXTI_LINE12);
 80015be:	492a      	ldr	r1, [pc, #168]	@ (8001668 <MX_GPIO_Init+0x194>)
 80015c0:	2004      	movs	r0, #4
 80015c2:	f7ff fbf7 	bl	8000db4 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTE, LL_GPIO_AF_EXTI_LINE13);
 80015c6:	4929      	ldr	r1, [pc, #164]	@ (800166c <MX_GPIO_Init+0x198>)
 80015c8:	2004      	movs	r0, #4
 80015ca:	f7ff fbf3 	bl	8000db4 <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 80015ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015d2:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80015d4:	2301      	movs	r3, #1
 80015d6:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80015d8:	2300      	movs	r3, #0
 80015da:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80015dc:	2302      	movs	r3, #2
 80015de:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80015e0:	f107 0318 	add.w	r3, r7, #24
 80015e4:	4618      	mov	r0, r3
 80015e6:	f001 fe95 	bl	8003314 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80015ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015ee:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80015f0:	2301      	movs	r3, #1
 80015f2:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80015f4:	2300      	movs	r3, #0
 80015f6:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80015f8:	2302      	movs	r3, #2
 80015fa:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80015fc:	f107 0318 	add.w	r3, r7, #24
 8001600:	4618      	mov	r0, r3
 8001602:	f001 fe87 	bl	8003314 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinMode(GPIOE, LL_GPIO_PIN_12, LL_GPIO_MODE_FLOATING);
 8001606:	2204      	movs	r2, #4
 8001608:	4919      	ldr	r1, [pc, #100]	@ (8001670 <MX_GPIO_Init+0x19c>)
 800160a:	480f      	ldr	r0, [pc, #60]	@ (8001648 <MX_GPIO_Init+0x174>)
 800160c:	f7ff fb71 	bl	8000cf2 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOE, LL_GPIO_PIN_13, LL_GPIO_MODE_FLOATING);
 8001610:	2204      	movs	r2, #4
 8001612:	4918      	ldr	r1, [pc, #96]	@ (8001674 <MX_GPIO_Init+0x1a0>)
 8001614:	480c      	ldr	r0, [pc, #48]	@ (8001648 <MX_GPIO_Init+0x174>)
 8001616:	f7ff fb6c 	bl	8000cf2 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800161a:	f7fe fef3 	bl	8000404 <__NVIC_GetPriorityGrouping>
 800161e:	4603      	mov	r3, r0
 8001620:	2200      	movs	r2, #0
 8001622:	2100      	movs	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe ff41 	bl	80004ac <NVIC_EncodePriority>
 800162a:	4603      	mov	r3, r0
 800162c:	4619      	mov	r1, r3
 800162e:	2028      	movs	r0, #40	@ 0x28
 8001630:	f7fe ff12 	bl	8000458 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001634:	2028      	movs	r0, #40	@ 0x28
 8001636:	f7fe fef3 	bl	8000420 <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800163a:	bf00      	nop
 800163c:	3720      	adds	r7, #32
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	040bfdff 	.word	0x040bfdff
 8001648:	40011800 	.word	0x40011800
 800164c:	042bffff 	.word	0x042bffff
 8001650:	40011000 	.word	0x40011000
 8001654:	04d3ffff 	.word	0x04d3ffff
 8001658:	40010c00 	.word	0x40010c00
 800165c:	04ff9bff 	.word	0x04ff9bff
 8001660:	40011400 	.word	0x40011400
 8001664:	04c000c0 	.word	0x04c000c0
 8001668:	000f0003 	.word	0x000f0003
 800166c:	00f00003 	.word	0x00f00003
 8001670:	04100010 	.word	0x04100010
 8001674:	04200020 	.word	0x04200020

08001678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800167c:	b672      	cpsid	i
}
 800167e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <Error_Handler+0x8>

08001684 <LL_GPIO_SetOutputPin>:
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	0a1b      	lsrs	r3, r3, #8
 8001692:	b29a      	uxth	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	611a      	str	r2, [r3, #16]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr

080016a2 <LL_GPIO_ResetOutputPin>:
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	0a1b      	lsrs	r3, r3, #8
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	615a      	str	r2, [r3, #20]
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr

080016c0 <getPortName>:
    {GPIOE, LL_GPIO_PIN_7, &xPins32, &yPins32},  // CS_32 (PE7)
    {GPIOE, LL_GPIO_PIN_8, &xPins33, &yPins33},  // CS_33 (PE8)
    {GPIOE, LL_GPIO_PIN_9, &xPins34, &yPins34}   // CS_34 (PE9)
};

const char* getPortName(GPIO_TypeDef* port) {
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
    if (port == GPIOA) return "GPIOA";
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a11      	ldr	r2, [pc, #68]	@ (8001710 <getPortName+0x50>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d101      	bne.n	80016d4 <getPortName+0x14>
 80016d0:	4b10      	ldr	r3, [pc, #64]	@ (8001714 <getPortName+0x54>)
 80016d2:	e018      	b.n	8001706 <getPortName+0x46>
    if (port == GPIOB) return "GPIOB";
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a10      	ldr	r2, [pc, #64]	@ (8001718 <getPortName+0x58>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d101      	bne.n	80016e0 <getPortName+0x20>
 80016dc:	4b0f      	ldr	r3, [pc, #60]	@ (800171c <getPortName+0x5c>)
 80016de:	e012      	b.n	8001706 <getPortName+0x46>
    if (port == GPIOC) return "GPIOC";
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001720 <getPortName+0x60>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d101      	bne.n	80016ec <getPortName+0x2c>
 80016e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001724 <getPortName+0x64>)
 80016ea:	e00c      	b.n	8001706 <getPortName+0x46>
    if (port == GPIOD) return "GPIOD";
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001728 <getPortName+0x68>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d101      	bne.n	80016f8 <getPortName+0x38>
 80016f4:	4b0d      	ldr	r3, [pc, #52]	@ (800172c <getPortName+0x6c>)
 80016f6:	e006      	b.n	8001706 <getPortName+0x46>
    if (port == GPIOE) return "GPIOE";
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a0d      	ldr	r2, [pc, #52]	@ (8001730 <getPortName+0x70>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d101      	bne.n	8001704 <getPortName+0x44>
 8001700:	4b0c      	ldr	r3, [pc, #48]	@ (8001734 <getPortName+0x74>)
 8001702:	e000      	b.n	8001706 <getPortName+0x46>
    return "UNKNOWN";
 8001704:	4b0c      	ldr	r3, [pc, #48]	@ (8001738 <getPortName+0x78>)
}
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	40010800 	.word	0x40010800
 8001714:	080063b4 	.word	0x080063b4
 8001718:	40010c00 	.word	0x40010c00
 800171c:	080063bc 	.word	0x080063bc
 8001720:	40011000 	.word	0x40011000
 8001724:	080063c4 	.word	0x080063c4
 8001728:	40011400 	.word	0x40011400
 800172c:	080063cc 	.word	0x080063cc
 8001730:	40011800 	.word	0x40011800
 8001734:	080063d4 	.word	0x080063d4
 8001738:	080063dc 	.word	0x080063dc

0800173c <getPinName>:

const char* getPinName(uint32_t pin) {
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
    switch (pin) {
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a5a      	ldr	r2, [pc, #360]	@ (80018b0 <getPinName+0x174>)
 8001748:	4293      	cmp	r3, r2
 800174a:	f000 80a8 	beq.w	800189e <getPinName+0x162>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a57      	ldr	r2, [pc, #348]	@ (80018b0 <getPinName+0x174>)
 8001752:	4293      	cmp	r3, r2
 8001754:	f200 80a5 	bhi.w	80018a2 <getPinName+0x166>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a56      	ldr	r2, [pc, #344]	@ (80018b4 <getPinName+0x178>)
 800175c:	4293      	cmp	r3, r2
 800175e:	f000 809c 	beq.w	800189a <getPinName+0x15e>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a53      	ldr	r2, [pc, #332]	@ (80018b4 <getPinName+0x178>)
 8001766:	4293      	cmp	r3, r2
 8001768:	f200 809b 	bhi.w	80018a2 <getPinName+0x166>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a52      	ldr	r2, [pc, #328]	@ (80018b8 <getPinName+0x17c>)
 8001770:	4293      	cmp	r3, r2
 8001772:	f000 8090 	beq.w	8001896 <getPinName+0x15a>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a4f      	ldr	r2, [pc, #316]	@ (80018b8 <getPinName+0x17c>)
 800177a:	4293      	cmp	r3, r2
 800177c:	f200 8091 	bhi.w	80018a2 <getPinName+0x166>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a4e      	ldr	r2, [pc, #312]	@ (80018bc <getPinName+0x180>)
 8001784:	4293      	cmp	r3, r2
 8001786:	f000 8084 	beq.w	8001892 <getPinName+0x156>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a4b      	ldr	r2, [pc, #300]	@ (80018bc <getPinName+0x180>)
 800178e:	4293      	cmp	r3, r2
 8001790:	f200 8087 	bhi.w	80018a2 <getPinName+0x166>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a4a      	ldr	r2, [pc, #296]	@ (80018c0 <getPinName+0x184>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d078      	beq.n	800188e <getPinName+0x152>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a48      	ldr	r2, [pc, #288]	@ (80018c0 <getPinName+0x184>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d87e      	bhi.n	80018a2 <getPinName+0x166>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a47      	ldr	r2, [pc, #284]	@ (80018c4 <getPinName+0x188>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d06e      	beq.n	800188a <getPinName+0x14e>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a45      	ldr	r2, [pc, #276]	@ (80018c4 <getPinName+0x188>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d876      	bhi.n	80018a2 <getPinName+0x166>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a44      	ldr	r2, [pc, #272]	@ (80018c8 <getPinName+0x18c>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d064      	beq.n	8001886 <getPinName+0x14a>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a42      	ldr	r2, [pc, #264]	@ (80018c8 <getPinName+0x18c>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d86e      	bhi.n	80018a2 <getPinName+0x166>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a41      	ldr	r2, [pc, #260]	@ (80018cc <getPinName+0x190>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d05a      	beq.n	8001882 <getPinName+0x146>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a3f      	ldr	r2, [pc, #252]	@ (80018cc <getPinName+0x190>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d866      	bhi.n	80018a2 <getPinName+0x166>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f248 0280 	movw	r2, #32896	@ 0x8080
 80017da:	4293      	cmp	r3, r2
 80017dc:	d04f      	beq.n	800187e <getPinName+0x142>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f248 0280 	movw	r2, #32896	@ 0x8080
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d85c      	bhi.n	80018a2 <getPinName+0x166>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f244 0240 	movw	r2, #16448	@ 0x4040
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d043      	beq.n	800187a <getPinName+0x13e>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f244 0240 	movw	r2, #16448	@ 0x4040
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d852      	bhi.n	80018a2 <getPinName+0x166>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f242 0220 	movw	r2, #8224	@ 0x2020
 8001802:	4293      	cmp	r3, r2
 8001804:	d037      	beq.n	8001876 <getPinName+0x13a>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f242 0220 	movw	r2, #8224	@ 0x2020
 800180c:	4293      	cmp	r3, r2
 800180e:	d848      	bhi.n	80018a2 <getPinName+0x166>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f241 0210 	movw	r2, #4112	@ 0x1010
 8001816:	4293      	cmp	r3, r2
 8001818:	d02b      	beq.n	8001872 <getPinName+0x136>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f241 0210 	movw	r2, #4112	@ 0x1010
 8001820:	4293      	cmp	r3, r2
 8001822:	d83e      	bhi.n	80018a2 <getPinName+0x166>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f640 0208 	movw	r2, #2056	@ 0x808
 800182a:	4293      	cmp	r3, r2
 800182c:	d01f      	beq.n	800186e <getPinName+0x132>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f640 0208 	movw	r2, #2056	@ 0x808
 8001834:	4293      	cmp	r3, r2
 8001836:	d834      	bhi.n	80018a2 <getPinName+0x166>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f240 4204 	movw	r2, #1028	@ 0x404
 800183e:	4293      	cmp	r3, r2
 8001840:	d013      	beq.n	800186a <getPinName+0x12e>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f240 4204 	movw	r2, #1028	@ 0x404
 8001848:	4293      	cmp	r3, r2
 800184a:	d82a      	bhi.n	80018a2 <getPinName+0x166>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f240 1201 	movw	r2, #257	@ 0x101
 8001852:	4293      	cmp	r3, r2
 8001854:	d005      	beq.n	8001862 <getPinName+0x126>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f240 2202 	movw	r2, #514	@ 0x202
 800185c:	4293      	cmp	r3, r2
 800185e:	d002      	beq.n	8001866 <getPinName+0x12a>
 8001860:	e01f      	b.n	80018a2 <getPinName+0x166>
        case LL_GPIO_PIN_0:  return "Pin 0";
 8001862:	4b1b      	ldr	r3, [pc, #108]	@ (80018d0 <getPinName+0x194>)
 8001864:	e01e      	b.n	80018a4 <getPinName+0x168>
        case LL_GPIO_PIN_1:  return "Pin 1";
 8001866:	4b1b      	ldr	r3, [pc, #108]	@ (80018d4 <getPinName+0x198>)
 8001868:	e01c      	b.n	80018a4 <getPinName+0x168>
        case LL_GPIO_PIN_2:  return "Pin 2";
 800186a:	4b1b      	ldr	r3, [pc, #108]	@ (80018d8 <getPinName+0x19c>)
 800186c:	e01a      	b.n	80018a4 <getPinName+0x168>
        case LL_GPIO_PIN_3:  return "Pin 3";
 800186e:	4b1b      	ldr	r3, [pc, #108]	@ (80018dc <getPinName+0x1a0>)
 8001870:	e018      	b.n	80018a4 <getPinName+0x168>
        case LL_GPIO_PIN_4:  return "Pin 4";
 8001872:	4b1b      	ldr	r3, [pc, #108]	@ (80018e0 <getPinName+0x1a4>)
 8001874:	e016      	b.n	80018a4 <getPinName+0x168>
        case LL_GPIO_PIN_5:  return "Pin 5";
 8001876:	4b1b      	ldr	r3, [pc, #108]	@ (80018e4 <getPinName+0x1a8>)
 8001878:	e014      	b.n	80018a4 <getPinName+0x168>
        case LL_GPIO_PIN_6:  return "Pin 6";
 800187a:	4b1b      	ldr	r3, [pc, #108]	@ (80018e8 <getPinName+0x1ac>)
 800187c:	e012      	b.n	80018a4 <getPinName+0x168>
        case LL_GPIO_PIN_7:  return "Pin 7";
 800187e:	4b1b      	ldr	r3, [pc, #108]	@ (80018ec <getPinName+0x1b0>)
 8001880:	e010      	b.n	80018a4 <getPinName+0x168>
        case LL_GPIO_PIN_8:  return "Pin 8";
 8001882:	4b1b      	ldr	r3, [pc, #108]	@ (80018f0 <getPinName+0x1b4>)
 8001884:	e00e      	b.n	80018a4 <getPinName+0x168>
        case LL_GPIO_PIN_9:  return "Pin 9";
 8001886:	4b1b      	ldr	r3, [pc, #108]	@ (80018f4 <getPinName+0x1b8>)
 8001888:	e00c      	b.n	80018a4 <getPinName+0x168>
        case LL_GPIO_PIN_10: return "Pin 10";
 800188a:	4b1b      	ldr	r3, [pc, #108]	@ (80018f8 <getPinName+0x1bc>)
 800188c:	e00a      	b.n	80018a4 <getPinName+0x168>
        case LL_GPIO_PIN_11: return "Pin 11";
 800188e:	4b1b      	ldr	r3, [pc, #108]	@ (80018fc <getPinName+0x1c0>)
 8001890:	e008      	b.n	80018a4 <getPinName+0x168>
        case LL_GPIO_PIN_12: return "Pin 12";
 8001892:	4b1b      	ldr	r3, [pc, #108]	@ (8001900 <getPinName+0x1c4>)
 8001894:	e006      	b.n	80018a4 <getPinName+0x168>
        case LL_GPIO_PIN_13: return "Pin 13";
 8001896:	4b1b      	ldr	r3, [pc, #108]	@ (8001904 <getPinName+0x1c8>)
 8001898:	e004      	b.n	80018a4 <getPinName+0x168>
        case LL_GPIO_PIN_14: return "Pin 14";
 800189a:	4b1b      	ldr	r3, [pc, #108]	@ (8001908 <getPinName+0x1cc>)
 800189c:	e002      	b.n	80018a4 <getPinName+0x168>
        case LL_GPIO_PIN_15: return "Pin 15";
 800189e:	4b1b      	ldr	r3, [pc, #108]	@ (800190c <getPinName+0x1d0>)
 80018a0:	e000      	b.n	80018a4 <getPinName+0x168>
        default: return "Unknown Pin";
 80018a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001910 <getPinName+0x1d4>)
    }
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	04800080 	.word	0x04800080
 80018b4:	04400040 	.word	0x04400040
 80018b8:	04200020 	.word	0x04200020
 80018bc:	04100010 	.word	0x04100010
 80018c0:	04080008 	.word	0x04080008
 80018c4:	04040004 	.word	0x04040004
 80018c8:	04020002 	.word	0x04020002
 80018cc:	04010001 	.word	0x04010001
 80018d0:	080063e4 	.word	0x080063e4
 80018d4:	080063ec 	.word	0x080063ec
 80018d8:	080063f4 	.word	0x080063f4
 80018dc:	080063fc 	.word	0x080063fc
 80018e0:	08006404 	.word	0x08006404
 80018e4:	0800640c 	.word	0x0800640c
 80018e8:	08006414 	.word	0x08006414
 80018ec:	0800641c 	.word	0x0800641c
 80018f0:	08006424 	.word	0x08006424
 80018f4:	0800642c 	.word	0x0800642c
 80018f8:	08006434 	.word	0x08006434
 80018fc:	0800643c 	.word	0x0800643c
 8001900:	08006444 	.word	0x08006444
 8001904:	0800644c 	.word	0x0800644c
 8001908:	08006454 	.word	0x08006454
 800190c:	0800645c 	.word	0x0800645c
 8001910:	08006464 	.word	0x08006464

08001914 <setConnection>:


MainTrack mainTracks[32] = {0};
SignalAnalyzerTrack signalAnalyzerTracks[8] = {0};

void setConnection(int x, int y, MUX mux, uint8_t mode) {
 8001914:	b082      	sub	sp, #8
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	6039      	str	r1, [r7, #0]
 8001920:	f107 0110 	add.w	r1, r7, #16
 8001924:	e881 000c 	stmia.w	r1, {r2, r3}
    if (x < 0 || x > 15 || y < 0 || y > 7) {
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	f2c0 80bd 	blt.w	8001aaa <setConnection+0x196>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b0f      	cmp	r3, #15
 8001934:	f300 80b9 	bgt.w	8001aaa <setConnection+0x196>
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	f2c0 80b5 	blt.w	8001aaa <setConnection+0x196>
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	2b07      	cmp	r3, #7
 8001944:	f300 80b1 	bgt.w	8001aaa <setConnection+0x196>
    }

//    printMUXDetails(&mux);

    // Activate multiplexer using the struct for CS
    LL_GPIO_ResetOutputPin(mux.port, mux.pin);
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	4611      	mov	r1, r2
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fea7 	bl	80016a2 <LL_GPIO_ResetOutputPin>
    LL_mDelay(20);
 8001954:	2014      	movs	r0, #20
 8001956:	f002 fbd1 	bl	80040fc <LL_mDelay>
    LL_GPIO_SetOutputPin(mux.port, mux.pin);
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	4611      	mov	r1, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fe8f 	bl	8001684 <LL_GPIO_SetOutputPin>
    LL_mDelay(20);
 8001966:	2014      	movs	r0, #20
 8001968:	f002 fbc8 	bl	80040fc <LL_mDelay>

    // Set X address
    // Set X address
    (x & 0x01) ? LL_GPIO_SetOutputPin(AX_GPIO, AX0_PIN) : LL_GPIO_ResetOutputPin(AX_GPIO, AX0_PIN);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b00      	cmp	r3, #0
 8001974:	d005      	beq.n	8001982 <setConnection+0x6e>
 8001976:	f244 0140 	movw	r1, #16448	@ 0x4040
 800197a:	484f      	ldr	r0, [pc, #316]	@ (8001ab8 <setConnection+0x1a4>)
 800197c:	f7ff fe82 	bl	8001684 <LL_GPIO_SetOutputPin>
 8001980:	e004      	b.n	800198c <setConnection+0x78>
 8001982:	f244 0140 	movw	r1, #16448	@ 0x4040
 8001986:	484c      	ldr	r0, [pc, #304]	@ (8001ab8 <setConnection+0x1a4>)
 8001988:	f7ff fe8b 	bl	80016a2 <LL_GPIO_ResetOutputPin>
    (x & 0x02) ? LL_GPIO_SetOutputPin(AX_GPIO, AX1_PIN) : LL_GPIO_ResetOutputPin(AX_GPIO, AX1_PIN);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d005      	beq.n	80019a2 <setConnection+0x8e>
 8001996:	f241 0110 	movw	r1, #4112	@ 0x1010
 800199a:	4847      	ldr	r0, [pc, #284]	@ (8001ab8 <setConnection+0x1a4>)
 800199c:	f7ff fe72 	bl	8001684 <LL_GPIO_SetOutputPin>
 80019a0:	e004      	b.n	80019ac <setConnection+0x98>
 80019a2:	f241 0110 	movw	r1, #4112	@ 0x1010
 80019a6:	4844      	ldr	r0, [pc, #272]	@ (8001ab8 <setConnection+0x1a4>)
 80019a8:	f7ff fe7b 	bl	80016a2 <LL_GPIO_ResetOutputPin>
    (x & 0x04) ? LL_GPIO_SetOutputPin(AX_GPIO, AX2_PIN) : LL_GPIO_ResetOutputPin(AX_GPIO, AX2_PIN);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f003 0304 	and.w	r3, r3, #4
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d005      	beq.n	80019c2 <setConnection+0xae>
 80019b6:	f640 0108 	movw	r1, #2056	@ 0x808
 80019ba:	483f      	ldr	r0, [pc, #252]	@ (8001ab8 <setConnection+0x1a4>)
 80019bc:	f7ff fe62 	bl	8001684 <LL_GPIO_SetOutputPin>
 80019c0:	e004      	b.n	80019cc <setConnection+0xb8>
 80019c2:	f640 0108 	movw	r1, #2056	@ 0x808
 80019c6:	483c      	ldr	r0, [pc, #240]	@ (8001ab8 <setConnection+0x1a4>)
 80019c8:	f7ff fe6b 	bl	80016a2 <LL_GPIO_ResetOutputPin>
    (x & 0x08) ? LL_GPIO_SetOutputPin(AX_GPIO, AX3_PIN) : LL_GPIO_ResetOutputPin(AX_GPIO, AX3_PIN);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d005      	beq.n	80019e2 <setConnection+0xce>
 80019d6:	f242 0120 	movw	r1, #8224	@ 0x2020
 80019da:	4837      	ldr	r0, [pc, #220]	@ (8001ab8 <setConnection+0x1a4>)
 80019dc:	f7ff fe52 	bl	8001684 <LL_GPIO_SetOutputPin>
 80019e0:	e004      	b.n	80019ec <setConnection+0xd8>
 80019e2:	f242 0120 	movw	r1, #8224	@ 0x2020
 80019e6:	4834      	ldr	r0, [pc, #208]	@ (8001ab8 <setConnection+0x1a4>)
 80019e8:	f7ff fe5b 	bl	80016a2 <LL_GPIO_ResetOutputPin>

    // Set Y address
    (y & 0x01) ? LL_GPIO_SetOutputPin(AY_GPIO, AY0_PIN) : LL_GPIO_ResetOutputPin(AY_GPIO, AY0_PIN);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d005      	beq.n	8001a02 <setConnection+0xee>
 80019f6:	f240 1101 	movw	r1, #257	@ 0x101
 80019fa:	482f      	ldr	r0, [pc, #188]	@ (8001ab8 <setConnection+0x1a4>)
 80019fc:	f7ff fe42 	bl	8001684 <LL_GPIO_SetOutputPin>
 8001a00:	e004      	b.n	8001a0c <setConnection+0xf8>
 8001a02:	f240 1101 	movw	r1, #257	@ 0x101
 8001a06:	482c      	ldr	r0, [pc, #176]	@ (8001ab8 <setConnection+0x1a4>)
 8001a08:	f7ff fe4b 	bl	80016a2 <LL_GPIO_ResetOutputPin>
    (y & 0x02) ? LL_GPIO_SetOutputPin(AY_GPIO, AY1_PIN) : LL_GPIO_ResetOutputPin(AY_GPIO, AY1_PIN);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d005      	beq.n	8001a22 <setConnection+0x10e>
 8001a16:	f240 2102 	movw	r1, #514	@ 0x202
 8001a1a:	4827      	ldr	r0, [pc, #156]	@ (8001ab8 <setConnection+0x1a4>)
 8001a1c:	f7ff fe32 	bl	8001684 <LL_GPIO_SetOutputPin>
 8001a20:	e004      	b.n	8001a2c <setConnection+0x118>
 8001a22:	f240 2102 	movw	r1, #514	@ 0x202
 8001a26:	4824      	ldr	r0, [pc, #144]	@ (8001ab8 <setConnection+0x1a4>)
 8001a28:	f7ff fe3b 	bl	80016a2 <LL_GPIO_ResetOutputPin>
    (y & 0x04) ? LL_GPIO_SetOutputPin(AY_GPIO, AY2_PIN) : LL_GPIO_ResetOutputPin(AY_GPIO, AY2_PIN);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	f003 0304 	and.w	r3, r3, #4
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d005      	beq.n	8001a42 <setConnection+0x12e>
 8001a36:	f240 4104 	movw	r1, #1028	@ 0x404
 8001a3a:	481f      	ldr	r0, [pc, #124]	@ (8001ab8 <setConnection+0x1a4>)
 8001a3c:	f7ff fe22 	bl	8001684 <LL_GPIO_SetOutputPin>
 8001a40:	e004      	b.n	8001a4c <setConnection+0x138>
 8001a42:	f240 4104 	movw	r1, #1028	@ 0x404
 8001a46:	481c      	ldr	r0, [pc, #112]	@ (8001ab8 <setConnection+0x1a4>)
 8001a48:	f7ff fe2b 	bl	80016a2 <LL_GPIO_ResetOutputPin>


    // Set data pin
    mode ? LL_GPIO_SetOutputPin(DAT_GPIO, DAT_PIN) : LL_GPIO_ResetOutputPin(DAT_GPIO, DAT_PIN);
 8001a4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d005      	beq.n	8001a60 <setConnection+0x14c>
 8001a54:	f248 0180 	movw	r1, #32896	@ 0x8080
 8001a58:	4817      	ldr	r0, [pc, #92]	@ (8001ab8 <setConnection+0x1a4>)
 8001a5a:	f7ff fe13 	bl	8001684 <LL_GPIO_SetOutputPin>
 8001a5e:	e004      	b.n	8001a6a <setConnection+0x156>
 8001a60:	f248 0180 	movw	r1, #32896	@ 0x8080
 8001a64:	4814      	ldr	r0, [pc, #80]	@ (8001ab8 <setConnection+0x1a4>)
 8001a66:	f7ff fe1c 	bl	80016a2 <LL_GPIO_ResetOutputPin>

    // Strobe signal
    LL_mDelay(20);
 8001a6a:	2014      	movs	r0, #20
 8001a6c:	f002 fb46 	bl	80040fc <LL_mDelay>
	LL_GPIO_SetOutputPin(STB_GPIO, STB_PIN);
 8001a70:	4912      	ldr	r1, [pc, #72]	@ (8001abc <setConnection+0x1a8>)
 8001a72:	4811      	ldr	r0, [pc, #68]	@ (8001ab8 <setConnection+0x1a4>)
 8001a74:	f7ff fe06 	bl	8001684 <LL_GPIO_SetOutputPin>
	LL_mDelay(20);
 8001a78:	2014      	movs	r0, #20
 8001a7a:	f002 fb3f 	bl	80040fc <LL_mDelay>
	LL_GPIO_ResetOutputPin(STB_GPIO, STB_PIN);
 8001a7e:	490f      	ldr	r1, [pc, #60]	@ (8001abc <setConnection+0x1a8>)
 8001a80:	480d      	ldr	r0, [pc, #52]	@ (8001ab8 <setConnection+0x1a4>)
 8001a82:	f7ff fe0e 	bl	80016a2 <LL_GPIO_ResetOutputPin>

	LL_mDelay(20);
 8001a86:	2014      	movs	r0, #20
 8001a88:	f002 fb38 	bl	80040fc <LL_mDelay>

	LL_GPIO_ResetOutputPin(DAT_GPIO, DAT_PIN);
 8001a8c:	f248 0180 	movw	r1, #32896	@ 0x8080
 8001a90:	4809      	ldr	r0, [pc, #36]	@ (8001ab8 <setConnection+0x1a4>)
 8001a92:	f7ff fe06 	bl	80016a2 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(mux.port, mux.pin);
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fe00 	bl	80016a2 <LL_GPIO_ResetOutputPin>

	LL_mDelay(20);
 8001aa2:	2014      	movs	r0, #20
 8001aa4:	f002 fb2a 	bl	80040fc <LL_mDelay>
 8001aa8:	e000      	b.n	8001aac <setConnection+0x198>
        return;
 8001aaa:	bf00      	nop
}
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ab4:	b002      	add	sp, #8
 8001ab6:	4770      	bx	lr
 8001ab8:	40010c00 	.word	0x40010c00
 8001abc:	04010001 	.word	0x04010001

08001ac0 <routeBreadboard>:

void routeBreadboard(int breadboardPin1, int breadboardPin2, int net_id, MUX *muxes, size_t muxCount, uint8_t mode, RGB rgb) {
 8001ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ac2:	b0a7      	sub	sp, #156	@ 0x9c
 8001ac4:	af0c      	add	r7, sp, #48	@ 0x30
 8001ac6:	6278      	str	r0, [r7, #36]	@ 0x24
 8001ac8:	6239      	str	r1, [r7, #32]
 8001aca:	61fa      	str	r2, [r7, #28]
 8001acc:	61bb      	str	r3, [r7, #24]

    char pin1Name[6], pin2Name[6];
    snprintf(pin1Name, sizeof(pin1Name), "B_%d", breadboardPin1);
 8001ace:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad4:	4a9c      	ldr	r2, [pc, #624]	@ (8001d48 <routeBreadboard+0x288>)
 8001ad6:	2106      	movs	r1, #6
 8001ad8:	f002 fd38 	bl	800454c <sniprintf>
    snprintf(pin2Name, sizeof(pin2Name), "B_%d", breadboardPin2);
 8001adc:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001ae0:	6a3b      	ldr	r3, [r7, #32]
 8001ae2:	4a99      	ldr	r2, [pc, #612]	@ (8001d48 <routeBreadboard+0x288>)
 8001ae4:	2106      	movs	r1, #6
 8001ae6:	f002 fd31 	bl	800454c <sniprintf>


    printf("Routing %s to %s with net ID: %d\n", pin1Name, pin2Name, net_id);
 8001aea:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001aee:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	4895      	ldr	r0, [pc, #596]	@ (8001d4c <routeBreadboard+0x28c>)
 8001af6:	f002 fcb1 	bl	800445c <iprintf>
    fflush(stdout);
 8001afa:	4b95      	ldr	r3, [pc, #596]	@ (8001d50 <routeBreadboard+0x290>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f002 fbd5 	bl	80042b0 <fflush>

    int xIndex1 = -1, yIndex1 = -1;
 8001b06:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0a:	667b      	str	r3, [r7, #100]	@ 0x64
 8001b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b10:	663b      	str	r3, [r7, #96]	@ 0x60
    int xIndex2 = -1, yIndex2 = -1;
 8001b12:	f04f 33ff 	mov.w	r3, #4294967295
 8001b16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001b18:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1c:	65bb      	str	r3, [r7, #88]	@ 0x58
    MUX *mux1 = NULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	657b      	str	r3, [r7, #84]	@ 0x54
    MUX *mux2 = NULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	653b      	str	r3, [r7, #80]	@ 0x50
    MainTrack *selectedTrack = NULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	64fb      	str	r3, [r7, #76]	@ 0x4c
    int muxIndex = -1;
 8001b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // Find an available or existing main track for the given net ID
    for (int x = 0; x < 32; ++x) {
 8001b30:	2300      	movs	r3, #0
 8001b32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b34:	e02c      	b.n	8001b90 <routeBreadboard+0xd0>
        if (mainTracks[x].net_id == net_id) {
 8001b36:	4a87      	ldr	r2, [pc, #540]	@ (8001d54 <routeBreadboard+0x294>)
 8001b38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b3a:	011b      	lsls	r3, r3, #4
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3304      	adds	r3, #4
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	69fa      	ldr	r2, [r7, #28]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d105      	bne.n	8001b54 <routeBreadboard+0x94>
            selectedTrack = &mainTracks[x];  // Reuse existing track if net ID matches
 8001b48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b4a:	011b      	lsls	r3, r3, #4
 8001b4c:	4a81      	ldr	r2, [pc, #516]	@ (8001d54 <routeBreadboard+0x294>)
 8001b4e:	4413      	add	r3, r2
 8001b50:	64fb      	str	r3, [r7, #76]	@ 0x4c
            break;
 8001b52:	e020      	b.n	8001b96 <routeBreadboard+0xd6>
        } else if (!mainTracks[x].is_used) {
 8001b54:	4a7f      	ldr	r2, [pc, #508]	@ (8001d54 <routeBreadboard+0x294>)
 8001b56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b58:	011b      	lsls	r3, r3, #4
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3308      	adds	r3, #8
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d112      	bne.n	8001b8a <routeBreadboard+0xca>
            selectedTrack = &mainTracks[x];  // Assign new track if available
 8001b64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b66:	011b      	lsls	r3, r3, #4
 8001b68:	4a7a      	ldr	r2, [pc, #488]	@ (8001d54 <routeBreadboard+0x294>)
 8001b6a:	4413      	add	r3, r2
 8001b6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            selectedTrack->is_used = 1;
 8001b6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b70:	2201      	movs	r2, #1
 8001b72:	609a      	str	r2, [r3, #8]
            selectedTrack->net_id = net_id;
 8001b74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b76:	69fa      	ldr	r2, [r7, #28]
 8001b78:	605a      	str	r2, [r3, #4]
            selectedTrack->track_id = x; // Assign track ID here
 8001b7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001b7e:	601a      	str	r2, [r3, #0]
            printf("Selected Track id: %d\n", x);
 8001b80:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001b82:	4875      	ldr	r0, [pc, #468]	@ (8001d58 <routeBreadboard+0x298>)
 8001b84:	f002 fc6a 	bl	800445c <iprintf>
            break;
 8001b88:	e005      	b.n	8001b96 <routeBreadboard+0xd6>
    for (int x = 0; x < 32; ++x) {
 8001b8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b92:	2b1f      	cmp	r3, #31
 8001b94:	ddcf      	ble.n	8001b36 <routeBreadboard+0x76>
        }
    }

    if (!selectedTrack) {
 8001b96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d104      	bne.n	8001ba6 <routeBreadboard+0xe6>
        printf("Error: No available main track for net ID %d\n", net_id);
 8001b9c:	69f9      	ldr	r1, [r7, #28]
 8001b9e:	486f      	ldr	r0, [pc, #444]	@ (8001d5c <routeBreadboard+0x29c>)
 8001ba0:	f002 fc5c 	bl	800445c <iprintf>
 8001ba4:	e148      	b.n	8001e38 <routeBreadboard+0x378>
        return;
    }

    // Update connection counter based on mode
	if (mode == 1) {
 8001ba6:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d10d      	bne.n	8001bca <routeBreadboard+0x10a>
		selectedTrack->current_connections++; // Increment current connections
 8001bae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001bb6:	60da      	str	r2, [r3, #12]
		printf("Main Track %d incremented. Current connections: %d\n", selectedTrack->track_id, selectedTrack->current_connections);
 8001bb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001bba:	6819      	ldr	r1, [r3, #0]
 8001bbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4867      	ldr	r0, [pc, #412]	@ (8001d60 <routeBreadboard+0x2a0>)
 8001bc4:	f002 fc4a 	bl	800445c <iprintf>
 8001bc8:	e025      	b.n	8001c16 <routeBreadboard+0x156>
	} else if (mode == 0) {
 8001bca:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d121      	bne.n	8001c16 <routeBreadboard+0x156>
		selectedTrack->current_connections--; // Decrement current connections
 8001bd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	1e5a      	subs	r2, r3, #1
 8001bd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001bda:	60da      	str	r2, [r3, #12]
		if (selectedTrack->current_connections <= 0) { // If counter is 0, free track
 8001bdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	dc10      	bgt.n	8001c06 <routeBreadboard+0x146>
			printf("Main Track %d is now free\n", selectedTrack->track_id);
 8001be4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4619      	mov	r1, r3
 8001bea:	485e      	ldr	r0, [pc, #376]	@ (8001d64 <routeBreadboard+0x2a4>)
 8001bec:	f002 fc36 	bl	800445c <iprintf>
			selectedTrack->is_used = 0;
 8001bf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
			selectedTrack->net_id = -1;
 8001bf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bfc:	605a      	str	r2, [r3, #4]
			selectedTrack->current_connections = 0;
 8001bfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c00:	2200      	movs	r2, #0
 8001c02:	60da      	str	r2, [r3, #12]
 8001c04:	e007      	b.n	8001c16 <routeBreadboard+0x156>
		}else{
			printf("Main Track %d decremented, but still occupied. Current connections: %d\n", selectedTrack->track_id, selectedTrack->current_connections);
 8001c06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c08:	6819      	ldr	r1, [r3, #0]
 8001c0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	4855      	ldr	r0, [pc, #340]	@ (8001d68 <routeBreadboard+0x2a8>)
 8001c12:	f002 fc23 	bl	800445c <iprintf>

		}
	}

    muxIndex = (selectedTrack->track_id < 16) ? 0 : 1;
 8001c16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b0f      	cmp	r3, #15
 8001c1c:	bfcc      	ite	gt
 8001c1e:	2301      	movgt	r3, #1
 8001c20:	2300      	movle	r3, #0
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	63fb      	str	r3, [r7, #60]	@ 0x3c

        for (size_t i = muxIndex; i < muxCount; i += 2) {
 8001c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c28:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c2a:	e05b      	b.n	8001ce4 <routeBreadboard+0x224>
            for (int y = 0; y < 8; ++y) {
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8001c30:	e04c      	b.n	8001ccc <routeBreadboard+0x20c>
                if (strcmp((*muxes[i].yPins)[y], pin1Name) == 0 && mux1 == NULL) {
 8001c32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c34:	011b      	lsls	r3, r3, #4
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4413      	add	r3, r2
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c42:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001c46:	4611      	mov	r1, r2
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe faeb 	bl	8000224 <strcmp>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d113      	bne.n	8001c7c <routeBreadboard+0x1bc>
 8001c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d110      	bne.n	8001c7c <routeBreadboard+0x1bc>
                    xIndex1 = selectedTrack->track_id % 16;
 8001c5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	425a      	negs	r2, r3
 8001c60:	f003 030f 	and.w	r3, r3, #15
 8001c64:	f002 020f 	and.w	r2, r2, #15
 8001c68:	bf58      	it	pl
 8001c6a:	4253      	negpl	r3, r2
 8001c6c:	667b      	str	r3, [r7, #100]	@ 0x64
                    yIndex1 = y;
 8001c6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c70:	663b      	str	r3, [r7, #96]	@ 0x60
                    mux1 = &muxes[i];
 8001c72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c74:	011b      	lsls	r3, r3, #4
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4413      	add	r3, r2
 8001c7a:	657b      	str	r3, [r7, #84]	@ 0x54
                }
                if (strcmp((*muxes[i].yPins)[y], pin2Name) == 0 && mux2 == NULL) {
 8001c7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c7e:	011b      	lsls	r3, r3, #4
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4413      	add	r3, r2
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c8c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001c90:	4611      	mov	r1, r2
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fac6 	bl	8000224 <strcmp>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d113      	bne.n	8001cc6 <routeBreadboard+0x206>
 8001c9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d110      	bne.n	8001cc6 <routeBreadboard+0x206>
                    xIndex2 = selectedTrack->track_id % 16;
 8001ca4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	425a      	negs	r2, r3
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	f002 020f 	and.w	r2, r2, #15
 8001cb2:	bf58      	it	pl
 8001cb4:	4253      	negpl	r3, r2
 8001cb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    yIndex2 = y;
 8001cb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cba:	65bb      	str	r3, [r7, #88]	@ 0x58
                    mux2 = &muxes[i];
 8001cbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cbe:	011b      	lsls	r3, r3, #4
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	653b      	str	r3, [r7, #80]	@ 0x50
            for (int y = 0; y < 8; ++y) {
 8001cc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cc8:	3301      	adds	r3, #1
 8001cca:	643b      	str	r3, [r7, #64]	@ 0x40
 8001ccc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cce:	2b07      	cmp	r3, #7
 8001cd0:	ddaf      	ble.n	8001c32 <routeBreadboard+0x172>
                }
            }
            if (mux1 && mux2) break;
 8001cd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d002      	beq.n	8001cde <routeBreadboard+0x21e>
 8001cd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d108      	bne.n	8001cf0 <routeBreadboard+0x230>
        for (size_t i = muxIndex; i < muxCount; i += 2) {
 8001cde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ce4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001ce6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d39e      	bcc.n	8001c2c <routeBreadboard+0x16c>
 8001cee:	e000      	b.n	8001cf2 <routeBreadboard+0x232>
            if (mux1 && mux2) break;
 8001cf0:	bf00      	nop
        }

        if (mux1 && mux2) {
 8001cf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 8096 	beq.w	8001e26 <routeBreadboard+0x366>
 8001cfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 8092 	beq.w	8001e26 <routeBreadboard+0x366>
        	printf("%s (X:%d, Y:%d) at MUX[%d] CS: %s, Pin: %s, Main Track: %d\n"
 8001d02:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d002      	beq.n	8001d10 <routeBreadboard+0x250>
 8001d0a:	4b18      	ldr	r3, [pc, #96]	@ (8001d6c <routeBreadboard+0x2ac>)
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	e001      	b.n	8001d14 <routeBreadboard+0x254>
 8001d10:	4b17      	ldr	r3, [pc, #92]	@ (8001d70 <routeBreadboard+0x2b0>)
 8001d12:	617b      	str	r3, [r7, #20]
        			"%s (X:%d, Y:%d) at MUX[%d] CS: %s, Pin: %s, Main Track: %d\n\n",
        	                mode ? "Connecting" : "Disconnecting",
        	                xIndex1, yIndex1, mux1 - muxes + 1, getPortName(mux1->port), getPinName(mux1->pin), selectedTrack->track_id,
 8001d14:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	111b      	asrs	r3, r3, #4
        	printf("%s (X:%d, Y:%d) at MUX[%d] CS: %s, Pin: %s, Main Track: %d\n"
 8001d1c:	1c5c      	adds	r4, r3, #1
 8001d1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff fccc 	bl	80016c0 <getPortName>
 8001d28:	6138      	str	r0, [r7, #16]
 8001d2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fd04 	bl	800173c <getPinName>
 8001d34:	60f8      	str	r0, [r7, #12]
 8001d36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d38:	681d      	ldr	r5, [r3, #0]
 8001d3a:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d018      	beq.n	8001d74 <routeBreadboard+0x2b4>
 8001d42:	4e0a      	ldr	r6, [pc, #40]	@ (8001d6c <routeBreadboard+0x2ac>)
 8001d44:	e017      	b.n	8001d76 <routeBreadboard+0x2b6>
 8001d46:	bf00      	nop
 8001d48:	080064e8 	.word	0x080064e8
 8001d4c:	080064f0 	.word	0x080064f0
 8001d50:	20000cd8 	.word	0x20000cd8
 8001d54:	20000da4 	.word	0x20000da4
 8001d58:	08006514 	.word	0x08006514
 8001d5c:	0800652c 	.word	0x0800652c
 8001d60:	0800655c 	.word	0x0800655c
 8001d64:	08006590 	.word	0x08006590
 8001d68:	080065ac 	.word	0x080065ac
 8001d6c:	080065f4 	.word	0x080065f4
 8001d70:	08006600 	.word	0x08006600
 8001d74:	4e32      	ldr	r6, [pc, #200]	@ (8001e40 <routeBreadboard+0x380>)
							mode ? "Connecting" : "Disconnecting",
        	                xIndex2, yIndex2, mux2 - muxes + 1, getPortName(mux2->port), getPinName(mux2->pin), selectedTrack->track_id);
 8001d76:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	111b      	asrs	r3, r3, #4
        	printf("%s (X:%d, Y:%d) at MUX[%d] CS: %s, Pin: %s, Main Track: %d\n"
 8001d7e:	3301      	adds	r3, #1
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fc9a 	bl	80016c0 <getPortName>
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff fcd2 	bl	800173c <getPinName>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8001da0:	9209      	str	r2, [sp, #36]	@ 0x24
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	9208      	str	r2, [sp, #32]
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	9307      	str	r3, [sp, #28]
 8001daa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001dac:	9306      	str	r3, [sp, #24]
 8001dae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001db0:	9305      	str	r3, [sp, #20]
 8001db2:	9604      	str	r6, [sp, #16]
 8001db4:	9503      	str	r5, [sp, #12]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	9302      	str	r3, [sp, #8]
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	9301      	str	r3, [sp, #4]
 8001dbe:	9400      	str	r4, [sp, #0]
 8001dc0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001dc2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001dc4:	6979      	ldr	r1, [r7, #20]
 8001dc6:	481f      	ldr	r0, [pc, #124]	@ (8001e44 <routeBreadboard+0x384>)
 8001dc8:	f002 fb48 	bl	800445c <iprintf>
        	        fflush(stdout);
 8001dcc:	4b1e      	ldr	r3, [pc, #120]	@ (8001e48 <routeBreadboard+0x388>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f002 fa6c 	bl	80042b0 <fflush>
			fflush(stdout);
 8001dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e48 <routeBreadboard+0x388>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f002 fa66 	bl	80042b0 <fflush>


            setConnection(xIndex1, yIndex1, *mux1, mode);
 8001de4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001de6:	f897 2084 	ldrb.w	r2, [r7, #132]	@ 0x84
 8001dea:	9202      	str	r2, [sp, #8]
 8001dec:	466c      	mov	r4, sp
 8001dee:	f103 0208 	add.w	r2, r3, #8
 8001df2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001df6:	e884 0003 	stmia.w	r4, {r0, r1}
 8001dfa:	cb0c      	ldmia	r3, {r2, r3}
 8001dfc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001dfe:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8001e00:	f7ff fd88 	bl	8001914 <setConnection>
            setConnection(xIndex2, yIndex2, *mux2, mode);
 8001e04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e06:	f897 2084 	ldrb.w	r2, [r7, #132]	@ 0x84
 8001e0a:	9202      	str	r2, [sp, #8]
 8001e0c:	466c      	mov	r4, sp
 8001e0e:	f103 0208 	add.w	r2, r3, #8
 8001e12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e16:	e884 0003 	stmia.w	r4, {r0, r1}
 8001e1a:	cb0c      	ldmia	r3, {r2, r3}
 8001e1c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001e1e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001e20:	f7ff fd78 	bl	8001914 <setConnection>
 8001e24:	e008      	b.n	8001e38 <routeBreadboard+0x378>

// 			  Activate leds

        } else {
            printf("Error: Unable to route pins - No available MUX found!\n");
 8001e26:	4809      	ldr	r0, [pc, #36]	@ (8001e4c <routeBreadboard+0x38c>)
 8001e28:	f002 fb88 	bl	800453c <puts>
            fflush(stdout);
 8001e2c:	4b06      	ldr	r3, [pc, #24]	@ (8001e48 <routeBreadboard+0x388>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f002 fa3c 	bl	80042b0 <fflush>
        }
    }
 8001e38:	376c      	adds	r7, #108	@ 0x6c
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	08006600 	.word	0x08006600
 8001e44:	08006610 	.word	0x08006610
 8001e48:	20000cd8 	.word	0x20000cd8
 8001e4c:	08006688 	.word	0x08006688

08001e50 <routeSignalAnalyzer>:

void routeSignalAnalyzer(int net_id, MUX *muxes, uint8_t mode) {
 8001e50:	b590      	push	{r4, r7, lr}
 8001e52:	b097      	sub	sp, #92	@ 0x5c
 8001e54:	af04      	add	r7, sp, #16
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	71fb      	strb	r3, [r7, #7]
    MainTrack *selectedTrack = NULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	647b      	str	r3, [r7, #68]	@ 0x44
    int trackIndex = -1;
 8001e62:	f04f 33ff 	mov.w	r3, #4294967295
 8001e66:	627b      	str	r3, [r7, #36]	@ 0x24
    char trackName[10];  // Buffer for formatted string
    int xIndex = -1, yIndex = -1;
 8001e68:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8001e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
    MUX *mux = NULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Step 1: Find a main track that is used and has the matching net_id
    for (int i = 0; i < 32; i++) {
 8001e78:	2300      	movs	r3, #0
 8001e7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e7c:	e02b      	b.n	8001ed6 <routeSignalAnalyzer+0x86>
        if (mainTracks[i].is_used && mainTracks[i].net_id == net_id) {
 8001e7e:	4a8e      	ldr	r2, [pc, #568]	@ (80020b8 <routeSignalAnalyzer+0x268>)
 8001e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e82:	011b      	lsls	r3, r3, #4
 8001e84:	4413      	add	r3, r2
 8001e86:	3308      	adds	r3, #8
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d020      	beq.n	8001ed0 <routeSignalAnalyzer+0x80>
 8001e8e:	4a8a      	ldr	r2, [pc, #552]	@ (80020b8 <routeSignalAnalyzer+0x268>)
 8001e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e92:	011b      	lsls	r3, r3, #4
 8001e94:	4413      	add	r3, r2
 8001e96:	3304      	adds	r3, #4
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d117      	bne.n	8001ed0 <routeSignalAnalyzer+0x80>
            selectedTrack = &mainTracks[i];
 8001ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ea2:	011b      	lsls	r3, r3, #4
 8001ea4:	4a84      	ldr	r2, [pc, #528]	@ (80020b8 <routeSignalAnalyzer+0x268>)
 8001ea6:	4413      	add	r3, r2
 8001ea8:	647b      	str	r3, [r7, #68]	@ 0x44
            trackIndex = i;
 8001eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eac:	627b      	str	r3, [r7, #36]	@ 0x24
            snprintf(trackName, sizeof(trackName), "MT_%d", trackIndex + 1); // Convert to "MT_X"
 8001eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	f107 0010 	add.w	r0, r7, #16
 8001eb6:	4a81      	ldr	r2, [pc, #516]	@ (80020bc <routeSignalAnalyzer+0x26c>)
 8001eb8:	210a      	movs	r1, #10
 8001eba:	f002 fb47 	bl	800454c <sniprintf>
			printf("Found Main Track %d (Name: %s) for Net ID %d\n", selectedTrack->track_id, trackName, net_id);
 8001ebe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ec0:	6819      	ldr	r1, [r3, #0]
 8001ec2:	f107 0210 	add.w	r2, r7, #16
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	487d      	ldr	r0, [pc, #500]	@ (80020c0 <routeSignalAnalyzer+0x270>)
 8001eca:	f002 fac7 	bl	800445c <iprintf>
			break;
 8001ece:	e005      	b.n	8001edc <routeSignalAnalyzer+0x8c>
    for (int i = 0; i < 32; i++) {
 8001ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ed8:	2b1f      	cmp	r3, #31
 8001eda:	ddd0      	ble.n	8001e7e <routeSignalAnalyzer+0x2e>
        }
    }

    if (!selectedTrack) {
 8001edc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d104      	bne.n	8001eec <routeSignalAnalyzer+0x9c>
        printf("Error: No active Main Track found for Net ID %d\n", net_id);
 8001ee2:	68f9      	ldr	r1, [r7, #12]
 8001ee4:	4877      	ldr	r0, [pc, #476]	@ (80020c4 <routeSignalAnalyzer+0x274>)
 8001ee6:	f002 fab9 	bl	800445c <iprintf>
        return;
 8001eea:	e0e2      	b.n	80020b2 <routeSignalAnalyzer+0x262>
    }

    // Step 2: Check MUX 33 and 34
    MUX *mux33 = &muxes[32]; // MUX 33 (Array index 32)
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001ef2:	623b      	str	r3, [r7, #32]
    MUX *mux34 = &muxes[33]; // MUX 34 (Array index 33)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8001efa:	61fb      	str	r3, [r7, #28]

    // Step 3: Look for the track ID in X Pins of MUX 33 and 34

    for (int i = 0; i < 16; i++) {
 8001efc:	2300      	movs	r3, #0
 8001efe:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f00:	e028      	b.n	8001f54 <routeSignalAnalyzer+0x104>
        if (strcmp((*mux33->xPins)[i], trackName) == 0) {
 8001f02:	6a3b      	ldr	r3, [r7, #32]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f0c:	f107 0210 	add.w	r2, r7, #16
 8001f10:	4611      	mov	r1, r2
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7fe f986 	bl	8000224 <strcmp>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d104      	bne.n	8001f28 <routeSignalAnalyzer+0xd8>
            xIndex = i;
 8001f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f20:	643b      	str	r3, [r7, #64]	@ 0x40
            mux = mux33;
 8001f22:	6a3b      	ldr	r3, [r7, #32]
 8001f24:	63bb      	str	r3, [r7, #56]	@ 0x38
            break;
 8001f26:	e018      	b.n	8001f5a <routeSignalAnalyzer+0x10a>
        }
        if (strcmp((*mux34->xPins)[i], trackName) == 0) {
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f32:	f107 0210 	add.w	r2, r7, #16
 8001f36:	4611      	mov	r1, r2
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe f973 	bl	8000224 <strcmp>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d104      	bne.n	8001f4e <routeSignalAnalyzer+0xfe>
            xIndex = i;
 8001f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f46:	643b      	str	r3, [r7, #64]	@ 0x40
            mux = mux34;
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
            break;
 8001f4c:	e005      	b.n	8001f5a <routeSignalAnalyzer+0x10a>
    for (int i = 0; i < 16; i++) {
 8001f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f50:	3301      	adds	r3, #1
 8001f52:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f56:	2b0f      	cmp	r3, #15
 8001f58:	ddd3      	ble.n	8001f02 <routeSignalAnalyzer+0xb2>
        }
    }

    if (mode == 1) {  // Connecting
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d139      	bne.n	8001fd4 <routeSignalAnalyzer+0x184>
		for (int i = 0; i < 8; i++) {
 8001f60:	2300      	movs	r3, #0
 8001f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f64:	e032      	b.n	8001fcc <routeSignalAnalyzer+0x17c>
			if (!signalAnalyzerTracks[i].is_used) {
 8001f66:	4958      	ldr	r1, [pc, #352]	@ (80020c8 <routeSignalAnalyzer+0x278>)
 8001f68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	4413      	add	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	440b      	add	r3, r1
 8001f74:	3308      	adds	r3, #8
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d124      	bne.n	8001fc6 <routeSignalAnalyzer+0x176>
				yIndex = i;
 8001f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
				signalAnalyzerTracks[i].is_used = 1;
 8001f80:	4951      	ldr	r1, [pc, #324]	@ (80020c8 <routeSignalAnalyzer+0x278>)
 8001f82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f84:	4613      	mov	r3, r2
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	3308      	adds	r3, #8
 8001f90:	2201      	movs	r2, #1
 8001f92:	601a      	str	r2, [r3, #0]
				signalAnalyzerTracks[i].net_id = net_id;
 8001f94:	494c      	ldr	r1, [pc, #304]	@ (80020c8 <routeSignalAnalyzer+0x278>)
 8001f96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f98:	4613      	mov	r3, r2
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	3304      	adds	r3, #4
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	601a      	str	r2, [r3, #0]
				signalAnalyzerTracks[i].track_id = xIndex;
 8001fa8:	4947      	ldr	r1, [pc, #284]	@ (80020c8 <routeSignalAnalyzer+0x278>)
 8001faa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fac:	4613      	mov	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001fb8:	601a      	str	r2, [r3, #0]
				printf("Assigned Y Pin %d to Net ID %d\n", yIndex, net_id);
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001fbe:	4843      	ldr	r0, [pc, #268]	@ (80020cc <routeSignalAnalyzer+0x27c>)
 8001fc0:	f002 fa4c 	bl	800445c <iprintf>
				break;
 8001fc4:	e04d      	b.n	8002062 <routeSignalAnalyzer+0x212>
		for (int i = 0; i < 8; i++) {
 8001fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fc8:	3301      	adds	r3, #1
 8001fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fce:	2b07      	cmp	r3, #7
 8001fd0:	ddc9      	ble.n	8001f66 <routeSignalAnalyzer+0x116>
 8001fd2:	e046      	b.n	8002062 <routeSignalAnalyzer+0x212>
			}
		}
	} else {  // Disconnecting
		for (int i = 0; i < 8; i++) {
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fd8:	e040      	b.n	800205c <routeSignalAnalyzer+0x20c>
			if (signalAnalyzerTracks[i].is_used && signalAnalyzerTracks[i].net_id == net_id) {
 8001fda:	493b      	ldr	r1, [pc, #236]	@ (80020c8 <routeSignalAnalyzer+0x278>)
 8001fdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001fde:	4613      	mov	r3, r2
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4413      	add	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	3308      	adds	r3, #8
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d032      	beq.n	8002056 <routeSignalAnalyzer+0x206>
 8001ff0:	4935      	ldr	r1, [pc, #212]	@ (80020c8 <routeSignalAnalyzer+0x278>)
 8001ff2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	4413      	add	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	3304      	adds	r3, #4
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	429a      	cmp	r2, r3
 8002006:	d126      	bne.n	8002056 <routeSignalAnalyzer+0x206>
				yIndex = i;
 8002008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800200a:	63fb      	str	r3, [r7, #60]	@ 0x3c
				signalAnalyzerTracks[i].is_used = 0;
 800200c:	492e      	ldr	r1, [pc, #184]	@ (80020c8 <routeSignalAnalyzer+0x278>)
 800200e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002010:	4613      	mov	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	3308      	adds	r3, #8
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
				signalAnalyzerTracks[i].net_id = -1;
 8002020:	4929      	ldr	r1, [pc, #164]	@ (80020c8 <routeSignalAnalyzer+0x278>)
 8002022:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002024:	4613      	mov	r3, r2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4413      	add	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	3304      	adds	r3, #4
 8002030:	f04f 32ff 	mov.w	r2, #4294967295
 8002034:	601a      	str	r2, [r3, #0]
				signalAnalyzerTracks[i].track_id = -1;
 8002036:	4924      	ldr	r1, [pc, #144]	@ (80020c8 <routeSignalAnalyzer+0x278>)
 8002038:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800203a:	4613      	mov	r3, r2
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	4413      	add	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	440b      	add	r3, r1
 8002044:	f04f 32ff 	mov.w	r2, #4294967295
 8002048:	601a      	str	r2, [r3, #0]
				printf("Freed Y Pin %d for Net ID %d\n", yIndex, net_id);
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800204e:	4820      	ldr	r0, [pc, #128]	@ (80020d0 <routeSignalAnalyzer+0x280>)
 8002050:	f002 fa04 	bl	800445c <iprintf>
				break;
 8002054:	e005      	b.n	8002062 <routeSignalAnalyzer+0x212>
		for (int i = 0; i < 8; i++) {
 8002056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002058:	3301      	adds	r3, #1
 800205a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800205c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800205e:	2b07      	cmp	r3, #7
 8002060:	ddbb      	ble.n	8001fda <routeSignalAnalyzer+0x18a>
			}
		}
	}

	if (yIndex == -1) {
 8002062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002068:	d103      	bne.n	8002072 <routeSignalAnalyzer+0x222>
		printf("Error: No available Y Pin found for Signal Analyzer\n");
 800206a:	481a      	ldr	r0, [pc, #104]	@ (80020d4 <routeSignalAnalyzer+0x284>)
 800206c:	f002 fa66 	bl	800453c <puts>
		return;
 8002070:	e01f      	b.n	80020b2 <routeSignalAnalyzer+0x262>
	}

	printf("Connecting Signal Analyzer to MUX %d at (X: %d, Y: %d) for Net ID %d\n",
 8002072:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002074:	6a3b      	ldr	r3, [r7, #32]
 8002076:	429a      	cmp	r2, r3
 8002078:	d101      	bne.n	800207e <routeSignalAnalyzer+0x22e>
 800207a:	2121      	movs	r1, #33	@ 0x21
 800207c:	e000      	b.n	8002080 <routeSignalAnalyzer+0x230>
 800207e:	2122      	movs	r1, #34	@ 0x22
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002086:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002088:	4813      	ldr	r0, [pc, #76]	@ (80020d8 <routeSignalAnalyzer+0x288>)
 800208a:	f002 f9e7 	bl	800445c <iprintf>
		   (mux == mux33 ? 33 : 34), xIndex, yIndex, net_id);

	printf("\n");
 800208e:	200a      	movs	r0, #10
 8002090:	f002 f9f6 	bl	8004480 <putchar>

	// Step 5: Set the connection
	setConnection(xIndex, yIndex, *mux, mode);
 8002094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002096:	79fa      	ldrb	r2, [r7, #7]
 8002098:	9202      	str	r2, [sp, #8]
 800209a:	466c      	mov	r4, sp
 800209c:	f103 0208 	add.w	r2, r3, #8
 80020a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020a4:	e884 0003 	stmia.w	r4, {r0, r1}
 80020a8:	cb0c      	ldmia	r3, {r2, r3}
 80020aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80020ac:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80020ae:	f7ff fc31 	bl	8001914 <setConnection>
}
 80020b2:	374c      	adds	r7, #76	@ 0x4c
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd90      	pop	{r4, r7, pc}
 80020b8:	20000da4 	.word	0x20000da4
 80020bc:	080066c0 	.word	0x080066c0
 80020c0:	080066c8 	.word	0x080066c8
 80020c4:	080066f8 	.word	0x080066f8
 80020c8:	20000fa4 	.word	0x20000fa4
 80020cc:	0800672c 	.word	0x0800672c
 80020d0:	0800674c 	.word	0x0800674c
 80020d4:	0800676c 	.word	0x0800676c
 80020d8:	080067a0 	.word	0x080067a0

080020dc <clear>:

void clear() {
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
    printf("Clearing all main tracks and signal analyzer tracks...\n");
 80020e2:	4836      	ldr	r0, [pc, #216]	@ (80021bc <clear+0xe0>)
 80020e4:	f002 fa2a 	bl	800453c <puts>

    // Step 1: Clear all main tracks
    for (int i = 0; i < 32; i++) {
 80020e8:	2300      	movs	r3, #0
 80020ea:	607b      	str	r3, [r7, #4]
 80020ec:	e01f      	b.n	800212e <clear+0x52>
        mainTracks[i].is_used = 0;
 80020ee:	4a34      	ldr	r2, [pc, #208]	@ (80021c0 <clear+0xe4>)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	011b      	lsls	r3, r3, #4
 80020f4:	4413      	add	r3, r2
 80020f6:	3308      	adds	r3, #8
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
        mainTracks[i].net_id = -1;
 80020fc:	4a30      	ldr	r2, [pc, #192]	@ (80021c0 <clear+0xe4>)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	4413      	add	r3, r2
 8002104:	3304      	adds	r3, #4
 8002106:	f04f 32ff 	mov.w	r2, #4294967295
 800210a:	601a      	str	r2, [r3, #0]
        mainTracks[i].current_connections = 0;
 800210c:	4a2c      	ldr	r2, [pc, #176]	@ (80021c0 <clear+0xe4>)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	4413      	add	r3, r2
 8002114:	330c      	adds	r3, #12
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
        mainTracks[i].track_id = -1;
 800211a:	4a29      	ldr	r2, [pc, #164]	@ (80021c0 <clear+0xe4>)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	011b      	lsls	r3, r3, #4
 8002120:	4413      	add	r3, r2
 8002122:	f04f 32ff 	mov.w	r2, #4294967295
 8002126:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 32; i++) {
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3301      	adds	r3, #1
 800212c:	607b      	str	r3, [r7, #4]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b1f      	cmp	r3, #31
 8002132:	dddc      	ble.n	80020ee <clear+0x12>
    }

    printf("All main tracks cleared.\n");
 8002134:	4823      	ldr	r0, [pc, #140]	@ (80021c4 <clear+0xe8>)
 8002136:	f002 fa01 	bl	800453c <puts>

    // Step 2: Clear all signal analyzer tracks
    for (int i = 0; i < 8; i++) {
 800213a:	2300      	movs	r3, #0
 800213c:	603b      	str	r3, [r7, #0]
 800213e:	e021      	b.n	8002184 <clear+0xa8>
        signalAnalyzerTracks[i].is_used = 0;
 8002140:	4921      	ldr	r1, [pc, #132]	@ (80021c8 <clear+0xec>)
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	4613      	mov	r3, r2
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	4413      	add	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	3308      	adds	r3, #8
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
        signalAnalyzerTracks[i].net_id = -1;
 8002154:	491c      	ldr	r1, [pc, #112]	@ (80021c8 <clear+0xec>)
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	4613      	mov	r3, r2
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	4413      	add	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	3304      	adds	r3, #4
 8002164:	f04f 32ff 	mov.w	r2, #4294967295
 8002168:	601a      	str	r2, [r3, #0]
        signalAnalyzerTracks[i].track_id = -1;
 800216a:	4917      	ldr	r1, [pc, #92]	@ (80021c8 <clear+0xec>)
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	4613      	mov	r3, r2
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	4413      	add	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	440b      	add	r3, r1
 8002178:	f04f 32ff 	mov.w	r2, #4294967295
 800217c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	3301      	adds	r3, #1
 8002182:	603b      	str	r3, [r7, #0]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	2b07      	cmp	r3, #7
 8002188:	ddda      	ble.n	8002140 <clear+0x64>
    }

    printf("All signal analyzer tracks cleared.\n");
 800218a:	4810      	ldr	r0, [pc, #64]	@ (80021cc <clear+0xf0>)
 800218c:	f002 f9d6 	bl	800453c <puts>
//    }
//
//    printf("All multiplexer connections cleared.\n");

    // Step 4: Perform hardware reset using RST_GPIO
    LL_GPIO_SetOutputPin(RST_GPIO, RST_PIN);
 8002190:	490f      	ldr	r1, [pc, #60]	@ (80021d0 <clear+0xf4>)
 8002192:	4810      	ldr	r0, [pc, #64]	@ (80021d4 <clear+0xf8>)
 8002194:	f7ff fa76 	bl	8001684 <LL_GPIO_SetOutputPin>
    LL_mDelay(20);
 8002198:	2014      	movs	r0, #20
 800219a:	f001 ffaf 	bl	80040fc <LL_mDelay>
    LL_GPIO_ResetOutputPin(RST_GPIO, RST_PIN);
 800219e:	490c      	ldr	r1, [pc, #48]	@ (80021d0 <clear+0xf4>)
 80021a0:	480c      	ldr	r0, [pc, #48]	@ (80021d4 <clear+0xf8>)
 80021a2:	f7ff fa7e 	bl	80016a2 <LL_GPIO_ResetOutputPin>
    LL_mDelay(20);
 80021a6:	2014      	movs	r0, #20
 80021a8:	f001 ffa8 	bl	80040fc <LL_mDelay>

    printf("RST complete.\n\n");
 80021ac:	480a      	ldr	r0, [pc, #40]	@ (80021d8 <clear+0xfc>)
 80021ae:	f002 f9c5 	bl	800453c <puts>
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	080067e8 	.word	0x080067e8
 80021c0:	20000da4 	.word	0x20000da4
 80021c4:	08006820 	.word	0x08006820
 80021c8:	20000fa4 	.word	0x20000fa4
 80021cc:	0800683c 	.word	0x0800683c
 80021d0:	04020002 	.word	0x04020002
 80021d4:	40010c00 	.word	0x40010c00
 80021d8:	08006860 	.word	0x08006860

080021dc <processCommand>:

void processCommand(char *command) {
 80021dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021de:	b099      	sub	sp, #100	@ 0x64
 80021e0:	af06      	add	r7, sp, #24
 80021e2:	60f8      	str	r0, [r7, #12]

    if (strncmp(command, "RB", 2) == 0) {  // Check if it's a "ROUTE" command
 80021e4:	2202      	movs	r2, #2
 80021e6:	495a      	ldr	r1, [pc, #360]	@ (8002350 <processCommand+0x174>)
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f002 faef 	bl	80047cc <strncmp>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d159      	bne.n	80022a8 <processCommand+0xcc>
    	int pin1, pin2, net_id, mode, r, g, b;
        int parsed = sscanf(command, "RB %d %d %d %d %d %d %d",
 80021f4:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80021f8:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80021fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002200:	9304      	str	r3, [sp, #16]
 8002202:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002206:	9303      	str	r3, [sp, #12]
 8002208:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800220c:	9302      	str	r3, [sp, #8]
 800220e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002212:	9301      	str	r3, [sp, #4]
 8002214:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	460b      	mov	r3, r1
 800221c:	494d      	ldr	r1, [pc, #308]	@ (8002354 <processCommand+0x178>)
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f002 f9c8 	bl	80045b4 <siscanf>
 8002224:	6478      	str	r0, [r7, #68]	@ 0x44
                            &pin1, &pin2, &net_id, &mode, &r, &g, &b);
        if (parsed == 7) {  // Ensure all arguments were parsed
 8002226:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002228:	2b07      	cmp	r3, #7
 800222a:	d134      	bne.n	8002296 <processCommand+0xba>
            RGB color = {r, g, b};
 800222c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800222e:	61bb      	str	r3, [r7, #24]
 8002230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002232:	61fb      	str	r3, [r7, #28]
 8002234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002236:	623b      	str	r3, [r7, #32]
            printf("Calling routeBreadboard with: Pin1=%d, Pin2=%d, NetID=%d, Mode=%d, RGB(%d,%d,%d)\n",
 8002238:	6bfc      	ldr	r4, [r7, #60]	@ 0x3c
 800223a:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 800223c:	6b7e      	ldr	r6, [r7, #52]	@ 0x34
 800223e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002240:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002242:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002244:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002246:	9003      	str	r0, [sp, #12]
 8002248:	9102      	str	r1, [sp, #8]
 800224a:	9201      	str	r2, [sp, #4]
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	4633      	mov	r3, r6
 8002250:	462a      	mov	r2, r5
 8002252:	4621      	mov	r1, r4
 8002254:	4840      	ldr	r0, [pc, #256]	@ (8002358 <processCommand+0x17c>)
 8002256:	f002 f901 	bl	800445c <iprintf>
                   pin1, pin2, net_id, mode, r, g, b);
            fflush(stdout);
 800225a:	4b40      	ldr	r3, [pc, #256]	@ (800235c <processCommand+0x180>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	4618      	mov	r0, r3
 8002262:	f002 f825 	bl	80042b0 <fflush>

            routeBreadboard(pin1, pin2, net_id, muxes, sizeof(muxes) / sizeof(muxes[0]), mode, color);
 8002266:	6bfe      	ldr	r6, [r7, #60]	@ 0x3c
 8002268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800226a:	60bb      	str	r3, [r7, #8]
 800226c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002272:	b2dd      	uxtb	r5, r3
 8002274:	ac02      	add	r4, sp, #8
 8002276:	f107 0318 	add.w	r3, r7, #24
 800227a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800227e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002282:	9501      	str	r5, [sp, #4]
 8002284:	2322      	movs	r3, #34	@ 0x22
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	4b35      	ldr	r3, [pc, #212]	@ (8002360 <processCommand+0x184>)
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	68b9      	ldr	r1, [r7, #8]
 800228e:	4630      	mov	r0, r6
 8002290:	f7ff fc16 	bl	8001ac0 <routeBreadboard>
 8002294:	e008      	b.n	80022a8 <processCommand+0xcc>
        } else {
            printf("Error: Invalid RB command format!\n");
 8002296:	4833      	ldr	r0, [pc, #204]	@ (8002364 <processCommand+0x188>)
 8002298:	f002 f950 	bl	800453c <puts>
            fflush(stdout);
 800229c:	4b2f      	ldr	r3, [pc, #188]	@ (800235c <processCommand+0x180>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f002 f804 	bl	80042b0 <fflush>
        }
    }

    if (strncmp(command, "RS", 2) == 0) {
 80022a8:	2202      	movs	r2, #2
 80022aa:	492f      	ldr	r1, [pc, #188]	@ (8002368 <processCommand+0x18c>)
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f002 fa8d 	bl	80047cc <strncmp>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d128      	bne.n	800230a <processCommand+0x12e>
		int net_id, mode;
		int parsed = sscanf(command, "RS %d %d",
 80022b8:	f107 0310 	add.w	r3, r7, #16
 80022bc:	f107 0214 	add.w	r2, r7, #20
 80022c0:	492a      	ldr	r1, [pc, #168]	@ (800236c <processCommand+0x190>)
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f002 f976 	bl	80045b4 <siscanf>
 80022c8:	6438      	str	r0, [r7, #64]	@ 0x40
							&net_id, &mode);
		if (parsed == 2) {  // Ensure all arguments were parsed
 80022ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d113      	bne.n	80022f8 <processCommand+0x11c>
			printf("Calling routeSignalAnalyzer with: NetID=%d, Mode=%d\n",
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	4619      	mov	r1, r3
 80022d6:	4826      	ldr	r0, [pc, #152]	@ (8002370 <processCommand+0x194>)
 80022d8:	f002 f8c0 	bl	800445c <iprintf>
				   net_id, mode);
			fflush(stdout);
 80022dc:	4b1f      	ldr	r3, [pc, #124]	@ (800235c <processCommand+0x180>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f001 ffe4 	bl	80042b0 <fflush>

			routeSignalAnalyzer(net_id, muxes, mode);
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	491c      	ldr	r1, [pc, #112]	@ (8002360 <processCommand+0x184>)
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fdad 	bl	8001e50 <routeSignalAnalyzer>
 80022f6:	e008      	b.n	800230a <processCommand+0x12e>
		} else {
			printf("Error: Invalid RS command format!\n");
 80022f8:	481e      	ldr	r0, [pc, #120]	@ (8002374 <processCommand+0x198>)
 80022fa:	f002 f91f 	bl	800453c <puts>
			fflush(stdout);
 80022fe:	4b17      	ldr	r3, [pc, #92]	@ (800235c <processCommand+0x180>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	4618      	mov	r0, r3
 8002306:	f001 ffd3 	bl	80042b0 <fflush>
		}
	}

    if (strncmp(command, "CLR", 3) == 0) {
 800230a:	2203      	movs	r2, #3
 800230c:	491a      	ldr	r1, [pc, #104]	@ (8002378 <processCommand+0x19c>)
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f002 fa5c 	bl	80047cc <strncmp>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <processCommand+0x142>
		clear();
 800231a:	f7ff fedf 	bl	80020dc <clear>
	}

    if (strncmp(command, "EN 5V", 5) == 0) {
 800231e:	2205      	movs	r2, #5
 8002320:	4916      	ldr	r1, [pc, #88]	@ (800237c <processCommand+0x1a0>)
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f002 fa52 	bl	80047cc <strncmp>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <processCommand+0x156>
    	FAULT_5v_HandleMsg();
 800232e:	f7fe f815 	bl	800035c <FAULT_5v_HandleMsg>
	}

    if (strncmp(command, "EN 3V3", 6) == 0) {
 8002332:	2206      	movs	r2, #6
 8002334:	4912      	ldr	r1, [pc, #72]	@ (8002380 <processCommand+0x1a4>)
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f002 fa48 	bl	80047cc <strncmp>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <processCommand+0x16a>
    	FAULT_3v3_HandleMsg();
 8002342:	f7fe f835 	bl	80003b0 <FAULT_3v3_HandleMsg>
	}
}
 8002346:	bf00      	nop
 8002348:	374c      	adds	r7, #76	@ 0x4c
 800234a:	46bd      	mov	sp, r7
 800234c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800234e:	bf00      	nop
 8002350:	08006870 	.word	0x08006870
 8002354:	08006874 	.word	0x08006874
 8002358:	0800688c 	.word	0x0800688c
 800235c:	20000cd8 	.word	0x20000cd8
 8002360:	08006a0c 	.word	0x08006a0c
 8002364:	080068e0 	.word	0x080068e0
 8002368:	08006904 	.word	0x08006904
 800236c:	08006908 	.word	0x08006908
 8002370:	08006914 	.word	0x08006914
 8002374:	0800694c 	.word	0x0800694c
 8002378:	08006970 	.word	0x08006970
 800237c:	08006974 	.word	0x08006974
 8002380:	0800697c 	.word	0x0800697c

08002384 <LL_USART_Enable>:
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	60da      	str	r2, [r3, #12]
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr

080023a2 <LL_USART_IsEnabled>:
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023b6:	bf0c      	ite	eq
 80023b8:	2301      	moveq	r3, #1
 80023ba:	2300      	movne	r3, #0
 80023bc:	b2db      	uxtb	r3, r3
}
 80023be:	4618      	mov	r0, r3
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr

080023c8 <LL_USART_IsActiveFlag_TC>:
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023d8:	2b40      	cmp	r3, #64	@ 0x40
 80023da:	bf0c      	ite	eq
 80023dc:	2301      	moveq	r3, #1
 80023de:	2300      	movne	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <LL_USART_IsActiveFlag_TXE>:
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023fc:	2b80      	cmp	r3, #128	@ 0x80
 80023fe:	bf0c      	ite	eq
 8002400:	2301      	moveq	r3, #1
 8002402:	2300      	movne	r3, #0
 8002404:	b2db      	uxtb	r3, r3
}
 8002406:	4618      	mov	r0, r3
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr

08002410 <LL_USART_TransmitData8>:
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800241c:	78fa      	ldrb	r2, [r7, #3]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	605a      	str	r2, [r3, #4]
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <sendToUART>:

/**
  * @brief  Sends a string over UART.
  */
void sendToUART(USART_TypeDef *UARTx, const char *message)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
    uint16_t i = 0;
 8002436:	2300      	movs	r3, #0
 8002438:	81fb      	strh	r3, [r7, #14]

    if (!LL_USART_IsEnabled(UARTx))
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7ff ffb1 	bl	80023a2 <LL_USART_IsEnabled>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d115      	bne.n	8002472 <sendToUART+0x46>
        LL_USART_Enable(UARTx);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7ff ff9c 	bl	8002384 <LL_USART_Enable>

    while (message[i] != '\0')
 800244c:	e011      	b.n	8002472 <sendToUART+0x46>
    {
        while (!LL_USART_IsActiveFlag_TXE(UARTx));  // Wait for TX buffer empty
 800244e:	bf00      	nop
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff ffcb 	bl	80023ec <LL_USART_IsActiveFlag_TXE>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0f9      	beq.n	8002450 <sendToUART+0x24>
        LL_USART_TransmitData8(UARTx, (uint8_t)message[i]);
 800245c:	89fb      	ldrh	r3, [r7, #14]
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	4413      	add	r3, r2
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	4619      	mov	r1, r3
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff ffd2 	bl	8002410 <LL_USART_TransmitData8>
        i++;
 800246c:	89fb      	ldrh	r3, [r7, #14]
 800246e:	3301      	adds	r3, #1
 8002470:	81fb      	strh	r3, [r7, #14]
    while (message[i] != '\0')
 8002472:	89fb      	ldrh	r3, [r7, #14]
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	4413      	add	r3, r2
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1e7      	bne.n	800244e <sendToUART+0x22>
    }

    while (!LL_USART_IsActiveFlag_TC(UARTx));  // Wait for transmission complete
 800247e:	bf00      	nop
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff ffa1 	bl	80023c8 <LL_USART_IsActiveFlag_TC>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f9      	beq.n	8002480 <sendToUART+0x54>


}
 800248c:	bf00      	nop
 800248e:	bf00      	nop
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <UART_ProcessReceivedByte>:



void UART_ProcessReceivedByte(uint8_t byte, uint8_t uartNumber)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	460a      	mov	r2, r1
 80024a2:	71fb      	strb	r3, [r7, #7]
 80024a4:	4613      	mov	r3, r2
 80024a6:	71bb      	strb	r3, [r7, #6]
    static uint8_t rxBuffer[RX_BUFFER_SIZE];
    static uint8_t rxIndex = 0;

    if (rxIndex < (RX_BUFFER_SIZE - 1))
 80024a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002514 <UART_ProcessReceivedByte+0x7c>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b62      	cmp	r3, #98	@ 0x62
 80024ae:	d809      	bhi.n	80024c4 <UART_ProcessReceivedByte+0x2c>
    {
        rxBuffer[rxIndex++] = byte;
 80024b0:	4b18      	ldr	r3, [pc, #96]	@ (8002514 <UART_ProcessReceivedByte+0x7c>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	1c5a      	adds	r2, r3, #1
 80024b6:	b2d1      	uxtb	r1, r2
 80024b8:	4a16      	ldr	r2, [pc, #88]	@ (8002514 <UART_ProcessReceivedByte+0x7c>)
 80024ba:	7011      	strb	r1, [r2, #0]
 80024bc:	4619      	mov	r1, r3
 80024be:	4a16      	ldr	r2, [pc, #88]	@ (8002518 <UART_ProcessReceivedByte+0x80>)
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	5453      	strb	r3, [r2, r1]
    }

    if (byte == '\n' || byte == '\r')
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	2b0a      	cmp	r3, #10
 80024c8:	d002      	beq.n	80024d0 <UART_ProcessReceivedByte+0x38>
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	2b0d      	cmp	r3, #13
 80024ce:	d11c      	bne.n	800250a <UART_ProcessReceivedByte+0x72>
    {
        rxBuffer[rxIndex] = '\0';  // Null-terminate
 80024d0:	4b10      	ldr	r3, [pc, #64]	@ (8002514 <UART_ProcessReceivedByte+0x7c>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	4b10      	ldr	r3, [pc, #64]	@ (8002518 <UART_ProcessReceivedByte+0x80>)
 80024d8:	2100      	movs	r1, #0
 80024da:	5499      	strb	r1, [r3, r2]
        printf("Received from UART%d: %s\n", uartNumber, rxBuffer);
 80024dc:	79bb      	ldrb	r3, [r7, #6]
 80024de:	4a0e      	ldr	r2, [pc, #56]	@ (8002518 <UART_ProcessReceivedByte+0x80>)
 80024e0:	4619      	mov	r1, r3
 80024e2:	480e      	ldr	r0, [pc, #56]	@ (800251c <UART_ProcessReceivedByte+0x84>)
 80024e4:	f001 ffba 	bl	800445c <iprintf>
		fflush(stdout);
 80024e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002520 <UART_ProcessReceivedByte+0x88>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f001 fede 	bl	80042b0 <fflush>
        processCommand((char *)rxBuffer);  // Pass to processing function
 80024f4:	4808      	ldr	r0, [pc, #32]	@ (8002518 <UART_ProcessReceivedByte+0x80>)
 80024f6:	f7ff fe71 	bl	80021dc <processCommand>

        memset(rxBuffer, 0, RX_BUFFER_SIZE);
 80024fa:	2264      	movs	r2, #100	@ 0x64
 80024fc:	2100      	movs	r1, #0
 80024fe:	4806      	ldr	r0, [pc, #24]	@ (8002518 <UART_ProcessReceivedByte+0x80>)
 8002500:	f002 f95c 	bl	80047bc <memset>
        rxIndex = 0;
 8002504:	4b03      	ldr	r3, [pc, #12]	@ (8002514 <UART_ProcessReceivedByte+0x7c>)
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]
    }
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20001004 	.word	0x20001004
 8002518:	20001008 	.word	0x20001008
 800251c:	08006984 	.word	0x08006984
 8002520:	20000cd8 	.word	0x20000cd8

08002524 <LL_ADC_REG_SetSequencerRanks>:
{
 8002524:	b480      	push	{r7}
 8002526:	b089      	sub	sp, #36	@ 0x24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	332c      	adds	r3, #44	@ 0x2c
 8002534:	4619      	mov	r1, r3
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800253c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002540:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	fa92 f2a2 	rbit	r2, r2
 8002548:	617a      	str	r2, [r7, #20]
  return result;
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	fab2 f282 	clz	r2, r2
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	40d3      	lsrs	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	440b      	add	r3, r1
 8002558:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	f003 031f 	and.w	r3, r3, #31
 8002564:	211f      	movs	r1, #31
 8002566:	fa01 f303 	lsl.w	r3, r1, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	401a      	ands	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f003 011f 	and.w	r1, r3, #31
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	f003 031f 	and.w	r3, r3, #31
 800257a:	fa01 f303 	lsl.w	r3, r1, r3
 800257e:	431a      	orrs	r2, r3
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	601a      	str	r2, [r3, #0]
}
 8002584:	bf00      	nop
 8002586:	3724      	adds	r7, #36	@ 0x24
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr

0800258e <LL_ADC_REG_SetContinuousMode>:
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_CONT, Continuous);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f023 0202 	bic.w	r2, r3, #2
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	609a      	str	r2, [r3, #8]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr

080025b2 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f043 0201 	orr.w	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	609a      	str	r2, [r3, #8]
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr

080025d0 <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f043 0204 	orr.w	r2, r3, #4
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	609a      	str	r2, [r3, #8]
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr

080025ee <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR2      CAL            LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 0304 	and.w	r3, r3, #4
 80025fe:	2b04      	cmp	r3, #4
 8002600:	bf0c      	ite	eq
 8002602:	2301      	moveq	r3, #1
 8002604:	2300      	movne	r3, #0
 8002606:	b2db      	uxtb	r3, r3
}
 8002608:	4618      	mov	r0, r3
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr

08002612 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f443 02a0 	orr.w	r2, r3, #5242880	@ 0x500000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	609a      	str	r2, [r3, #8]
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr

08002630 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800263c:	b29b      	uxth	r3, r3
}
 800263e:	4618      	mov	r0, r3
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr

08002648 <LL_ADC_IsActiveFlag_EOS>:
  * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOS(ADC_TypeDef *ADCx)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 series, there is no flag ADC group regular           */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "EOC" is corresponding to flag "EOS"                 */
  /*       in other STM32 families).                                          */
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOS) == (LL_ADC_FLAG_EOS));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b02      	cmp	r3, #2
 800265a:	bf0c      	ite	eq
 800265c:	2301      	moveq	r3, #1
 800265e:	2300      	movne	r3, #0
 8002660:	b2db      	uxtb	r3, r3
}
 8002662:	4618      	mov	r0, r3
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr

0800266c <LL_ADC_ClearFlag_EOS>:
  * @rmtoll SR       EOC            LL_ADC_ClearFlag_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOS(ADC_TypeDef *ADCx)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 series, there is no flag ADC group regular           */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "EOC" is corresponding to flag "EOS"                 */
  /*       in other STM32 families).                                          */
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOS);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f06f 0202 	mvn.w	r2, #2
 800267a:	601a      	str	r2, [r3, #0]
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr

08002686 <LL_TIM_EnableCounter>:
{
 8002686:	b480      	push	{r7}
 8002688:	b083      	sub	sp, #12
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f043 0201 	orr.w	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	601a      	str	r2, [r3, #0]
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <LL_TIM_GetCounter>:
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr
	...

080026bc <SignalAnalyzer_Init>:

/**
  * @brief  Initializes the ADC and TIM6.
  */
void SignalAnalyzer_Init(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
    // Enable ADC
    LL_ADC_Enable(ADC1);
 80026c0:	480d      	ldr	r0, [pc, #52]	@ (80026f8 <SignalAnalyzer_Init+0x3c>)
 80026c2:	f7ff ff76 	bl	80025b2 <LL_ADC_Enable>
    LL_mDelay(1);
 80026c6:	2001      	movs	r0, #1
 80026c8:	f001 fd18 	bl	80040fc <LL_mDelay>

    // Calibrate ADC before use (optional but recommended)
    LL_ADC_StartCalibration(ADC1);
 80026cc:	480a      	ldr	r0, [pc, #40]	@ (80026f8 <SignalAnalyzer_Init+0x3c>)
 80026ce:	f7ff ff7f 	bl	80025d0 <LL_ADC_StartCalibration>
    while (LL_ADC_IsCalibrationOnGoing(ADC1));
 80026d2:	bf00      	nop
 80026d4:	4808      	ldr	r0, [pc, #32]	@ (80026f8 <SignalAnalyzer_Init+0x3c>)
 80026d6:	f7ff ff8a 	bl	80025ee <LL_ADC_IsCalibrationOnGoing>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1f9      	bne.n	80026d4 <SignalAnalyzer_Init+0x18>

    // Ensure ADC is set in continuous mode (if not set in CubeMX)
    LL_ADC_REG_SetContinuousMode(ADC1, LL_ADC_REG_CONV_CONTINUOUS);
 80026e0:	2102      	movs	r1, #2
 80026e2:	4805      	ldr	r0, [pc, #20]	@ (80026f8 <SignalAnalyzer_Init+0x3c>)
 80026e4:	f7ff ff53 	bl	800258e <LL_ADC_REG_SetContinuousMode>

    // Start ADC conversion
    LL_ADC_REG_StartConversionSWStart(ADC1);
 80026e8:	4803      	ldr	r0, [pc, #12]	@ (80026f8 <SignalAnalyzer_Init+0x3c>)
 80026ea:	f7ff ff92 	bl	8002612 <LL_ADC_REG_StartConversionSWStart>

    // Enable TIM6 for timestamping
    LL_TIM_EnableCounter(TIM6);
 80026ee:	4803      	ldr	r0, [pc, #12]	@ (80026fc <SignalAnalyzer_Init+0x40>)
 80026f0:	f7ff ffc9 	bl	8002686 <LL_TIM_EnableCounter>
}
 80026f4:	bf00      	nop
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40012400 	.word	0x40012400
 80026fc:	40001000 	.word	0x40001000

08002700 <readADC>:

/**
  * @brief  Reads ADC values from channels 0-7.
  */
void readADC(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
    for (int i = 0; i < 8; i++)
 8002706:	2300      	movs	r3, #0
 8002708:	607b      	str	r3, [r7, #4]
 800270a:	e021      	b.n	8002750 <readADC+0x50>
    {
        // Set the channel manually (if not in scan mode)
        LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0 + i);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8002712:	461a      	mov	r2, r3
 8002714:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002718:	4811      	ldr	r0, [pc, #68]	@ (8002760 <readADC+0x60>)
 800271a:	f7ff ff03 	bl	8002524 <LL_ADC_REG_SetSequencerRanks>

        // Start ADC conversion manually (if continuous mode is not enabled)
        LL_ADC_REG_StartConversionSWStart(ADC1);
 800271e:	4810      	ldr	r0, [pc, #64]	@ (8002760 <readADC+0x60>)
 8002720:	f7ff ff77 	bl	8002612 <LL_ADC_REG_StartConversionSWStart>

        // Wait until conversion is complete
        while (!LL_ADC_IsActiveFlag_EOS(ADC1));
 8002724:	bf00      	nop
 8002726:	480e      	ldr	r0, [pc, #56]	@ (8002760 <readADC+0x60>)
 8002728:	f7ff ff8e 	bl	8002648 <LL_ADC_IsActiveFlag_EOS>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f9      	beq.n	8002726 <readADC+0x26>

        // Read ADC value
        adcValues[i] = LL_ADC_REG_ReadConversionData12(ADC1);
 8002732:	480b      	ldr	r0, [pc, #44]	@ (8002760 <readADC+0x60>)
 8002734:	f7ff ff7c 	bl	8002630 <LL_ADC_REG_ReadConversionData12>
 8002738:	4603      	mov	r3, r0
 800273a:	4619      	mov	r1, r3
 800273c:	4a09      	ldr	r2, [pc, #36]	@ (8002764 <readADC+0x64>)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//        printf("ADCVal[%d]: %d\n", i+1, adcValues[i]);

        // Clear the End of Conversion flag
        LL_ADC_ClearFlag_EOS(ADC1);
 8002744:	4806      	ldr	r0, [pc, #24]	@ (8002760 <readADC+0x60>)
 8002746:	f7ff ff91 	bl	800266c <LL_ADC_ClearFlag_EOS>
    for (int i = 0; i < 8; i++)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3301      	adds	r3, #1
 800274e:	607b      	str	r3, [r7, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b07      	cmp	r3, #7
 8002754:	ddda      	ble.n	800270c <readADC+0xc>
    }
//    printf("\n\n");

}
 8002756:	bf00      	nop
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40012400 	.word	0x40012400
 8002764:	2000106c 	.word	0x2000106c

08002768 <getTimestamp>:

/**
  * @brief  Gets current timestamp from TIM6.
//  */
uint32_t getTimestamp(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
    return LL_TIM_GetCounter(TIM6);
 800276c:	4802      	ldr	r0, [pc, #8]	@ (8002778 <getTimestamp+0x10>)
 800276e:	f7ff ff99 	bl	80026a4 <LL_TIM_GetCounter>
 8002772:	4603      	mov	r3, r0
}
 8002774:	4618      	mov	r0, r3
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40001000 	.word	0x40001000

0800277c <sendADCData>:

/**
  * @brief  Sends ADC data via UART.
  */
void sendADCData(void)
{
 800277c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800277e:	b0a5      	sub	sp, #148	@ 0x94
 8002780:	af08      	add	r7, sp, #32
    readADC();
 8002782:	f7ff ffbd 	bl	8002700 <readADC>
    uint32_t timestamp = getTimestamp();
 8002786:	f7ff ffef 	bl	8002768 <getTimestamp>
 800278a:	66f8      	str	r0, [r7, #108]	@ 0x6c
    char buffer[100];

    snprintf(buffer, sizeof(buffer), "T:%lu ADC0:%u ADC1:%u ADC2:%u ADC3:%u ADC4:%u ADC5:%u ADC6:%u ADC7:%u\n",
             timestamp, adcValues[0], adcValues[1], adcValues[2], adcValues[3],
 800278c:	4b1c      	ldr	r3, [pc, #112]	@ (8002800 <sendADCData+0x84>)
 800278e:	881b      	ldrh	r3, [r3, #0]
    snprintf(buffer, sizeof(buffer), "T:%lu ADC0:%u ADC1:%u ADC2:%u ADC3:%u ADC4:%u ADC5:%u ADC6:%u ADC7:%u\n",
 8002790:	461a      	mov	r2, r3
             timestamp, adcValues[0], adcValues[1], adcValues[2], adcValues[3],
 8002792:	4b1b      	ldr	r3, [pc, #108]	@ (8002800 <sendADCData+0x84>)
 8002794:	885b      	ldrh	r3, [r3, #2]
    snprintf(buffer, sizeof(buffer), "T:%lu ADC0:%u ADC1:%u ADC2:%u ADC3:%u ADC4:%u ADC5:%u ADC6:%u ADC7:%u\n",
 8002796:	4619      	mov	r1, r3
             timestamp, adcValues[0], adcValues[1], adcValues[2], adcValues[3],
 8002798:	4b19      	ldr	r3, [pc, #100]	@ (8002800 <sendADCData+0x84>)
 800279a:	889b      	ldrh	r3, [r3, #4]
    snprintf(buffer, sizeof(buffer), "T:%lu ADC0:%u ADC1:%u ADC2:%u ADC3:%u ADC4:%u ADC5:%u ADC6:%u ADC7:%u\n",
 800279c:	461c      	mov	r4, r3
             timestamp, adcValues[0], adcValues[1], adcValues[2], adcValues[3],
 800279e:	4b18      	ldr	r3, [pc, #96]	@ (8002800 <sendADCData+0x84>)
 80027a0:	88db      	ldrh	r3, [r3, #6]
    snprintf(buffer, sizeof(buffer), "T:%lu ADC0:%u ADC1:%u ADC2:%u ADC3:%u ADC4:%u ADC5:%u ADC6:%u ADC7:%u\n",
 80027a2:	461d      	mov	r5, r3
             adcValues[4], adcValues[5], adcValues[6], adcValues[7]);
 80027a4:	4b16      	ldr	r3, [pc, #88]	@ (8002800 <sendADCData+0x84>)
 80027a6:	891b      	ldrh	r3, [r3, #8]
    snprintf(buffer, sizeof(buffer), "T:%lu ADC0:%u ADC1:%u ADC2:%u ADC3:%u ADC4:%u ADC5:%u ADC6:%u ADC7:%u\n",
 80027a8:	461e      	mov	r6, r3
             adcValues[4], adcValues[5], adcValues[6], adcValues[7]);
 80027aa:	4b15      	ldr	r3, [pc, #84]	@ (8002800 <sendADCData+0x84>)
 80027ac:	895b      	ldrh	r3, [r3, #10]
    snprintf(buffer, sizeof(buffer), "T:%lu ADC0:%u ADC1:%u ADC2:%u ADC3:%u ADC4:%u ADC5:%u ADC6:%u ADC7:%u\n",
 80027ae:	607b      	str	r3, [r7, #4]
             adcValues[4], adcValues[5], adcValues[6], adcValues[7]);
 80027b0:	4b13      	ldr	r3, [pc, #76]	@ (8002800 <sendADCData+0x84>)
 80027b2:	899b      	ldrh	r3, [r3, #12]
    snprintf(buffer, sizeof(buffer), "T:%lu ADC0:%u ADC1:%u ADC2:%u ADC3:%u ADC4:%u ADC5:%u ADC6:%u ADC7:%u\n",
 80027b4:	603b      	str	r3, [r7, #0]
             adcValues[4], adcValues[5], adcValues[6], adcValues[7]);
 80027b6:	4b12      	ldr	r3, [pc, #72]	@ (8002800 <sendADCData+0x84>)
 80027b8:	89db      	ldrh	r3, [r3, #14]
    snprintf(buffer, sizeof(buffer), "T:%lu ADC0:%u ADC1:%u ADC2:%u ADC3:%u ADC4:%u ADC5:%u ADC6:%u ADC7:%u\n",
 80027ba:	f107 0008 	add.w	r0, r7, #8
 80027be:	9307      	str	r3, [sp, #28]
 80027c0:	f8d7 c000 	ldr.w	ip, [r7]
 80027c4:	f8cd c018 	str.w	ip, [sp, #24]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	9305      	str	r3, [sp, #20]
 80027cc:	9604      	str	r6, [sp, #16]
 80027ce:	9503      	str	r5, [sp, #12]
 80027d0:	9402      	str	r4, [sp, #8]
 80027d2:	9101      	str	r1, [sp, #4]
 80027d4:	9200      	str	r2, [sp, #0]
 80027d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002804 <sendADCData+0x88>)
 80027da:	2164      	movs	r1, #100	@ 0x64
 80027dc:	f001 feb6 	bl	800454c <sniprintf>

//    printf("T:%lu ADC0:%u ADC1:%u ADC2:%u ADC3:%u ADC4:%u ADC5:%u ADC6:%u ADC7:%u\n",
//                 timestamp, adcValues[0], adcValues[1], adcValues[2], adcValues[3],
//                 adcValues[4], adcValues[5], adcValues[6], adcValues[7]);

    sendToUART(USART3, buffer); // Send to PC
 80027e0:	f107 0308 	add.w	r3, r7, #8
 80027e4:	4619      	mov	r1, r3
 80027e6:	4808      	ldr	r0, [pc, #32]	@ (8002808 <sendADCData+0x8c>)
 80027e8:	f7ff fe20 	bl	800242c <sendToUART>
    sendToUART(USART1, buffer); // Send to ESP32
 80027ec:	f107 0308 	add.w	r3, r7, #8
 80027f0:	4619      	mov	r1, r3
 80027f2:	4806      	ldr	r0, [pc, #24]	@ (800280c <sendADCData+0x90>)
 80027f4:	f7ff fe1a 	bl	800242c <sendToUART>

}
 80027f8:	bf00      	nop
 80027fa:	3774      	adds	r7, #116	@ 0x74
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002800:	2000106c 	.word	0x2000106c
 8002804:	080069a0 	.word	0x080069a0
 8002808:	40004800 	.word	0x40004800
 800280c:	40013800 	.word	0x40013800

08002810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002816:	4b15      	ldr	r3, [pc, #84]	@ (800286c <HAL_MspInit+0x5c>)
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	4a14      	ldr	r2, [pc, #80]	@ (800286c <HAL_MspInit+0x5c>)
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	6193      	str	r3, [r2, #24]
 8002822:	4b12      	ldr	r3, [pc, #72]	@ (800286c <HAL_MspInit+0x5c>)
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	60bb      	str	r3, [r7, #8]
 800282c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800282e:	4b0f      	ldr	r3, [pc, #60]	@ (800286c <HAL_MspInit+0x5c>)
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	4a0e      	ldr	r2, [pc, #56]	@ (800286c <HAL_MspInit+0x5c>)
 8002834:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002838:	61d3      	str	r3, [r2, #28]
 800283a:	4b0c      	ldr	r3, [pc, #48]	@ (800286c <HAL_MspInit+0x5c>)
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002842:	607b      	str	r3, [r7, #4]
 8002844:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002846:	4b0a      	ldr	r3, [pc, #40]	@ (8002870 <HAL_MspInit+0x60>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	4a04      	ldr	r2, [pc, #16]	@ (8002870 <HAL_MspInit+0x60>)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002862:	bf00      	nop
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr
 800286c:	40021000 	.word	0x40021000
 8002870:	40010000 	.word	0x40010000

08002874 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a09      	ldr	r2, [pc, #36]	@ (80028a8 <HAL_TIM_Base_MspInit+0x34>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d10b      	bne.n	800289e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002886:	4b09      	ldr	r3, [pc, #36]	@ (80028ac <HAL_TIM_Base_MspInit+0x38>)
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	4a08      	ldr	r2, [pc, #32]	@ (80028ac <HAL_TIM_Base_MspInit+0x38>)
 800288c:	f043 0310 	orr.w	r3, r3, #16
 8002890:	61d3      	str	r3, [r2, #28]
 8002892:	4b06      	ldr	r3, [pc, #24]	@ (80028ac <HAL_TIM_Base_MspInit+0x38>)
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	f003 0310 	and.w	r3, r3, #16
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 800289e:	bf00      	nop
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr
 80028a8:	40001000 	.word	0x40001000
 80028ac:	40021000 	.word	0x40021000

080028b0 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80028b8:	4b07      	ldr	r3, [pc, #28]	@ (80028d8 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80028ba:	695a      	ldr	r2, [r3, #20]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4013      	ands	r3, r2
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	bf0c      	ite	eq
 80028c6:	2301      	moveq	r3, #1
 80028c8:	2300      	movne	r3, #0
 80028ca:	b2db      	uxtb	r3, r3
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	40010400 	.word	0x40010400

080028dc <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80028e4:	4a03      	ldr	r2, [pc, #12]	@ (80028f4 <LL_EXTI_ClearFlag_0_31+0x18>)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6153      	str	r3, [r2, #20]
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr
 80028f4:	40010400 	.word	0x40010400

080028f8 <LL_USART_IsActiveFlag_RXNE>:
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0320 	and.w	r3, r3, #32
 8002908:	2b20      	cmp	r3, #32
 800290a:	bf0c      	ite	eq
 800290c:	2301      	moveq	r3, #1
 800290e:	2300      	movne	r3, #0
 8002910:	b2db      	uxtb	r3, r3
}
 8002912:	4618      	mov	r0, r3
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <LL_USART_ReceiveData8>:
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	b2db      	uxtb	r3, r3
}
 800292a:	4618      	mov	r0, r3
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr

08002934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002938:	bf00      	nop
 800293a:	e7fd      	b.n	8002938 <NMI_Handler+0x4>

0800293c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002940:	bf00      	nop
 8002942:	e7fd      	b.n	8002940 <HardFault_Handler+0x4>

08002944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002948:	bf00      	nop
 800294a:	e7fd      	b.n	8002948 <MemManage_Handler+0x4>

0800294c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002950:	bf00      	nop
 8002952:	e7fd      	b.n	8002950 <BusFault_Handler+0x4>

08002954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002958:	bf00      	nop
 800295a:	e7fd      	b.n	8002958 <UsageFault_Handler+0x4>

0800295c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr

08002974 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr

08002980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002984:	f000 f950 	bl	8002c28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002988:	bf00      	nop
 800298a:	bd80      	pop	{r7, pc}

0800298c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002990:	bf00      	nop
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr

08002998 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */
	if (LL_USART_IsActiveFlag_RXNE(USART1))
 800299e:	480a      	ldr	r0, [pc, #40]	@ (80029c8 <USART1_IRQHandler+0x30>)
 80029a0:	f7ff ffaa 	bl	80028f8 <LL_USART_IsActiveFlag_RXNE>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d009      	beq.n	80029be <USART1_IRQHandler+0x26>
	{
		uint8_t receivedByte = LL_USART_ReceiveData8(USART1);
 80029aa:	4807      	ldr	r0, [pc, #28]	@ (80029c8 <USART1_IRQHandler+0x30>)
 80029ac:	f7ff ffb6 	bl	800291c <LL_USART_ReceiveData8>
 80029b0:	4603      	mov	r3, r0
 80029b2:	71fb      	strb	r3, [r7, #7]
		UART_ProcessReceivedByte(receivedByte, 1);  // Process received data for UART1
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	2101      	movs	r1, #1
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff fd6d 	bl	8002498 <UART_ProcessReceivedByte>
	}
  /* USER CODE END USART1_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40013800 	.word	0x40013800

080029cc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */
	 if (LL_USART_IsActiveFlag_RXNE(USART3))
 80029d2:	480a      	ldr	r0, [pc, #40]	@ (80029fc <USART3_IRQHandler+0x30>)
 80029d4:	f7ff ff90 	bl	80028f8 <LL_USART_IsActiveFlag_RXNE>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d009      	beq.n	80029f2 <USART3_IRQHandler+0x26>
	{
		uint8_t receivedByte = LL_USART_ReceiveData8(USART3);
 80029de:	4807      	ldr	r0, [pc, #28]	@ (80029fc <USART3_IRQHandler+0x30>)
 80029e0:	f7ff ff9c 	bl	800291c <LL_USART_ReceiveData8>
 80029e4:	4603      	mov	r3, r0
 80029e6:	71fb      	strb	r3, [r7, #7]
		UART_ProcessReceivedByte(receivedByte, 3);  // Process received data for UART3
 80029e8:	79fb      	ldrb	r3, [r7, #7]
 80029ea:	2103      	movs	r1, #3
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff fd53 	bl	8002498 <UART_ProcessReceivedByte>
	}
  /* USER CODE END USART3_IRQn 1 */
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40004800 	.word	0x40004800

08002a00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_12) != RESET)
 8002a04:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002a08:	f7ff ff52 	bl	80028b0 <LL_EXTI_IsActiveFlag_0_31>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d005      	beq.n	8002a1e <EXTI15_10_IRQHandler+0x1e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_12);
 8002a12:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002a16:	f7ff ff61 	bl	80028dc <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_12 */
    FAULT_3v3_HandleInterrupt();  // Handle FAULT 3V3
 8002a1a:	f7fd fc8f 	bl	800033c <FAULT_3v3_HandleInterrupt>
    /* USER CODE END LL_EXTI_LINE_12 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8002a1e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002a22:	f7ff ff45 	bl	80028b0 <LL_EXTI_IsActiveFlag_0_31>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8002a2c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002a30:	f7ff ff54 	bl	80028dc <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */
    FAULT_5v_HandleInterrupt();  // Handle FAULT 3V3
 8002a34:	f7fd fc72 	bl	800031c <FAULT_5v_HandleInterrupt>
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a38:	bf00      	nop
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	e00a      	b.n	8002a64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a4e:	f3af 8000 	nop.w
 8002a52:	4601      	mov	r1, r0
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	1c5a      	adds	r2, r3, #1
 8002a58:	60ba      	str	r2, [r7, #8]
 8002a5a:	b2ca      	uxtb	r2, r1
 8002a5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	3301      	adds	r3, #1
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	dbf0      	blt.n	8002a4e <_read+0x12>
  }

  return len;
 8002a6c:	687b      	ldr	r3, [r7, #4]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr

08002a8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a9c:	605a      	str	r2, [r3, #4]
  return 0;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr

08002aaa <_isatty>:

int _isatty(int file)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ab2:	2301      	movs	r3, #1
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr

08002abe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b085      	sub	sp, #20
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	60f8      	str	r0, [r7, #12]
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr
	...

08002ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ae0:	4a14      	ldr	r2, [pc, #80]	@ (8002b34 <_sbrk+0x5c>)
 8002ae2:	4b15      	ldr	r3, [pc, #84]	@ (8002b38 <_sbrk+0x60>)
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002aec:	4b13      	ldr	r3, [pc, #76]	@ (8002b3c <_sbrk+0x64>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d102      	bne.n	8002afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002af4:	4b11      	ldr	r3, [pc, #68]	@ (8002b3c <_sbrk+0x64>)
 8002af6:	4a12      	ldr	r2, [pc, #72]	@ (8002b40 <_sbrk+0x68>)
 8002af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002afa:	4b10      	ldr	r3, [pc, #64]	@ (8002b3c <_sbrk+0x64>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4413      	add	r3, r2
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d207      	bcs.n	8002b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b08:	f001 feb8 	bl	800487c <__errno>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	220c      	movs	r2, #12
 8002b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b12:	f04f 33ff 	mov.w	r3, #4294967295
 8002b16:	e009      	b.n	8002b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b18:	4b08      	ldr	r3, [pc, #32]	@ (8002b3c <_sbrk+0x64>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b1e:	4b07      	ldr	r3, [pc, #28]	@ (8002b3c <_sbrk+0x64>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4413      	add	r3, r2
 8002b26:	4a05      	ldr	r2, [pc, #20]	@ (8002b3c <_sbrk+0x64>)
 8002b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	20010000 	.word	0x20010000
 8002b38:	00000400 	.word	0x00000400
 8002b3c:	2000107c 	.word	0x2000107c
 8002b40:	200011d0 	.word	0x200011d0

08002b44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b48:	bf00      	nop
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr

08002b50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b50:	f7ff fff8 	bl	8002b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b54:	480b      	ldr	r0, [pc, #44]	@ (8002b84 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002b56:	490c      	ldr	r1, [pc, #48]	@ (8002b88 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002b58:	4a0c      	ldr	r2, [pc, #48]	@ (8002b8c <LoopFillZerobss+0x16>)
  movs r3, #0
 8002b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b5c:	e002      	b.n	8002b64 <LoopCopyDataInit>

08002b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b62:	3304      	adds	r3, #4

08002b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b68:	d3f9      	bcc.n	8002b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b6a:	4a09      	ldr	r2, [pc, #36]	@ (8002b90 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002b6c:	4c09      	ldr	r4, [pc, #36]	@ (8002b94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b70:	e001      	b.n	8002b76 <LoopFillZerobss>

08002b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b74:	3204      	adds	r2, #4

08002b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b78:	d3fb      	bcc.n	8002b72 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8002b7a:	f001 fe85 	bl	8004888 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b7e:	f7fe f975 	bl	8000e6c <main>
  bx lr
 8002b82:	4770      	bx	lr
  ldr r0, =_sdata
 8002b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b88:	20000d28 	.word	0x20000d28
  ldr r2, =_sidata
 8002b8c:	08006da4 	.word	0x08006da4
  ldr r2, =_sbss
 8002b90:	20000d28 	.word	0x20000d28
  ldr r4, =_ebss
 8002b94:	200011d0 	.word	0x200011d0

08002b98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b98:	e7fe      	b.n	8002b98 <ADC1_2_IRQHandler>
	...

08002b9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ba0:	4b08      	ldr	r3, [pc, #32]	@ (8002bc4 <HAL_Init+0x28>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a07      	ldr	r2, [pc, #28]	@ (8002bc4 <HAL_Init+0x28>)
 8002ba6:	f043 0310 	orr.w	r3, r3, #16
 8002baa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bac:	2003      	movs	r0, #3
 8002bae:	f000 f8fd 	bl	8002dac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bb2:	200f      	movs	r0, #15
 8002bb4:	f000 f808 	bl	8002bc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bb8:	f7ff fe2a 	bl	8002810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40022000 	.word	0x40022000

08002bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bd0:	4b12      	ldr	r3, [pc, #72]	@ (8002c1c <HAL_InitTick+0x54>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	4b12      	ldr	r3, [pc, #72]	@ (8002c20 <HAL_InitTick+0x58>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	4619      	mov	r1, r3
 8002bda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8002be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 f907 	bl	8002dfa <HAL_SYSTICK_Config>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e00e      	b.n	8002c14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b0f      	cmp	r3, #15
 8002bfa:	d80a      	bhi.n	8002c12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	f04f 30ff 	mov.w	r0, #4294967295
 8002c04:	f000 f8dd 	bl	8002dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c08:	4a06      	ldr	r2, [pc, #24]	@ (8002c24 <HAL_InitTick+0x5c>)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	e000      	b.n	8002c14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	20000cc0 	.word	0x20000cc0
 8002c20:	20000cc8 	.word	0x20000cc8
 8002c24:	20000cc4 	.word	0x20000cc4

08002c28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c2c:	4b05      	ldr	r3, [pc, #20]	@ (8002c44 <HAL_IncTick+0x1c>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	461a      	mov	r2, r3
 8002c32:	4b05      	ldr	r3, [pc, #20]	@ (8002c48 <HAL_IncTick+0x20>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4413      	add	r3, r2
 8002c38:	4a03      	ldr	r2, [pc, #12]	@ (8002c48 <HAL_IncTick+0x20>)
 8002c3a:	6013      	str	r3, [r2, #0]
}
 8002c3c:	bf00      	nop
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr
 8002c44:	20000cc8 	.word	0x20000cc8
 8002c48:	20001080 	.word	0x20001080

08002c4c <__NVIC_SetPriorityGrouping>:
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c90 <__NVIC_SetPriorityGrouping+0x44>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c68:	4013      	ands	r3, r2
 8002c6a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c7e:	4a04      	ldr	r2, [pc, #16]	@ (8002c90 <__NVIC_SetPriorityGrouping+0x44>)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	60d3      	str	r3, [r2, #12]
}
 8002c84:	bf00      	nop
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bc80      	pop	{r7}
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	e000ed00 	.word	0xe000ed00

08002c94 <__NVIC_GetPriorityGrouping>:
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c98:	4b04      	ldr	r3, [pc, #16]	@ (8002cac <__NVIC_GetPriorityGrouping+0x18>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	0a1b      	lsrs	r3, r3, #8
 8002c9e:	f003 0307 	and.w	r3, r3, #7
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	e000ed00 	.word	0xe000ed00

08002cb0 <__NVIC_SetPriority>:
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	6039      	str	r1, [r7, #0]
 8002cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	db0a      	blt.n	8002cda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	490c      	ldr	r1, [pc, #48]	@ (8002cfc <__NVIC_SetPriority+0x4c>)
 8002cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cce:	0112      	lsls	r2, r2, #4
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002cd8:	e00a      	b.n	8002cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	4908      	ldr	r1, [pc, #32]	@ (8002d00 <__NVIC_SetPriority+0x50>)
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	3b04      	subs	r3, #4
 8002ce8:	0112      	lsls	r2, r2, #4
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	440b      	add	r3, r1
 8002cee:	761a      	strb	r2, [r3, #24]
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bc80      	pop	{r7}
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	e000e100 	.word	0xe000e100
 8002d00:	e000ed00 	.word	0xe000ed00

08002d04 <NVIC_EncodePriority>:
{
 8002d04:	b480      	push	{r7}
 8002d06:	b089      	sub	sp, #36	@ 0x24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f1c3 0307 	rsb	r3, r3, #7
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	bf28      	it	cs
 8002d22:	2304      	movcs	r3, #4
 8002d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	3304      	adds	r3, #4
 8002d2a:	2b06      	cmp	r3, #6
 8002d2c:	d902      	bls.n	8002d34 <NVIC_EncodePriority+0x30>
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	3b03      	subs	r3, #3
 8002d32:	e000      	b.n	8002d36 <NVIC_EncodePriority+0x32>
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d38:	f04f 32ff 	mov.w	r2, #4294967295
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43da      	mvns	r2, r3
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	401a      	ands	r2, r3
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	fa01 f303 	lsl.w	r3, r1, r3
 8002d56:	43d9      	mvns	r1, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d5c:	4313      	orrs	r3, r2
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3724      	adds	r7, #36	@ 0x24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr

08002d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d78:	d301      	bcc.n	8002d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e00f      	b.n	8002d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002da8 <SysTick_Config+0x40>)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d86:	210f      	movs	r1, #15
 8002d88:	f04f 30ff 	mov.w	r0, #4294967295
 8002d8c:	f7ff ff90 	bl	8002cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d90:	4b05      	ldr	r3, [pc, #20]	@ (8002da8 <SysTick_Config+0x40>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d96:	4b04      	ldr	r3, [pc, #16]	@ (8002da8 <SysTick_Config+0x40>)
 8002d98:	2207      	movs	r2, #7
 8002d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	e000e010 	.word	0xe000e010

08002dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f7ff ff49 	bl	8002c4c <__NVIC_SetPriorityGrouping>
}
 8002dba:	bf00      	nop
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b086      	sub	sp, #24
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	4603      	mov	r3, r0
 8002dca:	60b9      	str	r1, [r7, #8]
 8002dcc:	607a      	str	r2, [r7, #4]
 8002dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dd4:	f7ff ff5e 	bl	8002c94 <__NVIC_GetPriorityGrouping>
 8002dd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	68b9      	ldr	r1, [r7, #8]
 8002dde:	6978      	ldr	r0, [r7, #20]
 8002de0:	f7ff ff90 	bl	8002d04 <NVIC_EncodePriority>
 8002de4:	4602      	mov	r2, r0
 8002de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dea:	4611      	mov	r1, r2
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff ff5f 	bl	8002cb0 <__NVIC_SetPriority>
}
 8002df2:	bf00      	nop
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7ff ffb0 	bl	8002d68 <SysTick_Config>
 8002e08:	4603      	mov	r3, r0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b082      	sub	sp, #8
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e041      	b.n	8002ea8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d106      	bne.n	8002e3e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff fd1b 	bl	8002874 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2202      	movs	r2, #2
 8002e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4610      	mov	r0, r2
 8002e52:	f000 f82d 	bl	8002eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a33      	ldr	r2, [pc, #204]	@ (8002f90 <TIM_Base_SetConfig+0xe0>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d00f      	beq.n	8002ee8 <TIM_Base_SetConfig+0x38>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ece:	d00b      	beq.n	8002ee8 <TIM_Base_SetConfig+0x38>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a30      	ldr	r2, [pc, #192]	@ (8002f94 <TIM_Base_SetConfig+0xe4>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d007      	beq.n	8002ee8 <TIM_Base_SetConfig+0x38>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a2f      	ldr	r2, [pc, #188]	@ (8002f98 <TIM_Base_SetConfig+0xe8>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d003      	beq.n	8002ee8 <TIM_Base_SetConfig+0x38>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a2e      	ldr	r2, [pc, #184]	@ (8002f9c <TIM_Base_SetConfig+0xec>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d108      	bne.n	8002efa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a24      	ldr	r2, [pc, #144]	@ (8002f90 <TIM_Base_SetConfig+0xe0>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d00f      	beq.n	8002f22 <TIM_Base_SetConfig+0x72>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f08:	d00b      	beq.n	8002f22 <TIM_Base_SetConfig+0x72>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a21      	ldr	r2, [pc, #132]	@ (8002f94 <TIM_Base_SetConfig+0xe4>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d007      	beq.n	8002f22 <TIM_Base_SetConfig+0x72>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a20      	ldr	r2, [pc, #128]	@ (8002f98 <TIM_Base_SetConfig+0xe8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d003      	beq.n	8002f22 <TIM_Base_SetConfig+0x72>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a1f      	ldr	r2, [pc, #124]	@ (8002f9c <TIM_Base_SetConfig+0xec>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d108      	bne.n	8002f34 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a0d      	ldr	r2, [pc, #52]	@ (8002f90 <TIM_Base_SetConfig+0xe0>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d103      	bne.n	8002f68 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d005      	beq.n	8002f86 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f023 0201 	bic.w	r2, r3, #1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	611a      	str	r2, [r3, #16]
  }
}
 8002f86:	bf00      	nop
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr
 8002f90:	40012c00 	.word	0x40012c00
 8002f94:	40000400 	.word	0x40000400
 8002f98:	40000800 	.word	0x40000800
 8002f9c:	40000c00 	.word	0x40000c00

08002fa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e04b      	b.n	8003050 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a19      	ldr	r2, [pc, #100]	@ (800305c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d013      	beq.n	8003024 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003004:	d00e      	beq.n	8003024 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a15      	ldr	r2, [pc, #84]	@ (8003060 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d009      	beq.n	8003024 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a13      	ldr	r2, [pc, #76]	@ (8003064 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d004      	beq.n	8003024 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a12      	ldr	r2, [pc, #72]	@ (8003068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d10c      	bne.n	800303e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800302a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	4313      	orrs	r3, r2
 8003034:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	40012c00 	.word	0x40012c00
 8003060:	40000400 	.word	0x40000400
 8003064:	40000800 	.word	0x40000800
 8003068:	40000c00 	.word	0x40000c00

0800306c <LL_ADC_REG_SetSequencerLength>:
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800307a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	bc80      	pop	{r7}
 800308e:	4770      	bx	lr

08003090 <LL_ADC_IsEnabled>:
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	bf0c      	ite	eq
 80030a4:	2301      	moveq	r3, #1
 80030a6:	2300      	movne	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bc80      	pop	{r7}
 80030b2:	4770      	bx	lr

080030b4 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 80030b4:	b590      	push	{r4, r7, lr}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80030be:	2300      	movs	r3, #0
 80030c0:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 80030c2:	4813      	ldr	r0, [pc, #76]	@ (8003110 <LL_ADC_CommonInit+0x5c>)
 80030c4:	f7ff ffe4 	bl	8003090 <LL_ADC_IsEnabled>
 80030c8:	4604      	mov	r4, r0
 80030ca:	4812      	ldr	r0, [pc, #72]	@ (8003114 <LL_ADC_CommonInit+0x60>)
 80030cc:	f7ff ffe0 	bl	8003090 <LL_ADC_IsEnabled>
 80030d0:	4603      	mov	r3, r0
 80030d2:	4323      	orrs	r3, r4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d114      	bne.n	8003102 <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d009      	beq.n	80030f4 <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	605a      	str	r2, [r3, #4]
 80030f2:	e008      	b.n	8003106 <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	605a      	str	r2, [r3, #4]
 8003100:	e001      	b.n	8003106 <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8003106:	7bfb      	ldrb	r3, [r7, #15]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	bd90      	pop	{r4, r7, pc}
 8003110:	40012400 	.word	0x40012400
 8003114:	40012800 	.word	0x40012800

08003118 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003122:	2300      	movs	r3, #0
 8003124:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7ff ffb2 	bl	8003090 <LL_ADC_IsEnabled>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d112      	bne.n	8003158 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	431a      	orrs	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	609a      	str	r2, [r3, #8]
 8003156:	e001      	b.n	800315c <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800315c:	7bfb      	ldrb	r3, [r7, #15]
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b084      	sub	sp, #16
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003170:	2300      	movs	r3, #0
 8003172:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff ff8b 	bl	8003090 <LL_ADC_IsEnabled>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d131      	bne.n	80031e4 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00c      	beq.n	80031a2 <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	6859      	ldr	r1, [r3, #4]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	430b      	orrs	r3, r1
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	605a      	str	r2, [r3, #4]
 80031a0:	e008      	b.n	80031b4 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 80031bc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	6811      	ldr	r1, [r2, #0]
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	68d2      	ldr	r2, [r2, #12]
 80031c8:	4311      	orrs	r1, r2
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	6912      	ldr	r2, [r2, #16]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	431a      	orrs	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	4619      	mov	r1, r3
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7ff ff45 	bl	800306c <LL_ADC_REG_SetSequencerLength>
 80031e2:	e001      	b.n	80031e8 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <LL_EXTI_EnableIT_0_31>:
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80031fc:	4b05      	ldr	r3, [pc, #20]	@ (8003214 <LL_EXTI_EnableIT_0_31+0x20>)
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	4904      	ldr	r1, [pc, #16]	@ (8003214 <LL_EXTI_EnableIT_0_31+0x20>)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4313      	orrs	r3, r2
 8003206:	600b      	str	r3, [r1, #0]
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	40010400 	.word	0x40010400

08003218 <LL_EXTI_DisableIT_0_31>:
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8003220:	4b05      	ldr	r3, [pc, #20]	@ (8003238 <LL_EXTI_DisableIT_0_31+0x20>)
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	43db      	mvns	r3, r3
 8003228:	4903      	ldr	r1, [pc, #12]	@ (8003238 <LL_EXTI_DisableIT_0_31+0x20>)
 800322a:	4013      	ands	r3, r2
 800322c:	600b      	str	r3, [r1, #0]
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr
 8003238:	40010400 	.word	0x40010400

0800323c <LL_EXTI_EnableEvent_0_31>:
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8003244:	4b05      	ldr	r3, [pc, #20]	@ (800325c <LL_EXTI_EnableEvent_0_31+0x20>)
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	4904      	ldr	r1, [pc, #16]	@ (800325c <LL_EXTI_EnableEvent_0_31+0x20>)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4313      	orrs	r3, r2
 800324e:	604b      	str	r3, [r1, #4]
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	bc80      	pop	{r7}
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	40010400 	.word	0x40010400

08003260 <LL_EXTI_DisableEvent_0_31>:
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8003268:	4b05      	ldr	r3, [pc, #20]	@ (8003280 <LL_EXTI_DisableEvent_0_31+0x20>)
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	43db      	mvns	r3, r3
 8003270:	4903      	ldr	r1, [pc, #12]	@ (8003280 <LL_EXTI_DisableEvent_0_31+0x20>)
 8003272:	4013      	ands	r3, r2
 8003274:	604b      	str	r3, [r1, #4]
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr
 8003280:	40010400 	.word	0x40010400

08003284 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800328c:	4b05      	ldr	r3, [pc, #20]	@ (80032a4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	4904      	ldr	r1, [pc, #16]	@ (80032a4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4313      	orrs	r3, r2
 8003296:	608b      	str	r3, [r1, #8]
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	bc80      	pop	{r7}
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40010400 	.word	0x40010400

080032a8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80032b0:	4b05      	ldr	r3, [pc, #20]	@ (80032c8 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	43db      	mvns	r3, r3
 80032b8:	4903      	ldr	r1, [pc, #12]	@ (80032c8 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80032ba:	4013      	ands	r3, r2
 80032bc:	608b      	str	r3, [r1, #8]
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr
 80032c8:	40010400 	.word	0x40010400

080032cc <LL_EXTI_EnableFallingTrig_0_31>:
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80032d4:	4b05      	ldr	r3, [pc, #20]	@ (80032ec <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	4904      	ldr	r1, [pc, #16]	@ (80032ec <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4313      	orrs	r3, r2
 80032de:	60cb      	str	r3, [r1, #12]
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	40010400 	.word	0x40010400

080032f0 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80032f8:	4b05      	ldr	r3, [pc, #20]	@ (8003310 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	43db      	mvns	r3, r3
 8003300:	4903      	ldr	r1, [pc, #12]	@ (8003310 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8003302:	4013      	ands	r3, r2
 8003304:	60cb      	str	r3, [r1, #12]
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr
 8003310:	40010400 	.word	0x40010400

08003314 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 800331c:	2300      	movs	r3, #0
 800331e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	791b      	ldrb	r3, [r3, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d065      	beq.n	80033f4 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d06b      	beq.n	8003408 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	795b      	ldrb	r3, [r3, #5]
 8003334:	2b02      	cmp	r3, #2
 8003336:	d01c      	beq.n	8003372 <LL_EXTI_Init+0x5e>
 8003338:	2b02      	cmp	r3, #2
 800333a:	dc25      	bgt.n	8003388 <LL_EXTI_Init+0x74>
 800333c:	2b00      	cmp	r3, #0
 800333e:	d002      	beq.n	8003346 <LL_EXTI_Init+0x32>
 8003340:	2b01      	cmp	r3, #1
 8003342:	d00b      	beq.n	800335c <LL_EXTI_Init+0x48>
 8003344:	e020      	b.n	8003388 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff ff88 	bl	8003260 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff ff4d 	bl	80031f4 <LL_EXTI_EnableIT_0_31>
          break;
 800335a:	e018      	b.n	800338e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff ff59 	bl	8003218 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff ff66 	bl	800323c <LL_EXTI_EnableEvent_0_31>
          break;
 8003370:	e00d      	b.n	800338e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff ff3c 	bl	80031f4 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff ff5b 	bl	800323c <LL_EXTI_EnableEvent_0_31>
          break;
 8003386:	e002      	b.n	800338e <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	73fb      	strb	r3, [r7, #15]
          break;
 800338c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	799b      	ldrb	r3, [r3, #6]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d038      	beq.n	8003408 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	799b      	ldrb	r3, [r3, #6]
 800339a:	2b03      	cmp	r3, #3
 800339c:	d01c      	beq.n	80033d8 <LL_EXTI_Init+0xc4>
 800339e:	2b03      	cmp	r3, #3
 80033a0:	dc25      	bgt.n	80033ee <LL_EXTI_Init+0xda>
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d002      	beq.n	80033ac <LL_EXTI_Init+0x98>
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d00b      	beq.n	80033c2 <LL_EXTI_Init+0xae>
 80033aa:	e020      	b.n	80033ee <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff ff9d 	bl	80032f0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff ff62 	bl	8003284 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80033c0:	e022      	b.n	8003408 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff ff6e 	bl	80032a8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff ff7b 	bl	80032cc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80033d6:	e017      	b.n	8003408 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff ff51 	bl	8003284 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff ff70 	bl	80032cc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80033ec:	e00c      	b.n	8003408 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	73fb      	strb	r3, [r7, #15]
            break;
 80033f2:	e009      	b.n	8003408 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff ff0d 	bl	8003218 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff ff2c 	bl	8003260 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8003408:	7bfb      	ldrb	r3, [r7, #15]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <LL_GPIO_SetPinMode>:
{
 8003412:	b490      	push	{r4, r7}
 8003414:	b088      	sub	sp, #32
 8003416:	af00      	add	r7, sp, #0
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	461a      	mov	r2, r3
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	0e1b      	lsrs	r3, r3, #24
 8003426:	4413      	add	r3, r2
 8003428:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800342a:	6822      	ldr	r2, [r4, #0]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	fa93 f3a3 	rbit	r3, r3
 8003436:	613b      	str	r3, [r7, #16]
  return result;
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	fab3 f383 	clz	r3, r3
 800343e:	b2db      	uxtb	r3, r3
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	210f      	movs	r1, #15
 8003444:	fa01 f303 	lsl.w	r3, r1, r3
 8003448:	43db      	mvns	r3, r3
 800344a:	401a      	ands	r2, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	fa93 f3a3 	rbit	r3, r3
 8003456:	61bb      	str	r3, [r7, #24]
  return result;
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	fab3 f383 	clz	r3, r3
 800345e:	b2db      	uxtb	r3, r3
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	fa01 f303 	lsl.w	r3, r1, r3
 8003468:	4313      	orrs	r3, r2
 800346a:	6023      	str	r3, [r4, #0]
}
 800346c:	bf00      	nop
 800346e:	3720      	adds	r7, #32
 8003470:	46bd      	mov	sp, r7
 8003472:	bc90      	pop	{r4, r7}
 8003474:	4770      	bx	lr

08003476 <LL_GPIO_SetPinSpeed>:
{
 8003476:	b490      	push	{r4, r7}
 8003478:	b088      	sub	sp, #32
 800347a:	af00      	add	r7, sp, #0
 800347c:	60f8      	str	r0, [r7, #12]
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	461a      	mov	r2, r3
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	0e1b      	lsrs	r3, r3, #24
 800348a:	4413      	add	r3, r2
 800348c:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800348e:	6822      	ldr	r2, [r4, #0]
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	fa93 f3a3 	rbit	r3, r3
 800349a:	613b      	str	r3, [r7, #16]
  return result;
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	fab3 f383 	clz	r3, r3
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	2103      	movs	r1, #3
 80034a8:	fa01 f303 	lsl.w	r3, r1, r3
 80034ac:	43db      	mvns	r3, r3
 80034ae:	401a      	ands	r2, r3
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	fa93 f3a3 	rbit	r3, r3
 80034ba:	61bb      	str	r3, [r7, #24]
  return result;
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	fab3 f383 	clz	r3, r3
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	fa01 f303 	lsl.w	r3, r1, r3
 80034cc:	4313      	orrs	r3, r2
 80034ce:	6023      	str	r3, [r4, #0]
}
 80034d0:	bf00      	nop
 80034d2:	3720      	adds	r7, #32
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc90      	pop	{r4, r7}
 80034d8:	4770      	bx	lr

080034da <LL_GPIO_SetPinOutputType>:
{
 80034da:	b490      	push	{r4, r7}
 80034dc:	b088      	sub	sp, #32
 80034de:	af00      	add	r7, sp, #0
 80034e0:	60f8      	str	r0, [r7, #12]
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	461a      	mov	r2, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	0e1b      	lsrs	r3, r3, #24
 80034ee:	4413      	add	r3, r2
 80034f0:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80034f2:	6822      	ldr	r2, [r4, #0]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	fa93 f3a3 	rbit	r3, r3
 80034fe:	613b      	str	r3, [r7, #16]
  return result;
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	fab3 f383 	clz	r3, r3
 8003506:	b2db      	uxtb	r3, r3
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	2104      	movs	r1, #4
 800350c:	fa01 f303 	lsl.w	r3, r1, r3
 8003510:	43db      	mvns	r3, r3
 8003512:	401a      	ands	r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	fa93 f3a3 	rbit	r3, r3
 800351e:	61bb      	str	r3, [r7, #24]
  return result;
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	fab3 f383 	clz	r3, r3
 8003526:	b2db      	uxtb	r3, r3
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	fa01 f303 	lsl.w	r3, r1, r3
 8003530:	4313      	orrs	r3, r2
 8003532:	6023      	str	r3, [r4, #0]
}
 8003534:	bf00      	nop
 8003536:	3720      	adds	r7, #32
 8003538:	46bd      	mov	sp, r7
 800353a:	bc90      	pop	{r4, r7}
 800353c:	4770      	bx	lr

0800353e <LL_GPIO_SetPinPull>:
{
 800353e:	b480      	push	{r7}
 8003540:	b087      	sub	sp, #28
 8003542:	af00      	add	r7, sp, #0
 8003544:	60f8      	str	r0, [r7, #12]
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	0a1b      	lsrs	r3, r3, #8
 8003552:	43db      	mvns	r3, r3
 8003554:	401a      	ands	r2, r3
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	0a1b      	lsrs	r3, r3, #8
 800355a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	fa93 f3a3 	rbit	r3, r3
 8003562:	613b      	str	r3, [r7, #16]
  return result;
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	fab3 f383 	clz	r3, r3
 800356a:	b2db      	uxtb	r3, r3
 800356c:	4619      	mov	r1, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	408b      	lsls	r3, r1
 8003572:	431a      	orrs	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	60da      	str	r2, [r3, #12]
}
 8003578:	bf00      	nop
 800357a:	371c      	adds	r7, #28
 800357c:	46bd      	mov	sp, r7
 800357e:	bc80      	pop	{r7}
 8003580:	4770      	bx	lr

08003582 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b088      	sub	sp, #32
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	021b      	lsls	r3, r3, #8
 8003592:	0c1b      	lsrs	r3, r3, #16
 8003594:	617b      	str	r3, [r7, #20]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	fa93 f3a3 	rbit	r3, r3
 80035a0:	60fb      	str	r3, [r7, #12]
  return result;
 80035a2:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80035a4:	fab3 f383 	clz	r3, r3
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 80035ac:	e044      	b.n	8003638 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 80035ae:	2201      	movs	r2, #1
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	409a      	lsls	r2, r3
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	4013      	ands	r3, r2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d03a      	beq.n	8003632 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	2b07      	cmp	r3, #7
 80035c0:	d806      	bhi.n	80035d0 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 80035c2:	f240 1201 	movw	r2, #257	@ 0x101
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	61bb      	str	r3, [r7, #24]
 80035ce:	e008      	b.n	80035e2 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	3b08      	subs	r3, #8
 80035d4:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80035e0:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b08      	cmp	r3, #8
 80035e8:	d106      	bne.n	80035f8 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	461a      	mov	r2, r3
 80035f0:	69b9      	ldr	r1, [r7, #24]
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7ff ffa3 	bl	800353e <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	461a      	mov	r2, r3
 80035fe:	69b9      	ldr	r1, [r7, #24]
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7ff ff06 	bl	8003412 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d003      	beq.n	8003616 <LL_GPIO_Init+0x94>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b09      	cmp	r3, #9
 8003614:	d10d      	bne.n	8003632 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	461a      	mov	r2, r3
 800361c:	69b9      	ldr	r1, [r7, #24]
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7ff ff29 	bl	8003476 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	461a      	mov	r2, r3
 800362a:	69b9      	ldr	r1, [r7, #24]
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff ff54 	bl	80034da <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	3301      	adds	r3, #1
 8003636:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	fa22 f303 	lsr.w	r3, r2, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1b4      	bne.n	80035ae <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3720      	adds	r7, #32
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <LL_RCC_HSE_GetPrediv2>:
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV2));
 8003654:	4b03      	ldr	r3, [pc, #12]	@ (8003664 <LL_RCC_HSE_GetPrediv2+0x14>)
 8003656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003658:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800365c:	4618      	mov	r0, r3
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr
 8003664:	40021000 	.word	0x40021000

08003668 <LL_RCC_GetSysClkSource>:
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800366c:	4b03      	ldr	r3, [pc, #12]	@ (800367c <LL_RCC_GetSysClkSource+0x14>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f003 030c 	and.w	r3, r3, #12
}
 8003674:	4618      	mov	r0, r3
 8003676:	46bd      	mov	sp, r7
 8003678:	bc80      	pop	{r7}
 800367a:	4770      	bx	lr
 800367c:	40021000 	.word	0x40021000

08003680 <LL_RCC_GetAHBPrescaler>:
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003684:	4b03      	ldr	r3, [pc, #12]	@ (8003694 <LL_RCC_GetAHBPrescaler+0x14>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800368c:	4618      	mov	r0, r3
 800368e:	46bd      	mov	sp, r7
 8003690:	bc80      	pop	{r7}
 8003692:	4770      	bx	lr
 8003694:	40021000 	.word	0x40021000

08003698 <LL_RCC_GetAPB1Prescaler>:
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800369c:	4b03      	ldr	r3, [pc, #12]	@ (80036ac <LL_RCC_GetAPB1Prescaler+0x14>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr
 80036ac:	40021000 	.word	0x40021000

080036b0 <LL_RCC_GetAPB2Prescaler>:
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80036b4:	4b03      	ldr	r3, [pc, #12]	@ (80036c4 <LL_RCC_GetAPB2Prescaler+0x14>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80036bc:	4618      	mov	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr
 80036c4:	40021000 	.word	0x40021000

080036c8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
 80036ce:	4b09      	ldr	r3, [pc, #36]	@ (80036f4 <LL_RCC_PLL_GetMainSource+0x2c>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036d6:	607b      	str	r3, [r7, #4]
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
 80036d8:	4b06      	ldr	r3, [pc, #24]	@ (80036f4 <LL_RCC_PLL_GetMainSource+0x2c>)
 80036da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036dc:	011b      	lsls	r3, r3, #4
 80036de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036e2:	603b      	str	r3, [r7, #0]
  return (uint32_t)(pllsrc | predivsrc);
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	4313      	orrs	r3, r2
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bc80      	pop	{r7}
 80036f2:	4770      	bx	lr
 80036f4:	40021000 	.word	0x40021000

080036f8 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 80036fc:	4b03      	ldr	r3, [pc, #12]	@ (800370c <LL_RCC_PLL_GetMultiplicator+0x14>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 8003704:	4618      	mov	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr
 800370c:	40021000 	.word	0x40021000

08003710 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
 8003714:	4b03      	ldr	r3, [pc, #12]	@ (8003724 <LL_RCC_PLL_GetPrediv+0x14>)
 8003716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003718:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
#endif /*RCC_CFGR2_PREDIV1*/
}
 800371c:	4618      	mov	r0, r3
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr
 8003724:	40021000 	.word	0x40021000

08003728 <LL_RCC_PLL2_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL2_MUL_14
  *         @arg @ref LL_RCC_PLL2_MUL_16
  *         @arg @ref LL_RCC_PLL2_MUL_20
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetMultiplicator(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL2MUL));
 800372c:	4b03      	ldr	r3, [pc, #12]	@ (800373c <LL_RCC_PLL2_GetMultiplicator+0x14>)
 800372e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003730:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8003734:	4618      	mov	r0, r3
 8003736:	46bd      	mov	sp, r7
 8003738:	bc80      	pop	{r7}
 800373a:	4770      	bx	lr
 800373c:	40021000 	.word	0x40021000

08003740 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003748:	f000 f820 	bl	800378c <RCC_GetSystemClockFreq>
 800374c:	4602      	mov	r2, r0
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f000 f83e 	bl	80037d8 <RCC_GetHCLKClockFreq>
 800375c:	4602      	mov	r2, r0
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	4618      	mov	r0, r3
 8003768:	f000 f84c 	bl	8003804 <RCC_GetPCLK1ClockFreq>
 800376c:	4602      	mov	r2, r0
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	4618      	mov	r0, r3
 8003778:	f000 f858 	bl	800382c <RCC_GetPCLK2ClockFreq>
 800377c:	4602      	mov	r2, r0
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	60da      	str	r2, [r3, #12]
}
 8003782:	bf00      	nop
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
	...

0800378c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003792:	2300      	movs	r3, #0
 8003794:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003796:	f7ff ff67 	bl	8003668 <LL_RCC_GetSysClkSource>
 800379a:	4603      	mov	r3, r0
 800379c:	2b08      	cmp	r3, #8
 800379e:	d00c      	beq.n	80037ba <RCC_GetSystemClockFreq+0x2e>
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d80e      	bhi.n	80037c2 <RCC_GetSystemClockFreq+0x36>
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d002      	beq.n	80037ae <RCC_GetSystemClockFreq+0x22>
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d003      	beq.n	80037b4 <RCC_GetSystemClockFreq+0x28>
 80037ac:	e009      	b.n	80037c2 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80037ae:	4b09      	ldr	r3, [pc, #36]	@ (80037d4 <RCC_GetSystemClockFreq+0x48>)
 80037b0:	607b      	str	r3, [r7, #4]
      break;
 80037b2:	e009      	b.n	80037c8 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80037b4:	4b07      	ldr	r3, [pc, #28]	@ (80037d4 <RCC_GetSystemClockFreq+0x48>)
 80037b6:	607b      	str	r3, [r7, #4]
      break;
 80037b8:	e006      	b.n	80037c8 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80037ba:	f000 f84b 	bl	8003854 <RCC_PLL_GetFreqDomain_SYS>
 80037be:	6078      	str	r0, [r7, #4]
      break;
 80037c0:	e002      	b.n	80037c8 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 80037c2:	4b04      	ldr	r3, [pc, #16]	@ (80037d4 <RCC_GetSystemClockFreq+0x48>)
 80037c4:	607b      	str	r3, [r7, #4]
      break;
 80037c6:	bf00      	nop
  }

  return frequency;
 80037c8:	687b      	ldr	r3, [r7, #4]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	007a1200 	.word	0x007a1200

080037d8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80037e0:	f7ff ff4e 	bl	8003680 <LL_RCC_GetAHBPrescaler>
 80037e4:	4603      	mov	r3, r0
 80037e6:	091b      	lsrs	r3, r3, #4
 80037e8:	f003 030f 	and.w	r3, r3, #15
 80037ec:	4a04      	ldr	r2, [pc, #16]	@ (8003800 <RCC_GetHCLKClockFreq+0x28>)
 80037ee:	5cd3      	ldrb	r3, [r2, r3]
 80037f0:	461a      	mov	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	40d3      	lsrs	r3, r2
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	08006c2c 	.word	0x08006c2c

08003804 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800380c:	f7ff ff44 	bl	8003698 <LL_RCC_GetAPB1Prescaler>
 8003810:	4603      	mov	r3, r0
 8003812:	0a1b      	lsrs	r3, r3, #8
 8003814:	4a04      	ldr	r2, [pc, #16]	@ (8003828 <RCC_GetPCLK1ClockFreq+0x24>)
 8003816:	5cd3      	ldrb	r3, [r2, r3]
 8003818:	461a      	mov	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	40d3      	lsrs	r3, r2
}
 800381e:	4618      	mov	r0, r3
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	08006c3c 	.word	0x08006c3c

0800382c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003834:	f7ff ff3c 	bl	80036b0 <LL_RCC_GetAPB2Prescaler>
 8003838:	4603      	mov	r3, r0
 800383a:	0adb      	lsrs	r3, r3, #11
 800383c:	4a04      	ldr	r2, [pc, #16]	@ (8003850 <RCC_GetPCLK2ClockFreq+0x24>)
 800383e:	5cd3      	ldrb	r3, [r2, r3]
 8003840:	461a      	mov	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	40d3      	lsrs	r3, r2
}
 8003846:	4618      	mov	r0, r3
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	08006c3c 	.word	0x08006c3c

08003854 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003854:	b590      	push	{r4, r7, lr}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	607b      	str	r3, [r7, #4]
 800385e:	2300      	movs	r3, #0
 8003860:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003862:	f7ff ff31 	bl	80036c8 <LL_RCC_PLL_GetMainSource>
 8003866:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 800386e:	d017      	beq.n	80038a0 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8003876:	d81e      	bhi.n	80038b6 <RCC_PLL_GetFreqDomain_SYS+0x62>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d004      	beq.n	8003888 <RCC_PLL_GetFreqDomain_SYS+0x34>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003884:	d003      	beq.n	800388e <RCC_PLL_GetFreqDomain_SYS+0x3a>
 8003886:	e016      	b.n	80038b6 <RCC_PLL_GetFreqDomain_SYS+0x62>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8003888:	4b1a      	ldr	r3, [pc, #104]	@ (80038f4 <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 800388a:	607b      	str	r3, [r7, #4]
      break;
 800388c:	e016      	b.n	80038bc <RCC_PLL_GetFreqDomain_SYS+0x68>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 800388e:	f7ff ff3f 	bl	8003710 <LL_RCC_PLL_GetPrediv>
 8003892:	4603      	mov	r3, r0
 8003894:	3301      	adds	r3, #1
 8003896:	4a18      	ldr	r2, [pc, #96]	@ (80038f8 <RCC_PLL_GetFreqDomain_SYS+0xa4>)
 8003898:	fbb2 f3f3 	udiv	r3, r2, r3
 800389c:	607b      	str	r3, [r7, #4]
      break;
 800389e:	e00d      	b.n	80038bc <RCC_PLL_GetFreqDomain_SYS+0x68>

#if defined(RCC_PLL2_SUPPORT)
    case LL_RCC_PLLSOURCE_PLL2:       /* PLL2 used as PLL clock source */
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
 80038a0:	f000 f82c 	bl	80038fc <RCC_PLL2_GetFreqClockFreq>
 80038a4:	4604      	mov	r4, r0
 80038a6:	f7ff ff33 	bl	8003710 <LL_RCC_PLL_GetPrediv>
 80038aa:	4603      	mov	r3, r0
 80038ac:	3301      	adds	r3, #1
 80038ae:	fbb4 f3f3 	udiv	r3, r4, r3
 80038b2:	607b      	str	r3, [r7, #4]
      break;
 80038b4:	e002      	b.n	80038bc <RCC_PLL_GetFreqDomain_SYS+0x68>
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 80038b6:	4b0f      	ldr	r3, [pc, #60]	@ (80038f4 <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 80038b8:	607b      	str	r3, [r7, #4]
      break;
 80038ba:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 80038bc:	f7ff ff1c 	bl	80036f8 <LL_RCC_PLL_GetMultiplicator>
 80038c0:	4603      	mov	r3, r0
 80038c2:	f5b3 1f50 	cmp.w	r3, #3407872	@ 0x340000
 80038c6:	d00a      	beq.n	80038de <RCC_PLL_GetFreqDomain_SYS+0x8a>
 80038c8:	f7ff ff16 	bl	80036f8 <LL_RCC_PLL_GetMultiplicator>
 80038cc:	4603      	mov	r3, r0
 80038ce:	0c9b      	lsrs	r3, r3, #18
 80038d0:	f003 030f 	and.w	r3, r3, #15
 80038d4:	3302      	adds	r3, #2
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	fb02 f303 	mul.w	r3, r2, r3
 80038dc:	e006      	b.n	80038ec <RCC_PLL_GetFreqDomain_SYS+0x98>
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	4613      	mov	r3, r2
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	4413      	add	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	085b      	lsrs	r3, r3, #1
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd90      	pop	{r4, r7, pc}
 80038f4:	003d0900 	.word	0x003d0900
 80038f8:	007a1200 	.word	0x007a1200

080038fc <RCC_PLL2_GetFreqClockFreq>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL2_GetFreqClockFreq(void)
{
 80038fc:	b598      	push	{r3, r4, r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  return __LL_RCC_CALC_PLL2CLK_FREQ(HSE_VALUE, LL_RCC_PLL2_GetMultiplicator(), LL_RCC_HSE_GetPrediv2());
 8003900:	f7ff ff12 	bl	8003728 <LL_RCC_PLL2_GetMultiplicator>
 8003904:	4603      	mov	r3, r0
 8003906:	0a1b      	lsrs	r3, r3, #8
 8003908:	4a07      	ldr	r2, [pc, #28]	@ (8003928 <RCC_PLL2_GetFreqClockFreq+0x2c>)
 800390a:	fb02 f303 	mul.w	r3, r2, r3
 800390e:	f503 0474 	add.w	r4, r3, #15990784	@ 0xf40000
 8003912:	f504 5410 	add.w	r4, r4, #9216	@ 0x2400
 8003916:	f7ff fe9b 	bl	8003650 <LL_RCC_HSE_GetPrediv2>
 800391a:	4603      	mov	r3, r0
 800391c:	091b      	lsrs	r3, r3, #4
 800391e:	3301      	adds	r3, #1
 8003920:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003924:	4618      	mov	r0, r3
 8003926:	bd98      	pop	{r3, r4, r7, pc}
 8003928:	007a1200 	.word	0x007a1200

0800392c <LL_TIM_SetPrescaler>:
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	bc80      	pop	{r7}
 8003944:	4770      	bx	lr

08003946 <LL_TIM_SetAutoReload>:
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
 800394e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	bc80      	pop	{r7}
 800395e:	4770      	bx	lr

08003960 <LL_TIM_SetRepetitionCounter>:
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	bc80      	pop	{r7}
 8003978:	4770      	bx	lr

0800397a <LL_TIM_OC_SetCompareCH1>:
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
 8003982:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr

08003994 <LL_TIM_OC_SetCompareCH2>:
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bc80      	pop	{r7}
 80039ac:	4770      	bx	lr

080039ae <LL_TIM_OC_SetCompareCH3>:
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
 80039b6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr

080039c8 <LL_TIM_OC_SetCompareCH4>:
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	bc80      	pop	{r7}
 80039e0:	4770      	bx	lr

080039e2 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	f043 0201 	orr.w	r2, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	615a      	str	r2, [r3, #20]
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc80      	pop	{r7}
 80039fe:	4770      	bx	lr

08003a00 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a2b      	ldr	r2, [pc, #172]	@ (8003ac0 <LL_TIM_Init+0xc0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d00f      	beq.n	8003a38 <LL_TIM_Init+0x38>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a1e:	d00b      	beq.n	8003a38 <LL_TIM_Init+0x38>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a28      	ldr	r2, [pc, #160]	@ (8003ac4 <LL_TIM_Init+0xc4>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d007      	beq.n	8003a38 <LL_TIM_Init+0x38>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a27      	ldr	r2, [pc, #156]	@ (8003ac8 <LL_TIM_Init+0xc8>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d003      	beq.n	8003a38 <LL_TIM_Init+0x38>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a26      	ldr	r2, [pc, #152]	@ (8003acc <LL_TIM_Init+0xcc>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d106      	bne.n	8003a46 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a1d      	ldr	r2, [pc, #116]	@ (8003ac0 <LL_TIM_Init+0xc0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00f      	beq.n	8003a6e <LL_TIM_Init+0x6e>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a54:	d00b      	beq.n	8003a6e <LL_TIM_Init+0x6e>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a1a      	ldr	r2, [pc, #104]	@ (8003ac4 <LL_TIM_Init+0xc4>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d007      	beq.n	8003a6e <LL_TIM_Init+0x6e>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a19      	ldr	r2, [pc, #100]	@ (8003ac8 <LL_TIM_Init+0xc8>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d003      	beq.n	8003a6e <LL_TIM_Init+0x6e>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a18      	ldr	r2, [pc, #96]	@ (8003acc <LL_TIM_Init+0xcc>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d106      	bne.n	8003a7c <LL_TIM_Init+0x7c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	4619      	mov	r1, r3
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7ff ff5c 	bl	8003946 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	881b      	ldrh	r3, [r3, #0]
 8003a92:	4619      	mov	r1, r3
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7ff ff49 	bl	800392c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a08      	ldr	r2, [pc, #32]	@ (8003ac0 <LL_TIM_Init+0xc0>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d105      	bne.n	8003aae <LL_TIM_Init+0xae>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7ff ff59 	bl	8003960 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7ff ff97 	bl	80039e2 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	40012c00 	.word	0x40012c00
 8003ac4:	40000400 	.word	0x40000400
 8003ac8:	40000800 	.word	0x40000800
 8003acc:	40000c00 	.word	0x40000c00

08003ad0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ae6:	d027      	beq.n	8003b38 <LL_TIM_OC_Init+0x68>
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aee:	d82a      	bhi.n	8003b46 <LL_TIM_OC_Init+0x76>
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003af6:	d018      	beq.n	8003b2a <LL_TIM_OC_Init+0x5a>
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003afe:	d822      	bhi.n	8003b46 <LL_TIM_OC_Init+0x76>
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d003      	beq.n	8003b0e <LL_TIM_OC_Init+0x3e>
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	2b10      	cmp	r3, #16
 8003b0a:	d007      	beq.n	8003b1c <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8003b0c:	e01b      	b.n	8003b46 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 f85f 	bl	8003bd4 <OC1Config>
 8003b16:	4603      	mov	r3, r0
 8003b18:	75fb      	strb	r3, [r7, #23]
      break;
 8003b1a:	e015      	b.n	8003b48 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 f8be 	bl	8003ca0 <OC2Config>
 8003b24:	4603      	mov	r3, r0
 8003b26:	75fb      	strb	r3, [r7, #23]
      break;
 8003b28:	e00e      	b.n	8003b48 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 f921 	bl	8003d74 <OC3Config>
 8003b32:	4603      	mov	r3, r0
 8003b34:	75fb      	strb	r3, [r7, #23]
      break;
 8003b36:	e007      	b.n	8003b48 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 f984 	bl	8003e48 <OC4Config>
 8003b40:	4603      	mov	r3, r0
 8003b42:	75fb      	strb	r3, [r7, #23]
      break;
 8003b44:	e000      	b.n	8003b48 <LL_TIM_OC_Init+0x78>
      break;
 8003b46:	bf00      	nop
  }

  return result;
 8003b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3718      	adds	r7, #24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, const LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b085      	sub	sp, #20
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
 8003b5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	7b12      	ldrb	r2, [r2, #12]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	89d2      	ldrh	r2, [r2, #14]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	645a      	str	r2, [r3, #68]	@ 0x44

  return SUCCESS;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bc80      	pop	{r7}
 8003bd2:	4770      	bx	lr

08003bd4 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	f023 0201 	bic.w	r2, r3, #1
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f023 0303 	bic.w	r3, r3, #3
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f023 0202 	bic.w	r2, r3, #2
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f023 0201 	bic.w	r2, r3, #1
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a1a      	ldr	r2, [pc, #104]	@ (8003c9c <OC1Config+0xc8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d11e      	bne.n	8003c74 <OC1Config+0xa0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f023 0208 	bic.w	r2, r3, #8
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4313      	orrs	r3, r2
 8003c44:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f023 0204 	bic.w	r2, r3, #4
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4313      	orrs	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	4313      	orrs	r3, r2
 8003c72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	4619      	mov	r1, r3
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7ff fe77 	bl	800397a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40012c00 	.word	0x40012c00

08003ca0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	f023 0210 	bic.w	r2, r3, #16
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	021b      	lsls	r3, r3, #8
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f023 0220 	bic.w	r2, r3, #32
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	4313      	orrs	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f023 0210 	bic.w	r2, r3, #16
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	011b      	lsls	r3, r3, #4
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a1b      	ldr	r2, [pc, #108]	@ (8003d70 <OC2Config+0xd0>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d11f      	bne.n	8003d48 <OC2Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	019b      	lsls	r3, r3, #6
 8003d14:	4313      	orrs	r3, r2
 8003d16:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	019b      	lsls	r3, r3, #6
 8003d24:	4313      	orrs	r3, r2
 8003d26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4313      	orrs	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	4619      	mov	r1, r3
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7ff fe1a 	bl	8003994 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40012c00 	.word	0x40012c00

08003d74 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f023 0303 	bic.w	r3, r3, #3
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	021b      	lsls	r3, r3, #8
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	021b      	lsls	r3, r3, #8
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a1b      	ldr	r2, [pc, #108]	@ (8003e44 <OC3Config+0xd0>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d11f      	bne.n	8003e1a <OC3Config+0xa6>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	029b      	lsls	r3, r3, #10
 8003de6:	4313      	orrs	r3, r2
 8003de8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	029b      	lsls	r3, r3, #10
 8003df6:	4313      	orrs	r3, r2
 8003df8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	011b      	lsls	r3, r3, #4
 8003e06:	4313      	orrs	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	69db      	ldr	r3, [r3, #28]
 8003e14:	015b      	lsls	r3, r3, #5
 8003e16:	4313      	orrs	r3, r2
 8003e18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7ff fdbe 	bl	80039ae <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40012c00 	.word	0x40012c00

08003e48 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	021b      	lsls	r3, r3, #8
 8003e84:	4313      	orrs	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	031b      	lsls	r3, r3, #12
 8003e94:	4313      	orrs	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	031b      	lsls	r3, r3, #12
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a0f      	ldr	r2, [pc, #60]	@ (8003ee8 <OC4Config+0xa0>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d107      	bne.n	8003ec0 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	019b      	lsls	r3, r3, #6
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7ff fd78 	bl	80039c8 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3718      	adds	r7, #24
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40012c00 	.word	0x40012c00

08003eec <LL_USART_IsEnabled>:
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003efc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f00:	bf0c      	ite	eq
 8003f02:	2301      	moveq	r3, #1
 8003f04:	2300      	movne	r3, #0
 8003f06:	b2db      	uxtb	r3, r3
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bc80      	pop	{r7}
 8003f10:	4770      	bx	lr

08003f12 <LL_USART_SetStopBitsLength>:
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
 8003f1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	611a      	str	r2, [r3, #16]
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bc80      	pop	{r7}
 8003f34:	4770      	bx	lr

08003f36 <LL_USART_SetHWFlowCtrl>:
{
 8003f36:	b480      	push	{r7}
 8003f38:	b083      	sub	sp, #12
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
 8003f3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	615a      	str	r2, [r3, #20]
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bc80      	pop	{r7}
 8003f58:	4770      	bx	lr
	...

08003f5c <LL_USART_SetBaudRate>:
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	009a      	lsls	r2, r3, #2
 8003f72:	441a      	add	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7c:	4a25      	ldr	r2, [pc, #148]	@ (8004014 <LL_USART_SetBaudRate+0xb8>)
 8003f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f82:	095b      	lsrs	r3, r3, #5
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	011b      	lsls	r3, r3, #4
 8003f88:	b299      	uxth	r1, r3
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4413      	add	r3, r2
 8003f92:	009a      	lsls	r2, r3, #2
 8003f94:	441a      	add	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f9e:	4b1d      	ldr	r3, [pc, #116]	@ (8004014 <LL_USART_SetBaudRate+0xb8>)
 8003fa0:	fba3 0302 	umull	r0, r3, r3, r2
 8003fa4:	095b      	lsrs	r3, r3, #5
 8003fa6:	2064      	movs	r0, #100	@ 0x64
 8003fa8:	fb00 f303 	mul.w	r3, r0, r3
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	3332      	adds	r3, #50	@ 0x32
 8003fb2:	4a18      	ldr	r2, [pc, #96]	@ (8004014 <LL_USART_SetBaudRate+0xb8>)
 8003fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb8:	095b      	lsrs	r3, r3, #5
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	440b      	add	r3, r1
 8003fc4:	b299      	uxth	r1, r3
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	009a      	lsls	r2, r3, #2
 8003fd0:	441a      	add	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fda:	4b0e      	ldr	r3, [pc, #56]	@ (8004014 <LL_USART_SetBaudRate+0xb8>)
 8003fdc:	fba3 0302 	umull	r0, r3, r3, r2
 8003fe0:	095b      	lsrs	r3, r3, #5
 8003fe2:	2064      	movs	r0, #100	@ 0x64
 8003fe4:	fb00 f303 	mul.w	r3, r0, r3
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	3332      	adds	r3, #50	@ 0x32
 8003fee:	4a09      	ldr	r2, [pc, #36]	@ (8004014 <LL_USART_SetBaudRate+0xb8>)
 8003ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff4:	095b      	lsrs	r3, r3, #5
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	f003 030f 	and.w	r3, r3, #15
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	440b      	add	r3, r1
 8004000:	b29b      	uxth	r3, r3
 8004002:	461a      	mov	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	609a      	str	r2, [r3, #8]
}
 8004008:	bf00      	nop
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	bc80      	pop	{r7}
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	51eb851f 	.word	0x51eb851f

08004018 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b088      	sub	sp, #32
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004026:	2300      	movs	r3, #0
 8004028:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7ff ff5e 	bl	8003eec <LL_USART_IsEnabled>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d153      	bne.n	80040de <LL_USART_Init+0xc6>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800403e:	f023 030c 	bic.w	r3, r3, #12
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	6851      	ldr	r1, [r2, #4]
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	68d2      	ldr	r2, [r2, #12]
 800404a:	4311      	orrs	r1, r2
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	6912      	ldr	r2, [r2, #16]
 8004050:	430a      	orrs	r2, r1
 8004052:	431a      	orrs	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	4619      	mov	r1, r3
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7ff ff57 	bl	8003f12 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	4619      	mov	r1, r3
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7ff ff63 	bl	8003f36 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004070:	f107 0308 	add.w	r3, r7, #8
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff fb63 	bl	8003740 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a1a      	ldr	r2, [pc, #104]	@ (80040e8 <LL_USART_Init+0xd0>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d102      	bne.n	8004088 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	61bb      	str	r3, [r7, #24]
 8004086:	e01a      	b.n	80040be <LL_USART_Init+0xa6>
    }
    else if (USARTx == USART2)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a18      	ldr	r2, [pc, #96]	@ (80040ec <LL_USART_Init+0xd4>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d102      	bne.n	8004096 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	61bb      	str	r3, [r7, #24]
 8004094:	e013      	b.n	80040be <LL_USART_Init+0xa6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a15      	ldr	r2, [pc, #84]	@ (80040f0 <LL_USART_Init+0xd8>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d102      	bne.n	80040a4 <LL_USART_Init+0x8c>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	61bb      	str	r3, [r7, #24]
 80040a2:	e00c      	b.n	80040be <LL_USART_Init+0xa6>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a13      	ldr	r2, [pc, #76]	@ (80040f4 <LL_USART_Init+0xdc>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d102      	bne.n	80040b2 <LL_USART_Init+0x9a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	61bb      	str	r3, [r7, #24]
 80040b0:	e005      	b.n	80040be <LL_USART_Init+0xa6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a10      	ldr	r2, [pc, #64]	@ (80040f8 <LL_USART_Init+0xe0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d101      	bne.n	80040be <LL_USART_Init+0xa6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00c      	beq.n	80040de <LL_USART_Init+0xc6>
        && (USART_InitStruct->BaudRate != 0U))
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d008      	beq.n	80040de <LL_USART_Init+0xc6>
    {
      status = SUCCESS;
 80040cc:	2300      	movs	r3, #0
 80040ce:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80040d4:	461a      	mov	r2, r3
 80040d6:	69b9      	ldr	r1, [r7, #24]
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7ff ff3f 	bl	8003f5c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80040de:	7ffb      	ldrb	r3, [r7, #31]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3720      	adds	r7, #32
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40013800 	.word	0x40013800
 80040ec:	40004400 	.word	0x40004400
 80040f0:	40004800 	.word	0x40004800
 80040f4:	40004c00 	.word	0x40004c00
 80040f8:	40005000 	.word	0x40005000

080040fc <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004104:	4b0e      	ldr	r3, [pc, #56]	@ (8004140 <LL_mDelay+0x44>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800410a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004112:	d00c      	beq.n	800412e <LL_mDelay+0x32>
  {
    Delay++;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3301      	adds	r3, #1
 8004118:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800411a:	e008      	b.n	800412e <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800411c:	4b08      	ldr	r3, [pc, #32]	@ (8004140 <LL_mDelay+0x44>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d002      	beq.n	800412e <LL_mDelay+0x32>
    {
      Delay--;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	3b01      	subs	r3, #1
 800412c:	607b      	str	r3, [r7, #4]
  while (Delay)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1f3      	bne.n	800411c <LL_mDelay+0x20>
    }
  }
}
 8004134:	bf00      	nop
 8004136:	bf00      	nop
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr
 8004140:	e000e010 	.word	0xe000e010

08004144 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800414c:	4a03      	ldr	r2, [pc, #12]	@ (800415c <LL_SetSystemCoreClock+0x18>)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6013      	str	r3, [r2, #0]
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr
 800415c:	20000cc0 	.word	0x20000cc0

08004160 <__sflush_r>:
 8004160:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004166:	0716      	lsls	r6, r2, #28
 8004168:	4605      	mov	r5, r0
 800416a:	460c      	mov	r4, r1
 800416c:	d454      	bmi.n	8004218 <__sflush_r+0xb8>
 800416e:	684b      	ldr	r3, [r1, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	dc02      	bgt.n	800417a <__sflush_r+0x1a>
 8004174:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004176:	2b00      	cmp	r3, #0
 8004178:	dd48      	ble.n	800420c <__sflush_r+0xac>
 800417a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800417c:	2e00      	cmp	r6, #0
 800417e:	d045      	beq.n	800420c <__sflush_r+0xac>
 8004180:	2300      	movs	r3, #0
 8004182:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004186:	682f      	ldr	r7, [r5, #0]
 8004188:	6a21      	ldr	r1, [r4, #32]
 800418a:	602b      	str	r3, [r5, #0]
 800418c:	d030      	beq.n	80041f0 <__sflush_r+0x90>
 800418e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004190:	89a3      	ldrh	r3, [r4, #12]
 8004192:	0759      	lsls	r1, r3, #29
 8004194:	d505      	bpl.n	80041a2 <__sflush_r+0x42>
 8004196:	6863      	ldr	r3, [r4, #4]
 8004198:	1ad2      	subs	r2, r2, r3
 800419a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800419c:	b10b      	cbz	r3, 80041a2 <__sflush_r+0x42>
 800419e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80041a0:	1ad2      	subs	r2, r2, r3
 80041a2:	2300      	movs	r3, #0
 80041a4:	4628      	mov	r0, r5
 80041a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80041a8:	6a21      	ldr	r1, [r4, #32]
 80041aa:	47b0      	blx	r6
 80041ac:	1c43      	adds	r3, r0, #1
 80041ae:	89a3      	ldrh	r3, [r4, #12]
 80041b0:	d106      	bne.n	80041c0 <__sflush_r+0x60>
 80041b2:	6829      	ldr	r1, [r5, #0]
 80041b4:	291d      	cmp	r1, #29
 80041b6:	d82b      	bhi.n	8004210 <__sflush_r+0xb0>
 80041b8:	4a28      	ldr	r2, [pc, #160]	@ (800425c <__sflush_r+0xfc>)
 80041ba:	410a      	asrs	r2, r1
 80041bc:	07d6      	lsls	r6, r2, #31
 80041be:	d427      	bmi.n	8004210 <__sflush_r+0xb0>
 80041c0:	2200      	movs	r2, #0
 80041c2:	6062      	str	r2, [r4, #4]
 80041c4:	6922      	ldr	r2, [r4, #16]
 80041c6:	04d9      	lsls	r1, r3, #19
 80041c8:	6022      	str	r2, [r4, #0]
 80041ca:	d504      	bpl.n	80041d6 <__sflush_r+0x76>
 80041cc:	1c42      	adds	r2, r0, #1
 80041ce:	d101      	bne.n	80041d4 <__sflush_r+0x74>
 80041d0:	682b      	ldr	r3, [r5, #0]
 80041d2:	b903      	cbnz	r3, 80041d6 <__sflush_r+0x76>
 80041d4:	6560      	str	r0, [r4, #84]	@ 0x54
 80041d6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80041d8:	602f      	str	r7, [r5, #0]
 80041da:	b1b9      	cbz	r1, 800420c <__sflush_r+0xac>
 80041dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80041e0:	4299      	cmp	r1, r3
 80041e2:	d002      	beq.n	80041ea <__sflush_r+0x8a>
 80041e4:	4628      	mov	r0, r5
 80041e6:	f000 fb77 	bl	80048d8 <_free_r>
 80041ea:	2300      	movs	r3, #0
 80041ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80041ee:	e00d      	b.n	800420c <__sflush_r+0xac>
 80041f0:	2301      	movs	r3, #1
 80041f2:	4628      	mov	r0, r5
 80041f4:	47b0      	blx	r6
 80041f6:	4602      	mov	r2, r0
 80041f8:	1c50      	adds	r0, r2, #1
 80041fa:	d1c9      	bne.n	8004190 <__sflush_r+0x30>
 80041fc:	682b      	ldr	r3, [r5, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0c6      	beq.n	8004190 <__sflush_r+0x30>
 8004202:	2b1d      	cmp	r3, #29
 8004204:	d001      	beq.n	800420a <__sflush_r+0xaa>
 8004206:	2b16      	cmp	r3, #22
 8004208:	d11d      	bne.n	8004246 <__sflush_r+0xe6>
 800420a:	602f      	str	r7, [r5, #0]
 800420c:	2000      	movs	r0, #0
 800420e:	e021      	b.n	8004254 <__sflush_r+0xf4>
 8004210:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004214:	b21b      	sxth	r3, r3
 8004216:	e01a      	b.n	800424e <__sflush_r+0xee>
 8004218:	690f      	ldr	r7, [r1, #16]
 800421a:	2f00      	cmp	r7, #0
 800421c:	d0f6      	beq.n	800420c <__sflush_r+0xac>
 800421e:	0793      	lsls	r3, r2, #30
 8004220:	bf18      	it	ne
 8004222:	2300      	movne	r3, #0
 8004224:	680e      	ldr	r6, [r1, #0]
 8004226:	bf08      	it	eq
 8004228:	694b      	ldreq	r3, [r1, #20]
 800422a:	1bf6      	subs	r6, r6, r7
 800422c:	600f      	str	r7, [r1, #0]
 800422e:	608b      	str	r3, [r1, #8]
 8004230:	2e00      	cmp	r6, #0
 8004232:	ddeb      	ble.n	800420c <__sflush_r+0xac>
 8004234:	4633      	mov	r3, r6
 8004236:	463a      	mov	r2, r7
 8004238:	4628      	mov	r0, r5
 800423a:	6a21      	ldr	r1, [r4, #32]
 800423c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004240:	47e0      	blx	ip
 8004242:	2800      	cmp	r0, #0
 8004244:	dc07      	bgt.n	8004256 <__sflush_r+0xf6>
 8004246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800424a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800424e:	f04f 30ff 	mov.w	r0, #4294967295
 8004252:	81a3      	strh	r3, [r4, #12]
 8004254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004256:	4407      	add	r7, r0
 8004258:	1a36      	subs	r6, r6, r0
 800425a:	e7e9      	b.n	8004230 <__sflush_r+0xd0>
 800425c:	dfbffffe 	.word	0xdfbffffe

08004260 <_fflush_r>:
 8004260:	b538      	push	{r3, r4, r5, lr}
 8004262:	690b      	ldr	r3, [r1, #16]
 8004264:	4605      	mov	r5, r0
 8004266:	460c      	mov	r4, r1
 8004268:	b913      	cbnz	r3, 8004270 <_fflush_r+0x10>
 800426a:	2500      	movs	r5, #0
 800426c:	4628      	mov	r0, r5
 800426e:	bd38      	pop	{r3, r4, r5, pc}
 8004270:	b118      	cbz	r0, 800427a <_fflush_r+0x1a>
 8004272:	6a03      	ldr	r3, [r0, #32]
 8004274:	b90b      	cbnz	r3, 800427a <_fflush_r+0x1a>
 8004276:	f000 f8bb 	bl	80043f0 <__sinit>
 800427a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d0f3      	beq.n	800426a <_fflush_r+0xa>
 8004282:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004284:	07d0      	lsls	r0, r2, #31
 8004286:	d404      	bmi.n	8004292 <_fflush_r+0x32>
 8004288:	0599      	lsls	r1, r3, #22
 800428a:	d402      	bmi.n	8004292 <_fflush_r+0x32>
 800428c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800428e:	f000 fb20 	bl	80048d2 <__retarget_lock_acquire_recursive>
 8004292:	4628      	mov	r0, r5
 8004294:	4621      	mov	r1, r4
 8004296:	f7ff ff63 	bl	8004160 <__sflush_r>
 800429a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800429c:	4605      	mov	r5, r0
 800429e:	07da      	lsls	r2, r3, #31
 80042a0:	d4e4      	bmi.n	800426c <_fflush_r+0xc>
 80042a2:	89a3      	ldrh	r3, [r4, #12]
 80042a4:	059b      	lsls	r3, r3, #22
 80042a6:	d4e1      	bmi.n	800426c <_fflush_r+0xc>
 80042a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80042aa:	f000 fb13 	bl	80048d4 <__retarget_lock_release_recursive>
 80042ae:	e7dd      	b.n	800426c <_fflush_r+0xc>

080042b0 <fflush>:
 80042b0:	4601      	mov	r1, r0
 80042b2:	b920      	cbnz	r0, 80042be <fflush+0xe>
 80042b4:	4a04      	ldr	r2, [pc, #16]	@ (80042c8 <fflush+0x18>)
 80042b6:	4905      	ldr	r1, [pc, #20]	@ (80042cc <fflush+0x1c>)
 80042b8:	4805      	ldr	r0, [pc, #20]	@ (80042d0 <fflush+0x20>)
 80042ba:	f000 b8b1 	b.w	8004420 <_fwalk_sglue>
 80042be:	4b05      	ldr	r3, [pc, #20]	@ (80042d4 <fflush+0x24>)
 80042c0:	6818      	ldr	r0, [r3, #0]
 80042c2:	f7ff bfcd 	b.w	8004260 <_fflush_r>
 80042c6:	bf00      	nop
 80042c8:	20000ccc 	.word	0x20000ccc
 80042cc:	08004261 	.word	0x08004261
 80042d0:	20000cdc 	.word	0x20000cdc
 80042d4:	20000cd8 	.word	0x20000cd8

080042d8 <std>:
 80042d8:	2300      	movs	r3, #0
 80042da:	b510      	push	{r4, lr}
 80042dc:	4604      	mov	r4, r0
 80042de:	e9c0 3300 	strd	r3, r3, [r0]
 80042e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042e6:	6083      	str	r3, [r0, #8]
 80042e8:	8181      	strh	r1, [r0, #12]
 80042ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80042ec:	81c2      	strh	r2, [r0, #14]
 80042ee:	6183      	str	r3, [r0, #24]
 80042f0:	4619      	mov	r1, r3
 80042f2:	2208      	movs	r2, #8
 80042f4:	305c      	adds	r0, #92	@ 0x5c
 80042f6:	f000 fa61 	bl	80047bc <memset>
 80042fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004330 <std+0x58>)
 80042fc:	6224      	str	r4, [r4, #32]
 80042fe:	6263      	str	r3, [r4, #36]	@ 0x24
 8004300:	4b0c      	ldr	r3, [pc, #48]	@ (8004334 <std+0x5c>)
 8004302:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004304:	4b0c      	ldr	r3, [pc, #48]	@ (8004338 <std+0x60>)
 8004306:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004308:	4b0c      	ldr	r3, [pc, #48]	@ (800433c <std+0x64>)
 800430a:	6323      	str	r3, [r4, #48]	@ 0x30
 800430c:	4b0c      	ldr	r3, [pc, #48]	@ (8004340 <std+0x68>)
 800430e:	429c      	cmp	r4, r3
 8004310:	d006      	beq.n	8004320 <std+0x48>
 8004312:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004316:	4294      	cmp	r4, r2
 8004318:	d002      	beq.n	8004320 <std+0x48>
 800431a:	33d0      	adds	r3, #208	@ 0xd0
 800431c:	429c      	cmp	r4, r3
 800431e:	d105      	bne.n	800432c <std+0x54>
 8004320:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004328:	f000 bad2 	b.w	80048d0 <__retarget_lock_init_recursive>
 800432c:	bd10      	pop	{r4, pc}
 800432e:	bf00      	nop
 8004330:	08004609 	.word	0x08004609
 8004334:	0800462f 	.word	0x0800462f
 8004338:	08004667 	.word	0x08004667
 800433c:	0800468b 	.word	0x0800468b
 8004340:	20001084 	.word	0x20001084

08004344 <stdio_exit_handler>:
 8004344:	4a02      	ldr	r2, [pc, #8]	@ (8004350 <stdio_exit_handler+0xc>)
 8004346:	4903      	ldr	r1, [pc, #12]	@ (8004354 <stdio_exit_handler+0x10>)
 8004348:	4803      	ldr	r0, [pc, #12]	@ (8004358 <stdio_exit_handler+0x14>)
 800434a:	f000 b869 	b.w	8004420 <_fwalk_sglue>
 800434e:	bf00      	nop
 8004350:	20000ccc 	.word	0x20000ccc
 8004354:	08004261 	.word	0x08004261
 8004358:	20000cdc 	.word	0x20000cdc

0800435c <cleanup_stdio>:
 800435c:	6841      	ldr	r1, [r0, #4]
 800435e:	4b0c      	ldr	r3, [pc, #48]	@ (8004390 <cleanup_stdio+0x34>)
 8004360:	b510      	push	{r4, lr}
 8004362:	4299      	cmp	r1, r3
 8004364:	4604      	mov	r4, r0
 8004366:	d001      	beq.n	800436c <cleanup_stdio+0x10>
 8004368:	f7ff ff7a 	bl	8004260 <_fflush_r>
 800436c:	68a1      	ldr	r1, [r4, #8]
 800436e:	4b09      	ldr	r3, [pc, #36]	@ (8004394 <cleanup_stdio+0x38>)
 8004370:	4299      	cmp	r1, r3
 8004372:	d002      	beq.n	800437a <cleanup_stdio+0x1e>
 8004374:	4620      	mov	r0, r4
 8004376:	f7ff ff73 	bl	8004260 <_fflush_r>
 800437a:	68e1      	ldr	r1, [r4, #12]
 800437c:	4b06      	ldr	r3, [pc, #24]	@ (8004398 <cleanup_stdio+0x3c>)
 800437e:	4299      	cmp	r1, r3
 8004380:	d004      	beq.n	800438c <cleanup_stdio+0x30>
 8004382:	4620      	mov	r0, r4
 8004384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004388:	f7ff bf6a 	b.w	8004260 <_fflush_r>
 800438c:	bd10      	pop	{r4, pc}
 800438e:	bf00      	nop
 8004390:	20001084 	.word	0x20001084
 8004394:	200010ec 	.word	0x200010ec
 8004398:	20001154 	.word	0x20001154

0800439c <global_stdio_init.part.0>:
 800439c:	b510      	push	{r4, lr}
 800439e:	4b0b      	ldr	r3, [pc, #44]	@ (80043cc <global_stdio_init.part.0+0x30>)
 80043a0:	4c0b      	ldr	r4, [pc, #44]	@ (80043d0 <global_stdio_init.part.0+0x34>)
 80043a2:	4a0c      	ldr	r2, [pc, #48]	@ (80043d4 <global_stdio_init.part.0+0x38>)
 80043a4:	4620      	mov	r0, r4
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	2104      	movs	r1, #4
 80043aa:	2200      	movs	r2, #0
 80043ac:	f7ff ff94 	bl	80042d8 <std>
 80043b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80043b4:	2201      	movs	r2, #1
 80043b6:	2109      	movs	r1, #9
 80043b8:	f7ff ff8e 	bl	80042d8 <std>
 80043bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80043c0:	2202      	movs	r2, #2
 80043c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043c6:	2112      	movs	r1, #18
 80043c8:	f7ff bf86 	b.w	80042d8 <std>
 80043cc:	200011bc 	.word	0x200011bc
 80043d0:	20001084 	.word	0x20001084
 80043d4:	08004345 	.word	0x08004345

080043d8 <__sfp_lock_acquire>:
 80043d8:	4801      	ldr	r0, [pc, #4]	@ (80043e0 <__sfp_lock_acquire+0x8>)
 80043da:	f000 ba7a 	b.w	80048d2 <__retarget_lock_acquire_recursive>
 80043de:	bf00      	nop
 80043e0:	200011c5 	.word	0x200011c5

080043e4 <__sfp_lock_release>:
 80043e4:	4801      	ldr	r0, [pc, #4]	@ (80043ec <__sfp_lock_release+0x8>)
 80043e6:	f000 ba75 	b.w	80048d4 <__retarget_lock_release_recursive>
 80043ea:	bf00      	nop
 80043ec:	200011c5 	.word	0x200011c5

080043f0 <__sinit>:
 80043f0:	b510      	push	{r4, lr}
 80043f2:	4604      	mov	r4, r0
 80043f4:	f7ff fff0 	bl	80043d8 <__sfp_lock_acquire>
 80043f8:	6a23      	ldr	r3, [r4, #32]
 80043fa:	b11b      	cbz	r3, 8004404 <__sinit+0x14>
 80043fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004400:	f7ff bff0 	b.w	80043e4 <__sfp_lock_release>
 8004404:	4b04      	ldr	r3, [pc, #16]	@ (8004418 <__sinit+0x28>)
 8004406:	6223      	str	r3, [r4, #32]
 8004408:	4b04      	ldr	r3, [pc, #16]	@ (800441c <__sinit+0x2c>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1f5      	bne.n	80043fc <__sinit+0xc>
 8004410:	f7ff ffc4 	bl	800439c <global_stdio_init.part.0>
 8004414:	e7f2      	b.n	80043fc <__sinit+0xc>
 8004416:	bf00      	nop
 8004418:	0800435d 	.word	0x0800435d
 800441c:	200011bc 	.word	0x200011bc

08004420 <_fwalk_sglue>:
 8004420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004424:	4607      	mov	r7, r0
 8004426:	4688      	mov	r8, r1
 8004428:	4614      	mov	r4, r2
 800442a:	2600      	movs	r6, #0
 800442c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004430:	f1b9 0901 	subs.w	r9, r9, #1
 8004434:	d505      	bpl.n	8004442 <_fwalk_sglue+0x22>
 8004436:	6824      	ldr	r4, [r4, #0]
 8004438:	2c00      	cmp	r4, #0
 800443a:	d1f7      	bne.n	800442c <_fwalk_sglue+0xc>
 800443c:	4630      	mov	r0, r6
 800443e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004442:	89ab      	ldrh	r3, [r5, #12]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d907      	bls.n	8004458 <_fwalk_sglue+0x38>
 8004448:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800444c:	3301      	adds	r3, #1
 800444e:	d003      	beq.n	8004458 <_fwalk_sglue+0x38>
 8004450:	4629      	mov	r1, r5
 8004452:	4638      	mov	r0, r7
 8004454:	47c0      	blx	r8
 8004456:	4306      	orrs	r6, r0
 8004458:	3568      	adds	r5, #104	@ 0x68
 800445a:	e7e9      	b.n	8004430 <_fwalk_sglue+0x10>

0800445c <iprintf>:
 800445c:	b40f      	push	{r0, r1, r2, r3}
 800445e:	b507      	push	{r0, r1, r2, lr}
 8004460:	4906      	ldr	r1, [pc, #24]	@ (800447c <iprintf+0x20>)
 8004462:	ab04      	add	r3, sp, #16
 8004464:	6808      	ldr	r0, [r1, #0]
 8004466:	f853 2b04 	ldr.w	r2, [r3], #4
 800446a:	6881      	ldr	r1, [r0, #8]
 800446c:	9301      	str	r3, [sp, #4]
 800446e:	f000 fe73 	bl	8005158 <_vfiprintf_r>
 8004472:	b003      	add	sp, #12
 8004474:	f85d eb04 	ldr.w	lr, [sp], #4
 8004478:	b004      	add	sp, #16
 800447a:	4770      	bx	lr
 800447c:	20000cd8 	.word	0x20000cd8

08004480 <putchar>:
 8004480:	4b02      	ldr	r3, [pc, #8]	@ (800448c <putchar+0xc>)
 8004482:	4601      	mov	r1, r0
 8004484:	6818      	ldr	r0, [r3, #0]
 8004486:	6882      	ldr	r2, [r0, #8]
 8004488:	f001 babd 	b.w	8005a06 <_putc_r>
 800448c:	20000cd8 	.word	0x20000cd8

08004490 <_puts_r>:
 8004490:	6a03      	ldr	r3, [r0, #32]
 8004492:	b570      	push	{r4, r5, r6, lr}
 8004494:	4605      	mov	r5, r0
 8004496:	460e      	mov	r6, r1
 8004498:	6884      	ldr	r4, [r0, #8]
 800449a:	b90b      	cbnz	r3, 80044a0 <_puts_r+0x10>
 800449c:	f7ff ffa8 	bl	80043f0 <__sinit>
 80044a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80044a2:	07db      	lsls	r3, r3, #31
 80044a4:	d405      	bmi.n	80044b2 <_puts_r+0x22>
 80044a6:	89a3      	ldrh	r3, [r4, #12]
 80044a8:	0598      	lsls	r0, r3, #22
 80044aa:	d402      	bmi.n	80044b2 <_puts_r+0x22>
 80044ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80044ae:	f000 fa10 	bl	80048d2 <__retarget_lock_acquire_recursive>
 80044b2:	89a3      	ldrh	r3, [r4, #12]
 80044b4:	0719      	lsls	r1, r3, #28
 80044b6:	d502      	bpl.n	80044be <_puts_r+0x2e>
 80044b8:	6923      	ldr	r3, [r4, #16]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d135      	bne.n	800452a <_puts_r+0x9a>
 80044be:	4621      	mov	r1, r4
 80044c0:	4628      	mov	r0, r5
 80044c2:	f000 f925 	bl	8004710 <__swsetup_r>
 80044c6:	b380      	cbz	r0, 800452a <_puts_r+0x9a>
 80044c8:	f04f 35ff 	mov.w	r5, #4294967295
 80044cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80044ce:	07da      	lsls	r2, r3, #31
 80044d0:	d405      	bmi.n	80044de <_puts_r+0x4e>
 80044d2:	89a3      	ldrh	r3, [r4, #12]
 80044d4:	059b      	lsls	r3, r3, #22
 80044d6:	d402      	bmi.n	80044de <_puts_r+0x4e>
 80044d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80044da:	f000 f9fb 	bl	80048d4 <__retarget_lock_release_recursive>
 80044de:	4628      	mov	r0, r5
 80044e0:	bd70      	pop	{r4, r5, r6, pc}
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	da04      	bge.n	80044f0 <_puts_r+0x60>
 80044e6:	69a2      	ldr	r2, [r4, #24]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	dc17      	bgt.n	800451c <_puts_r+0x8c>
 80044ec:	290a      	cmp	r1, #10
 80044ee:	d015      	beq.n	800451c <_puts_r+0x8c>
 80044f0:	6823      	ldr	r3, [r4, #0]
 80044f2:	1c5a      	adds	r2, r3, #1
 80044f4:	6022      	str	r2, [r4, #0]
 80044f6:	7019      	strb	r1, [r3, #0]
 80044f8:	68a3      	ldr	r3, [r4, #8]
 80044fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80044fe:	3b01      	subs	r3, #1
 8004500:	60a3      	str	r3, [r4, #8]
 8004502:	2900      	cmp	r1, #0
 8004504:	d1ed      	bne.n	80044e2 <_puts_r+0x52>
 8004506:	2b00      	cmp	r3, #0
 8004508:	da11      	bge.n	800452e <_puts_r+0x9e>
 800450a:	4622      	mov	r2, r4
 800450c:	210a      	movs	r1, #10
 800450e:	4628      	mov	r0, r5
 8004510:	f000 f8bf 	bl	8004692 <__swbuf_r>
 8004514:	3001      	adds	r0, #1
 8004516:	d0d7      	beq.n	80044c8 <_puts_r+0x38>
 8004518:	250a      	movs	r5, #10
 800451a:	e7d7      	b.n	80044cc <_puts_r+0x3c>
 800451c:	4622      	mov	r2, r4
 800451e:	4628      	mov	r0, r5
 8004520:	f000 f8b7 	bl	8004692 <__swbuf_r>
 8004524:	3001      	adds	r0, #1
 8004526:	d1e7      	bne.n	80044f8 <_puts_r+0x68>
 8004528:	e7ce      	b.n	80044c8 <_puts_r+0x38>
 800452a:	3e01      	subs	r6, #1
 800452c:	e7e4      	b.n	80044f8 <_puts_r+0x68>
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	1c5a      	adds	r2, r3, #1
 8004532:	6022      	str	r2, [r4, #0]
 8004534:	220a      	movs	r2, #10
 8004536:	701a      	strb	r2, [r3, #0]
 8004538:	e7ee      	b.n	8004518 <_puts_r+0x88>
	...

0800453c <puts>:
 800453c:	4b02      	ldr	r3, [pc, #8]	@ (8004548 <puts+0xc>)
 800453e:	4601      	mov	r1, r0
 8004540:	6818      	ldr	r0, [r3, #0]
 8004542:	f7ff bfa5 	b.w	8004490 <_puts_r>
 8004546:	bf00      	nop
 8004548:	20000cd8 	.word	0x20000cd8

0800454c <sniprintf>:
 800454c:	b40c      	push	{r2, r3}
 800454e:	b530      	push	{r4, r5, lr}
 8004550:	4b17      	ldr	r3, [pc, #92]	@ (80045b0 <sniprintf+0x64>)
 8004552:	1e0c      	subs	r4, r1, #0
 8004554:	681d      	ldr	r5, [r3, #0]
 8004556:	b09d      	sub	sp, #116	@ 0x74
 8004558:	da08      	bge.n	800456c <sniprintf+0x20>
 800455a:	238b      	movs	r3, #139	@ 0x8b
 800455c:	f04f 30ff 	mov.w	r0, #4294967295
 8004560:	602b      	str	r3, [r5, #0]
 8004562:	b01d      	add	sp, #116	@ 0x74
 8004564:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004568:	b002      	add	sp, #8
 800456a:	4770      	bx	lr
 800456c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004570:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004574:	bf0c      	ite	eq
 8004576:	4623      	moveq	r3, r4
 8004578:	f104 33ff 	addne.w	r3, r4, #4294967295
 800457c:	9304      	str	r3, [sp, #16]
 800457e:	9307      	str	r3, [sp, #28]
 8004580:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004584:	9002      	str	r0, [sp, #8]
 8004586:	9006      	str	r0, [sp, #24]
 8004588:	f8ad 3016 	strh.w	r3, [sp, #22]
 800458c:	4628      	mov	r0, r5
 800458e:	ab21      	add	r3, sp, #132	@ 0x84
 8004590:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004592:	a902      	add	r1, sp, #8
 8004594:	9301      	str	r3, [sp, #4]
 8004596:	f000 faf1 	bl	8004b7c <_svfiprintf_r>
 800459a:	1c43      	adds	r3, r0, #1
 800459c:	bfbc      	itt	lt
 800459e:	238b      	movlt	r3, #139	@ 0x8b
 80045a0:	602b      	strlt	r3, [r5, #0]
 80045a2:	2c00      	cmp	r4, #0
 80045a4:	d0dd      	beq.n	8004562 <sniprintf+0x16>
 80045a6:	2200      	movs	r2, #0
 80045a8:	9b02      	ldr	r3, [sp, #8]
 80045aa:	701a      	strb	r2, [r3, #0]
 80045ac:	e7d9      	b.n	8004562 <sniprintf+0x16>
 80045ae:	bf00      	nop
 80045b0:	20000cd8 	.word	0x20000cd8

080045b4 <siscanf>:
 80045b4:	b40e      	push	{r1, r2, r3}
 80045b6:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80045ba:	b530      	push	{r4, r5, lr}
 80045bc:	b09c      	sub	sp, #112	@ 0x70
 80045be:	ac1f      	add	r4, sp, #124	@ 0x7c
 80045c0:	f854 5b04 	ldr.w	r5, [r4], #4
 80045c4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80045c8:	9002      	str	r0, [sp, #8]
 80045ca:	9006      	str	r0, [sp, #24]
 80045cc:	f7fb fe34 	bl	8000238 <strlen>
 80045d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004600 <siscanf+0x4c>)
 80045d2:	9003      	str	r0, [sp, #12]
 80045d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80045d6:	2300      	movs	r3, #0
 80045d8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80045da:	9314      	str	r3, [sp, #80]	@ 0x50
 80045dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80045e0:	9007      	str	r0, [sp, #28]
 80045e2:	4808      	ldr	r0, [pc, #32]	@ (8004604 <siscanf+0x50>)
 80045e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80045e8:	462a      	mov	r2, r5
 80045ea:	4623      	mov	r3, r4
 80045ec:	a902      	add	r1, sp, #8
 80045ee:	6800      	ldr	r0, [r0, #0]
 80045f0:	9401      	str	r4, [sp, #4]
 80045f2:	f000 fc17 	bl	8004e24 <__ssvfiscanf_r>
 80045f6:	b01c      	add	sp, #112	@ 0x70
 80045f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045fc:	b003      	add	sp, #12
 80045fe:	4770      	bx	lr
 8004600:	0800462b 	.word	0x0800462b
 8004604:	20000cd8 	.word	0x20000cd8

08004608 <__sread>:
 8004608:	b510      	push	{r4, lr}
 800460a:	460c      	mov	r4, r1
 800460c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004610:	f000 f910 	bl	8004834 <_read_r>
 8004614:	2800      	cmp	r0, #0
 8004616:	bfab      	itete	ge
 8004618:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800461a:	89a3      	ldrhlt	r3, [r4, #12]
 800461c:	181b      	addge	r3, r3, r0
 800461e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004622:	bfac      	ite	ge
 8004624:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004626:	81a3      	strhlt	r3, [r4, #12]
 8004628:	bd10      	pop	{r4, pc}

0800462a <__seofread>:
 800462a:	2000      	movs	r0, #0
 800462c:	4770      	bx	lr

0800462e <__swrite>:
 800462e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004632:	461f      	mov	r7, r3
 8004634:	898b      	ldrh	r3, [r1, #12]
 8004636:	4605      	mov	r5, r0
 8004638:	05db      	lsls	r3, r3, #23
 800463a:	460c      	mov	r4, r1
 800463c:	4616      	mov	r6, r2
 800463e:	d505      	bpl.n	800464c <__swrite+0x1e>
 8004640:	2302      	movs	r3, #2
 8004642:	2200      	movs	r2, #0
 8004644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004648:	f000 f8e2 	bl	8004810 <_lseek_r>
 800464c:	89a3      	ldrh	r3, [r4, #12]
 800464e:	4632      	mov	r2, r6
 8004650:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004654:	81a3      	strh	r3, [r4, #12]
 8004656:	4628      	mov	r0, r5
 8004658:	463b      	mov	r3, r7
 800465a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800465e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004662:	f000 b8f9 	b.w	8004858 <_write_r>

08004666 <__sseek>:
 8004666:	b510      	push	{r4, lr}
 8004668:	460c      	mov	r4, r1
 800466a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800466e:	f000 f8cf 	bl	8004810 <_lseek_r>
 8004672:	1c43      	adds	r3, r0, #1
 8004674:	89a3      	ldrh	r3, [r4, #12]
 8004676:	bf15      	itete	ne
 8004678:	6560      	strne	r0, [r4, #84]	@ 0x54
 800467a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800467e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004682:	81a3      	strheq	r3, [r4, #12]
 8004684:	bf18      	it	ne
 8004686:	81a3      	strhne	r3, [r4, #12]
 8004688:	bd10      	pop	{r4, pc}

0800468a <__sclose>:
 800468a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800468e:	f000 b8af 	b.w	80047f0 <_close_r>

08004692 <__swbuf_r>:
 8004692:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004694:	460e      	mov	r6, r1
 8004696:	4614      	mov	r4, r2
 8004698:	4605      	mov	r5, r0
 800469a:	b118      	cbz	r0, 80046a4 <__swbuf_r+0x12>
 800469c:	6a03      	ldr	r3, [r0, #32]
 800469e:	b90b      	cbnz	r3, 80046a4 <__swbuf_r+0x12>
 80046a0:	f7ff fea6 	bl	80043f0 <__sinit>
 80046a4:	69a3      	ldr	r3, [r4, #24]
 80046a6:	60a3      	str	r3, [r4, #8]
 80046a8:	89a3      	ldrh	r3, [r4, #12]
 80046aa:	071a      	lsls	r2, r3, #28
 80046ac:	d501      	bpl.n	80046b2 <__swbuf_r+0x20>
 80046ae:	6923      	ldr	r3, [r4, #16]
 80046b0:	b943      	cbnz	r3, 80046c4 <__swbuf_r+0x32>
 80046b2:	4621      	mov	r1, r4
 80046b4:	4628      	mov	r0, r5
 80046b6:	f000 f82b 	bl	8004710 <__swsetup_r>
 80046ba:	b118      	cbz	r0, 80046c4 <__swbuf_r+0x32>
 80046bc:	f04f 37ff 	mov.w	r7, #4294967295
 80046c0:	4638      	mov	r0, r7
 80046c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	6922      	ldr	r2, [r4, #16]
 80046c8:	b2f6      	uxtb	r6, r6
 80046ca:	1a98      	subs	r0, r3, r2
 80046cc:	6963      	ldr	r3, [r4, #20]
 80046ce:	4637      	mov	r7, r6
 80046d0:	4283      	cmp	r3, r0
 80046d2:	dc05      	bgt.n	80046e0 <__swbuf_r+0x4e>
 80046d4:	4621      	mov	r1, r4
 80046d6:	4628      	mov	r0, r5
 80046d8:	f7ff fdc2 	bl	8004260 <_fflush_r>
 80046dc:	2800      	cmp	r0, #0
 80046de:	d1ed      	bne.n	80046bc <__swbuf_r+0x2a>
 80046e0:	68a3      	ldr	r3, [r4, #8]
 80046e2:	3b01      	subs	r3, #1
 80046e4:	60a3      	str	r3, [r4, #8]
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	1c5a      	adds	r2, r3, #1
 80046ea:	6022      	str	r2, [r4, #0]
 80046ec:	701e      	strb	r6, [r3, #0]
 80046ee:	6962      	ldr	r2, [r4, #20]
 80046f0:	1c43      	adds	r3, r0, #1
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d004      	beq.n	8004700 <__swbuf_r+0x6e>
 80046f6:	89a3      	ldrh	r3, [r4, #12]
 80046f8:	07db      	lsls	r3, r3, #31
 80046fa:	d5e1      	bpl.n	80046c0 <__swbuf_r+0x2e>
 80046fc:	2e0a      	cmp	r6, #10
 80046fe:	d1df      	bne.n	80046c0 <__swbuf_r+0x2e>
 8004700:	4621      	mov	r1, r4
 8004702:	4628      	mov	r0, r5
 8004704:	f7ff fdac 	bl	8004260 <_fflush_r>
 8004708:	2800      	cmp	r0, #0
 800470a:	d0d9      	beq.n	80046c0 <__swbuf_r+0x2e>
 800470c:	e7d6      	b.n	80046bc <__swbuf_r+0x2a>
	...

08004710 <__swsetup_r>:
 8004710:	b538      	push	{r3, r4, r5, lr}
 8004712:	4b29      	ldr	r3, [pc, #164]	@ (80047b8 <__swsetup_r+0xa8>)
 8004714:	4605      	mov	r5, r0
 8004716:	6818      	ldr	r0, [r3, #0]
 8004718:	460c      	mov	r4, r1
 800471a:	b118      	cbz	r0, 8004724 <__swsetup_r+0x14>
 800471c:	6a03      	ldr	r3, [r0, #32]
 800471e:	b90b      	cbnz	r3, 8004724 <__swsetup_r+0x14>
 8004720:	f7ff fe66 	bl	80043f0 <__sinit>
 8004724:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004728:	0719      	lsls	r1, r3, #28
 800472a:	d422      	bmi.n	8004772 <__swsetup_r+0x62>
 800472c:	06da      	lsls	r2, r3, #27
 800472e:	d407      	bmi.n	8004740 <__swsetup_r+0x30>
 8004730:	2209      	movs	r2, #9
 8004732:	602a      	str	r2, [r5, #0]
 8004734:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004738:	f04f 30ff 	mov.w	r0, #4294967295
 800473c:	81a3      	strh	r3, [r4, #12]
 800473e:	e033      	b.n	80047a8 <__swsetup_r+0x98>
 8004740:	0758      	lsls	r0, r3, #29
 8004742:	d512      	bpl.n	800476a <__swsetup_r+0x5a>
 8004744:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004746:	b141      	cbz	r1, 800475a <__swsetup_r+0x4a>
 8004748:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800474c:	4299      	cmp	r1, r3
 800474e:	d002      	beq.n	8004756 <__swsetup_r+0x46>
 8004750:	4628      	mov	r0, r5
 8004752:	f000 f8c1 	bl	80048d8 <_free_r>
 8004756:	2300      	movs	r3, #0
 8004758:	6363      	str	r3, [r4, #52]	@ 0x34
 800475a:	89a3      	ldrh	r3, [r4, #12]
 800475c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004760:	81a3      	strh	r3, [r4, #12]
 8004762:	2300      	movs	r3, #0
 8004764:	6063      	str	r3, [r4, #4]
 8004766:	6923      	ldr	r3, [r4, #16]
 8004768:	6023      	str	r3, [r4, #0]
 800476a:	89a3      	ldrh	r3, [r4, #12]
 800476c:	f043 0308 	orr.w	r3, r3, #8
 8004770:	81a3      	strh	r3, [r4, #12]
 8004772:	6923      	ldr	r3, [r4, #16]
 8004774:	b94b      	cbnz	r3, 800478a <__swsetup_r+0x7a>
 8004776:	89a3      	ldrh	r3, [r4, #12]
 8004778:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800477c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004780:	d003      	beq.n	800478a <__swsetup_r+0x7a>
 8004782:	4621      	mov	r1, r4
 8004784:	4628      	mov	r0, r5
 8004786:	f001 f902 	bl	800598e <__smakebuf_r>
 800478a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800478e:	f013 0201 	ands.w	r2, r3, #1
 8004792:	d00a      	beq.n	80047aa <__swsetup_r+0x9a>
 8004794:	2200      	movs	r2, #0
 8004796:	60a2      	str	r2, [r4, #8]
 8004798:	6962      	ldr	r2, [r4, #20]
 800479a:	4252      	negs	r2, r2
 800479c:	61a2      	str	r2, [r4, #24]
 800479e:	6922      	ldr	r2, [r4, #16]
 80047a0:	b942      	cbnz	r2, 80047b4 <__swsetup_r+0xa4>
 80047a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80047a6:	d1c5      	bne.n	8004734 <__swsetup_r+0x24>
 80047a8:	bd38      	pop	{r3, r4, r5, pc}
 80047aa:	0799      	lsls	r1, r3, #30
 80047ac:	bf58      	it	pl
 80047ae:	6962      	ldrpl	r2, [r4, #20]
 80047b0:	60a2      	str	r2, [r4, #8]
 80047b2:	e7f4      	b.n	800479e <__swsetup_r+0x8e>
 80047b4:	2000      	movs	r0, #0
 80047b6:	e7f7      	b.n	80047a8 <__swsetup_r+0x98>
 80047b8:	20000cd8 	.word	0x20000cd8

080047bc <memset>:
 80047bc:	4603      	mov	r3, r0
 80047be:	4402      	add	r2, r0
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d100      	bne.n	80047c6 <memset+0xa>
 80047c4:	4770      	bx	lr
 80047c6:	f803 1b01 	strb.w	r1, [r3], #1
 80047ca:	e7f9      	b.n	80047c0 <memset+0x4>

080047cc <strncmp>:
 80047cc:	b510      	push	{r4, lr}
 80047ce:	b16a      	cbz	r2, 80047ec <strncmp+0x20>
 80047d0:	3901      	subs	r1, #1
 80047d2:	1884      	adds	r4, r0, r2
 80047d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047d8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80047dc:	429a      	cmp	r2, r3
 80047de:	d103      	bne.n	80047e8 <strncmp+0x1c>
 80047e0:	42a0      	cmp	r0, r4
 80047e2:	d001      	beq.n	80047e8 <strncmp+0x1c>
 80047e4:	2a00      	cmp	r2, #0
 80047e6:	d1f5      	bne.n	80047d4 <strncmp+0x8>
 80047e8:	1ad0      	subs	r0, r2, r3
 80047ea:	bd10      	pop	{r4, pc}
 80047ec:	4610      	mov	r0, r2
 80047ee:	e7fc      	b.n	80047ea <strncmp+0x1e>

080047f0 <_close_r>:
 80047f0:	b538      	push	{r3, r4, r5, lr}
 80047f2:	2300      	movs	r3, #0
 80047f4:	4d05      	ldr	r5, [pc, #20]	@ (800480c <_close_r+0x1c>)
 80047f6:	4604      	mov	r4, r0
 80047f8:	4608      	mov	r0, r1
 80047fa:	602b      	str	r3, [r5, #0]
 80047fc:	f7fe f93b 	bl	8002a76 <_close>
 8004800:	1c43      	adds	r3, r0, #1
 8004802:	d102      	bne.n	800480a <_close_r+0x1a>
 8004804:	682b      	ldr	r3, [r5, #0]
 8004806:	b103      	cbz	r3, 800480a <_close_r+0x1a>
 8004808:	6023      	str	r3, [r4, #0]
 800480a:	bd38      	pop	{r3, r4, r5, pc}
 800480c:	200011c0 	.word	0x200011c0

08004810 <_lseek_r>:
 8004810:	b538      	push	{r3, r4, r5, lr}
 8004812:	4604      	mov	r4, r0
 8004814:	4608      	mov	r0, r1
 8004816:	4611      	mov	r1, r2
 8004818:	2200      	movs	r2, #0
 800481a:	4d05      	ldr	r5, [pc, #20]	@ (8004830 <_lseek_r+0x20>)
 800481c:	602a      	str	r2, [r5, #0]
 800481e:	461a      	mov	r2, r3
 8004820:	f7fe f94d 	bl	8002abe <_lseek>
 8004824:	1c43      	adds	r3, r0, #1
 8004826:	d102      	bne.n	800482e <_lseek_r+0x1e>
 8004828:	682b      	ldr	r3, [r5, #0]
 800482a:	b103      	cbz	r3, 800482e <_lseek_r+0x1e>
 800482c:	6023      	str	r3, [r4, #0]
 800482e:	bd38      	pop	{r3, r4, r5, pc}
 8004830:	200011c0 	.word	0x200011c0

08004834 <_read_r>:
 8004834:	b538      	push	{r3, r4, r5, lr}
 8004836:	4604      	mov	r4, r0
 8004838:	4608      	mov	r0, r1
 800483a:	4611      	mov	r1, r2
 800483c:	2200      	movs	r2, #0
 800483e:	4d05      	ldr	r5, [pc, #20]	@ (8004854 <_read_r+0x20>)
 8004840:	602a      	str	r2, [r5, #0]
 8004842:	461a      	mov	r2, r3
 8004844:	f7fe f8fa 	bl	8002a3c <_read>
 8004848:	1c43      	adds	r3, r0, #1
 800484a:	d102      	bne.n	8004852 <_read_r+0x1e>
 800484c:	682b      	ldr	r3, [r5, #0]
 800484e:	b103      	cbz	r3, 8004852 <_read_r+0x1e>
 8004850:	6023      	str	r3, [r4, #0]
 8004852:	bd38      	pop	{r3, r4, r5, pc}
 8004854:	200011c0 	.word	0x200011c0

08004858 <_write_r>:
 8004858:	b538      	push	{r3, r4, r5, lr}
 800485a:	4604      	mov	r4, r0
 800485c:	4608      	mov	r0, r1
 800485e:	4611      	mov	r1, r2
 8004860:	2200      	movs	r2, #0
 8004862:	4d05      	ldr	r5, [pc, #20]	@ (8004878 <_write_r+0x20>)
 8004864:	602a      	str	r2, [r5, #0]
 8004866:	461a      	mov	r2, r3
 8004868:	f7fc fad2 	bl	8000e10 <_write>
 800486c:	1c43      	adds	r3, r0, #1
 800486e:	d102      	bne.n	8004876 <_write_r+0x1e>
 8004870:	682b      	ldr	r3, [r5, #0]
 8004872:	b103      	cbz	r3, 8004876 <_write_r+0x1e>
 8004874:	6023      	str	r3, [r4, #0]
 8004876:	bd38      	pop	{r3, r4, r5, pc}
 8004878:	200011c0 	.word	0x200011c0

0800487c <__errno>:
 800487c:	4b01      	ldr	r3, [pc, #4]	@ (8004884 <__errno+0x8>)
 800487e:	6818      	ldr	r0, [r3, #0]
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	20000cd8 	.word	0x20000cd8

08004888 <__libc_init_array>:
 8004888:	b570      	push	{r4, r5, r6, lr}
 800488a:	2600      	movs	r6, #0
 800488c:	4d0c      	ldr	r5, [pc, #48]	@ (80048c0 <__libc_init_array+0x38>)
 800488e:	4c0d      	ldr	r4, [pc, #52]	@ (80048c4 <__libc_init_array+0x3c>)
 8004890:	1b64      	subs	r4, r4, r5
 8004892:	10a4      	asrs	r4, r4, #2
 8004894:	42a6      	cmp	r6, r4
 8004896:	d109      	bne.n	80048ac <__libc_init_array+0x24>
 8004898:	f001 fae4 	bl	8005e64 <_init>
 800489c:	2600      	movs	r6, #0
 800489e:	4d0a      	ldr	r5, [pc, #40]	@ (80048c8 <__libc_init_array+0x40>)
 80048a0:	4c0a      	ldr	r4, [pc, #40]	@ (80048cc <__libc_init_array+0x44>)
 80048a2:	1b64      	subs	r4, r4, r5
 80048a4:	10a4      	asrs	r4, r4, #2
 80048a6:	42a6      	cmp	r6, r4
 80048a8:	d105      	bne.n	80048b6 <__libc_init_array+0x2e>
 80048aa:	bd70      	pop	{r4, r5, r6, pc}
 80048ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80048b0:	4798      	blx	r3
 80048b2:	3601      	adds	r6, #1
 80048b4:	e7ee      	b.n	8004894 <__libc_init_array+0xc>
 80048b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ba:	4798      	blx	r3
 80048bc:	3601      	adds	r6, #1
 80048be:	e7f2      	b.n	80048a6 <__libc_init_array+0x1e>
 80048c0:	08006d9c 	.word	0x08006d9c
 80048c4:	08006d9c 	.word	0x08006d9c
 80048c8:	08006d9c 	.word	0x08006d9c
 80048cc:	08006da0 	.word	0x08006da0

080048d0 <__retarget_lock_init_recursive>:
 80048d0:	4770      	bx	lr

080048d2 <__retarget_lock_acquire_recursive>:
 80048d2:	4770      	bx	lr

080048d4 <__retarget_lock_release_recursive>:
 80048d4:	4770      	bx	lr
	...

080048d8 <_free_r>:
 80048d8:	b538      	push	{r3, r4, r5, lr}
 80048da:	4605      	mov	r5, r0
 80048dc:	2900      	cmp	r1, #0
 80048de:	d040      	beq.n	8004962 <_free_r+0x8a>
 80048e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048e4:	1f0c      	subs	r4, r1, #4
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	bfb8      	it	lt
 80048ea:	18e4      	addlt	r4, r4, r3
 80048ec:	f000 f8de 	bl	8004aac <__malloc_lock>
 80048f0:	4a1c      	ldr	r2, [pc, #112]	@ (8004964 <_free_r+0x8c>)
 80048f2:	6813      	ldr	r3, [r2, #0]
 80048f4:	b933      	cbnz	r3, 8004904 <_free_r+0x2c>
 80048f6:	6063      	str	r3, [r4, #4]
 80048f8:	6014      	str	r4, [r2, #0]
 80048fa:	4628      	mov	r0, r5
 80048fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004900:	f000 b8da 	b.w	8004ab8 <__malloc_unlock>
 8004904:	42a3      	cmp	r3, r4
 8004906:	d908      	bls.n	800491a <_free_r+0x42>
 8004908:	6820      	ldr	r0, [r4, #0]
 800490a:	1821      	adds	r1, r4, r0
 800490c:	428b      	cmp	r3, r1
 800490e:	bf01      	itttt	eq
 8004910:	6819      	ldreq	r1, [r3, #0]
 8004912:	685b      	ldreq	r3, [r3, #4]
 8004914:	1809      	addeq	r1, r1, r0
 8004916:	6021      	streq	r1, [r4, #0]
 8004918:	e7ed      	b.n	80048f6 <_free_r+0x1e>
 800491a:	461a      	mov	r2, r3
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	b10b      	cbz	r3, 8004924 <_free_r+0x4c>
 8004920:	42a3      	cmp	r3, r4
 8004922:	d9fa      	bls.n	800491a <_free_r+0x42>
 8004924:	6811      	ldr	r1, [r2, #0]
 8004926:	1850      	adds	r0, r2, r1
 8004928:	42a0      	cmp	r0, r4
 800492a:	d10b      	bne.n	8004944 <_free_r+0x6c>
 800492c:	6820      	ldr	r0, [r4, #0]
 800492e:	4401      	add	r1, r0
 8004930:	1850      	adds	r0, r2, r1
 8004932:	4283      	cmp	r3, r0
 8004934:	6011      	str	r1, [r2, #0]
 8004936:	d1e0      	bne.n	80048fa <_free_r+0x22>
 8004938:	6818      	ldr	r0, [r3, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	4408      	add	r0, r1
 800493e:	6010      	str	r0, [r2, #0]
 8004940:	6053      	str	r3, [r2, #4]
 8004942:	e7da      	b.n	80048fa <_free_r+0x22>
 8004944:	d902      	bls.n	800494c <_free_r+0x74>
 8004946:	230c      	movs	r3, #12
 8004948:	602b      	str	r3, [r5, #0]
 800494a:	e7d6      	b.n	80048fa <_free_r+0x22>
 800494c:	6820      	ldr	r0, [r4, #0]
 800494e:	1821      	adds	r1, r4, r0
 8004950:	428b      	cmp	r3, r1
 8004952:	bf01      	itttt	eq
 8004954:	6819      	ldreq	r1, [r3, #0]
 8004956:	685b      	ldreq	r3, [r3, #4]
 8004958:	1809      	addeq	r1, r1, r0
 800495a:	6021      	streq	r1, [r4, #0]
 800495c:	6063      	str	r3, [r4, #4]
 800495e:	6054      	str	r4, [r2, #4]
 8004960:	e7cb      	b.n	80048fa <_free_r+0x22>
 8004962:	bd38      	pop	{r3, r4, r5, pc}
 8004964:	200011cc 	.word	0x200011cc

08004968 <sbrk_aligned>:
 8004968:	b570      	push	{r4, r5, r6, lr}
 800496a:	4e0f      	ldr	r6, [pc, #60]	@ (80049a8 <sbrk_aligned+0x40>)
 800496c:	460c      	mov	r4, r1
 800496e:	6831      	ldr	r1, [r6, #0]
 8004970:	4605      	mov	r5, r0
 8004972:	b911      	cbnz	r1, 800497a <sbrk_aligned+0x12>
 8004974:	f001 f928 	bl	8005bc8 <_sbrk_r>
 8004978:	6030      	str	r0, [r6, #0]
 800497a:	4621      	mov	r1, r4
 800497c:	4628      	mov	r0, r5
 800497e:	f001 f923 	bl	8005bc8 <_sbrk_r>
 8004982:	1c43      	adds	r3, r0, #1
 8004984:	d103      	bne.n	800498e <sbrk_aligned+0x26>
 8004986:	f04f 34ff 	mov.w	r4, #4294967295
 800498a:	4620      	mov	r0, r4
 800498c:	bd70      	pop	{r4, r5, r6, pc}
 800498e:	1cc4      	adds	r4, r0, #3
 8004990:	f024 0403 	bic.w	r4, r4, #3
 8004994:	42a0      	cmp	r0, r4
 8004996:	d0f8      	beq.n	800498a <sbrk_aligned+0x22>
 8004998:	1a21      	subs	r1, r4, r0
 800499a:	4628      	mov	r0, r5
 800499c:	f001 f914 	bl	8005bc8 <_sbrk_r>
 80049a0:	3001      	adds	r0, #1
 80049a2:	d1f2      	bne.n	800498a <sbrk_aligned+0x22>
 80049a4:	e7ef      	b.n	8004986 <sbrk_aligned+0x1e>
 80049a6:	bf00      	nop
 80049a8:	200011c8 	.word	0x200011c8

080049ac <_malloc_r>:
 80049ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049b0:	1ccd      	adds	r5, r1, #3
 80049b2:	f025 0503 	bic.w	r5, r5, #3
 80049b6:	3508      	adds	r5, #8
 80049b8:	2d0c      	cmp	r5, #12
 80049ba:	bf38      	it	cc
 80049bc:	250c      	movcc	r5, #12
 80049be:	2d00      	cmp	r5, #0
 80049c0:	4606      	mov	r6, r0
 80049c2:	db01      	blt.n	80049c8 <_malloc_r+0x1c>
 80049c4:	42a9      	cmp	r1, r5
 80049c6:	d904      	bls.n	80049d2 <_malloc_r+0x26>
 80049c8:	230c      	movs	r3, #12
 80049ca:	6033      	str	r3, [r6, #0]
 80049cc:	2000      	movs	r0, #0
 80049ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004aa8 <_malloc_r+0xfc>
 80049d6:	f000 f869 	bl	8004aac <__malloc_lock>
 80049da:	f8d8 3000 	ldr.w	r3, [r8]
 80049de:	461c      	mov	r4, r3
 80049e0:	bb44      	cbnz	r4, 8004a34 <_malloc_r+0x88>
 80049e2:	4629      	mov	r1, r5
 80049e4:	4630      	mov	r0, r6
 80049e6:	f7ff ffbf 	bl	8004968 <sbrk_aligned>
 80049ea:	1c43      	adds	r3, r0, #1
 80049ec:	4604      	mov	r4, r0
 80049ee:	d158      	bne.n	8004aa2 <_malloc_r+0xf6>
 80049f0:	f8d8 4000 	ldr.w	r4, [r8]
 80049f4:	4627      	mov	r7, r4
 80049f6:	2f00      	cmp	r7, #0
 80049f8:	d143      	bne.n	8004a82 <_malloc_r+0xd6>
 80049fa:	2c00      	cmp	r4, #0
 80049fc:	d04b      	beq.n	8004a96 <_malloc_r+0xea>
 80049fe:	6823      	ldr	r3, [r4, #0]
 8004a00:	4639      	mov	r1, r7
 8004a02:	4630      	mov	r0, r6
 8004a04:	eb04 0903 	add.w	r9, r4, r3
 8004a08:	f001 f8de 	bl	8005bc8 <_sbrk_r>
 8004a0c:	4581      	cmp	r9, r0
 8004a0e:	d142      	bne.n	8004a96 <_malloc_r+0xea>
 8004a10:	6821      	ldr	r1, [r4, #0]
 8004a12:	4630      	mov	r0, r6
 8004a14:	1a6d      	subs	r5, r5, r1
 8004a16:	4629      	mov	r1, r5
 8004a18:	f7ff ffa6 	bl	8004968 <sbrk_aligned>
 8004a1c:	3001      	adds	r0, #1
 8004a1e:	d03a      	beq.n	8004a96 <_malloc_r+0xea>
 8004a20:	6823      	ldr	r3, [r4, #0]
 8004a22:	442b      	add	r3, r5
 8004a24:	6023      	str	r3, [r4, #0]
 8004a26:	f8d8 3000 	ldr.w	r3, [r8]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	bb62      	cbnz	r2, 8004a88 <_malloc_r+0xdc>
 8004a2e:	f8c8 7000 	str.w	r7, [r8]
 8004a32:	e00f      	b.n	8004a54 <_malloc_r+0xa8>
 8004a34:	6822      	ldr	r2, [r4, #0]
 8004a36:	1b52      	subs	r2, r2, r5
 8004a38:	d420      	bmi.n	8004a7c <_malloc_r+0xd0>
 8004a3a:	2a0b      	cmp	r2, #11
 8004a3c:	d917      	bls.n	8004a6e <_malloc_r+0xc2>
 8004a3e:	1961      	adds	r1, r4, r5
 8004a40:	42a3      	cmp	r3, r4
 8004a42:	6025      	str	r5, [r4, #0]
 8004a44:	bf18      	it	ne
 8004a46:	6059      	strne	r1, [r3, #4]
 8004a48:	6863      	ldr	r3, [r4, #4]
 8004a4a:	bf08      	it	eq
 8004a4c:	f8c8 1000 	streq.w	r1, [r8]
 8004a50:	5162      	str	r2, [r4, r5]
 8004a52:	604b      	str	r3, [r1, #4]
 8004a54:	4630      	mov	r0, r6
 8004a56:	f000 f82f 	bl	8004ab8 <__malloc_unlock>
 8004a5a:	f104 000b 	add.w	r0, r4, #11
 8004a5e:	1d23      	adds	r3, r4, #4
 8004a60:	f020 0007 	bic.w	r0, r0, #7
 8004a64:	1ac2      	subs	r2, r0, r3
 8004a66:	bf1c      	itt	ne
 8004a68:	1a1b      	subne	r3, r3, r0
 8004a6a:	50a3      	strne	r3, [r4, r2]
 8004a6c:	e7af      	b.n	80049ce <_malloc_r+0x22>
 8004a6e:	6862      	ldr	r2, [r4, #4]
 8004a70:	42a3      	cmp	r3, r4
 8004a72:	bf0c      	ite	eq
 8004a74:	f8c8 2000 	streq.w	r2, [r8]
 8004a78:	605a      	strne	r2, [r3, #4]
 8004a7a:	e7eb      	b.n	8004a54 <_malloc_r+0xa8>
 8004a7c:	4623      	mov	r3, r4
 8004a7e:	6864      	ldr	r4, [r4, #4]
 8004a80:	e7ae      	b.n	80049e0 <_malloc_r+0x34>
 8004a82:	463c      	mov	r4, r7
 8004a84:	687f      	ldr	r7, [r7, #4]
 8004a86:	e7b6      	b.n	80049f6 <_malloc_r+0x4a>
 8004a88:	461a      	mov	r2, r3
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	42a3      	cmp	r3, r4
 8004a8e:	d1fb      	bne.n	8004a88 <_malloc_r+0xdc>
 8004a90:	2300      	movs	r3, #0
 8004a92:	6053      	str	r3, [r2, #4]
 8004a94:	e7de      	b.n	8004a54 <_malloc_r+0xa8>
 8004a96:	230c      	movs	r3, #12
 8004a98:	4630      	mov	r0, r6
 8004a9a:	6033      	str	r3, [r6, #0]
 8004a9c:	f000 f80c 	bl	8004ab8 <__malloc_unlock>
 8004aa0:	e794      	b.n	80049cc <_malloc_r+0x20>
 8004aa2:	6005      	str	r5, [r0, #0]
 8004aa4:	e7d6      	b.n	8004a54 <_malloc_r+0xa8>
 8004aa6:	bf00      	nop
 8004aa8:	200011cc 	.word	0x200011cc

08004aac <__malloc_lock>:
 8004aac:	4801      	ldr	r0, [pc, #4]	@ (8004ab4 <__malloc_lock+0x8>)
 8004aae:	f7ff bf10 	b.w	80048d2 <__retarget_lock_acquire_recursive>
 8004ab2:	bf00      	nop
 8004ab4:	200011c4 	.word	0x200011c4

08004ab8 <__malloc_unlock>:
 8004ab8:	4801      	ldr	r0, [pc, #4]	@ (8004ac0 <__malloc_unlock+0x8>)
 8004aba:	f7ff bf0b 	b.w	80048d4 <__retarget_lock_release_recursive>
 8004abe:	bf00      	nop
 8004ac0:	200011c4 	.word	0x200011c4

08004ac4 <__ssputs_r>:
 8004ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac8:	461f      	mov	r7, r3
 8004aca:	688e      	ldr	r6, [r1, #8]
 8004acc:	4682      	mov	sl, r0
 8004ace:	42be      	cmp	r6, r7
 8004ad0:	460c      	mov	r4, r1
 8004ad2:	4690      	mov	r8, r2
 8004ad4:	680b      	ldr	r3, [r1, #0]
 8004ad6:	d82d      	bhi.n	8004b34 <__ssputs_r+0x70>
 8004ad8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004adc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004ae0:	d026      	beq.n	8004b30 <__ssputs_r+0x6c>
 8004ae2:	6965      	ldr	r5, [r4, #20]
 8004ae4:	6909      	ldr	r1, [r1, #16]
 8004ae6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004aea:	eba3 0901 	sub.w	r9, r3, r1
 8004aee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004af2:	1c7b      	adds	r3, r7, #1
 8004af4:	444b      	add	r3, r9
 8004af6:	106d      	asrs	r5, r5, #1
 8004af8:	429d      	cmp	r5, r3
 8004afa:	bf38      	it	cc
 8004afc:	461d      	movcc	r5, r3
 8004afe:	0553      	lsls	r3, r2, #21
 8004b00:	d527      	bpl.n	8004b52 <__ssputs_r+0x8e>
 8004b02:	4629      	mov	r1, r5
 8004b04:	f7ff ff52 	bl	80049ac <_malloc_r>
 8004b08:	4606      	mov	r6, r0
 8004b0a:	b360      	cbz	r0, 8004b66 <__ssputs_r+0xa2>
 8004b0c:	464a      	mov	r2, r9
 8004b0e:	6921      	ldr	r1, [r4, #16]
 8004b10:	f001 f878 	bl	8005c04 <memcpy>
 8004b14:	89a3      	ldrh	r3, [r4, #12]
 8004b16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004b1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b1e:	81a3      	strh	r3, [r4, #12]
 8004b20:	6126      	str	r6, [r4, #16]
 8004b22:	444e      	add	r6, r9
 8004b24:	6026      	str	r6, [r4, #0]
 8004b26:	463e      	mov	r6, r7
 8004b28:	6165      	str	r5, [r4, #20]
 8004b2a:	eba5 0509 	sub.w	r5, r5, r9
 8004b2e:	60a5      	str	r5, [r4, #8]
 8004b30:	42be      	cmp	r6, r7
 8004b32:	d900      	bls.n	8004b36 <__ssputs_r+0x72>
 8004b34:	463e      	mov	r6, r7
 8004b36:	4632      	mov	r2, r6
 8004b38:	4641      	mov	r1, r8
 8004b3a:	6820      	ldr	r0, [r4, #0]
 8004b3c:	f001 f808 	bl	8005b50 <memmove>
 8004b40:	2000      	movs	r0, #0
 8004b42:	68a3      	ldr	r3, [r4, #8]
 8004b44:	1b9b      	subs	r3, r3, r6
 8004b46:	60a3      	str	r3, [r4, #8]
 8004b48:	6823      	ldr	r3, [r4, #0]
 8004b4a:	4433      	add	r3, r6
 8004b4c:	6023      	str	r3, [r4, #0]
 8004b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b52:	462a      	mov	r2, r5
 8004b54:	f001 f864 	bl	8005c20 <_realloc_r>
 8004b58:	4606      	mov	r6, r0
 8004b5a:	2800      	cmp	r0, #0
 8004b5c:	d1e0      	bne.n	8004b20 <__ssputs_r+0x5c>
 8004b5e:	4650      	mov	r0, sl
 8004b60:	6921      	ldr	r1, [r4, #16]
 8004b62:	f7ff feb9 	bl	80048d8 <_free_r>
 8004b66:	230c      	movs	r3, #12
 8004b68:	f8ca 3000 	str.w	r3, [sl]
 8004b6c:	89a3      	ldrh	r3, [r4, #12]
 8004b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b76:	81a3      	strh	r3, [r4, #12]
 8004b78:	e7e9      	b.n	8004b4e <__ssputs_r+0x8a>
	...

08004b7c <_svfiprintf_r>:
 8004b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b80:	4698      	mov	r8, r3
 8004b82:	898b      	ldrh	r3, [r1, #12]
 8004b84:	4607      	mov	r7, r0
 8004b86:	061b      	lsls	r3, r3, #24
 8004b88:	460d      	mov	r5, r1
 8004b8a:	4614      	mov	r4, r2
 8004b8c:	b09d      	sub	sp, #116	@ 0x74
 8004b8e:	d510      	bpl.n	8004bb2 <_svfiprintf_r+0x36>
 8004b90:	690b      	ldr	r3, [r1, #16]
 8004b92:	b973      	cbnz	r3, 8004bb2 <_svfiprintf_r+0x36>
 8004b94:	2140      	movs	r1, #64	@ 0x40
 8004b96:	f7ff ff09 	bl	80049ac <_malloc_r>
 8004b9a:	6028      	str	r0, [r5, #0]
 8004b9c:	6128      	str	r0, [r5, #16]
 8004b9e:	b930      	cbnz	r0, 8004bae <_svfiprintf_r+0x32>
 8004ba0:	230c      	movs	r3, #12
 8004ba2:	603b      	str	r3, [r7, #0]
 8004ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba8:	b01d      	add	sp, #116	@ 0x74
 8004baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bae:	2340      	movs	r3, #64	@ 0x40
 8004bb0:	616b      	str	r3, [r5, #20]
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bb6:	2320      	movs	r3, #32
 8004bb8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004bbc:	2330      	movs	r3, #48	@ 0x30
 8004bbe:	f04f 0901 	mov.w	r9, #1
 8004bc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bc6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004d60 <_svfiprintf_r+0x1e4>
 8004bca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004bce:	4623      	mov	r3, r4
 8004bd0:	469a      	mov	sl, r3
 8004bd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bd6:	b10a      	cbz	r2, 8004bdc <_svfiprintf_r+0x60>
 8004bd8:	2a25      	cmp	r2, #37	@ 0x25
 8004bda:	d1f9      	bne.n	8004bd0 <_svfiprintf_r+0x54>
 8004bdc:	ebba 0b04 	subs.w	fp, sl, r4
 8004be0:	d00b      	beq.n	8004bfa <_svfiprintf_r+0x7e>
 8004be2:	465b      	mov	r3, fp
 8004be4:	4622      	mov	r2, r4
 8004be6:	4629      	mov	r1, r5
 8004be8:	4638      	mov	r0, r7
 8004bea:	f7ff ff6b 	bl	8004ac4 <__ssputs_r>
 8004bee:	3001      	adds	r0, #1
 8004bf0:	f000 80a7 	beq.w	8004d42 <_svfiprintf_r+0x1c6>
 8004bf4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bf6:	445a      	add	r2, fp
 8004bf8:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bfa:	f89a 3000 	ldrb.w	r3, [sl]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f000 809f 	beq.w	8004d42 <_svfiprintf_r+0x1c6>
 8004c04:	2300      	movs	r3, #0
 8004c06:	f04f 32ff 	mov.w	r2, #4294967295
 8004c0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c0e:	f10a 0a01 	add.w	sl, sl, #1
 8004c12:	9304      	str	r3, [sp, #16]
 8004c14:	9307      	str	r3, [sp, #28]
 8004c16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004c1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c1c:	4654      	mov	r4, sl
 8004c1e:	2205      	movs	r2, #5
 8004c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c24:	484e      	ldr	r0, [pc, #312]	@ (8004d60 <_svfiprintf_r+0x1e4>)
 8004c26:	f000 ffdf 	bl	8005be8 <memchr>
 8004c2a:	9a04      	ldr	r2, [sp, #16]
 8004c2c:	b9d8      	cbnz	r0, 8004c66 <_svfiprintf_r+0xea>
 8004c2e:	06d0      	lsls	r0, r2, #27
 8004c30:	bf44      	itt	mi
 8004c32:	2320      	movmi	r3, #32
 8004c34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c38:	0711      	lsls	r1, r2, #28
 8004c3a:	bf44      	itt	mi
 8004c3c:	232b      	movmi	r3, #43	@ 0x2b
 8004c3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c42:	f89a 3000 	ldrb.w	r3, [sl]
 8004c46:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c48:	d015      	beq.n	8004c76 <_svfiprintf_r+0xfa>
 8004c4a:	4654      	mov	r4, sl
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	f04f 0c0a 	mov.w	ip, #10
 8004c52:	9a07      	ldr	r2, [sp, #28]
 8004c54:	4621      	mov	r1, r4
 8004c56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c5a:	3b30      	subs	r3, #48	@ 0x30
 8004c5c:	2b09      	cmp	r3, #9
 8004c5e:	d94b      	bls.n	8004cf8 <_svfiprintf_r+0x17c>
 8004c60:	b1b0      	cbz	r0, 8004c90 <_svfiprintf_r+0x114>
 8004c62:	9207      	str	r2, [sp, #28]
 8004c64:	e014      	b.n	8004c90 <_svfiprintf_r+0x114>
 8004c66:	eba0 0308 	sub.w	r3, r0, r8
 8004c6a:	fa09 f303 	lsl.w	r3, r9, r3
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	46a2      	mov	sl, r4
 8004c72:	9304      	str	r3, [sp, #16]
 8004c74:	e7d2      	b.n	8004c1c <_svfiprintf_r+0xa0>
 8004c76:	9b03      	ldr	r3, [sp, #12]
 8004c78:	1d19      	adds	r1, r3, #4
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	9103      	str	r1, [sp, #12]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	bfbb      	ittet	lt
 8004c82:	425b      	neglt	r3, r3
 8004c84:	f042 0202 	orrlt.w	r2, r2, #2
 8004c88:	9307      	strge	r3, [sp, #28]
 8004c8a:	9307      	strlt	r3, [sp, #28]
 8004c8c:	bfb8      	it	lt
 8004c8e:	9204      	strlt	r2, [sp, #16]
 8004c90:	7823      	ldrb	r3, [r4, #0]
 8004c92:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c94:	d10a      	bne.n	8004cac <_svfiprintf_r+0x130>
 8004c96:	7863      	ldrb	r3, [r4, #1]
 8004c98:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c9a:	d132      	bne.n	8004d02 <_svfiprintf_r+0x186>
 8004c9c:	9b03      	ldr	r3, [sp, #12]
 8004c9e:	3402      	adds	r4, #2
 8004ca0:	1d1a      	adds	r2, r3, #4
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	9203      	str	r2, [sp, #12]
 8004ca6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004caa:	9305      	str	r3, [sp, #20]
 8004cac:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004d64 <_svfiprintf_r+0x1e8>
 8004cb0:	2203      	movs	r2, #3
 8004cb2:	4650      	mov	r0, sl
 8004cb4:	7821      	ldrb	r1, [r4, #0]
 8004cb6:	f000 ff97 	bl	8005be8 <memchr>
 8004cba:	b138      	cbz	r0, 8004ccc <_svfiprintf_r+0x150>
 8004cbc:	2240      	movs	r2, #64	@ 0x40
 8004cbe:	9b04      	ldr	r3, [sp, #16]
 8004cc0:	eba0 000a 	sub.w	r0, r0, sl
 8004cc4:	4082      	lsls	r2, r0
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	3401      	adds	r4, #1
 8004cca:	9304      	str	r3, [sp, #16]
 8004ccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cd0:	2206      	movs	r2, #6
 8004cd2:	4825      	ldr	r0, [pc, #148]	@ (8004d68 <_svfiprintf_r+0x1ec>)
 8004cd4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004cd8:	f000 ff86 	bl	8005be8 <memchr>
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	d036      	beq.n	8004d4e <_svfiprintf_r+0x1d2>
 8004ce0:	4b22      	ldr	r3, [pc, #136]	@ (8004d6c <_svfiprintf_r+0x1f0>)
 8004ce2:	bb1b      	cbnz	r3, 8004d2c <_svfiprintf_r+0x1b0>
 8004ce4:	9b03      	ldr	r3, [sp, #12]
 8004ce6:	3307      	adds	r3, #7
 8004ce8:	f023 0307 	bic.w	r3, r3, #7
 8004cec:	3308      	adds	r3, #8
 8004cee:	9303      	str	r3, [sp, #12]
 8004cf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cf2:	4433      	add	r3, r6
 8004cf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cf6:	e76a      	b.n	8004bce <_svfiprintf_r+0x52>
 8004cf8:	460c      	mov	r4, r1
 8004cfa:	2001      	movs	r0, #1
 8004cfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d00:	e7a8      	b.n	8004c54 <_svfiprintf_r+0xd8>
 8004d02:	2300      	movs	r3, #0
 8004d04:	f04f 0c0a 	mov.w	ip, #10
 8004d08:	4619      	mov	r1, r3
 8004d0a:	3401      	adds	r4, #1
 8004d0c:	9305      	str	r3, [sp, #20]
 8004d0e:	4620      	mov	r0, r4
 8004d10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d14:	3a30      	subs	r2, #48	@ 0x30
 8004d16:	2a09      	cmp	r2, #9
 8004d18:	d903      	bls.n	8004d22 <_svfiprintf_r+0x1a6>
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0c6      	beq.n	8004cac <_svfiprintf_r+0x130>
 8004d1e:	9105      	str	r1, [sp, #20]
 8004d20:	e7c4      	b.n	8004cac <_svfiprintf_r+0x130>
 8004d22:	4604      	mov	r4, r0
 8004d24:	2301      	movs	r3, #1
 8004d26:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d2a:	e7f0      	b.n	8004d0e <_svfiprintf_r+0x192>
 8004d2c:	ab03      	add	r3, sp, #12
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	462a      	mov	r2, r5
 8004d32:	4638      	mov	r0, r7
 8004d34:	4b0e      	ldr	r3, [pc, #56]	@ (8004d70 <_svfiprintf_r+0x1f4>)
 8004d36:	a904      	add	r1, sp, #16
 8004d38:	f3af 8000 	nop.w
 8004d3c:	1c42      	adds	r2, r0, #1
 8004d3e:	4606      	mov	r6, r0
 8004d40:	d1d6      	bne.n	8004cf0 <_svfiprintf_r+0x174>
 8004d42:	89ab      	ldrh	r3, [r5, #12]
 8004d44:	065b      	lsls	r3, r3, #25
 8004d46:	f53f af2d 	bmi.w	8004ba4 <_svfiprintf_r+0x28>
 8004d4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d4c:	e72c      	b.n	8004ba8 <_svfiprintf_r+0x2c>
 8004d4e:	ab03      	add	r3, sp, #12
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	462a      	mov	r2, r5
 8004d54:	4638      	mov	r0, r7
 8004d56:	4b06      	ldr	r3, [pc, #24]	@ (8004d70 <_svfiprintf_r+0x1f4>)
 8004d58:	a904      	add	r1, sp, #16
 8004d5a:	f000 fb87 	bl	800546c <_printf_i>
 8004d5e:	e7ed      	b.n	8004d3c <_svfiprintf_r+0x1c0>
 8004d60:	08006c44 	.word	0x08006c44
 8004d64:	08006c4a 	.word	0x08006c4a
 8004d68:	08006c4e 	.word	0x08006c4e
 8004d6c:	00000000 	.word	0x00000000
 8004d70:	08004ac5 	.word	0x08004ac5

08004d74 <_sungetc_r>:
 8004d74:	b538      	push	{r3, r4, r5, lr}
 8004d76:	1c4b      	adds	r3, r1, #1
 8004d78:	4614      	mov	r4, r2
 8004d7a:	d103      	bne.n	8004d84 <_sungetc_r+0x10>
 8004d7c:	f04f 35ff 	mov.w	r5, #4294967295
 8004d80:	4628      	mov	r0, r5
 8004d82:	bd38      	pop	{r3, r4, r5, pc}
 8004d84:	8993      	ldrh	r3, [r2, #12]
 8004d86:	b2cd      	uxtb	r5, r1
 8004d88:	f023 0320 	bic.w	r3, r3, #32
 8004d8c:	8193      	strh	r3, [r2, #12]
 8004d8e:	6853      	ldr	r3, [r2, #4]
 8004d90:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004d92:	b18a      	cbz	r2, 8004db8 <_sungetc_r+0x44>
 8004d94:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004d96:	429a      	cmp	r2, r3
 8004d98:	dd08      	ble.n	8004dac <_sungetc_r+0x38>
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	1e5a      	subs	r2, r3, #1
 8004d9e:	6022      	str	r2, [r4, #0]
 8004da0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004da4:	6863      	ldr	r3, [r4, #4]
 8004da6:	3301      	adds	r3, #1
 8004da8:	6063      	str	r3, [r4, #4]
 8004daa:	e7e9      	b.n	8004d80 <_sungetc_r+0xc>
 8004dac:	4621      	mov	r1, r4
 8004dae:	f000 fe97 	bl	8005ae0 <__submore>
 8004db2:	2800      	cmp	r0, #0
 8004db4:	d0f1      	beq.n	8004d9a <_sungetc_r+0x26>
 8004db6:	e7e1      	b.n	8004d7c <_sungetc_r+0x8>
 8004db8:	6921      	ldr	r1, [r4, #16]
 8004dba:	6822      	ldr	r2, [r4, #0]
 8004dbc:	b141      	cbz	r1, 8004dd0 <_sungetc_r+0x5c>
 8004dbe:	4291      	cmp	r1, r2
 8004dc0:	d206      	bcs.n	8004dd0 <_sungetc_r+0x5c>
 8004dc2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8004dc6:	42a9      	cmp	r1, r5
 8004dc8:	d102      	bne.n	8004dd0 <_sungetc_r+0x5c>
 8004dca:	3a01      	subs	r2, #1
 8004dcc:	6022      	str	r2, [r4, #0]
 8004dce:	e7ea      	b.n	8004da6 <_sungetc_r+0x32>
 8004dd0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8004dd4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004dd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8004dda:	2303      	movs	r3, #3
 8004ddc:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004dde:	4623      	mov	r3, r4
 8004de0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004de4:	6023      	str	r3, [r4, #0]
 8004de6:	2301      	movs	r3, #1
 8004de8:	e7de      	b.n	8004da8 <_sungetc_r+0x34>

08004dea <__ssrefill_r>:
 8004dea:	b510      	push	{r4, lr}
 8004dec:	460c      	mov	r4, r1
 8004dee:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8004df0:	b169      	cbz	r1, 8004e0e <__ssrefill_r+0x24>
 8004df2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004df6:	4299      	cmp	r1, r3
 8004df8:	d001      	beq.n	8004dfe <__ssrefill_r+0x14>
 8004dfa:	f7ff fd6d 	bl	80048d8 <_free_r>
 8004dfe:	2000      	movs	r0, #0
 8004e00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004e02:	6360      	str	r0, [r4, #52]	@ 0x34
 8004e04:	6063      	str	r3, [r4, #4]
 8004e06:	b113      	cbz	r3, 8004e0e <__ssrefill_r+0x24>
 8004e08:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004e0a:	6023      	str	r3, [r4, #0]
 8004e0c:	bd10      	pop	{r4, pc}
 8004e0e:	6923      	ldr	r3, [r4, #16]
 8004e10:	f04f 30ff 	mov.w	r0, #4294967295
 8004e14:	6023      	str	r3, [r4, #0]
 8004e16:	2300      	movs	r3, #0
 8004e18:	6063      	str	r3, [r4, #4]
 8004e1a:	89a3      	ldrh	r3, [r4, #12]
 8004e1c:	f043 0320 	orr.w	r3, r3, #32
 8004e20:	81a3      	strh	r3, [r4, #12]
 8004e22:	e7f3      	b.n	8004e0c <__ssrefill_r+0x22>

08004e24 <__ssvfiscanf_r>:
 8004e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e28:	460c      	mov	r4, r1
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	4606      	mov	r6, r0
 8004e2e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8004e32:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8004e36:	49aa      	ldr	r1, [pc, #680]	@ (80050e0 <__ssvfiscanf_r+0x2bc>)
 8004e38:	f10d 0804 	add.w	r8, sp, #4
 8004e3c:	91a0      	str	r1, [sp, #640]	@ 0x280
 8004e3e:	49a9      	ldr	r1, [pc, #676]	@ (80050e4 <__ssvfiscanf_r+0x2c0>)
 8004e40:	4fa9      	ldr	r7, [pc, #676]	@ (80050e8 <__ssvfiscanf_r+0x2c4>)
 8004e42:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8004e46:	91a1      	str	r1, [sp, #644]	@ 0x284
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	7813      	ldrb	r3, [r2, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 8159 	beq.w	8005104 <__ssvfiscanf_r+0x2e0>
 8004e52:	5cf9      	ldrb	r1, [r7, r3]
 8004e54:	1c55      	adds	r5, r2, #1
 8004e56:	f011 0108 	ands.w	r1, r1, #8
 8004e5a:	d019      	beq.n	8004e90 <__ssvfiscanf_r+0x6c>
 8004e5c:	6863      	ldr	r3, [r4, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	dd0f      	ble.n	8004e82 <__ssvfiscanf_r+0x5e>
 8004e62:	6823      	ldr	r3, [r4, #0]
 8004e64:	781a      	ldrb	r2, [r3, #0]
 8004e66:	5cba      	ldrb	r2, [r7, r2]
 8004e68:	0712      	lsls	r2, r2, #28
 8004e6a:	d401      	bmi.n	8004e70 <__ssvfiscanf_r+0x4c>
 8004e6c:	462a      	mov	r2, r5
 8004e6e:	e7ec      	b.n	8004e4a <__ssvfiscanf_r+0x26>
 8004e70:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004e72:	3301      	adds	r3, #1
 8004e74:	3201      	adds	r2, #1
 8004e76:	9245      	str	r2, [sp, #276]	@ 0x114
 8004e78:	6862      	ldr	r2, [r4, #4]
 8004e7a:	6023      	str	r3, [r4, #0]
 8004e7c:	3a01      	subs	r2, #1
 8004e7e:	6062      	str	r2, [r4, #4]
 8004e80:	e7ec      	b.n	8004e5c <__ssvfiscanf_r+0x38>
 8004e82:	4621      	mov	r1, r4
 8004e84:	4630      	mov	r0, r6
 8004e86:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004e88:	4798      	blx	r3
 8004e8a:	2800      	cmp	r0, #0
 8004e8c:	d0e9      	beq.n	8004e62 <__ssvfiscanf_r+0x3e>
 8004e8e:	e7ed      	b.n	8004e6c <__ssvfiscanf_r+0x48>
 8004e90:	2b25      	cmp	r3, #37	@ 0x25
 8004e92:	d012      	beq.n	8004eba <__ssvfiscanf_r+0x96>
 8004e94:	4699      	mov	r9, r3
 8004e96:	6863      	ldr	r3, [r4, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f340 8094 	ble.w	8004fc6 <__ssvfiscanf_r+0x1a2>
 8004e9e:	6822      	ldr	r2, [r4, #0]
 8004ea0:	7813      	ldrb	r3, [r2, #0]
 8004ea2:	454b      	cmp	r3, r9
 8004ea4:	f040 812e 	bne.w	8005104 <__ssvfiscanf_r+0x2e0>
 8004ea8:	6863      	ldr	r3, [r4, #4]
 8004eaa:	3201      	adds	r2, #1
 8004eac:	3b01      	subs	r3, #1
 8004eae:	6063      	str	r3, [r4, #4]
 8004eb0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8004eb2:	6022      	str	r2, [r4, #0]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	9345      	str	r3, [sp, #276]	@ 0x114
 8004eb8:	e7d8      	b.n	8004e6c <__ssvfiscanf_r+0x48>
 8004eba:	9141      	str	r1, [sp, #260]	@ 0x104
 8004ebc:	9143      	str	r1, [sp, #268]	@ 0x10c
 8004ebe:	7853      	ldrb	r3, [r2, #1]
 8004ec0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ec2:	bf04      	itt	eq
 8004ec4:	2310      	moveq	r3, #16
 8004ec6:	1c95      	addeq	r5, r2, #2
 8004ec8:	f04f 020a 	mov.w	r2, #10
 8004ecc:	bf08      	it	eq
 8004ece:	9341      	streq	r3, [sp, #260]	@ 0x104
 8004ed0:	46a9      	mov	r9, r5
 8004ed2:	f819 1b01 	ldrb.w	r1, [r9], #1
 8004ed6:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8004eda:	2b09      	cmp	r3, #9
 8004edc:	d91e      	bls.n	8004f1c <__ssvfiscanf_r+0xf8>
 8004ede:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 80050ec <__ssvfiscanf_r+0x2c8>
 8004ee2:	2203      	movs	r2, #3
 8004ee4:	4650      	mov	r0, sl
 8004ee6:	f000 fe7f 	bl	8005be8 <memchr>
 8004eea:	b138      	cbz	r0, 8004efc <__ssvfiscanf_r+0xd8>
 8004eec:	2301      	movs	r3, #1
 8004eee:	464d      	mov	r5, r9
 8004ef0:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004ef2:	eba0 000a 	sub.w	r0, r0, sl
 8004ef6:	4083      	lsls	r3, r0
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	9341      	str	r3, [sp, #260]	@ 0x104
 8004efc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004f00:	2b78      	cmp	r3, #120	@ 0x78
 8004f02:	d806      	bhi.n	8004f12 <__ssvfiscanf_r+0xee>
 8004f04:	2b57      	cmp	r3, #87	@ 0x57
 8004f06:	d810      	bhi.n	8004f2a <__ssvfiscanf_r+0x106>
 8004f08:	2b25      	cmp	r3, #37	@ 0x25
 8004f0a:	d0c3      	beq.n	8004e94 <__ssvfiscanf_r+0x70>
 8004f0c:	d856      	bhi.n	8004fbc <__ssvfiscanf_r+0x198>
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d064      	beq.n	8004fdc <__ssvfiscanf_r+0x1b8>
 8004f12:	2303      	movs	r3, #3
 8004f14:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004f16:	230a      	movs	r3, #10
 8004f18:	9342      	str	r3, [sp, #264]	@ 0x108
 8004f1a:	e077      	b.n	800500c <__ssvfiscanf_r+0x1e8>
 8004f1c:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8004f1e:	464d      	mov	r5, r9
 8004f20:	fb02 1103 	mla	r1, r2, r3, r1
 8004f24:	3930      	subs	r1, #48	@ 0x30
 8004f26:	9143      	str	r1, [sp, #268]	@ 0x10c
 8004f28:	e7d2      	b.n	8004ed0 <__ssvfiscanf_r+0xac>
 8004f2a:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8004f2e:	2a20      	cmp	r2, #32
 8004f30:	d8ef      	bhi.n	8004f12 <__ssvfiscanf_r+0xee>
 8004f32:	a101      	add	r1, pc, #4	@ (adr r1, 8004f38 <__ssvfiscanf_r+0x114>)
 8004f34:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004f38:	08004feb 	.word	0x08004feb
 8004f3c:	08004f13 	.word	0x08004f13
 8004f40:	08004f13 	.word	0x08004f13
 8004f44:	08005045 	.word	0x08005045
 8004f48:	08004f13 	.word	0x08004f13
 8004f4c:	08004f13 	.word	0x08004f13
 8004f50:	08004f13 	.word	0x08004f13
 8004f54:	08004f13 	.word	0x08004f13
 8004f58:	08004f13 	.word	0x08004f13
 8004f5c:	08004f13 	.word	0x08004f13
 8004f60:	08004f13 	.word	0x08004f13
 8004f64:	0800505b 	.word	0x0800505b
 8004f68:	08005041 	.word	0x08005041
 8004f6c:	08004fc3 	.word	0x08004fc3
 8004f70:	08004fc3 	.word	0x08004fc3
 8004f74:	08004fc3 	.word	0x08004fc3
 8004f78:	08004f13 	.word	0x08004f13
 8004f7c:	08004ffd 	.word	0x08004ffd
 8004f80:	08004f13 	.word	0x08004f13
 8004f84:	08004f13 	.word	0x08004f13
 8004f88:	08004f13 	.word	0x08004f13
 8004f8c:	08004f13 	.word	0x08004f13
 8004f90:	0800506b 	.word	0x0800506b
 8004f94:	08005005 	.word	0x08005005
 8004f98:	08004fe3 	.word	0x08004fe3
 8004f9c:	08004f13 	.word	0x08004f13
 8004fa0:	08004f13 	.word	0x08004f13
 8004fa4:	08005067 	.word	0x08005067
 8004fa8:	08004f13 	.word	0x08004f13
 8004fac:	08005041 	.word	0x08005041
 8004fb0:	08004f13 	.word	0x08004f13
 8004fb4:	08004f13 	.word	0x08004f13
 8004fb8:	08004feb 	.word	0x08004feb
 8004fbc:	3b45      	subs	r3, #69	@ 0x45
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d8a7      	bhi.n	8004f12 <__ssvfiscanf_r+0xee>
 8004fc2:	2305      	movs	r3, #5
 8004fc4:	e021      	b.n	800500a <__ssvfiscanf_r+0x1e6>
 8004fc6:	4621      	mov	r1, r4
 8004fc8:	4630      	mov	r0, r6
 8004fca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004fcc:	4798      	blx	r3
 8004fce:	2800      	cmp	r0, #0
 8004fd0:	f43f af65 	beq.w	8004e9e <__ssvfiscanf_r+0x7a>
 8004fd4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004fd6:	2800      	cmp	r0, #0
 8004fd8:	f040 808c 	bne.w	80050f4 <__ssvfiscanf_r+0x2d0>
 8004fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe0:	e08c      	b.n	80050fc <__ssvfiscanf_r+0x2d8>
 8004fe2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004fe4:	f042 0220 	orr.w	r2, r2, #32
 8004fe8:	9241      	str	r2, [sp, #260]	@ 0x104
 8004fea:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004fec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ff0:	9241      	str	r2, [sp, #260]	@ 0x104
 8004ff2:	2210      	movs	r2, #16
 8004ff4:	2b6e      	cmp	r3, #110	@ 0x6e
 8004ff6:	9242      	str	r2, [sp, #264]	@ 0x108
 8004ff8:	d902      	bls.n	8005000 <__ssvfiscanf_r+0x1dc>
 8004ffa:	e005      	b.n	8005008 <__ssvfiscanf_r+0x1e4>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	9342      	str	r3, [sp, #264]	@ 0x108
 8005000:	2303      	movs	r3, #3
 8005002:	e002      	b.n	800500a <__ssvfiscanf_r+0x1e6>
 8005004:	2308      	movs	r3, #8
 8005006:	9342      	str	r3, [sp, #264]	@ 0x108
 8005008:	2304      	movs	r3, #4
 800500a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800500c:	6863      	ldr	r3, [r4, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	dd39      	ble.n	8005086 <__ssvfiscanf_r+0x262>
 8005012:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005014:	0659      	lsls	r1, r3, #25
 8005016:	d404      	bmi.n	8005022 <__ssvfiscanf_r+0x1fe>
 8005018:	6823      	ldr	r3, [r4, #0]
 800501a:	781a      	ldrb	r2, [r3, #0]
 800501c:	5cba      	ldrb	r2, [r7, r2]
 800501e:	0712      	lsls	r2, r2, #28
 8005020:	d438      	bmi.n	8005094 <__ssvfiscanf_r+0x270>
 8005022:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8005024:	2b02      	cmp	r3, #2
 8005026:	dc47      	bgt.n	80050b8 <__ssvfiscanf_r+0x294>
 8005028:	466b      	mov	r3, sp
 800502a:	4622      	mov	r2, r4
 800502c:	4630      	mov	r0, r6
 800502e:	a941      	add	r1, sp, #260	@ 0x104
 8005030:	f000 fb3c 	bl	80056ac <_scanf_chars>
 8005034:	2801      	cmp	r0, #1
 8005036:	d065      	beq.n	8005104 <__ssvfiscanf_r+0x2e0>
 8005038:	2802      	cmp	r0, #2
 800503a:	f47f af17 	bne.w	8004e6c <__ssvfiscanf_r+0x48>
 800503e:	e7c9      	b.n	8004fd4 <__ssvfiscanf_r+0x1b0>
 8005040:	220a      	movs	r2, #10
 8005042:	e7d7      	b.n	8004ff4 <__ssvfiscanf_r+0x1d0>
 8005044:	4629      	mov	r1, r5
 8005046:	4640      	mov	r0, r8
 8005048:	f000 fd11 	bl	8005a6e <__sccl>
 800504c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800504e:	4605      	mov	r5, r0
 8005050:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005054:	9341      	str	r3, [sp, #260]	@ 0x104
 8005056:	2301      	movs	r3, #1
 8005058:	e7d7      	b.n	800500a <__ssvfiscanf_r+0x1e6>
 800505a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800505c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005060:	9341      	str	r3, [sp, #260]	@ 0x104
 8005062:	2300      	movs	r3, #0
 8005064:	e7d1      	b.n	800500a <__ssvfiscanf_r+0x1e6>
 8005066:	2302      	movs	r3, #2
 8005068:	e7cf      	b.n	800500a <__ssvfiscanf_r+0x1e6>
 800506a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800506c:	06c3      	lsls	r3, r0, #27
 800506e:	f53f aefd 	bmi.w	8004e6c <__ssvfiscanf_r+0x48>
 8005072:	9b00      	ldr	r3, [sp, #0]
 8005074:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005076:	1d19      	adds	r1, r3, #4
 8005078:	9100      	str	r1, [sp, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	07c0      	lsls	r0, r0, #31
 800507e:	bf4c      	ite	mi
 8005080:	801a      	strhmi	r2, [r3, #0]
 8005082:	601a      	strpl	r2, [r3, #0]
 8005084:	e6f2      	b.n	8004e6c <__ssvfiscanf_r+0x48>
 8005086:	4621      	mov	r1, r4
 8005088:	4630      	mov	r0, r6
 800508a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800508c:	4798      	blx	r3
 800508e:	2800      	cmp	r0, #0
 8005090:	d0bf      	beq.n	8005012 <__ssvfiscanf_r+0x1ee>
 8005092:	e79f      	b.n	8004fd4 <__ssvfiscanf_r+0x1b0>
 8005094:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005096:	3201      	adds	r2, #1
 8005098:	9245      	str	r2, [sp, #276]	@ 0x114
 800509a:	6862      	ldr	r2, [r4, #4]
 800509c:	3a01      	subs	r2, #1
 800509e:	2a00      	cmp	r2, #0
 80050a0:	6062      	str	r2, [r4, #4]
 80050a2:	dd02      	ble.n	80050aa <__ssvfiscanf_r+0x286>
 80050a4:	3301      	adds	r3, #1
 80050a6:	6023      	str	r3, [r4, #0]
 80050a8:	e7b6      	b.n	8005018 <__ssvfiscanf_r+0x1f4>
 80050aa:	4621      	mov	r1, r4
 80050ac:	4630      	mov	r0, r6
 80050ae:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80050b0:	4798      	blx	r3
 80050b2:	2800      	cmp	r0, #0
 80050b4:	d0b0      	beq.n	8005018 <__ssvfiscanf_r+0x1f4>
 80050b6:	e78d      	b.n	8004fd4 <__ssvfiscanf_r+0x1b0>
 80050b8:	2b04      	cmp	r3, #4
 80050ba:	dc06      	bgt.n	80050ca <__ssvfiscanf_r+0x2a6>
 80050bc:	466b      	mov	r3, sp
 80050be:	4622      	mov	r2, r4
 80050c0:	4630      	mov	r0, r6
 80050c2:	a941      	add	r1, sp, #260	@ 0x104
 80050c4:	f000 fb4c 	bl	8005760 <_scanf_i>
 80050c8:	e7b4      	b.n	8005034 <__ssvfiscanf_r+0x210>
 80050ca:	4b09      	ldr	r3, [pc, #36]	@ (80050f0 <__ssvfiscanf_r+0x2cc>)
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f43f aecd 	beq.w	8004e6c <__ssvfiscanf_r+0x48>
 80050d2:	466b      	mov	r3, sp
 80050d4:	4622      	mov	r2, r4
 80050d6:	4630      	mov	r0, r6
 80050d8:	a941      	add	r1, sp, #260	@ 0x104
 80050da:	f3af 8000 	nop.w
 80050de:	e7a9      	b.n	8005034 <__ssvfiscanf_r+0x210>
 80050e0:	08004d75 	.word	0x08004d75
 80050e4:	08004deb 	.word	0x08004deb
 80050e8:	08006c93 	.word	0x08006c93
 80050ec:	08006c4a 	.word	0x08006c4a
 80050f0:	00000000 	.word	0x00000000
 80050f4:	89a3      	ldrh	r3, [r4, #12]
 80050f6:	065b      	lsls	r3, r3, #25
 80050f8:	f53f af70 	bmi.w	8004fdc <__ssvfiscanf_r+0x1b8>
 80050fc:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8005100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005104:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8005106:	e7f9      	b.n	80050fc <__ssvfiscanf_r+0x2d8>

08005108 <__sfputc_r>:
 8005108:	6893      	ldr	r3, [r2, #8]
 800510a:	b410      	push	{r4}
 800510c:	3b01      	subs	r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	6093      	str	r3, [r2, #8]
 8005112:	da07      	bge.n	8005124 <__sfputc_r+0x1c>
 8005114:	6994      	ldr	r4, [r2, #24]
 8005116:	42a3      	cmp	r3, r4
 8005118:	db01      	blt.n	800511e <__sfputc_r+0x16>
 800511a:	290a      	cmp	r1, #10
 800511c:	d102      	bne.n	8005124 <__sfputc_r+0x1c>
 800511e:	bc10      	pop	{r4}
 8005120:	f7ff bab7 	b.w	8004692 <__swbuf_r>
 8005124:	6813      	ldr	r3, [r2, #0]
 8005126:	1c58      	adds	r0, r3, #1
 8005128:	6010      	str	r0, [r2, #0]
 800512a:	7019      	strb	r1, [r3, #0]
 800512c:	4608      	mov	r0, r1
 800512e:	bc10      	pop	{r4}
 8005130:	4770      	bx	lr

08005132 <__sfputs_r>:
 8005132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005134:	4606      	mov	r6, r0
 8005136:	460f      	mov	r7, r1
 8005138:	4614      	mov	r4, r2
 800513a:	18d5      	adds	r5, r2, r3
 800513c:	42ac      	cmp	r4, r5
 800513e:	d101      	bne.n	8005144 <__sfputs_r+0x12>
 8005140:	2000      	movs	r0, #0
 8005142:	e007      	b.n	8005154 <__sfputs_r+0x22>
 8005144:	463a      	mov	r2, r7
 8005146:	4630      	mov	r0, r6
 8005148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800514c:	f7ff ffdc 	bl	8005108 <__sfputc_r>
 8005150:	1c43      	adds	r3, r0, #1
 8005152:	d1f3      	bne.n	800513c <__sfputs_r+0xa>
 8005154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005158 <_vfiprintf_r>:
 8005158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800515c:	460d      	mov	r5, r1
 800515e:	4614      	mov	r4, r2
 8005160:	4698      	mov	r8, r3
 8005162:	4606      	mov	r6, r0
 8005164:	b09d      	sub	sp, #116	@ 0x74
 8005166:	b118      	cbz	r0, 8005170 <_vfiprintf_r+0x18>
 8005168:	6a03      	ldr	r3, [r0, #32]
 800516a:	b90b      	cbnz	r3, 8005170 <_vfiprintf_r+0x18>
 800516c:	f7ff f940 	bl	80043f0 <__sinit>
 8005170:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005172:	07d9      	lsls	r1, r3, #31
 8005174:	d405      	bmi.n	8005182 <_vfiprintf_r+0x2a>
 8005176:	89ab      	ldrh	r3, [r5, #12]
 8005178:	059a      	lsls	r2, r3, #22
 800517a:	d402      	bmi.n	8005182 <_vfiprintf_r+0x2a>
 800517c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800517e:	f7ff fba8 	bl	80048d2 <__retarget_lock_acquire_recursive>
 8005182:	89ab      	ldrh	r3, [r5, #12]
 8005184:	071b      	lsls	r3, r3, #28
 8005186:	d501      	bpl.n	800518c <_vfiprintf_r+0x34>
 8005188:	692b      	ldr	r3, [r5, #16]
 800518a:	b99b      	cbnz	r3, 80051b4 <_vfiprintf_r+0x5c>
 800518c:	4629      	mov	r1, r5
 800518e:	4630      	mov	r0, r6
 8005190:	f7ff fabe 	bl	8004710 <__swsetup_r>
 8005194:	b170      	cbz	r0, 80051b4 <_vfiprintf_r+0x5c>
 8005196:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005198:	07dc      	lsls	r4, r3, #31
 800519a:	d504      	bpl.n	80051a6 <_vfiprintf_r+0x4e>
 800519c:	f04f 30ff 	mov.w	r0, #4294967295
 80051a0:	b01d      	add	sp, #116	@ 0x74
 80051a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051a6:	89ab      	ldrh	r3, [r5, #12]
 80051a8:	0598      	lsls	r0, r3, #22
 80051aa:	d4f7      	bmi.n	800519c <_vfiprintf_r+0x44>
 80051ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051ae:	f7ff fb91 	bl	80048d4 <__retarget_lock_release_recursive>
 80051b2:	e7f3      	b.n	800519c <_vfiprintf_r+0x44>
 80051b4:	2300      	movs	r3, #0
 80051b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80051b8:	2320      	movs	r3, #32
 80051ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80051be:	2330      	movs	r3, #48	@ 0x30
 80051c0:	f04f 0901 	mov.w	r9, #1
 80051c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80051c8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005374 <_vfiprintf_r+0x21c>
 80051cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80051d0:	4623      	mov	r3, r4
 80051d2:	469a      	mov	sl, r3
 80051d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051d8:	b10a      	cbz	r2, 80051de <_vfiprintf_r+0x86>
 80051da:	2a25      	cmp	r2, #37	@ 0x25
 80051dc:	d1f9      	bne.n	80051d2 <_vfiprintf_r+0x7a>
 80051de:	ebba 0b04 	subs.w	fp, sl, r4
 80051e2:	d00b      	beq.n	80051fc <_vfiprintf_r+0xa4>
 80051e4:	465b      	mov	r3, fp
 80051e6:	4622      	mov	r2, r4
 80051e8:	4629      	mov	r1, r5
 80051ea:	4630      	mov	r0, r6
 80051ec:	f7ff ffa1 	bl	8005132 <__sfputs_r>
 80051f0:	3001      	adds	r0, #1
 80051f2:	f000 80a7 	beq.w	8005344 <_vfiprintf_r+0x1ec>
 80051f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051f8:	445a      	add	r2, fp
 80051fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80051fc:	f89a 3000 	ldrb.w	r3, [sl]
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 809f 	beq.w	8005344 <_vfiprintf_r+0x1ec>
 8005206:	2300      	movs	r3, #0
 8005208:	f04f 32ff 	mov.w	r2, #4294967295
 800520c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005210:	f10a 0a01 	add.w	sl, sl, #1
 8005214:	9304      	str	r3, [sp, #16]
 8005216:	9307      	str	r3, [sp, #28]
 8005218:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800521c:	931a      	str	r3, [sp, #104]	@ 0x68
 800521e:	4654      	mov	r4, sl
 8005220:	2205      	movs	r2, #5
 8005222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005226:	4853      	ldr	r0, [pc, #332]	@ (8005374 <_vfiprintf_r+0x21c>)
 8005228:	f000 fcde 	bl	8005be8 <memchr>
 800522c:	9a04      	ldr	r2, [sp, #16]
 800522e:	b9d8      	cbnz	r0, 8005268 <_vfiprintf_r+0x110>
 8005230:	06d1      	lsls	r1, r2, #27
 8005232:	bf44      	itt	mi
 8005234:	2320      	movmi	r3, #32
 8005236:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800523a:	0713      	lsls	r3, r2, #28
 800523c:	bf44      	itt	mi
 800523e:	232b      	movmi	r3, #43	@ 0x2b
 8005240:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005244:	f89a 3000 	ldrb.w	r3, [sl]
 8005248:	2b2a      	cmp	r3, #42	@ 0x2a
 800524a:	d015      	beq.n	8005278 <_vfiprintf_r+0x120>
 800524c:	4654      	mov	r4, sl
 800524e:	2000      	movs	r0, #0
 8005250:	f04f 0c0a 	mov.w	ip, #10
 8005254:	9a07      	ldr	r2, [sp, #28]
 8005256:	4621      	mov	r1, r4
 8005258:	f811 3b01 	ldrb.w	r3, [r1], #1
 800525c:	3b30      	subs	r3, #48	@ 0x30
 800525e:	2b09      	cmp	r3, #9
 8005260:	d94b      	bls.n	80052fa <_vfiprintf_r+0x1a2>
 8005262:	b1b0      	cbz	r0, 8005292 <_vfiprintf_r+0x13a>
 8005264:	9207      	str	r2, [sp, #28]
 8005266:	e014      	b.n	8005292 <_vfiprintf_r+0x13a>
 8005268:	eba0 0308 	sub.w	r3, r0, r8
 800526c:	fa09 f303 	lsl.w	r3, r9, r3
 8005270:	4313      	orrs	r3, r2
 8005272:	46a2      	mov	sl, r4
 8005274:	9304      	str	r3, [sp, #16]
 8005276:	e7d2      	b.n	800521e <_vfiprintf_r+0xc6>
 8005278:	9b03      	ldr	r3, [sp, #12]
 800527a:	1d19      	adds	r1, r3, #4
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	9103      	str	r1, [sp, #12]
 8005280:	2b00      	cmp	r3, #0
 8005282:	bfbb      	ittet	lt
 8005284:	425b      	neglt	r3, r3
 8005286:	f042 0202 	orrlt.w	r2, r2, #2
 800528a:	9307      	strge	r3, [sp, #28]
 800528c:	9307      	strlt	r3, [sp, #28]
 800528e:	bfb8      	it	lt
 8005290:	9204      	strlt	r2, [sp, #16]
 8005292:	7823      	ldrb	r3, [r4, #0]
 8005294:	2b2e      	cmp	r3, #46	@ 0x2e
 8005296:	d10a      	bne.n	80052ae <_vfiprintf_r+0x156>
 8005298:	7863      	ldrb	r3, [r4, #1]
 800529a:	2b2a      	cmp	r3, #42	@ 0x2a
 800529c:	d132      	bne.n	8005304 <_vfiprintf_r+0x1ac>
 800529e:	9b03      	ldr	r3, [sp, #12]
 80052a0:	3402      	adds	r4, #2
 80052a2:	1d1a      	adds	r2, r3, #4
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	9203      	str	r2, [sp, #12]
 80052a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80052ac:	9305      	str	r3, [sp, #20]
 80052ae:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005378 <_vfiprintf_r+0x220>
 80052b2:	2203      	movs	r2, #3
 80052b4:	4650      	mov	r0, sl
 80052b6:	7821      	ldrb	r1, [r4, #0]
 80052b8:	f000 fc96 	bl	8005be8 <memchr>
 80052bc:	b138      	cbz	r0, 80052ce <_vfiprintf_r+0x176>
 80052be:	2240      	movs	r2, #64	@ 0x40
 80052c0:	9b04      	ldr	r3, [sp, #16]
 80052c2:	eba0 000a 	sub.w	r0, r0, sl
 80052c6:	4082      	lsls	r2, r0
 80052c8:	4313      	orrs	r3, r2
 80052ca:	3401      	adds	r4, #1
 80052cc:	9304      	str	r3, [sp, #16]
 80052ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052d2:	2206      	movs	r2, #6
 80052d4:	4829      	ldr	r0, [pc, #164]	@ (800537c <_vfiprintf_r+0x224>)
 80052d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80052da:	f000 fc85 	bl	8005be8 <memchr>
 80052de:	2800      	cmp	r0, #0
 80052e0:	d03f      	beq.n	8005362 <_vfiprintf_r+0x20a>
 80052e2:	4b27      	ldr	r3, [pc, #156]	@ (8005380 <_vfiprintf_r+0x228>)
 80052e4:	bb1b      	cbnz	r3, 800532e <_vfiprintf_r+0x1d6>
 80052e6:	9b03      	ldr	r3, [sp, #12]
 80052e8:	3307      	adds	r3, #7
 80052ea:	f023 0307 	bic.w	r3, r3, #7
 80052ee:	3308      	adds	r3, #8
 80052f0:	9303      	str	r3, [sp, #12]
 80052f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052f4:	443b      	add	r3, r7
 80052f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80052f8:	e76a      	b.n	80051d0 <_vfiprintf_r+0x78>
 80052fa:	460c      	mov	r4, r1
 80052fc:	2001      	movs	r0, #1
 80052fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8005302:	e7a8      	b.n	8005256 <_vfiprintf_r+0xfe>
 8005304:	2300      	movs	r3, #0
 8005306:	f04f 0c0a 	mov.w	ip, #10
 800530a:	4619      	mov	r1, r3
 800530c:	3401      	adds	r4, #1
 800530e:	9305      	str	r3, [sp, #20]
 8005310:	4620      	mov	r0, r4
 8005312:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005316:	3a30      	subs	r2, #48	@ 0x30
 8005318:	2a09      	cmp	r2, #9
 800531a:	d903      	bls.n	8005324 <_vfiprintf_r+0x1cc>
 800531c:	2b00      	cmp	r3, #0
 800531e:	d0c6      	beq.n	80052ae <_vfiprintf_r+0x156>
 8005320:	9105      	str	r1, [sp, #20]
 8005322:	e7c4      	b.n	80052ae <_vfiprintf_r+0x156>
 8005324:	4604      	mov	r4, r0
 8005326:	2301      	movs	r3, #1
 8005328:	fb0c 2101 	mla	r1, ip, r1, r2
 800532c:	e7f0      	b.n	8005310 <_vfiprintf_r+0x1b8>
 800532e:	ab03      	add	r3, sp, #12
 8005330:	9300      	str	r3, [sp, #0]
 8005332:	462a      	mov	r2, r5
 8005334:	4630      	mov	r0, r6
 8005336:	4b13      	ldr	r3, [pc, #76]	@ (8005384 <_vfiprintf_r+0x22c>)
 8005338:	a904      	add	r1, sp, #16
 800533a:	f3af 8000 	nop.w
 800533e:	4607      	mov	r7, r0
 8005340:	1c78      	adds	r0, r7, #1
 8005342:	d1d6      	bne.n	80052f2 <_vfiprintf_r+0x19a>
 8005344:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005346:	07d9      	lsls	r1, r3, #31
 8005348:	d405      	bmi.n	8005356 <_vfiprintf_r+0x1fe>
 800534a:	89ab      	ldrh	r3, [r5, #12]
 800534c:	059a      	lsls	r2, r3, #22
 800534e:	d402      	bmi.n	8005356 <_vfiprintf_r+0x1fe>
 8005350:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005352:	f7ff fabf 	bl	80048d4 <__retarget_lock_release_recursive>
 8005356:	89ab      	ldrh	r3, [r5, #12]
 8005358:	065b      	lsls	r3, r3, #25
 800535a:	f53f af1f 	bmi.w	800519c <_vfiprintf_r+0x44>
 800535e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005360:	e71e      	b.n	80051a0 <_vfiprintf_r+0x48>
 8005362:	ab03      	add	r3, sp, #12
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	462a      	mov	r2, r5
 8005368:	4630      	mov	r0, r6
 800536a:	4b06      	ldr	r3, [pc, #24]	@ (8005384 <_vfiprintf_r+0x22c>)
 800536c:	a904      	add	r1, sp, #16
 800536e:	f000 f87d 	bl	800546c <_printf_i>
 8005372:	e7e4      	b.n	800533e <_vfiprintf_r+0x1e6>
 8005374:	08006c44 	.word	0x08006c44
 8005378:	08006c4a 	.word	0x08006c4a
 800537c:	08006c4e 	.word	0x08006c4e
 8005380:	00000000 	.word	0x00000000
 8005384:	08005133 	.word	0x08005133

08005388 <_printf_common>:
 8005388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800538c:	4616      	mov	r6, r2
 800538e:	4698      	mov	r8, r3
 8005390:	688a      	ldr	r2, [r1, #8]
 8005392:	690b      	ldr	r3, [r1, #16]
 8005394:	4607      	mov	r7, r0
 8005396:	4293      	cmp	r3, r2
 8005398:	bfb8      	it	lt
 800539a:	4613      	movlt	r3, r2
 800539c:	6033      	str	r3, [r6, #0]
 800539e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80053a2:	460c      	mov	r4, r1
 80053a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80053a8:	b10a      	cbz	r2, 80053ae <_printf_common+0x26>
 80053aa:	3301      	adds	r3, #1
 80053ac:	6033      	str	r3, [r6, #0]
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	0699      	lsls	r1, r3, #26
 80053b2:	bf42      	ittt	mi
 80053b4:	6833      	ldrmi	r3, [r6, #0]
 80053b6:	3302      	addmi	r3, #2
 80053b8:	6033      	strmi	r3, [r6, #0]
 80053ba:	6825      	ldr	r5, [r4, #0]
 80053bc:	f015 0506 	ands.w	r5, r5, #6
 80053c0:	d106      	bne.n	80053d0 <_printf_common+0x48>
 80053c2:	f104 0a19 	add.w	sl, r4, #25
 80053c6:	68e3      	ldr	r3, [r4, #12]
 80053c8:	6832      	ldr	r2, [r6, #0]
 80053ca:	1a9b      	subs	r3, r3, r2
 80053cc:	42ab      	cmp	r3, r5
 80053ce:	dc2b      	bgt.n	8005428 <_printf_common+0xa0>
 80053d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80053d4:	6822      	ldr	r2, [r4, #0]
 80053d6:	3b00      	subs	r3, #0
 80053d8:	bf18      	it	ne
 80053da:	2301      	movne	r3, #1
 80053dc:	0692      	lsls	r2, r2, #26
 80053de:	d430      	bmi.n	8005442 <_printf_common+0xba>
 80053e0:	4641      	mov	r1, r8
 80053e2:	4638      	mov	r0, r7
 80053e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80053e8:	47c8      	blx	r9
 80053ea:	3001      	adds	r0, #1
 80053ec:	d023      	beq.n	8005436 <_printf_common+0xae>
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	6922      	ldr	r2, [r4, #16]
 80053f2:	f003 0306 	and.w	r3, r3, #6
 80053f6:	2b04      	cmp	r3, #4
 80053f8:	bf14      	ite	ne
 80053fa:	2500      	movne	r5, #0
 80053fc:	6833      	ldreq	r3, [r6, #0]
 80053fe:	f04f 0600 	mov.w	r6, #0
 8005402:	bf08      	it	eq
 8005404:	68e5      	ldreq	r5, [r4, #12]
 8005406:	f104 041a 	add.w	r4, r4, #26
 800540a:	bf08      	it	eq
 800540c:	1aed      	subeq	r5, r5, r3
 800540e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005412:	bf08      	it	eq
 8005414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005418:	4293      	cmp	r3, r2
 800541a:	bfc4      	itt	gt
 800541c:	1a9b      	subgt	r3, r3, r2
 800541e:	18ed      	addgt	r5, r5, r3
 8005420:	42b5      	cmp	r5, r6
 8005422:	d11a      	bne.n	800545a <_printf_common+0xd2>
 8005424:	2000      	movs	r0, #0
 8005426:	e008      	b.n	800543a <_printf_common+0xb2>
 8005428:	2301      	movs	r3, #1
 800542a:	4652      	mov	r2, sl
 800542c:	4641      	mov	r1, r8
 800542e:	4638      	mov	r0, r7
 8005430:	47c8      	blx	r9
 8005432:	3001      	adds	r0, #1
 8005434:	d103      	bne.n	800543e <_printf_common+0xb6>
 8005436:	f04f 30ff 	mov.w	r0, #4294967295
 800543a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800543e:	3501      	adds	r5, #1
 8005440:	e7c1      	b.n	80053c6 <_printf_common+0x3e>
 8005442:	2030      	movs	r0, #48	@ 0x30
 8005444:	18e1      	adds	r1, r4, r3
 8005446:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005450:	4422      	add	r2, r4
 8005452:	3302      	adds	r3, #2
 8005454:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005458:	e7c2      	b.n	80053e0 <_printf_common+0x58>
 800545a:	2301      	movs	r3, #1
 800545c:	4622      	mov	r2, r4
 800545e:	4641      	mov	r1, r8
 8005460:	4638      	mov	r0, r7
 8005462:	47c8      	blx	r9
 8005464:	3001      	adds	r0, #1
 8005466:	d0e6      	beq.n	8005436 <_printf_common+0xae>
 8005468:	3601      	adds	r6, #1
 800546a:	e7d9      	b.n	8005420 <_printf_common+0x98>

0800546c <_printf_i>:
 800546c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005470:	7e0f      	ldrb	r7, [r1, #24]
 8005472:	4691      	mov	r9, r2
 8005474:	2f78      	cmp	r7, #120	@ 0x78
 8005476:	4680      	mov	r8, r0
 8005478:	460c      	mov	r4, r1
 800547a:	469a      	mov	sl, r3
 800547c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800547e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005482:	d807      	bhi.n	8005494 <_printf_i+0x28>
 8005484:	2f62      	cmp	r7, #98	@ 0x62
 8005486:	d80a      	bhi.n	800549e <_printf_i+0x32>
 8005488:	2f00      	cmp	r7, #0
 800548a:	f000 80d3 	beq.w	8005634 <_printf_i+0x1c8>
 800548e:	2f58      	cmp	r7, #88	@ 0x58
 8005490:	f000 80ba 	beq.w	8005608 <_printf_i+0x19c>
 8005494:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005498:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800549c:	e03a      	b.n	8005514 <_printf_i+0xa8>
 800549e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80054a2:	2b15      	cmp	r3, #21
 80054a4:	d8f6      	bhi.n	8005494 <_printf_i+0x28>
 80054a6:	a101      	add	r1, pc, #4	@ (adr r1, 80054ac <_printf_i+0x40>)
 80054a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054ac:	08005505 	.word	0x08005505
 80054b0:	08005519 	.word	0x08005519
 80054b4:	08005495 	.word	0x08005495
 80054b8:	08005495 	.word	0x08005495
 80054bc:	08005495 	.word	0x08005495
 80054c0:	08005495 	.word	0x08005495
 80054c4:	08005519 	.word	0x08005519
 80054c8:	08005495 	.word	0x08005495
 80054cc:	08005495 	.word	0x08005495
 80054d0:	08005495 	.word	0x08005495
 80054d4:	08005495 	.word	0x08005495
 80054d8:	0800561b 	.word	0x0800561b
 80054dc:	08005543 	.word	0x08005543
 80054e0:	080055d5 	.word	0x080055d5
 80054e4:	08005495 	.word	0x08005495
 80054e8:	08005495 	.word	0x08005495
 80054ec:	0800563d 	.word	0x0800563d
 80054f0:	08005495 	.word	0x08005495
 80054f4:	08005543 	.word	0x08005543
 80054f8:	08005495 	.word	0x08005495
 80054fc:	08005495 	.word	0x08005495
 8005500:	080055dd 	.word	0x080055dd
 8005504:	6833      	ldr	r3, [r6, #0]
 8005506:	1d1a      	adds	r2, r3, #4
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	6032      	str	r2, [r6, #0]
 800550c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005510:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005514:	2301      	movs	r3, #1
 8005516:	e09e      	b.n	8005656 <_printf_i+0x1ea>
 8005518:	6833      	ldr	r3, [r6, #0]
 800551a:	6820      	ldr	r0, [r4, #0]
 800551c:	1d19      	adds	r1, r3, #4
 800551e:	6031      	str	r1, [r6, #0]
 8005520:	0606      	lsls	r6, r0, #24
 8005522:	d501      	bpl.n	8005528 <_printf_i+0xbc>
 8005524:	681d      	ldr	r5, [r3, #0]
 8005526:	e003      	b.n	8005530 <_printf_i+0xc4>
 8005528:	0645      	lsls	r5, r0, #25
 800552a:	d5fb      	bpl.n	8005524 <_printf_i+0xb8>
 800552c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005530:	2d00      	cmp	r5, #0
 8005532:	da03      	bge.n	800553c <_printf_i+0xd0>
 8005534:	232d      	movs	r3, #45	@ 0x2d
 8005536:	426d      	negs	r5, r5
 8005538:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800553c:	230a      	movs	r3, #10
 800553e:	4859      	ldr	r0, [pc, #356]	@ (80056a4 <_printf_i+0x238>)
 8005540:	e011      	b.n	8005566 <_printf_i+0xfa>
 8005542:	6821      	ldr	r1, [r4, #0]
 8005544:	6833      	ldr	r3, [r6, #0]
 8005546:	0608      	lsls	r0, r1, #24
 8005548:	f853 5b04 	ldr.w	r5, [r3], #4
 800554c:	d402      	bmi.n	8005554 <_printf_i+0xe8>
 800554e:	0649      	lsls	r1, r1, #25
 8005550:	bf48      	it	mi
 8005552:	b2ad      	uxthmi	r5, r5
 8005554:	2f6f      	cmp	r7, #111	@ 0x6f
 8005556:	6033      	str	r3, [r6, #0]
 8005558:	bf14      	ite	ne
 800555a:	230a      	movne	r3, #10
 800555c:	2308      	moveq	r3, #8
 800555e:	4851      	ldr	r0, [pc, #324]	@ (80056a4 <_printf_i+0x238>)
 8005560:	2100      	movs	r1, #0
 8005562:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005566:	6866      	ldr	r6, [r4, #4]
 8005568:	2e00      	cmp	r6, #0
 800556a:	bfa8      	it	ge
 800556c:	6821      	ldrge	r1, [r4, #0]
 800556e:	60a6      	str	r6, [r4, #8]
 8005570:	bfa4      	itt	ge
 8005572:	f021 0104 	bicge.w	r1, r1, #4
 8005576:	6021      	strge	r1, [r4, #0]
 8005578:	b90d      	cbnz	r5, 800557e <_printf_i+0x112>
 800557a:	2e00      	cmp	r6, #0
 800557c:	d04b      	beq.n	8005616 <_printf_i+0x1aa>
 800557e:	4616      	mov	r6, r2
 8005580:	fbb5 f1f3 	udiv	r1, r5, r3
 8005584:	fb03 5711 	mls	r7, r3, r1, r5
 8005588:	5dc7      	ldrb	r7, [r0, r7]
 800558a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800558e:	462f      	mov	r7, r5
 8005590:	42bb      	cmp	r3, r7
 8005592:	460d      	mov	r5, r1
 8005594:	d9f4      	bls.n	8005580 <_printf_i+0x114>
 8005596:	2b08      	cmp	r3, #8
 8005598:	d10b      	bne.n	80055b2 <_printf_i+0x146>
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	07df      	lsls	r7, r3, #31
 800559e:	d508      	bpl.n	80055b2 <_printf_i+0x146>
 80055a0:	6923      	ldr	r3, [r4, #16]
 80055a2:	6861      	ldr	r1, [r4, #4]
 80055a4:	4299      	cmp	r1, r3
 80055a6:	bfde      	ittt	le
 80055a8:	2330      	movle	r3, #48	@ 0x30
 80055aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80055ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80055b2:	1b92      	subs	r2, r2, r6
 80055b4:	6122      	str	r2, [r4, #16]
 80055b6:	464b      	mov	r3, r9
 80055b8:	4621      	mov	r1, r4
 80055ba:	4640      	mov	r0, r8
 80055bc:	f8cd a000 	str.w	sl, [sp]
 80055c0:	aa03      	add	r2, sp, #12
 80055c2:	f7ff fee1 	bl	8005388 <_printf_common>
 80055c6:	3001      	adds	r0, #1
 80055c8:	d14a      	bne.n	8005660 <_printf_i+0x1f4>
 80055ca:	f04f 30ff 	mov.w	r0, #4294967295
 80055ce:	b004      	add	sp, #16
 80055d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055d4:	6823      	ldr	r3, [r4, #0]
 80055d6:	f043 0320 	orr.w	r3, r3, #32
 80055da:	6023      	str	r3, [r4, #0]
 80055dc:	2778      	movs	r7, #120	@ 0x78
 80055de:	4832      	ldr	r0, [pc, #200]	@ (80056a8 <_printf_i+0x23c>)
 80055e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80055e4:	6823      	ldr	r3, [r4, #0]
 80055e6:	6831      	ldr	r1, [r6, #0]
 80055e8:	061f      	lsls	r7, r3, #24
 80055ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80055ee:	d402      	bmi.n	80055f6 <_printf_i+0x18a>
 80055f0:	065f      	lsls	r7, r3, #25
 80055f2:	bf48      	it	mi
 80055f4:	b2ad      	uxthmi	r5, r5
 80055f6:	6031      	str	r1, [r6, #0]
 80055f8:	07d9      	lsls	r1, r3, #31
 80055fa:	bf44      	itt	mi
 80055fc:	f043 0320 	orrmi.w	r3, r3, #32
 8005600:	6023      	strmi	r3, [r4, #0]
 8005602:	b11d      	cbz	r5, 800560c <_printf_i+0x1a0>
 8005604:	2310      	movs	r3, #16
 8005606:	e7ab      	b.n	8005560 <_printf_i+0xf4>
 8005608:	4826      	ldr	r0, [pc, #152]	@ (80056a4 <_printf_i+0x238>)
 800560a:	e7e9      	b.n	80055e0 <_printf_i+0x174>
 800560c:	6823      	ldr	r3, [r4, #0]
 800560e:	f023 0320 	bic.w	r3, r3, #32
 8005612:	6023      	str	r3, [r4, #0]
 8005614:	e7f6      	b.n	8005604 <_printf_i+0x198>
 8005616:	4616      	mov	r6, r2
 8005618:	e7bd      	b.n	8005596 <_printf_i+0x12a>
 800561a:	6833      	ldr	r3, [r6, #0]
 800561c:	6825      	ldr	r5, [r4, #0]
 800561e:	1d18      	adds	r0, r3, #4
 8005620:	6961      	ldr	r1, [r4, #20]
 8005622:	6030      	str	r0, [r6, #0]
 8005624:	062e      	lsls	r6, r5, #24
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	d501      	bpl.n	800562e <_printf_i+0x1c2>
 800562a:	6019      	str	r1, [r3, #0]
 800562c:	e002      	b.n	8005634 <_printf_i+0x1c8>
 800562e:	0668      	lsls	r0, r5, #25
 8005630:	d5fb      	bpl.n	800562a <_printf_i+0x1be>
 8005632:	8019      	strh	r1, [r3, #0]
 8005634:	2300      	movs	r3, #0
 8005636:	4616      	mov	r6, r2
 8005638:	6123      	str	r3, [r4, #16]
 800563a:	e7bc      	b.n	80055b6 <_printf_i+0x14a>
 800563c:	6833      	ldr	r3, [r6, #0]
 800563e:	2100      	movs	r1, #0
 8005640:	1d1a      	adds	r2, r3, #4
 8005642:	6032      	str	r2, [r6, #0]
 8005644:	681e      	ldr	r6, [r3, #0]
 8005646:	6862      	ldr	r2, [r4, #4]
 8005648:	4630      	mov	r0, r6
 800564a:	f000 facd 	bl	8005be8 <memchr>
 800564e:	b108      	cbz	r0, 8005654 <_printf_i+0x1e8>
 8005650:	1b80      	subs	r0, r0, r6
 8005652:	6060      	str	r0, [r4, #4]
 8005654:	6863      	ldr	r3, [r4, #4]
 8005656:	6123      	str	r3, [r4, #16]
 8005658:	2300      	movs	r3, #0
 800565a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800565e:	e7aa      	b.n	80055b6 <_printf_i+0x14a>
 8005660:	4632      	mov	r2, r6
 8005662:	4649      	mov	r1, r9
 8005664:	4640      	mov	r0, r8
 8005666:	6923      	ldr	r3, [r4, #16]
 8005668:	47d0      	blx	sl
 800566a:	3001      	adds	r0, #1
 800566c:	d0ad      	beq.n	80055ca <_printf_i+0x15e>
 800566e:	6823      	ldr	r3, [r4, #0]
 8005670:	079b      	lsls	r3, r3, #30
 8005672:	d413      	bmi.n	800569c <_printf_i+0x230>
 8005674:	68e0      	ldr	r0, [r4, #12]
 8005676:	9b03      	ldr	r3, [sp, #12]
 8005678:	4298      	cmp	r0, r3
 800567a:	bfb8      	it	lt
 800567c:	4618      	movlt	r0, r3
 800567e:	e7a6      	b.n	80055ce <_printf_i+0x162>
 8005680:	2301      	movs	r3, #1
 8005682:	4632      	mov	r2, r6
 8005684:	4649      	mov	r1, r9
 8005686:	4640      	mov	r0, r8
 8005688:	47d0      	blx	sl
 800568a:	3001      	adds	r0, #1
 800568c:	d09d      	beq.n	80055ca <_printf_i+0x15e>
 800568e:	3501      	adds	r5, #1
 8005690:	68e3      	ldr	r3, [r4, #12]
 8005692:	9903      	ldr	r1, [sp, #12]
 8005694:	1a5b      	subs	r3, r3, r1
 8005696:	42ab      	cmp	r3, r5
 8005698:	dcf2      	bgt.n	8005680 <_printf_i+0x214>
 800569a:	e7eb      	b.n	8005674 <_printf_i+0x208>
 800569c:	2500      	movs	r5, #0
 800569e:	f104 0619 	add.w	r6, r4, #25
 80056a2:	e7f5      	b.n	8005690 <_printf_i+0x224>
 80056a4:	08006c55 	.word	0x08006c55
 80056a8:	08006c66 	.word	0x08006c66

080056ac <_scanf_chars>:
 80056ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056b0:	4615      	mov	r5, r2
 80056b2:	688a      	ldr	r2, [r1, #8]
 80056b4:	4680      	mov	r8, r0
 80056b6:	460c      	mov	r4, r1
 80056b8:	b932      	cbnz	r2, 80056c8 <_scanf_chars+0x1c>
 80056ba:	698a      	ldr	r2, [r1, #24]
 80056bc:	2a00      	cmp	r2, #0
 80056be:	bf14      	ite	ne
 80056c0:	f04f 32ff 	movne.w	r2, #4294967295
 80056c4:	2201      	moveq	r2, #1
 80056c6:	608a      	str	r2, [r1, #8]
 80056c8:	2700      	movs	r7, #0
 80056ca:	6822      	ldr	r2, [r4, #0]
 80056cc:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800575c <_scanf_chars+0xb0>
 80056d0:	06d1      	lsls	r1, r2, #27
 80056d2:	bf5f      	itttt	pl
 80056d4:	681a      	ldrpl	r2, [r3, #0]
 80056d6:	1d11      	addpl	r1, r2, #4
 80056d8:	6019      	strpl	r1, [r3, #0]
 80056da:	6816      	ldrpl	r6, [r2, #0]
 80056dc:	69a0      	ldr	r0, [r4, #24]
 80056de:	b188      	cbz	r0, 8005704 <_scanf_chars+0x58>
 80056e0:	2801      	cmp	r0, #1
 80056e2:	d107      	bne.n	80056f4 <_scanf_chars+0x48>
 80056e4:	682b      	ldr	r3, [r5, #0]
 80056e6:	781a      	ldrb	r2, [r3, #0]
 80056e8:	6963      	ldr	r3, [r4, #20]
 80056ea:	5c9b      	ldrb	r3, [r3, r2]
 80056ec:	b953      	cbnz	r3, 8005704 <_scanf_chars+0x58>
 80056ee:	2f00      	cmp	r7, #0
 80056f0:	d031      	beq.n	8005756 <_scanf_chars+0xaa>
 80056f2:	e022      	b.n	800573a <_scanf_chars+0x8e>
 80056f4:	2802      	cmp	r0, #2
 80056f6:	d120      	bne.n	800573a <_scanf_chars+0x8e>
 80056f8:	682b      	ldr	r3, [r5, #0]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	f819 3003 	ldrb.w	r3, [r9, r3]
 8005700:	071b      	lsls	r3, r3, #28
 8005702:	d41a      	bmi.n	800573a <_scanf_chars+0x8e>
 8005704:	6823      	ldr	r3, [r4, #0]
 8005706:	3701      	adds	r7, #1
 8005708:	06da      	lsls	r2, r3, #27
 800570a:	bf5e      	ittt	pl
 800570c:	682b      	ldrpl	r3, [r5, #0]
 800570e:	781b      	ldrbpl	r3, [r3, #0]
 8005710:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005714:	682a      	ldr	r2, [r5, #0]
 8005716:	686b      	ldr	r3, [r5, #4]
 8005718:	3201      	adds	r2, #1
 800571a:	602a      	str	r2, [r5, #0]
 800571c:	68a2      	ldr	r2, [r4, #8]
 800571e:	3b01      	subs	r3, #1
 8005720:	3a01      	subs	r2, #1
 8005722:	606b      	str	r3, [r5, #4]
 8005724:	60a2      	str	r2, [r4, #8]
 8005726:	b142      	cbz	r2, 800573a <_scanf_chars+0x8e>
 8005728:	2b00      	cmp	r3, #0
 800572a:	dcd7      	bgt.n	80056dc <_scanf_chars+0x30>
 800572c:	4629      	mov	r1, r5
 800572e:	4640      	mov	r0, r8
 8005730:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005734:	4798      	blx	r3
 8005736:	2800      	cmp	r0, #0
 8005738:	d0d0      	beq.n	80056dc <_scanf_chars+0x30>
 800573a:	6823      	ldr	r3, [r4, #0]
 800573c:	f013 0310 	ands.w	r3, r3, #16
 8005740:	d105      	bne.n	800574e <_scanf_chars+0xa2>
 8005742:	68e2      	ldr	r2, [r4, #12]
 8005744:	3201      	adds	r2, #1
 8005746:	60e2      	str	r2, [r4, #12]
 8005748:	69a2      	ldr	r2, [r4, #24]
 800574a:	b102      	cbz	r2, 800574e <_scanf_chars+0xa2>
 800574c:	7033      	strb	r3, [r6, #0]
 800574e:	2000      	movs	r0, #0
 8005750:	6923      	ldr	r3, [r4, #16]
 8005752:	443b      	add	r3, r7
 8005754:	6123      	str	r3, [r4, #16]
 8005756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800575a:	bf00      	nop
 800575c:	08006c93 	.word	0x08006c93

08005760 <_scanf_i>:
 8005760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005764:	460c      	mov	r4, r1
 8005766:	4698      	mov	r8, r3
 8005768:	4b72      	ldr	r3, [pc, #456]	@ (8005934 <_scanf_i+0x1d4>)
 800576a:	b087      	sub	sp, #28
 800576c:	4682      	mov	sl, r0
 800576e:	4616      	mov	r6, r2
 8005770:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005774:	ab03      	add	r3, sp, #12
 8005776:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800577a:	4b6f      	ldr	r3, [pc, #444]	@ (8005938 <_scanf_i+0x1d8>)
 800577c:	69a1      	ldr	r1, [r4, #24]
 800577e:	4a6f      	ldr	r2, [pc, #444]	@ (800593c <_scanf_i+0x1dc>)
 8005780:	4627      	mov	r7, r4
 8005782:	2903      	cmp	r1, #3
 8005784:	bf08      	it	eq
 8005786:	461a      	moveq	r2, r3
 8005788:	68a3      	ldr	r3, [r4, #8]
 800578a:	9201      	str	r2, [sp, #4]
 800578c:	1e5a      	subs	r2, r3, #1
 800578e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005792:	bf81      	itttt	hi
 8005794:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005798:	eb03 0905 	addhi.w	r9, r3, r5
 800579c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80057a0:	60a3      	strhi	r3, [r4, #8]
 80057a2:	f857 3b1c 	ldr.w	r3, [r7], #28
 80057a6:	bf98      	it	ls
 80057a8:	f04f 0900 	movls.w	r9, #0
 80057ac:	463d      	mov	r5, r7
 80057ae:	f04f 0b00 	mov.w	fp, #0
 80057b2:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80057b6:	6023      	str	r3, [r4, #0]
 80057b8:	6831      	ldr	r1, [r6, #0]
 80057ba:	ab03      	add	r3, sp, #12
 80057bc:	2202      	movs	r2, #2
 80057be:	7809      	ldrb	r1, [r1, #0]
 80057c0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80057c4:	f000 fa10 	bl	8005be8 <memchr>
 80057c8:	b328      	cbz	r0, 8005816 <_scanf_i+0xb6>
 80057ca:	f1bb 0f01 	cmp.w	fp, #1
 80057ce:	d159      	bne.n	8005884 <_scanf_i+0x124>
 80057d0:	6862      	ldr	r2, [r4, #4]
 80057d2:	b92a      	cbnz	r2, 80057e0 <_scanf_i+0x80>
 80057d4:	2108      	movs	r1, #8
 80057d6:	6822      	ldr	r2, [r4, #0]
 80057d8:	6061      	str	r1, [r4, #4]
 80057da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057de:	6022      	str	r2, [r4, #0]
 80057e0:	6822      	ldr	r2, [r4, #0]
 80057e2:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80057e6:	6022      	str	r2, [r4, #0]
 80057e8:	68a2      	ldr	r2, [r4, #8]
 80057ea:	1e51      	subs	r1, r2, #1
 80057ec:	60a1      	str	r1, [r4, #8]
 80057ee:	b192      	cbz	r2, 8005816 <_scanf_i+0xb6>
 80057f0:	6832      	ldr	r2, [r6, #0]
 80057f2:	1c51      	adds	r1, r2, #1
 80057f4:	6031      	str	r1, [r6, #0]
 80057f6:	7812      	ldrb	r2, [r2, #0]
 80057f8:	f805 2b01 	strb.w	r2, [r5], #1
 80057fc:	6872      	ldr	r2, [r6, #4]
 80057fe:	3a01      	subs	r2, #1
 8005800:	2a00      	cmp	r2, #0
 8005802:	6072      	str	r2, [r6, #4]
 8005804:	dc07      	bgt.n	8005816 <_scanf_i+0xb6>
 8005806:	4631      	mov	r1, r6
 8005808:	4650      	mov	r0, sl
 800580a:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800580e:	4790      	blx	r2
 8005810:	2800      	cmp	r0, #0
 8005812:	f040 8085 	bne.w	8005920 <_scanf_i+0x1c0>
 8005816:	f10b 0b01 	add.w	fp, fp, #1
 800581a:	f1bb 0f03 	cmp.w	fp, #3
 800581e:	d1cb      	bne.n	80057b8 <_scanf_i+0x58>
 8005820:	6863      	ldr	r3, [r4, #4]
 8005822:	b90b      	cbnz	r3, 8005828 <_scanf_i+0xc8>
 8005824:	230a      	movs	r3, #10
 8005826:	6063      	str	r3, [r4, #4]
 8005828:	6863      	ldr	r3, [r4, #4]
 800582a:	4945      	ldr	r1, [pc, #276]	@ (8005940 <_scanf_i+0x1e0>)
 800582c:	6960      	ldr	r0, [r4, #20]
 800582e:	1ac9      	subs	r1, r1, r3
 8005830:	f000 f91d 	bl	8005a6e <__sccl>
 8005834:	f04f 0b00 	mov.w	fp, #0
 8005838:	68a3      	ldr	r3, [r4, #8]
 800583a:	6822      	ldr	r2, [r4, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d03d      	beq.n	80058bc <_scanf_i+0x15c>
 8005840:	6831      	ldr	r1, [r6, #0]
 8005842:	6960      	ldr	r0, [r4, #20]
 8005844:	f891 c000 	ldrb.w	ip, [r1]
 8005848:	f810 000c 	ldrb.w	r0, [r0, ip]
 800584c:	2800      	cmp	r0, #0
 800584e:	d035      	beq.n	80058bc <_scanf_i+0x15c>
 8005850:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8005854:	d124      	bne.n	80058a0 <_scanf_i+0x140>
 8005856:	0510      	lsls	r0, r2, #20
 8005858:	d522      	bpl.n	80058a0 <_scanf_i+0x140>
 800585a:	f10b 0b01 	add.w	fp, fp, #1
 800585e:	f1b9 0f00 	cmp.w	r9, #0
 8005862:	d003      	beq.n	800586c <_scanf_i+0x10c>
 8005864:	3301      	adds	r3, #1
 8005866:	f109 39ff 	add.w	r9, r9, #4294967295
 800586a:	60a3      	str	r3, [r4, #8]
 800586c:	6873      	ldr	r3, [r6, #4]
 800586e:	3b01      	subs	r3, #1
 8005870:	2b00      	cmp	r3, #0
 8005872:	6073      	str	r3, [r6, #4]
 8005874:	dd1b      	ble.n	80058ae <_scanf_i+0x14e>
 8005876:	6833      	ldr	r3, [r6, #0]
 8005878:	3301      	adds	r3, #1
 800587a:	6033      	str	r3, [r6, #0]
 800587c:	68a3      	ldr	r3, [r4, #8]
 800587e:	3b01      	subs	r3, #1
 8005880:	60a3      	str	r3, [r4, #8]
 8005882:	e7d9      	b.n	8005838 <_scanf_i+0xd8>
 8005884:	f1bb 0f02 	cmp.w	fp, #2
 8005888:	d1ae      	bne.n	80057e8 <_scanf_i+0x88>
 800588a:	6822      	ldr	r2, [r4, #0]
 800588c:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8005890:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8005894:	d1bf      	bne.n	8005816 <_scanf_i+0xb6>
 8005896:	2110      	movs	r1, #16
 8005898:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800589c:	6061      	str	r1, [r4, #4]
 800589e:	e7a2      	b.n	80057e6 <_scanf_i+0x86>
 80058a0:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80058a4:	6022      	str	r2, [r4, #0]
 80058a6:	780b      	ldrb	r3, [r1, #0]
 80058a8:	f805 3b01 	strb.w	r3, [r5], #1
 80058ac:	e7de      	b.n	800586c <_scanf_i+0x10c>
 80058ae:	4631      	mov	r1, r6
 80058b0:	4650      	mov	r0, sl
 80058b2:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80058b6:	4798      	blx	r3
 80058b8:	2800      	cmp	r0, #0
 80058ba:	d0df      	beq.n	800587c <_scanf_i+0x11c>
 80058bc:	6823      	ldr	r3, [r4, #0]
 80058be:	05d9      	lsls	r1, r3, #23
 80058c0:	d50d      	bpl.n	80058de <_scanf_i+0x17e>
 80058c2:	42bd      	cmp	r5, r7
 80058c4:	d909      	bls.n	80058da <_scanf_i+0x17a>
 80058c6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80058ca:	4632      	mov	r2, r6
 80058cc:	4650      	mov	r0, sl
 80058ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80058d2:	f105 39ff 	add.w	r9, r5, #4294967295
 80058d6:	4798      	blx	r3
 80058d8:	464d      	mov	r5, r9
 80058da:	42bd      	cmp	r5, r7
 80058dc:	d028      	beq.n	8005930 <_scanf_i+0x1d0>
 80058de:	6822      	ldr	r2, [r4, #0]
 80058e0:	f012 0210 	ands.w	r2, r2, #16
 80058e4:	d113      	bne.n	800590e <_scanf_i+0x1ae>
 80058e6:	702a      	strb	r2, [r5, #0]
 80058e8:	4639      	mov	r1, r7
 80058ea:	6863      	ldr	r3, [r4, #4]
 80058ec:	4650      	mov	r0, sl
 80058ee:	9e01      	ldr	r6, [sp, #4]
 80058f0:	47b0      	blx	r6
 80058f2:	f8d8 3000 	ldr.w	r3, [r8]
 80058f6:	6821      	ldr	r1, [r4, #0]
 80058f8:	1d1a      	adds	r2, r3, #4
 80058fa:	f8c8 2000 	str.w	r2, [r8]
 80058fe:	f011 0f20 	tst.w	r1, #32
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	d00f      	beq.n	8005926 <_scanf_i+0x1c6>
 8005906:	6018      	str	r0, [r3, #0]
 8005908:	68e3      	ldr	r3, [r4, #12]
 800590a:	3301      	adds	r3, #1
 800590c:	60e3      	str	r3, [r4, #12]
 800590e:	2000      	movs	r0, #0
 8005910:	6923      	ldr	r3, [r4, #16]
 8005912:	1bed      	subs	r5, r5, r7
 8005914:	445d      	add	r5, fp
 8005916:	442b      	add	r3, r5
 8005918:	6123      	str	r3, [r4, #16]
 800591a:	b007      	add	sp, #28
 800591c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005920:	f04f 0b00 	mov.w	fp, #0
 8005924:	e7ca      	b.n	80058bc <_scanf_i+0x15c>
 8005926:	07ca      	lsls	r2, r1, #31
 8005928:	bf4c      	ite	mi
 800592a:	8018      	strhmi	r0, [r3, #0]
 800592c:	6018      	strpl	r0, [r3, #0]
 800592e:	e7eb      	b.n	8005908 <_scanf_i+0x1a8>
 8005930:	2001      	movs	r0, #1
 8005932:	e7f2      	b.n	800591a <_scanf_i+0x1ba>
 8005934:	080069e8 	.word	0x080069e8
 8005938:	08005d71 	.word	0x08005d71
 800593c:	08005e51 	.word	0x08005e51
 8005940:	08006c87 	.word	0x08006c87

08005944 <__swhatbuf_r>:
 8005944:	b570      	push	{r4, r5, r6, lr}
 8005946:	460c      	mov	r4, r1
 8005948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800594c:	4615      	mov	r5, r2
 800594e:	2900      	cmp	r1, #0
 8005950:	461e      	mov	r6, r3
 8005952:	b096      	sub	sp, #88	@ 0x58
 8005954:	da0c      	bge.n	8005970 <__swhatbuf_r+0x2c>
 8005956:	89a3      	ldrh	r3, [r4, #12]
 8005958:	2100      	movs	r1, #0
 800595a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800595e:	bf14      	ite	ne
 8005960:	2340      	movne	r3, #64	@ 0x40
 8005962:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005966:	2000      	movs	r0, #0
 8005968:	6031      	str	r1, [r6, #0]
 800596a:	602b      	str	r3, [r5, #0]
 800596c:	b016      	add	sp, #88	@ 0x58
 800596e:	bd70      	pop	{r4, r5, r6, pc}
 8005970:	466a      	mov	r2, sp
 8005972:	f000 f907 	bl	8005b84 <_fstat_r>
 8005976:	2800      	cmp	r0, #0
 8005978:	dbed      	blt.n	8005956 <__swhatbuf_r+0x12>
 800597a:	9901      	ldr	r1, [sp, #4]
 800597c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005980:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005984:	4259      	negs	r1, r3
 8005986:	4159      	adcs	r1, r3
 8005988:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800598c:	e7eb      	b.n	8005966 <__swhatbuf_r+0x22>

0800598e <__smakebuf_r>:
 800598e:	898b      	ldrh	r3, [r1, #12]
 8005990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005992:	079d      	lsls	r5, r3, #30
 8005994:	4606      	mov	r6, r0
 8005996:	460c      	mov	r4, r1
 8005998:	d507      	bpl.n	80059aa <__smakebuf_r+0x1c>
 800599a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800599e:	6023      	str	r3, [r4, #0]
 80059a0:	6123      	str	r3, [r4, #16]
 80059a2:	2301      	movs	r3, #1
 80059a4:	6163      	str	r3, [r4, #20]
 80059a6:	b003      	add	sp, #12
 80059a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059aa:	466a      	mov	r2, sp
 80059ac:	ab01      	add	r3, sp, #4
 80059ae:	f7ff ffc9 	bl	8005944 <__swhatbuf_r>
 80059b2:	9f00      	ldr	r7, [sp, #0]
 80059b4:	4605      	mov	r5, r0
 80059b6:	4639      	mov	r1, r7
 80059b8:	4630      	mov	r0, r6
 80059ba:	f7fe fff7 	bl	80049ac <_malloc_r>
 80059be:	b948      	cbnz	r0, 80059d4 <__smakebuf_r+0x46>
 80059c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059c4:	059a      	lsls	r2, r3, #22
 80059c6:	d4ee      	bmi.n	80059a6 <__smakebuf_r+0x18>
 80059c8:	f023 0303 	bic.w	r3, r3, #3
 80059cc:	f043 0302 	orr.w	r3, r3, #2
 80059d0:	81a3      	strh	r3, [r4, #12]
 80059d2:	e7e2      	b.n	800599a <__smakebuf_r+0xc>
 80059d4:	89a3      	ldrh	r3, [r4, #12]
 80059d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80059da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059de:	81a3      	strh	r3, [r4, #12]
 80059e0:	9b01      	ldr	r3, [sp, #4]
 80059e2:	6020      	str	r0, [r4, #0]
 80059e4:	b15b      	cbz	r3, 80059fe <__smakebuf_r+0x70>
 80059e6:	4630      	mov	r0, r6
 80059e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059ec:	f000 f8dc 	bl	8005ba8 <_isatty_r>
 80059f0:	b128      	cbz	r0, 80059fe <__smakebuf_r+0x70>
 80059f2:	89a3      	ldrh	r3, [r4, #12]
 80059f4:	f023 0303 	bic.w	r3, r3, #3
 80059f8:	f043 0301 	orr.w	r3, r3, #1
 80059fc:	81a3      	strh	r3, [r4, #12]
 80059fe:	89a3      	ldrh	r3, [r4, #12]
 8005a00:	431d      	orrs	r5, r3
 8005a02:	81a5      	strh	r5, [r4, #12]
 8005a04:	e7cf      	b.n	80059a6 <__smakebuf_r+0x18>

08005a06 <_putc_r>:
 8005a06:	b570      	push	{r4, r5, r6, lr}
 8005a08:	460d      	mov	r5, r1
 8005a0a:	4614      	mov	r4, r2
 8005a0c:	4606      	mov	r6, r0
 8005a0e:	b118      	cbz	r0, 8005a18 <_putc_r+0x12>
 8005a10:	6a03      	ldr	r3, [r0, #32]
 8005a12:	b90b      	cbnz	r3, 8005a18 <_putc_r+0x12>
 8005a14:	f7fe fcec 	bl	80043f0 <__sinit>
 8005a18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a1a:	07d8      	lsls	r0, r3, #31
 8005a1c:	d405      	bmi.n	8005a2a <_putc_r+0x24>
 8005a1e:	89a3      	ldrh	r3, [r4, #12]
 8005a20:	0599      	lsls	r1, r3, #22
 8005a22:	d402      	bmi.n	8005a2a <_putc_r+0x24>
 8005a24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a26:	f7fe ff54 	bl	80048d2 <__retarget_lock_acquire_recursive>
 8005a2a:	68a3      	ldr	r3, [r4, #8]
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	60a3      	str	r3, [r4, #8]
 8005a32:	da05      	bge.n	8005a40 <_putc_r+0x3a>
 8005a34:	69a2      	ldr	r2, [r4, #24]
 8005a36:	4293      	cmp	r3, r2
 8005a38:	db12      	blt.n	8005a60 <_putc_r+0x5a>
 8005a3a:	b2eb      	uxtb	r3, r5
 8005a3c:	2b0a      	cmp	r3, #10
 8005a3e:	d00f      	beq.n	8005a60 <_putc_r+0x5a>
 8005a40:	6823      	ldr	r3, [r4, #0]
 8005a42:	1c5a      	adds	r2, r3, #1
 8005a44:	6022      	str	r2, [r4, #0]
 8005a46:	701d      	strb	r5, [r3, #0]
 8005a48:	b2ed      	uxtb	r5, r5
 8005a4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a4c:	07da      	lsls	r2, r3, #31
 8005a4e:	d405      	bmi.n	8005a5c <_putc_r+0x56>
 8005a50:	89a3      	ldrh	r3, [r4, #12]
 8005a52:	059b      	lsls	r3, r3, #22
 8005a54:	d402      	bmi.n	8005a5c <_putc_r+0x56>
 8005a56:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a58:	f7fe ff3c 	bl	80048d4 <__retarget_lock_release_recursive>
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	bd70      	pop	{r4, r5, r6, pc}
 8005a60:	4629      	mov	r1, r5
 8005a62:	4622      	mov	r2, r4
 8005a64:	4630      	mov	r0, r6
 8005a66:	f7fe fe14 	bl	8004692 <__swbuf_r>
 8005a6a:	4605      	mov	r5, r0
 8005a6c:	e7ed      	b.n	8005a4a <_putc_r+0x44>

08005a6e <__sccl>:
 8005a6e:	b570      	push	{r4, r5, r6, lr}
 8005a70:	780b      	ldrb	r3, [r1, #0]
 8005a72:	4604      	mov	r4, r0
 8005a74:	2b5e      	cmp	r3, #94	@ 0x5e
 8005a76:	bf0b      	itete	eq
 8005a78:	784b      	ldrbeq	r3, [r1, #1]
 8005a7a:	1c4a      	addne	r2, r1, #1
 8005a7c:	1c8a      	addeq	r2, r1, #2
 8005a7e:	2100      	movne	r1, #0
 8005a80:	bf08      	it	eq
 8005a82:	2101      	moveq	r1, #1
 8005a84:	3801      	subs	r0, #1
 8005a86:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8005a8a:	f800 1f01 	strb.w	r1, [r0, #1]!
 8005a8e:	42a8      	cmp	r0, r5
 8005a90:	d1fb      	bne.n	8005a8a <__sccl+0x1c>
 8005a92:	b90b      	cbnz	r3, 8005a98 <__sccl+0x2a>
 8005a94:	1e50      	subs	r0, r2, #1
 8005a96:	bd70      	pop	{r4, r5, r6, pc}
 8005a98:	f081 0101 	eor.w	r1, r1, #1
 8005a9c:	4610      	mov	r0, r2
 8005a9e:	54e1      	strb	r1, [r4, r3]
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005aa6:	2d2d      	cmp	r5, #45	@ 0x2d
 8005aa8:	d005      	beq.n	8005ab6 <__sccl+0x48>
 8005aaa:	2d5d      	cmp	r5, #93	@ 0x5d
 8005aac:	d016      	beq.n	8005adc <__sccl+0x6e>
 8005aae:	2d00      	cmp	r5, #0
 8005ab0:	d0f1      	beq.n	8005a96 <__sccl+0x28>
 8005ab2:	462b      	mov	r3, r5
 8005ab4:	e7f2      	b.n	8005a9c <__sccl+0x2e>
 8005ab6:	7846      	ldrb	r6, [r0, #1]
 8005ab8:	2e5d      	cmp	r6, #93	@ 0x5d
 8005aba:	d0fa      	beq.n	8005ab2 <__sccl+0x44>
 8005abc:	42b3      	cmp	r3, r6
 8005abe:	dcf8      	bgt.n	8005ab2 <__sccl+0x44>
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	3002      	adds	r0, #2
 8005ac4:	3201      	adds	r2, #1
 8005ac6:	4296      	cmp	r6, r2
 8005ac8:	54a1      	strb	r1, [r4, r2]
 8005aca:	dcfb      	bgt.n	8005ac4 <__sccl+0x56>
 8005acc:	1af2      	subs	r2, r6, r3
 8005ace:	3a01      	subs	r2, #1
 8005ad0:	42b3      	cmp	r3, r6
 8005ad2:	bfa8      	it	ge
 8005ad4:	2200      	movge	r2, #0
 8005ad6:	1c5d      	adds	r5, r3, #1
 8005ad8:	18ab      	adds	r3, r5, r2
 8005ada:	e7e1      	b.n	8005aa0 <__sccl+0x32>
 8005adc:	4610      	mov	r0, r2
 8005ade:	e7da      	b.n	8005a96 <__sccl+0x28>

08005ae0 <__submore>:
 8005ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ae4:	460c      	mov	r4, r1
 8005ae6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005ae8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005aec:	4299      	cmp	r1, r3
 8005aee:	d11b      	bne.n	8005b28 <__submore+0x48>
 8005af0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005af4:	f7fe ff5a 	bl	80049ac <_malloc_r>
 8005af8:	b918      	cbnz	r0, 8005b02 <__submore+0x22>
 8005afa:	f04f 30ff 	mov.w	r0, #4294967295
 8005afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b06:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005b08:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8005b0c:	6360      	str	r0, [r4, #52]	@ 0x34
 8005b0e:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8005b12:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005b16:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8005b1a:	7043      	strb	r3, [r0, #1]
 8005b1c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005b20:	7003      	strb	r3, [r0, #0]
 8005b22:	6020      	str	r0, [r4, #0]
 8005b24:	2000      	movs	r0, #0
 8005b26:	e7ea      	b.n	8005afe <__submore+0x1e>
 8005b28:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8005b2a:	0077      	lsls	r7, r6, #1
 8005b2c:	463a      	mov	r2, r7
 8005b2e:	f000 f877 	bl	8005c20 <_realloc_r>
 8005b32:	4605      	mov	r5, r0
 8005b34:	2800      	cmp	r0, #0
 8005b36:	d0e0      	beq.n	8005afa <__submore+0x1a>
 8005b38:	eb00 0806 	add.w	r8, r0, r6
 8005b3c:	4601      	mov	r1, r0
 8005b3e:	4632      	mov	r2, r6
 8005b40:	4640      	mov	r0, r8
 8005b42:	f000 f85f 	bl	8005c04 <memcpy>
 8005b46:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8005b4a:	f8c4 8000 	str.w	r8, [r4]
 8005b4e:	e7e9      	b.n	8005b24 <__submore+0x44>

08005b50 <memmove>:
 8005b50:	4288      	cmp	r0, r1
 8005b52:	b510      	push	{r4, lr}
 8005b54:	eb01 0402 	add.w	r4, r1, r2
 8005b58:	d902      	bls.n	8005b60 <memmove+0x10>
 8005b5a:	4284      	cmp	r4, r0
 8005b5c:	4623      	mov	r3, r4
 8005b5e:	d807      	bhi.n	8005b70 <memmove+0x20>
 8005b60:	1e43      	subs	r3, r0, #1
 8005b62:	42a1      	cmp	r1, r4
 8005b64:	d008      	beq.n	8005b78 <memmove+0x28>
 8005b66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b6e:	e7f8      	b.n	8005b62 <memmove+0x12>
 8005b70:	4601      	mov	r1, r0
 8005b72:	4402      	add	r2, r0
 8005b74:	428a      	cmp	r2, r1
 8005b76:	d100      	bne.n	8005b7a <memmove+0x2a>
 8005b78:	bd10      	pop	{r4, pc}
 8005b7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b82:	e7f7      	b.n	8005b74 <memmove+0x24>

08005b84 <_fstat_r>:
 8005b84:	b538      	push	{r3, r4, r5, lr}
 8005b86:	2300      	movs	r3, #0
 8005b88:	4d06      	ldr	r5, [pc, #24]	@ (8005ba4 <_fstat_r+0x20>)
 8005b8a:	4604      	mov	r4, r0
 8005b8c:	4608      	mov	r0, r1
 8005b8e:	4611      	mov	r1, r2
 8005b90:	602b      	str	r3, [r5, #0]
 8005b92:	f7fc ff7b 	bl	8002a8c <_fstat>
 8005b96:	1c43      	adds	r3, r0, #1
 8005b98:	d102      	bne.n	8005ba0 <_fstat_r+0x1c>
 8005b9a:	682b      	ldr	r3, [r5, #0]
 8005b9c:	b103      	cbz	r3, 8005ba0 <_fstat_r+0x1c>
 8005b9e:	6023      	str	r3, [r4, #0]
 8005ba0:	bd38      	pop	{r3, r4, r5, pc}
 8005ba2:	bf00      	nop
 8005ba4:	200011c0 	.word	0x200011c0

08005ba8 <_isatty_r>:
 8005ba8:	b538      	push	{r3, r4, r5, lr}
 8005baa:	2300      	movs	r3, #0
 8005bac:	4d05      	ldr	r5, [pc, #20]	@ (8005bc4 <_isatty_r+0x1c>)
 8005bae:	4604      	mov	r4, r0
 8005bb0:	4608      	mov	r0, r1
 8005bb2:	602b      	str	r3, [r5, #0]
 8005bb4:	f7fc ff79 	bl	8002aaa <_isatty>
 8005bb8:	1c43      	adds	r3, r0, #1
 8005bba:	d102      	bne.n	8005bc2 <_isatty_r+0x1a>
 8005bbc:	682b      	ldr	r3, [r5, #0]
 8005bbe:	b103      	cbz	r3, 8005bc2 <_isatty_r+0x1a>
 8005bc0:	6023      	str	r3, [r4, #0]
 8005bc2:	bd38      	pop	{r3, r4, r5, pc}
 8005bc4:	200011c0 	.word	0x200011c0

08005bc8 <_sbrk_r>:
 8005bc8:	b538      	push	{r3, r4, r5, lr}
 8005bca:	2300      	movs	r3, #0
 8005bcc:	4d05      	ldr	r5, [pc, #20]	@ (8005be4 <_sbrk_r+0x1c>)
 8005bce:	4604      	mov	r4, r0
 8005bd0:	4608      	mov	r0, r1
 8005bd2:	602b      	str	r3, [r5, #0]
 8005bd4:	f7fc ff80 	bl	8002ad8 <_sbrk>
 8005bd8:	1c43      	adds	r3, r0, #1
 8005bda:	d102      	bne.n	8005be2 <_sbrk_r+0x1a>
 8005bdc:	682b      	ldr	r3, [r5, #0]
 8005bde:	b103      	cbz	r3, 8005be2 <_sbrk_r+0x1a>
 8005be0:	6023      	str	r3, [r4, #0]
 8005be2:	bd38      	pop	{r3, r4, r5, pc}
 8005be4:	200011c0 	.word	0x200011c0

08005be8 <memchr>:
 8005be8:	4603      	mov	r3, r0
 8005bea:	b510      	push	{r4, lr}
 8005bec:	b2c9      	uxtb	r1, r1
 8005bee:	4402      	add	r2, r0
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	d101      	bne.n	8005bfa <memchr+0x12>
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	e003      	b.n	8005c02 <memchr+0x1a>
 8005bfa:	7804      	ldrb	r4, [r0, #0]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	428c      	cmp	r4, r1
 8005c00:	d1f6      	bne.n	8005bf0 <memchr+0x8>
 8005c02:	bd10      	pop	{r4, pc}

08005c04 <memcpy>:
 8005c04:	440a      	add	r2, r1
 8005c06:	4291      	cmp	r1, r2
 8005c08:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c0c:	d100      	bne.n	8005c10 <memcpy+0xc>
 8005c0e:	4770      	bx	lr
 8005c10:	b510      	push	{r4, lr}
 8005c12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c16:	4291      	cmp	r1, r2
 8005c18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c1c:	d1f9      	bne.n	8005c12 <memcpy+0xe>
 8005c1e:	bd10      	pop	{r4, pc}

08005c20 <_realloc_r>:
 8005c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c24:	4680      	mov	r8, r0
 8005c26:	4615      	mov	r5, r2
 8005c28:	460c      	mov	r4, r1
 8005c2a:	b921      	cbnz	r1, 8005c36 <_realloc_r+0x16>
 8005c2c:	4611      	mov	r1, r2
 8005c2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c32:	f7fe bebb 	b.w	80049ac <_malloc_r>
 8005c36:	b92a      	cbnz	r2, 8005c44 <_realloc_r+0x24>
 8005c38:	f7fe fe4e 	bl	80048d8 <_free_r>
 8005c3c:	2400      	movs	r4, #0
 8005c3e:	4620      	mov	r0, r4
 8005c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c44:	f000 f906 	bl	8005e54 <_malloc_usable_size_r>
 8005c48:	4285      	cmp	r5, r0
 8005c4a:	4606      	mov	r6, r0
 8005c4c:	d802      	bhi.n	8005c54 <_realloc_r+0x34>
 8005c4e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005c52:	d8f4      	bhi.n	8005c3e <_realloc_r+0x1e>
 8005c54:	4629      	mov	r1, r5
 8005c56:	4640      	mov	r0, r8
 8005c58:	f7fe fea8 	bl	80049ac <_malloc_r>
 8005c5c:	4607      	mov	r7, r0
 8005c5e:	2800      	cmp	r0, #0
 8005c60:	d0ec      	beq.n	8005c3c <_realloc_r+0x1c>
 8005c62:	42b5      	cmp	r5, r6
 8005c64:	462a      	mov	r2, r5
 8005c66:	4621      	mov	r1, r4
 8005c68:	bf28      	it	cs
 8005c6a:	4632      	movcs	r2, r6
 8005c6c:	f7ff ffca 	bl	8005c04 <memcpy>
 8005c70:	4621      	mov	r1, r4
 8005c72:	4640      	mov	r0, r8
 8005c74:	f7fe fe30 	bl	80048d8 <_free_r>
 8005c78:	463c      	mov	r4, r7
 8005c7a:	e7e0      	b.n	8005c3e <_realloc_r+0x1e>

08005c7c <_strtol_l.constprop.0>:
 8005c7c:	2b24      	cmp	r3, #36	@ 0x24
 8005c7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c82:	4686      	mov	lr, r0
 8005c84:	4690      	mov	r8, r2
 8005c86:	d801      	bhi.n	8005c8c <_strtol_l.constprop.0+0x10>
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d106      	bne.n	8005c9a <_strtol_l.constprop.0+0x1e>
 8005c8c:	f7fe fdf6 	bl	800487c <__errno>
 8005c90:	2316      	movs	r3, #22
 8005c92:	6003      	str	r3, [r0, #0]
 8005c94:	2000      	movs	r0, #0
 8005c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c9a:	460d      	mov	r5, r1
 8005c9c:	4833      	ldr	r0, [pc, #204]	@ (8005d6c <_strtol_l.constprop.0+0xf0>)
 8005c9e:	462a      	mov	r2, r5
 8005ca0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ca4:	5d06      	ldrb	r6, [r0, r4]
 8005ca6:	f016 0608 	ands.w	r6, r6, #8
 8005caa:	d1f8      	bne.n	8005c9e <_strtol_l.constprop.0+0x22>
 8005cac:	2c2d      	cmp	r4, #45	@ 0x2d
 8005cae:	d12d      	bne.n	8005d0c <_strtol_l.constprop.0+0x90>
 8005cb0:	2601      	movs	r6, #1
 8005cb2:	782c      	ldrb	r4, [r5, #0]
 8005cb4:	1c95      	adds	r5, r2, #2
 8005cb6:	f033 0210 	bics.w	r2, r3, #16
 8005cba:	d109      	bne.n	8005cd0 <_strtol_l.constprop.0+0x54>
 8005cbc:	2c30      	cmp	r4, #48	@ 0x30
 8005cbe:	d12a      	bne.n	8005d16 <_strtol_l.constprop.0+0x9a>
 8005cc0:	782a      	ldrb	r2, [r5, #0]
 8005cc2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005cc6:	2a58      	cmp	r2, #88	@ 0x58
 8005cc8:	d125      	bne.n	8005d16 <_strtol_l.constprop.0+0x9a>
 8005cca:	2310      	movs	r3, #16
 8005ccc:	786c      	ldrb	r4, [r5, #1]
 8005cce:	3502      	adds	r5, #2
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005cd6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005cda:	fbbc f9f3 	udiv	r9, ip, r3
 8005cde:	4610      	mov	r0, r2
 8005ce0:	fb03 ca19 	mls	sl, r3, r9, ip
 8005ce4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005ce8:	2f09      	cmp	r7, #9
 8005cea:	d81b      	bhi.n	8005d24 <_strtol_l.constprop.0+0xa8>
 8005cec:	463c      	mov	r4, r7
 8005cee:	42a3      	cmp	r3, r4
 8005cf0:	dd27      	ble.n	8005d42 <_strtol_l.constprop.0+0xc6>
 8005cf2:	1c57      	adds	r7, r2, #1
 8005cf4:	d007      	beq.n	8005d06 <_strtol_l.constprop.0+0x8a>
 8005cf6:	4581      	cmp	r9, r0
 8005cf8:	d320      	bcc.n	8005d3c <_strtol_l.constprop.0+0xc0>
 8005cfa:	d101      	bne.n	8005d00 <_strtol_l.constprop.0+0x84>
 8005cfc:	45a2      	cmp	sl, r4
 8005cfe:	db1d      	blt.n	8005d3c <_strtol_l.constprop.0+0xc0>
 8005d00:	2201      	movs	r2, #1
 8005d02:	fb00 4003 	mla	r0, r0, r3, r4
 8005d06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d0a:	e7eb      	b.n	8005ce4 <_strtol_l.constprop.0+0x68>
 8005d0c:	2c2b      	cmp	r4, #43	@ 0x2b
 8005d0e:	bf04      	itt	eq
 8005d10:	782c      	ldrbeq	r4, [r5, #0]
 8005d12:	1c95      	addeq	r5, r2, #2
 8005d14:	e7cf      	b.n	8005cb6 <_strtol_l.constprop.0+0x3a>
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1da      	bne.n	8005cd0 <_strtol_l.constprop.0+0x54>
 8005d1a:	2c30      	cmp	r4, #48	@ 0x30
 8005d1c:	bf0c      	ite	eq
 8005d1e:	2308      	moveq	r3, #8
 8005d20:	230a      	movne	r3, #10
 8005d22:	e7d5      	b.n	8005cd0 <_strtol_l.constprop.0+0x54>
 8005d24:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005d28:	2f19      	cmp	r7, #25
 8005d2a:	d801      	bhi.n	8005d30 <_strtol_l.constprop.0+0xb4>
 8005d2c:	3c37      	subs	r4, #55	@ 0x37
 8005d2e:	e7de      	b.n	8005cee <_strtol_l.constprop.0+0x72>
 8005d30:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005d34:	2f19      	cmp	r7, #25
 8005d36:	d804      	bhi.n	8005d42 <_strtol_l.constprop.0+0xc6>
 8005d38:	3c57      	subs	r4, #87	@ 0x57
 8005d3a:	e7d8      	b.n	8005cee <_strtol_l.constprop.0+0x72>
 8005d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d40:	e7e1      	b.n	8005d06 <_strtol_l.constprop.0+0x8a>
 8005d42:	1c53      	adds	r3, r2, #1
 8005d44:	d108      	bne.n	8005d58 <_strtol_l.constprop.0+0xdc>
 8005d46:	2322      	movs	r3, #34	@ 0x22
 8005d48:	4660      	mov	r0, ip
 8005d4a:	f8ce 3000 	str.w	r3, [lr]
 8005d4e:	f1b8 0f00 	cmp.w	r8, #0
 8005d52:	d0a0      	beq.n	8005c96 <_strtol_l.constprop.0+0x1a>
 8005d54:	1e69      	subs	r1, r5, #1
 8005d56:	e006      	b.n	8005d66 <_strtol_l.constprop.0+0xea>
 8005d58:	b106      	cbz	r6, 8005d5c <_strtol_l.constprop.0+0xe0>
 8005d5a:	4240      	negs	r0, r0
 8005d5c:	f1b8 0f00 	cmp.w	r8, #0
 8005d60:	d099      	beq.n	8005c96 <_strtol_l.constprop.0+0x1a>
 8005d62:	2a00      	cmp	r2, #0
 8005d64:	d1f6      	bne.n	8005d54 <_strtol_l.constprop.0+0xd8>
 8005d66:	f8c8 1000 	str.w	r1, [r8]
 8005d6a:	e794      	b.n	8005c96 <_strtol_l.constprop.0+0x1a>
 8005d6c:	08006c93 	.word	0x08006c93

08005d70 <_strtol_r>:
 8005d70:	f7ff bf84 	b.w	8005c7c <_strtol_l.constprop.0>

08005d74 <_strtoul_l.constprop.0>:
 8005d74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d78:	4686      	mov	lr, r0
 8005d7a:	460d      	mov	r5, r1
 8005d7c:	4e33      	ldr	r6, [pc, #204]	@ (8005e4c <_strtoul_l.constprop.0+0xd8>)
 8005d7e:	4628      	mov	r0, r5
 8005d80:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d84:	5d37      	ldrb	r7, [r6, r4]
 8005d86:	f017 0708 	ands.w	r7, r7, #8
 8005d8a:	d1f8      	bne.n	8005d7e <_strtoul_l.constprop.0+0xa>
 8005d8c:	2c2d      	cmp	r4, #45	@ 0x2d
 8005d8e:	d12f      	bne.n	8005df0 <_strtoul_l.constprop.0+0x7c>
 8005d90:	2701      	movs	r7, #1
 8005d92:	782c      	ldrb	r4, [r5, #0]
 8005d94:	1c85      	adds	r5, r0, #2
 8005d96:	f033 0010 	bics.w	r0, r3, #16
 8005d9a:	d109      	bne.n	8005db0 <_strtoul_l.constprop.0+0x3c>
 8005d9c:	2c30      	cmp	r4, #48	@ 0x30
 8005d9e:	d12c      	bne.n	8005dfa <_strtoul_l.constprop.0+0x86>
 8005da0:	7828      	ldrb	r0, [r5, #0]
 8005da2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8005da6:	2858      	cmp	r0, #88	@ 0x58
 8005da8:	d127      	bne.n	8005dfa <_strtoul_l.constprop.0+0x86>
 8005daa:	2310      	movs	r3, #16
 8005dac:	786c      	ldrb	r4, [r5, #1]
 8005dae:	3502      	adds	r5, #2
 8005db0:	f04f 38ff 	mov.w	r8, #4294967295
 8005db4:	fbb8 f8f3 	udiv	r8, r8, r3
 8005db8:	2600      	movs	r6, #0
 8005dba:	fb03 f908 	mul.w	r9, r3, r8
 8005dbe:	4630      	mov	r0, r6
 8005dc0:	ea6f 0909 	mvn.w	r9, r9
 8005dc4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8005dc8:	f1bc 0f09 	cmp.w	ip, #9
 8005dcc:	d81c      	bhi.n	8005e08 <_strtoul_l.constprop.0+0x94>
 8005dce:	4664      	mov	r4, ip
 8005dd0:	42a3      	cmp	r3, r4
 8005dd2:	dd2a      	ble.n	8005e2a <_strtoul_l.constprop.0+0xb6>
 8005dd4:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005dd8:	d007      	beq.n	8005dea <_strtoul_l.constprop.0+0x76>
 8005dda:	4580      	cmp	r8, r0
 8005ddc:	d322      	bcc.n	8005e24 <_strtoul_l.constprop.0+0xb0>
 8005dde:	d101      	bne.n	8005de4 <_strtoul_l.constprop.0+0x70>
 8005de0:	45a1      	cmp	r9, r4
 8005de2:	db1f      	blt.n	8005e24 <_strtoul_l.constprop.0+0xb0>
 8005de4:	2601      	movs	r6, #1
 8005de6:	fb00 4003 	mla	r0, r0, r3, r4
 8005dea:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005dee:	e7e9      	b.n	8005dc4 <_strtoul_l.constprop.0+0x50>
 8005df0:	2c2b      	cmp	r4, #43	@ 0x2b
 8005df2:	bf04      	itt	eq
 8005df4:	782c      	ldrbeq	r4, [r5, #0]
 8005df6:	1c85      	addeq	r5, r0, #2
 8005df8:	e7cd      	b.n	8005d96 <_strtoul_l.constprop.0+0x22>
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1d8      	bne.n	8005db0 <_strtoul_l.constprop.0+0x3c>
 8005dfe:	2c30      	cmp	r4, #48	@ 0x30
 8005e00:	bf0c      	ite	eq
 8005e02:	2308      	moveq	r3, #8
 8005e04:	230a      	movne	r3, #10
 8005e06:	e7d3      	b.n	8005db0 <_strtoul_l.constprop.0+0x3c>
 8005e08:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8005e0c:	f1bc 0f19 	cmp.w	ip, #25
 8005e10:	d801      	bhi.n	8005e16 <_strtoul_l.constprop.0+0xa2>
 8005e12:	3c37      	subs	r4, #55	@ 0x37
 8005e14:	e7dc      	b.n	8005dd0 <_strtoul_l.constprop.0+0x5c>
 8005e16:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8005e1a:	f1bc 0f19 	cmp.w	ip, #25
 8005e1e:	d804      	bhi.n	8005e2a <_strtoul_l.constprop.0+0xb6>
 8005e20:	3c57      	subs	r4, #87	@ 0x57
 8005e22:	e7d5      	b.n	8005dd0 <_strtoul_l.constprop.0+0x5c>
 8005e24:	f04f 36ff 	mov.w	r6, #4294967295
 8005e28:	e7df      	b.n	8005dea <_strtoul_l.constprop.0+0x76>
 8005e2a:	1c73      	adds	r3, r6, #1
 8005e2c:	d106      	bne.n	8005e3c <_strtoul_l.constprop.0+0xc8>
 8005e2e:	2322      	movs	r3, #34	@ 0x22
 8005e30:	4630      	mov	r0, r6
 8005e32:	f8ce 3000 	str.w	r3, [lr]
 8005e36:	b932      	cbnz	r2, 8005e46 <_strtoul_l.constprop.0+0xd2>
 8005e38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e3c:	b107      	cbz	r7, 8005e40 <_strtoul_l.constprop.0+0xcc>
 8005e3e:	4240      	negs	r0, r0
 8005e40:	2a00      	cmp	r2, #0
 8005e42:	d0f9      	beq.n	8005e38 <_strtoul_l.constprop.0+0xc4>
 8005e44:	b106      	cbz	r6, 8005e48 <_strtoul_l.constprop.0+0xd4>
 8005e46:	1e69      	subs	r1, r5, #1
 8005e48:	6011      	str	r1, [r2, #0]
 8005e4a:	e7f5      	b.n	8005e38 <_strtoul_l.constprop.0+0xc4>
 8005e4c:	08006c93 	.word	0x08006c93

08005e50 <_strtoul_r>:
 8005e50:	f7ff bf90 	b.w	8005d74 <_strtoul_l.constprop.0>

08005e54 <_malloc_usable_size_r>:
 8005e54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e58:	1f18      	subs	r0, r3, #4
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	bfbc      	itt	lt
 8005e5e:	580b      	ldrlt	r3, [r1, r0]
 8005e60:	18c0      	addlt	r0, r0, r3
 8005e62:	4770      	bx	lr

08005e64 <_init>:
 8005e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e66:	bf00      	nop
 8005e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e6a:	bc08      	pop	{r3}
 8005e6c:	469e      	mov	lr, r3
 8005e6e:	4770      	bx	lr

08005e70 <_fini>:
 8005e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e72:	bf00      	nop
 8005e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e76:	bc08      	pop	{r3}
 8005e78:	469e      	mov	lr, r3
 8005e7a:	4770      	bx	lr
