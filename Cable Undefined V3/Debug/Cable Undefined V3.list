
Cable Undefined V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040d0  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b54  080042b4  080042b4  000052b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e08  08004e08  00006d28  2**0
                  CONTENTS
  4 .ARM          00000008  08004e08  08004e08  00005e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e10  08004e10  00006d28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e10  08004e10  00005e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e14  08004e14  00005e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000d28  20000000  08004e18  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  20000d28  08005b40  00006d28  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001148  08005b40  00007148  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006d28  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c081  00000000  00000000  00006d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002463  00000000  00000000  00012dd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  00015238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b2a  00000000  00000000  000160e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023964  00000000  00000000  00016c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e808  00000000  00000000  0003a56e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca5aa  00000000  00000000  00048d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00113320  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004964  00000000  00000000  00113364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00117cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000d28 	.word	0x20000d28
 8000200:	00000000 	.word	0x00000000
 8000204:	0800429c 	.word	0x0800429c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000d2c 	.word	0x20000d2c
 8000220:	0800429c 	.word	0x0800429c

08000224 <strcmp>:
 8000224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800022c:	2a01      	cmp	r2, #1
 800022e:	bf28      	it	cs
 8000230:	429a      	cmpcs	r2, r3
 8000232:	d0f7      	beq.n	8000224 <strcmp>
 8000234:	1ad0      	subs	r0, r2, r3
 8000236:	4770      	bx	lr

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800024c:	4b04      	ldr	r3, [pc, #16]	@ (8000260 <__NVIC_GetPriorityGrouping+0x18>)
 800024e:	68db      	ldr	r3, [r3, #12]
 8000250:	0a1b      	lsrs	r3, r3, #8
 8000252:	f003 0307 	and.w	r3, r3, #7
}
 8000256:	4618      	mov	r0, r3
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800026e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000272:	2b00      	cmp	r3, #0
 8000274:	db0b      	blt.n	800028e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000276:	79fb      	ldrb	r3, [r7, #7]
 8000278:	f003 021f 	and.w	r2, r3, #31
 800027c:	4906      	ldr	r1, [pc, #24]	@ (8000298 <__NVIC_EnableIRQ+0x34>)
 800027e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000282:	095b      	lsrs	r3, r3, #5
 8000284:	2001      	movs	r0, #1
 8000286:	fa00 f202 	lsl.w	r2, r0, r2
 800028a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800028e:	bf00      	nop
 8000290:	370c      	adds	r7, #12
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr
 8000298:	e000e100 	.word	0xe000e100

0800029c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	6039      	str	r1, [r7, #0]
 80002a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	db0a      	blt.n	80002c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	b2da      	uxtb	r2, r3
 80002b4:	490c      	ldr	r1, [pc, #48]	@ (80002e8 <__NVIC_SetPriority+0x4c>)
 80002b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ba:	0112      	lsls	r2, r2, #4
 80002bc:	b2d2      	uxtb	r2, r2
 80002be:	440b      	add	r3, r1
 80002c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002c4:	e00a      	b.n	80002dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	b2da      	uxtb	r2, r3
 80002ca:	4908      	ldr	r1, [pc, #32]	@ (80002ec <__NVIC_SetPriority+0x50>)
 80002cc:	79fb      	ldrb	r3, [r7, #7]
 80002ce:	f003 030f 	and.w	r3, r3, #15
 80002d2:	3b04      	subs	r3, #4
 80002d4:	0112      	lsls	r2, r2, #4
 80002d6:	b2d2      	uxtb	r2, r2
 80002d8:	440b      	add	r3, r1
 80002da:	761a      	strb	r2, [r3, #24]
}
 80002dc:	bf00      	nop
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bc80      	pop	{r7}
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	e000e100 	.word	0xe000e100
 80002ec:	e000ed00 	.word	0xe000ed00

080002f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b089      	sub	sp, #36	@ 0x24
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	60f8      	str	r0, [r7, #12]
 80002f8:	60b9      	str	r1, [r7, #8]
 80002fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	f003 0307 	and.w	r3, r3, #7
 8000302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000304:	69fb      	ldr	r3, [r7, #28]
 8000306:	f1c3 0307 	rsb	r3, r3, #7
 800030a:	2b04      	cmp	r3, #4
 800030c:	bf28      	it	cs
 800030e:	2304      	movcs	r3, #4
 8000310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000312:	69fb      	ldr	r3, [r7, #28]
 8000314:	3304      	adds	r3, #4
 8000316:	2b06      	cmp	r3, #6
 8000318:	d902      	bls.n	8000320 <NVIC_EncodePriority+0x30>
 800031a:	69fb      	ldr	r3, [r7, #28]
 800031c:	3b03      	subs	r3, #3
 800031e:	e000      	b.n	8000322 <NVIC_EncodePriority+0x32>
 8000320:	2300      	movs	r3, #0
 8000322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000324:	f04f 32ff 	mov.w	r2, #4294967295
 8000328:	69bb      	ldr	r3, [r7, #24]
 800032a:	fa02 f303 	lsl.w	r3, r2, r3
 800032e:	43da      	mvns	r2, r3
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	401a      	ands	r2, r3
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000338:	f04f 31ff 	mov.w	r1, #4294967295
 800033c:	697b      	ldr	r3, [r7, #20]
 800033e:	fa01 f303 	lsl.w	r3, r1, r3
 8000342:	43d9      	mvns	r1, r3
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000348:	4313      	orrs	r3, r2
         );
}
 800034a:	4618      	mov	r0, r3
 800034c:	3724      	adds	r7, #36	@ 0x24
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr

08000354 <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000354:	b480      	push	{r7}
 8000356:	b089      	sub	sp, #36	@ 0x24
 8000358:	af00      	add	r7, sp, #0
 800035a:	60f8      	str	r0, [r7, #12]
 800035c:	60b9      	str	r1, [r7, #8]
 800035e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	332c      	adds	r3, #44	@ 0x2c
 8000364:	4619      	mov	r1, r3
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800036c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000370:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000372:	69ba      	ldr	r2, [r7, #24]
 8000374:	fa92 f2a2 	rbit	r2, r2
 8000378:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800037a:	697a      	ldr	r2, [r7, #20]
 800037c:	fab2 f282 	clz	r2, r2
 8000380:	b2d2      	uxtb	r2, r2
 8000382:	40d3      	lsrs	r3, r2
 8000384:	009b      	lsls	r3, r3, #2
 8000386:	440b      	add	r3, r1
 8000388:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 800038a:	69fb      	ldr	r3, [r7, #28]
 800038c:	681a      	ldr	r2, [r3, #0]
 800038e:	68bb      	ldr	r3, [r7, #8]
 8000390:	f003 031f 	and.w	r3, r3, #31
 8000394:	211f      	movs	r1, #31
 8000396:	fa01 f303 	lsl.w	r3, r1, r3
 800039a:	43db      	mvns	r3, r3
 800039c:	401a      	ands	r2, r3
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	f003 011f 	and.w	r1, r3, #31
 80003a4:	68bb      	ldr	r3, [r7, #8]
 80003a6:	f003 031f 	and.w	r3, r3, #31
 80003aa:	fa01 f303 	lsl.w	r3, r1, r3
 80003ae:	431a      	orrs	r2, r3
 80003b0:	69fb      	ldr	r3, [r7, #28]
 80003b2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80003b4:	bf00      	nop
 80003b6:	3724      	adds	r7, #36	@ 0x24
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bc80      	pop	{r7}
 80003bc:	4770      	bx	lr

080003be <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80003be:	b480      	push	{r7}
 80003c0:	b08d      	sub	sp, #52	@ 0x34
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	60f8      	str	r0, [r7, #12]
 80003c6:	60b9      	str	r1, [r7, #8]
 80003c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	330c      	adds	r3, #12
 80003ce:	4619      	mov	r1, r3
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80003d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80003da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003dc:	69ba      	ldr	r2, [r7, #24]
 80003de:	fa92 f2a2 	rbit	r2, r2
 80003e2:	617a      	str	r2, [r7, #20]
  return result;
 80003e4:	697a      	ldr	r2, [r7, #20]
 80003e6:	fab2 f282 	clz	r2, r2
 80003ea:	b2d2      	uxtb	r2, r2
 80003ec:	40d3      	lsrs	r3, r2
 80003ee:	009b      	lsls	r3, r3, #2
 80003f0:	440b      	add	r3, r1
 80003f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  MODIFY_REG(*preg,
 80003f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80003f6:	681a      	ldr	r2, [r3, #0]
 80003f8:	68bb      	ldr	r3, [r7, #8]
 80003fa:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 80003fe:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8000402:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000404:	6a39      	ldr	r1, [r7, #32]
 8000406:	fa91 f1a1 	rbit	r1, r1
 800040a:	61f9      	str	r1, [r7, #28]
  return result;
 800040c:	69f9      	ldr	r1, [r7, #28]
 800040e:	fab1 f181 	clz	r1, r1
 8000412:	b2c9      	uxtb	r1, r1
 8000414:	40cb      	lsrs	r3, r1
 8000416:	2107      	movs	r1, #7
 8000418:	fa01 f303 	lsl.w	r3, r1, r3
 800041c:	43db      	mvns	r3, r3
 800041e:	401a      	ands	r2, r3
 8000420:	68bb      	ldr	r3, [r7, #8]
 8000422:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8000426:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 800042a:	62b9      	str	r1, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800042c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800042e:	fa91 f1a1 	rbit	r1, r1
 8000432:	6279      	str	r1, [r7, #36]	@ 0x24
  return result;
 8000434:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000436:	fab1 f181 	clz	r1, r1
 800043a:	b2c9      	uxtb	r1, r1
 800043c:	40cb      	lsrs	r3, r1
 800043e:	6879      	ldr	r1, [r7, #4]
 8000440:	fa01 f303 	lsl.w	r3, r1, r3
 8000444:	431a      	orrs	r2, r3
 8000446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000448:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 800044a:	bf00      	nop
 800044c:	3734      	adds	r7, #52	@ 0x34
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr

08000454 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000458:	4b04      	ldr	r3, [pc, #16]	@ (800046c <LL_RCC_HSE_Enable+0x18>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a03      	ldr	r2, [pc, #12]	@ (800046c <LL_RCC_HSE_Enable+0x18>)
 800045e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000462:	6013      	str	r3, [r2, #0]
}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr
 800046c:	40021000 	.word	0x40021000

08000470 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000474:	4b06      	ldr	r3, [pc, #24]	@ (8000490 <LL_RCC_HSE_IsReady+0x20>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800047c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000480:	bf0c      	ite	eq
 8000482:	2301      	moveq	r3, #1
 8000484:	2300      	movne	r3, #0
 8000486:	b2db      	uxtb	r3, r3
}
 8000488:	4618      	mov	r0, r3
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr
 8000490:	40021000 	.word	0x40021000

08000494 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800049c:	4b06      	ldr	r3, [pc, #24]	@ (80004b8 <LL_RCC_SetSysClkSource+0x24>)
 800049e:	685b      	ldr	r3, [r3, #4]
 80004a0:	f023 0203 	bic.w	r2, r3, #3
 80004a4:	4904      	ldr	r1, [pc, #16]	@ (80004b8 <LL_RCC_SetSysClkSource+0x24>)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4313      	orrs	r3, r2
 80004aa:	604b      	str	r3, [r1, #4]
}
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	40021000 	.word	0x40021000

080004bc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80004c0:	4b03      	ldr	r3, [pc, #12]	@ (80004d0 <LL_RCC_GetSysClkSource+0x14>)
 80004c2:	685b      	ldr	r3, [r3, #4]
 80004c4:	f003 030c 	and.w	r3, r3, #12
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr
 80004d0:	40021000 	.word	0x40021000

080004d4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80004dc:	4b06      	ldr	r3, [pc, #24]	@ (80004f8 <LL_RCC_SetAHBPrescaler+0x24>)
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80004e4:	4904      	ldr	r1, [pc, #16]	@ (80004f8 <LL_RCC_SetAHBPrescaler+0x24>)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4313      	orrs	r3, r2
 80004ea:	604b      	str	r3, [r1, #4]
}
 80004ec:	bf00      	nop
 80004ee:	370c      	adds	r7, #12
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bc80      	pop	{r7}
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	40021000 	.word	0x40021000

080004fc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000504:	4b06      	ldr	r3, [pc, #24]	@ (8000520 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000506:	685b      	ldr	r3, [r3, #4]
 8000508:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800050c:	4904      	ldr	r1, [pc, #16]	@ (8000520 <LL_RCC_SetAPB1Prescaler+0x24>)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4313      	orrs	r3, r2
 8000512:	604b      	str	r3, [r1, #4]
}
 8000514:	bf00      	nop
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	40021000 	.word	0x40021000

08000524 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800052c:	4b06      	ldr	r3, [pc, #24]	@ (8000548 <LL_RCC_SetAPB2Prescaler+0x24>)
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000534:	4904      	ldr	r1, [pc, #16]	@ (8000548 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4313      	orrs	r3, r2
 800053a:	604b      	str	r3, [r1, #4]
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	40021000 	.word	0x40021000

0800054c <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8000554:	4b06      	ldr	r3, [pc, #24]	@ (8000570 <LL_RCC_SetADCClockSource+0x24>)
 8000556:	685b      	ldr	r3, [r3, #4]
 8000558:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800055c:	4904      	ldr	r1, [pc, #16]	@ (8000570 <LL_RCC_SetADCClockSource+0x24>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4313      	orrs	r3, r2
 8000562:	604b      	str	r3, [r1, #4]
}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	bc80      	pop	{r7}
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	40021000 	.word	0x40021000

08000574 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000578:	4b04      	ldr	r3, [pc, #16]	@ (800058c <LL_RCC_PLL_Enable+0x18>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a03      	ldr	r2, [pc, #12]	@ (800058c <LL_RCC_PLL_Enable+0x18>)
 800057e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000582:	6013      	str	r3, [r2, #0]
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr
 800058c:	40021000 	.word	0x40021000

08000590 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000594:	4b06      	ldr	r3, [pc, #24]	@ (80005b0 <LL_RCC_PLL_IsReady+0x20>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800059c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80005a0:	bf0c      	ite	eq
 80005a2:	2301      	moveq	r3, #1
 80005a4:	2300      	movne	r3, #0
 80005a6:	b2db      	uxtb	r3, r3
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr
 80005b0:	40021000 	.word	0x40021000

080005b4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80005be:	4b11      	ldr	r3, [pc, #68]	@ (8000604 <LL_RCC_PLL_ConfigDomain_SYS+0x50>)
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	430b      	orrs	r3, r1
 80005d0:	490c      	ldr	r1, [pc, #48]	@ (8000604 <LL_RCC_PLL_ConfigDomain_SYS+0x50>)
 80005d2:	4313      	orrs	r3, r2
 80005d4:	604b      	str	r3, [r1, #4]
             (Source & (RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE)) | PLLMul);
#if defined(RCC_CFGR2_PREDIV1)
#if defined(RCC_CFGR2_PREDIV1SRC)
  MODIFY_REG(RCC->CFGR2, (RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC),
 80005d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000604 <LL_RCC_PLL_ConfigDomain_SYS+0x50>)
 80005d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80005de:	f023 030f 	bic.w	r3, r3, #15
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	f002 010f 	and.w	r1, r2, #15
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	0912      	lsrs	r2, r2, #4
 80005ec:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 80005f0:	430a      	orrs	r2, r1
 80005f2:	4904      	ldr	r1, [pc, #16]	@ (8000604 <LL_RCC_PLL_ConfigDomain_SYS+0x50>)
 80005f4:	4313      	orrs	r3, r2
 80005f6:	62cb      	str	r3, [r1, #44]	@ 0x2c
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bc80      	pop	{r7}
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	40021000 	.word	0x40021000

08000608 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000610:	4b08      	ldr	r3, [pc, #32]	@ (8000634 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000612:	69da      	ldr	r2, [r3, #28]
 8000614:	4907      	ldr	r1, [pc, #28]	@ (8000634 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4313      	orrs	r3, r2
 800061a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800061c:	4b05      	ldr	r3, [pc, #20]	@ (8000634 <LL_APB1_GRP1_EnableClock+0x2c>)
 800061e:	69da      	ldr	r2, [r3, #28]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4013      	ands	r3, r2
 8000624:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000626:	68fb      	ldr	r3, [r7, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	40021000 	.word	0x40021000

08000638 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000640:	4b08      	ldr	r3, [pc, #32]	@ (8000664 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000642:	699a      	ldr	r2, [r3, #24]
 8000644:	4907      	ldr	r1, [pc, #28]	@ (8000664 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4313      	orrs	r3, r2
 800064a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800064c:	4b05      	ldr	r3, [pc, #20]	@ (8000664 <LL_APB2_GRP1_EnableClock+0x2c>)
 800064e:	699a      	ldr	r2, [r3, #24]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4013      	ands	r3, r2
 8000654:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000656:	68fb      	ldr	r3, [r7, #12]
}
 8000658:	bf00      	nop
 800065a:	3714      	adds	r7, #20
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	40021000 	.word	0x40021000

08000668 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000670:	4b06      	ldr	r3, [pc, #24]	@ (800068c <LL_FLASH_SetLatency+0x24>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f023 0207 	bic.w	r2, r3, #7
 8000678:	4904      	ldr	r1, [pc, #16]	@ (800068c <LL_FLASH_SetLatency+0x24>)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4313      	orrs	r3, r2
 800067e:	600b      	str	r3, [r1, #0]
}
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	40022000 	.word	0x40022000

08000690 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000694:	4b03      	ldr	r3, [pc, #12]	@ (80006a4 <LL_FLASH_GetLatency+0x14>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f003 0307 	and.w	r3, r3, #7
}
 800069c:	4618      	mov	r0, r3
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr
 80006a4:	40022000 	.word	0x40022000

080006a8 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	60da      	str	r2, [r3, #12]
}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr

080006c6 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80006c6:	b480      	push	{r7}
 80006c8:	b083      	sub	sp, #12
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	691b      	ldr	r3, [r3, #16]
 80006d2:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	615a      	str	r2, [r3, #20]
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr

080006f0 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000700:	2b40      	cmp	r3, #64	@ 0x40
 8000702:	bf0c      	ite	eq
 8000704:	2301      	moveq	r3, #1
 8000706:	2300      	movne	r3, #0
 8000708:	b2db      	uxtb	r3, r3
}
 800070a:	4618      	mov	r0, r3
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr

08000714 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000724:	2b80      	cmp	r3, #128	@ 0x80
 8000726:	bf0c      	ite	eq
 8000728:	2301      	moveq	r3, #1
 800072a:	2300      	movne	r3, #0
 800072c:	b2db      	uxtb	r3, r3
}
 800072e:	4618      	mov	r0, r3
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000738:	b480      	push	{r7}
 800073a:	b089      	sub	sp, #36	@ 0x24
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	330c      	adds	r3, #12
 8000744:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	e853 3f00 	ldrex	r3, [r3]
 800074c:	60bb      	str	r3, [r7, #8]
   return(result);
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	f043 0320 	orr.w	r3, r3, #32
 8000754:	61fb      	str	r3, [r7, #28]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	330c      	adds	r3, #12
 800075a:	69fa      	ldr	r2, [r7, #28]
 800075c:	61ba      	str	r2, [r7, #24]
 800075e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000760:	6979      	ldr	r1, [r7, #20]
 8000762:	69ba      	ldr	r2, [r7, #24]
 8000764:	e841 2300 	strex	r3, r2, [r1]
 8000768:	613b      	str	r3, [r7, #16]
   return(result);
 800076a:	693b      	ldr	r3, [r7, #16]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d1e7      	bne.n	8000740 <LL_USART_EnableIT_RXNE+0x8>
}
 8000770:	bf00      	nop
 8000772:	bf00      	nop
 8000774:	3724      	adds	r7, #36	@ 0x24
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr

0800077c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	460b      	mov	r3, r1
 8000786:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000788:	78fa      	ldrb	r2, [r7, #3]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	605a      	str	r2, [r3, #4]
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr

08000798 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	611a      	str	r2, [r3, #16]
}
 80007ac:	bf00      	nop
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr

080007b6 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007b6:	b480      	push	{r7}
 80007b8:	b083      	sub	sp, #12
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
 80007be:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	0a1b      	lsrs	r3, r3, #8
 80007c4:	b29a      	uxth	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	615a      	str	r2, [r3, #20]
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr

080007d4 <LL_GPIO_AF_EnableRemap_USART2>:
  * @rmtoll MAPR          USART2_REMAP           LL_GPIO_AF_EnableRemap_USART2
  * @note  ENABLE: Remap     (CTS/PD3, RTS/PD4, TX/PD5, RX/PD6, CK/PD7)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_USART2(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_USART2_REMAP | AFIO_MAPR_SWJ_CFG);
 80007d8:	4b05      	ldr	r3, [pc, #20]	@ (80007f0 <LL_GPIO_AF_EnableRemap_USART2+0x1c>)
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	4a04      	ldr	r2, [pc, #16]	@ (80007f0 <LL_GPIO_AF_EnableRemap_USART2+0x1c>)
 80007de:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80007e2:	f043 0308 	orr.w	r3, r3, #8
 80007e6:	6053      	str	r3, [r2, #4]
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr
 80007f0:	40010000 	.word	0x40010000

080007f4 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Погледни чата с г-н Стефанов, _write e блокираща функция

int _write(int file, char *ptr, int len) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
 8000804:	e011      	b.n	800082a <_write+0x36>
        while (!LL_USART_IsActiveFlag_TXE(USART2));  // Wait until TX buffer is empty
 8000806:	bf00      	nop
 8000808:	4810      	ldr	r0, [pc, #64]	@ (800084c <_write+0x58>)
 800080a:	f7ff ff83 	bl	8000714 <LL_USART_IsActiveFlag_TXE>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d0f9      	beq.n	8000808 <_write+0x14>
        LL_USART_TransmitData8(USART2, ptr[i]);      // Send byte
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	4413      	add	r3, r2
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	4619      	mov	r1, r3
 800081e:	480b      	ldr	r0, [pc, #44]	@ (800084c <_write+0x58>)
 8000820:	f7ff ffac 	bl	800077c <LL_USART_TransmitData8>
    for (int i = 0; i < len; i++) {
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	3301      	adds	r3, #1
 8000828:	617b      	str	r3, [r7, #20]
 800082a:	697a      	ldr	r2, [r7, #20]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	429a      	cmp	r2, r3
 8000830:	dbe9      	blt.n	8000806 <_write+0x12>
    }

    while (!LL_USART_IsActiveFlag_TC(USART2));  // Wait for last transmission to complete
 8000832:	bf00      	nop
 8000834:	4805      	ldr	r0, [pc, #20]	@ (800084c <_write+0x58>)
 8000836:	f7ff ff5b 	bl	80006f0 <LL_USART_IsActiveFlag_TC>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d0f9      	beq.n	8000834 <_write+0x40>
    return len;
 8000840:	687b      	ldr	r3, [r7, #4]
}
 8000842:	4618      	mov	r0, r3
 8000844:	3718      	adds	r7, #24
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40004400 	.word	0x40004400

08000850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000856:	f000 ffe9 	bl	800182c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085a:	f000 f82b 	bl	80008b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085e:	f000 fa31 	bl	8000cc4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000862:	f000 f86f 	bl	8000944 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000866:	f000 f905 	bl	8000a74 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800086a:	f000 f96b 	bl	8000b44 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800086e:	f000 f9c1 	bl	8000bf4 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000872:	f000 f8c9 	bl	8000a08 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  LL_GPIO_SetOutputPin(RST_GPIO, RST_PIN);
 8000876:	490b      	ldr	r1, [pc, #44]	@ (80008a4 <main+0x54>)
 8000878:	480b      	ldr	r0, [pc, #44]	@ (80008a8 <main+0x58>)
 800087a:	f7ff ff8d 	bl	8000798 <LL_GPIO_SetOutputPin>
  LL_mDelay(20);
 800087e:	2014      	movs	r0, #20
 8000880:	f001 fe94 	bl	80025ac <LL_mDelay>
  LL_GPIO_ResetOutputPin(RST_GPIO, RST_PIN);
 8000884:	4907      	ldr	r1, [pc, #28]	@ (80008a4 <main+0x54>)
 8000886:	4808      	ldr	r0, [pc, #32]	@ (80008a8 <main+0x58>)
 8000888:	f7ff ff95 	bl	80007b6 <LL_GPIO_ResetOutputPin>
  LL_mDelay(20);
 800088c:	2014      	movs	r0, #20
 800088e:	f001 fe8d 	bl	80025ac <LL_mDelay>
//  route(1, 2, 1, muxes, sizeof(muxes) / sizeof(muxes[0]), 0, mock);   // Ex GND
//  route(2, 120, 1, muxes, sizeof(muxes) / sizeof(muxes[0]), 0, mock); // Ex GND
//  route(11, 18, 3, muxes, sizeof(muxes) / sizeof(muxes[0]), 1, mock); // Ex SDA


  LL_USART_EnableIT_RXNE(USART1);
 8000892:	4806      	ldr	r0, [pc, #24]	@ (80008ac <main+0x5c>)
 8000894:	f7ff ff50 	bl	8000738 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART3);
 8000898:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <main+0x60>)
 800089a:	f7ff ff4d 	bl	8000738 <LL_USART_EnableIT_RXNE>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  while (1)
 800089e:	bf00      	nop
 80008a0:	e7fd      	b.n	800089e <main+0x4e>
 80008a2:	bf00      	nop
 80008a4:	04020002 	.word	0x04020002
 80008a8:	40010c00 	.word	0x40010c00
 80008ac:	40013800 	.word	0x40013800
 80008b0:	40004800 	.word	0x40004800

080008b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80008b8:	2002      	movs	r0, #2
 80008ba:	f7ff fed5 	bl	8000668 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 80008be:	bf00      	nop
 80008c0:	f7ff fee6 	bl	8000690 <LL_FLASH_GetLatency>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	d1fa      	bne.n	80008c0 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 80008ca:	f7ff fdc3 	bl	8000454 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80008ce:	bf00      	nop
 80008d0:	f7ff fdce 	bl	8000470 <LL_RCC_HSE_IsReady>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d1fa      	bne.n	80008d0 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 80008da:	f44f 11e0 	mov.w	r1, #1835008	@ 0x1c0000
 80008de:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80008e2:	f7ff fe67 	bl	80005b4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80008e6:	f7ff fe45 	bl	8000574 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80008ea:	bf00      	nop
 80008ec:	f7ff fe50 	bl	8000590 <LL_RCC_PLL_IsReady>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d1fa      	bne.n	80008ec <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80008f6:	2000      	movs	r0, #0
 80008f8:	f7ff fdec 	bl	80004d4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80008fc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000900:	f7ff fdfc 	bl	80004fc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000904:	2000      	movs	r0, #0
 8000906:	f7ff fe0d 	bl	8000524 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800090a:	2002      	movs	r0, #2
 800090c:	f7ff fdc2 	bl	8000494 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000910:	bf00      	nop
 8000912:	f7ff fdd3 	bl	80004bc <LL_RCC_GetSysClkSource>
 8000916:	4603      	mov	r3, r0
 8000918:	2b08      	cmp	r3, #8
 800091a:	d1fa      	bne.n	8000912 <SystemClock_Config+0x5e>
  {

  }
  LL_SetSystemCoreClock(72000000);
 800091c:	4808      	ldr	r0, [pc, #32]	@ (8000940 <SystemClock_Config+0x8c>)
 800091e:	f001 fe69 	bl	80025f4 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000922:	200f      	movs	r0, #15
 8000924:	f000 ff98 	bl	8001858 <HAL_InitTick>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800092e:	f000 fa4f 	bl	8000dd0 <Error_Handler>
  }
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_6);
 8000932:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000936:	f7ff fe09 	bl	800054c <LL_RCC_SetADCClockSource>
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	044aa200 	.word	0x044aa200

08000944 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08e      	sub	sp, #56	@ 0x38
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800094a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000954:	2300      	movs	r3, #0
 8000956:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000958:	f107 0318 	add.w	r3, r7, #24
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8000976:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800097a:	f7ff fe5d 	bl	8000638 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800097e:	2004      	movs	r0, #4
 8000980:	f7ff fe5a 	bl	8000638 <LL_APB2_GRP1_EnableClock>
  PA4   ------> ADC1_IN4
  PA5   ------> ADC1_IN5
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 8000984:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000988:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	4619      	mov	r1, r3
 8000992:	481a      	ldr	r0, [pc, #104]	@ (80009fc <MX_ADC1_Init+0xb8>)
 8000994:	f001 fb2d 	bl	8001ff2 <LL_GPIO_Init>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000998:	2300      	movs	r3, #0
 800099a:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 800099c:	2300      	movs	r3, #0
 800099e:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80009a0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009a4:	4619      	mov	r1, r3
 80009a6:	4816      	ldr	r0, [pc, #88]	@ (8000a00 <MX_ADC1_Init+0xbc>)
 80009a8:	f001 f9fe 	bl	8001da8 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80009b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009b4:	4619      	mov	r1, r3
 80009b6:	4812      	ldr	r0, [pc, #72]	@ (8000a00 <MX_ADC1_Init+0xbc>)
 80009b8:	f001 f9c4 	bl	8001d44 <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80009bc:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
 80009c0:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80009c6:	2300      	movs	r3, #0
 80009c8:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 80009ca:	2302      	movs	r3, #2
 80009cc:	627b      	str	r3, [r7, #36]	@ 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80009d2:	f107 0318 	add.w	r3, r7, #24
 80009d6:	4619      	mov	r1, r3
 80009d8:	4809      	ldr	r0, [pc, #36]	@ (8000a00 <MX_ADC1_Init+0xbc>)
 80009da:	f001 fa0c 	bl	8001df6 <LL_ADC_REG_Init>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 80009de:	4a09      	ldr	r2, [pc, #36]	@ (8000a04 <MX_ADC1_Init+0xc0>)
 80009e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009e4:	4806      	ldr	r0, [pc, #24]	@ (8000a00 <MX_ADC1_Init+0xbc>)
 80009e6:	f7ff fcb5 	bl	8000354 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80009ea:	2200      	movs	r2, #0
 80009ec:	4905      	ldr	r1, [pc, #20]	@ (8000a04 <MX_ADC1_Init+0xc0>)
 80009ee:	4804      	ldr	r0, [pc, #16]	@ (8000a00 <MX_ADC1_Init+0xbc>)
 80009f0:	f7ff fce5 	bl	80003be <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	3738      	adds	r7, #56	@ 0x38
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40010800 	.word	0x40010800
 8000a00:	40012400 	.word	0x40012400
 8000a04:	02300001 	.word	0x02300001

08000a08 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a0e:	463b      	mov	r3, r7
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a16:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <MX_TIM6_Init+0x64>)
 8000a18:	4a15      	ldr	r2, [pc, #84]	@ (8000a70 <MX_TIM6_Init+0x68>)
 8000a1a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000a1c:	4b13      	ldr	r3, [pc, #76]	@ (8000a6c <MX_TIM6_Init+0x64>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a22:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <MX_TIM6_Init+0x64>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000a28:	4b10      	ldr	r3, [pc, #64]	@ (8000a6c <MX_TIM6_Init+0x64>)
 8000a2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a2e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a30:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <MX_TIM6_Init+0x64>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a36:	480d      	ldr	r0, [pc, #52]	@ (8000a6c <MX_TIM6_Init+0x64>)
 8000a38:	f001 f833 	bl	8001aa2 <HAL_TIM_Base_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000a42:	f000 f9c5 	bl	8000dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a4e:	463b      	mov	r3, r7
 8000a50:	4619      	mov	r1, r3
 8000a52:	4806      	ldr	r0, [pc, #24]	@ (8000a6c <MX_TIM6_Init+0x64>)
 8000a54:	f001 f8ec 	bl	8001c30 <HAL_TIMEx_MasterConfigSynchronization>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000a5e:	f000 f9b7 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000d44 	.word	0x20000d44
 8000a70:	40001000 	.word	0x40001000

08000a74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08c      	sub	sp, #48	@ 0x30
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]
 8000a8a:	615a      	str	r2, [r3, #20]
 8000a8c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	463b      	mov	r3, r7
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000a9c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000aa0:	f7ff fdca 	bl	8000638 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000aa4:	2004      	movs	r0, #4
 8000aa6:	f7ff fdc7 	bl	8000638 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000aaa:	4b22      	ldr	r3, [pc, #136]	@ (8000b34 <MX_USART1_UART_Init+0xc0>)
 8000aac:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000aae:	2309      	movs	r3, #9
 8000ab0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	463b      	mov	r3, r7
 8000abc:	4619      	mov	r1, r3
 8000abe:	481e      	ldr	r0, [pc, #120]	@ (8000b38 <MX_USART1_UART_Init+0xc4>)
 8000ac0:	f001 fa97 	bl	8001ff2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b3c <MX_USART1_UART_Init+0xc8>)
 8000ac6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000ac8:	2304      	movs	r3, #4
 8000aca:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000acc:	463b      	mov	r3, r7
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4819      	ldr	r0, [pc, #100]	@ (8000b38 <MX_USART1_UART_Init+0xc4>)
 8000ad2:	f001 fa8e 	bl	8001ff2 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000ad6:	f7ff fbb7 	bl	8000248 <__NVIC_GetPriorityGrouping>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2200      	movs	r2, #0
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fc05 	bl	80002f0 <NVIC_EncodePriority>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	4619      	mov	r1, r3
 8000aea:	2025      	movs	r0, #37	@ 0x25
 8000aec:	f7ff fbd6 	bl	800029c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8000af0:	2025      	movs	r0, #37	@ 0x25
 8000af2:	f7ff fbb7 	bl	8000264 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000af6:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000afa:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000b08:	230c      	movs	r3, #12
 8000b0a:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4809      	ldr	r0, [pc, #36]	@ (8000b40 <MX_USART1_UART_Init+0xcc>)
 8000b1c:	f001 fcd4 	bl	80024c8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8000b20:	4807      	ldr	r0, [pc, #28]	@ (8000b40 <MX_USART1_UART_Init+0xcc>)
 8000b22:	f7ff fdd0 	bl	80006c6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000b26:	4806      	ldr	r0, [pc, #24]	@ (8000b40 <MX_USART1_UART_Init+0xcc>)
 8000b28:	f7ff fdbe 	bl	80006a8 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	3730      	adds	r7, #48	@ 0x30
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	04020002 	.word	0x04020002
 8000b38:	40010800 	.word	0x40010800
 8000b3c:	04040004 	.word	0x04040004
 8000b40:	40013800 	.word	0x40013800

08000b44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08c      	sub	sp, #48	@ 0x30
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
 8000b58:	611a      	str	r2, [r3, #16]
 8000b5a:	615a      	str	r2, [r3, #20]
 8000b5c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5e:	463b      	mov	r3, r7
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000b6c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000b70:	f7ff fd4a 	bl	8000608 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8000b74:	2020      	movs	r0, #32
 8000b76:	f7ff fd5f 	bl	8000638 <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PD5   ------> USART2_TX
  PD6   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000b7a:	f242 0320 	movw	r3, #8224	@ 0x2020
 8000b7e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b80:	2309      	movs	r3, #9
 8000b82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000b84:	2303      	movs	r3, #3
 8000b86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b8c:	463b      	mov	r3, r7
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4816      	ldr	r0, [pc, #88]	@ (8000bec <MX_USART2_UART_Init+0xa8>)
 8000b92:	f001 fa2e 	bl	8001ff2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000b96:	f244 0340 	movw	r3, #16448	@ 0x4040
 8000b9a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4811      	ldr	r0, [pc, #68]	@ (8000bec <MX_USART2_UART_Init+0xa8>)
 8000ba6:	f001 fa24 	bl	8001ff2 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_USART2();
 8000baa:	f7ff fe13 	bl	80007d4 <LL_GPIO_AF_EnableRemap_USART2>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000bae:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000bb2:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000bc0:	230c      	movs	r3, #12
 8000bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4807      	ldr	r0, [pc, #28]	@ (8000bf0 <MX_USART2_UART_Init+0xac>)
 8000bd4:	f001 fc78 	bl	80024c8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000bd8:	4805      	ldr	r0, [pc, #20]	@ (8000bf0 <MX_USART2_UART_Init+0xac>)
 8000bda:	f7ff fd74 	bl	80006c6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000bde:	4804      	ldr	r0, [pc, #16]	@ (8000bf0 <MX_USART2_UART_Init+0xac>)
 8000be0:	f7ff fd62 	bl	80006a8 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	3730      	adds	r7, #48	@ 0x30
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40011400 	.word	0x40011400
 8000bf0:	40004400 	.word	0x40004400

08000bf4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08c      	sub	sp, #48	@ 0x30
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]
 8000c0a:	615a      	str	r2, [r3, #20]
 8000c0c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0e:	463b      	mov	r3, r7
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8000c1c:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8000c20:	f7ff fcf2 	bl	8000608 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8000c24:	2008      	movs	r0, #8
 8000c26:	f7ff fd07 	bl	8000638 <LL_APB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000c2a:	4b22      	ldr	r3, [pc, #136]	@ (8000cb4 <MX_USART3_UART_Init+0xc0>)
 8000c2c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c2e:	2309      	movs	r3, #9
 8000c30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000c32:	2303      	movs	r3, #3
 8000c34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3a:	463b      	mov	r3, r7
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	481e      	ldr	r0, [pc, #120]	@ (8000cb8 <MX_USART3_UART_Init+0xc4>)
 8000c40:	f001 f9d7 	bl	8001ff2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8000c44:	4b1d      	ldr	r3, [pc, #116]	@ (8000cbc <MX_USART3_UART_Init+0xc8>)
 8000c46:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000c48:	2304      	movs	r3, #4
 8000c4a:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4819      	ldr	r0, [pc, #100]	@ (8000cb8 <MX_USART3_UART_Init+0xc4>)
 8000c52:	f001 f9ce 	bl	8001ff2 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000c56:	f7ff faf7 	bl	8000248 <__NVIC_GetPriorityGrouping>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fb45 	bl	80002f0 <NVIC_EncodePriority>
 8000c66:	4603      	mov	r3, r0
 8000c68:	4619      	mov	r1, r3
 8000c6a:	2027      	movs	r0, #39	@ 0x27
 8000c6c:	f7ff fb16 	bl	800029c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8000c70:	2027      	movs	r0, #39	@ 0x27
 8000c72:	f7ff faf7 	bl	8000264 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000c76:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000c7a:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000c88:	230c      	movs	r3, #12
 8000c8a:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART3, &USART_InitStruct);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4809      	ldr	r0, [pc, #36]	@ (8000cc0 <MX_USART3_UART_Init+0xcc>)
 8000c9c:	f001 fc14 	bl	80024c8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8000ca0:	4807      	ldr	r0, [pc, #28]	@ (8000cc0 <MX_USART3_UART_Init+0xcc>)
 8000ca2:	f7ff fd10 	bl	80006c6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8000ca6:	4806      	ldr	r0, [pc, #24]	@ (8000cc0 <MX_USART3_UART_Init+0xcc>)
 8000ca8:	f7ff fcfe 	bl	80006a8 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cac:	bf00      	nop
 8000cae:	3730      	adds	r7, #48	@ 0x30
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	04040004 	.word	0x04040004
 8000cb8:	40010c00 	.word	0x40010c00
 8000cbc:	04080008 	.word	0x04080008
 8000cc0:	40004800 	.word	0x40004800

08000cc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOE);
 8000cd8:	2040      	movs	r0, #64	@ 0x40
 8000cda:	f7ff fcad 	bl	8000638 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8000cde:	2010      	movs	r0, #16
 8000ce0:	f7ff fcaa 	bl	8000638 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000ce4:	2004      	movs	r0, #4
 8000ce6:	f7ff fca7 	bl	8000638 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8000cea:	2008      	movs	r0, #8
 8000cec:	f7ff fca4 	bl	8000638 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8000cf0:	2020      	movs	r0, #32
 8000cf2:	f7ff fca1 	bl	8000638 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5
 8000cf6:	492d      	ldr	r1, [pc, #180]	@ (8000dac <MX_GPIO_Init+0xe8>)
 8000cf8:	482d      	ldr	r0, [pc, #180]	@ (8000db0 <MX_GPIO_Init+0xec>)
 8000cfa:	f7ff fd5c 	bl	80007b6 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9
                          |LL_GPIO_PIN_0);

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2
 8000cfe:	492d      	ldr	r1, [pc, #180]	@ (8000db4 <MX_GPIO_Init+0xf0>)
 8000d00:	482d      	ldr	r0, [pc, #180]	@ (8000db8 <MX_GPIO_Init+0xf4>)
 8000d02:	f7ff fd58 	bl	80007b6 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6
                          |LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_12
 8000d06:	492d      	ldr	r1, [pc, #180]	@ (8000dbc <MX_GPIO_Init+0xf8>)
 8000d08:	482d      	ldr	r0, [pc, #180]	@ (8000dc0 <MX_GPIO_Init+0xfc>)
 8000d0a:	f7ff fd54 	bl	80007b6 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_3
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11
 8000d0e:	492d      	ldr	r1, [pc, #180]	@ (8000dc4 <MX_GPIO_Init+0x100>)
 8000d10:	482d      	ldr	r0, [pc, #180]	@ (8000dc8 <MX_GPIO_Init+0x104>)
 8000d12:	f7ff fd50 	bl	80007b6 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15
                          |LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_7);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5
 8000d16:	4b25      	ldr	r3, [pc, #148]	@ (8000dac <MX_GPIO_Init+0xe8>)
 8000d18:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9
                          |LL_GPIO_PIN_0;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4821      	ldr	r0, [pc, #132]	@ (8000db0 <MX_GPIO_Init+0xec>)
 8000d2c:	f001 f961 	bl	8001ff2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2
 8000d30:	4b20      	ldr	r3, [pc, #128]	@ (8000db4 <MX_GPIO_Init+0xf0>)
 8000d32:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6
                          |LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d34:	2301      	movs	r3, #1
 8000d36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	4619      	mov	r1, r3
 8000d44:	481c      	ldr	r0, [pc, #112]	@ (8000db8 <MX_GPIO_Init+0xf4>)
 8000d46:	f001 f954 	bl	8001ff2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_12
 8000d4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dbc <MX_GPIO_Init+0xf8>)
 8000d4c:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_3
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d52:	2302      	movs	r3, #2
 8000d54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4818      	ldr	r0, [pc, #96]	@ (8000dc0 <MX_GPIO_Init+0xfc>)
 8000d60:	f001 f947 	bl	8001ff2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14
 8000d64:	4b19      	ldr	r3, [pc, #100]	@ (8000dcc <MX_GPIO_Init+0x108>)
 8000d66:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_15;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000d68:	2304      	movs	r3, #4
 8000d6a:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480f      	ldr	r0, [pc, #60]	@ (8000db0 <MX_GPIO_Init+0xec>)
 8000d72:	f001 f93e 	bl	8001ff2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11
 8000d76:	4b13      	ldr	r3, [pc, #76]	@ (8000dc4 <MX_GPIO_Init+0x100>)
 8000d78:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15
                          |LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	4619      	mov	r1, r3
 8000d8a:	480f      	ldr	r0, [pc, #60]	@ (8000dc8 <MX_GPIO_Init+0x104>)
 8000d8c:	f001 f931 	bl	8001ff2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000d90:	f240 2302 	movw	r3, #514	@ 0x202
 8000d94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4804      	ldr	r0, [pc, #16]	@ (8000db0 <MX_GPIO_Init+0xec>)
 8000da0:	f001 f927 	bl	8001ff2 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000da4:	bf00      	nop
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	0403fdff 	.word	0x0403fdff
 8000db0:	40011800 	.word	0x40011800
 8000db4:	0423ffff 	.word	0x0423ffff
 8000db8:	40011000 	.word	0x40011000
 8000dbc:	04f3ffff 	.word	0x04f3ffff
 8000dc0:	40010c00 	.word	0x40010c00
 8000dc4:	04ff9bff 	.word	0x04ff9bff
 8000dc8:	40011400 	.word	0x40011400
 8000dcc:	04f800f8 	.word	0x04f800f8

08000dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd4:	b672      	cpsid	i
}
 8000dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <Error_Handler+0x8>

08000ddc <LL_GPIO_SetOutputPin>:
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	611a      	str	r2, [r3, #16]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr

08000dfa <LL_GPIO_ResetOutputPin>:
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b083      	sub	sp, #12
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
 8000e02:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	0a1b      	lsrs	r3, r3, #8
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	615a      	str	r2, [r3, #20]
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr

08000e18 <getPortName>:
    {GPIOE, LL_GPIO_PIN_7, &xPins32, &yPins32},  // CS_32 (PE7)
    {GPIOE, LL_GPIO_PIN_8, &xPins33, &yPins33},  // CS_33 (PE8)
    {GPIOE, LL_GPIO_PIN_9, &xPins34, &yPins34}   // CS_34 (PE9)
};

const char* getPortName(GPIO_TypeDef* port) {
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
    if (port == GPIOA) return "GPIOA";
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a11      	ldr	r2, [pc, #68]	@ (8000e68 <getPortName+0x50>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d101      	bne.n	8000e2c <getPortName+0x14>
 8000e28:	4b10      	ldr	r3, [pc, #64]	@ (8000e6c <getPortName+0x54>)
 8000e2a:	e018      	b.n	8000e5e <getPortName+0x46>
    if (port == GPIOB) return "GPIOB";
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a10      	ldr	r2, [pc, #64]	@ (8000e70 <getPortName+0x58>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d101      	bne.n	8000e38 <getPortName+0x20>
 8000e34:	4b0f      	ldr	r3, [pc, #60]	@ (8000e74 <getPortName+0x5c>)
 8000e36:	e012      	b.n	8000e5e <getPortName+0x46>
    if (port == GPIOC) return "GPIOC";
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4a0f      	ldr	r2, [pc, #60]	@ (8000e78 <getPortName+0x60>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d101      	bne.n	8000e44 <getPortName+0x2c>
 8000e40:	4b0e      	ldr	r3, [pc, #56]	@ (8000e7c <getPortName+0x64>)
 8000e42:	e00c      	b.n	8000e5e <getPortName+0x46>
    if (port == GPIOD) return "GPIOD";
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a0e      	ldr	r2, [pc, #56]	@ (8000e80 <getPortName+0x68>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d101      	bne.n	8000e50 <getPortName+0x38>
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e84 <getPortName+0x6c>)
 8000e4e:	e006      	b.n	8000e5e <getPortName+0x46>
    if (port == GPIOE) return "GPIOE";
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a0d      	ldr	r2, [pc, #52]	@ (8000e88 <getPortName+0x70>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d101      	bne.n	8000e5c <getPortName+0x44>
 8000e58:	4b0c      	ldr	r3, [pc, #48]	@ (8000e8c <getPortName+0x74>)
 8000e5a:	e000      	b.n	8000e5e <getPortName+0x46>
    return "UNKNOWN";
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e90 <getPortName+0x78>)
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	40010800 	.word	0x40010800
 8000e6c:	080047a4 	.word	0x080047a4
 8000e70:	40010c00 	.word	0x40010c00
 8000e74:	080047ac 	.word	0x080047ac
 8000e78:	40011000 	.word	0x40011000
 8000e7c:	080047b4 	.word	0x080047b4
 8000e80:	40011400 	.word	0x40011400
 8000e84:	080047bc 	.word	0x080047bc
 8000e88:	40011800 	.word	0x40011800
 8000e8c:	080047c4 	.word	0x080047c4
 8000e90:	080047cc 	.word	0x080047cc

08000e94 <setConnection>:

MainTrack mainTracks[32] = {0};

// Set connection function with dynamic CS handling
void setConnection(int x, int y, MUX mux, uint8_t mode) {
 8000e94:	b082      	sub	sp, #8
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	6039      	str	r1, [r7, #0]
 8000ea0:	f107 0110 	add.w	r1, r7, #16
 8000ea4:	e881 000c 	stmia.w	r1, {r2, r3}
    if (x < 0 || x > 15 || y < 0 || y > 7) {
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f2c0 80b1 	blt.w	8001012 <setConnection+0x17e>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b0f      	cmp	r3, #15
 8000eb4:	f300 80ad 	bgt.w	8001012 <setConnection+0x17e>
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f2c0 80a9 	blt.w	8001012 <setConnection+0x17e>
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	2b07      	cmp	r3, #7
 8000ec4:	f300 80a5 	bgt.w	8001012 <setConnection+0x17e>
        return;
    }


    // Activate multiplexer using the struct for CS
    LL_GPIO_ResetOutputPin(mux.port, mux.pin);
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	8aba      	ldrh	r2, [r7, #20]
 8000ecc:	4611      	mov	r1, r2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ff93 	bl	8000dfa <LL_GPIO_ResetOutputPin>
    LL_mDelay(20);
 8000ed4:	2014      	movs	r0, #20
 8000ed6:	f001 fb69 	bl	80025ac <LL_mDelay>
    LL_GPIO_SetOutputPin(mux.port, mux.pin);
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	8aba      	ldrh	r2, [r7, #20]
 8000ede:	4611      	mov	r1, r2
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff7b 	bl	8000ddc <LL_GPIO_SetOutputPin>

    // Set X address
    // Set X address
    (x & 0x01) ? LL_GPIO_SetOutputPin(AX_GPIO, AX0_PIN) : LL_GPIO_ResetOutputPin(AX_GPIO, AX0_PIN);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d005      	beq.n	8000efc <setConnection+0x68>
 8000ef0:	f244 0140 	movw	r1, #16448	@ 0x4040
 8000ef4:	484a      	ldr	r0, [pc, #296]	@ (8001020 <setConnection+0x18c>)
 8000ef6:	f7ff ff71 	bl	8000ddc <LL_GPIO_SetOutputPin>
 8000efa:	e004      	b.n	8000f06 <setConnection+0x72>
 8000efc:	f244 0140 	movw	r1, #16448	@ 0x4040
 8000f00:	4847      	ldr	r0, [pc, #284]	@ (8001020 <setConnection+0x18c>)
 8000f02:	f7ff ff7a 	bl	8000dfa <LL_GPIO_ResetOutputPin>
    (x & 0x02) ? LL_GPIO_SetOutputPin(AX_GPIO, AX1_PIN) : LL_GPIO_ResetOutputPin(AX_GPIO, AX1_PIN);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d005      	beq.n	8000f1c <setConnection+0x88>
 8000f10:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000f14:	4842      	ldr	r0, [pc, #264]	@ (8001020 <setConnection+0x18c>)
 8000f16:	f7ff ff61 	bl	8000ddc <LL_GPIO_SetOutputPin>
 8000f1a:	e004      	b.n	8000f26 <setConnection+0x92>
 8000f1c:	f241 0110 	movw	r1, #4112	@ 0x1010
 8000f20:	483f      	ldr	r0, [pc, #252]	@ (8001020 <setConnection+0x18c>)
 8000f22:	f7ff ff6a 	bl	8000dfa <LL_GPIO_ResetOutputPin>
    (x & 0x04) ? LL_GPIO_SetOutputPin(AX_GPIO, AX2_PIN) : LL_GPIO_ResetOutputPin(AX_GPIO, AX2_PIN);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f003 0304 	and.w	r3, r3, #4
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d005      	beq.n	8000f3c <setConnection+0xa8>
 8000f30:	f640 0108 	movw	r1, #2056	@ 0x808
 8000f34:	483a      	ldr	r0, [pc, #232]	@ (8001020 <setConnection+0x18c>)
 8000f36:	f7ff ff51 	bl	8000ddc <LL_GPIO_SetOutputPin>
 8000f3a:	e004      	b.n	8000f46 <setConnection+0xb2>
 8000f3c:	f640 0108 	movw	r1, #2056	@ 0x808
 8000f40:	4837      	ldr	r0, [pc, #220]	@ (8001020 <setConnection+0x18c>)
 8000f42:	f7ff ff5a 	bl	8000dfa <LL_GPIO_ResetOutputPin>
    (x & 0x08) ? LL_GPIO_SetOutputPin(AX_GPIO, AX3_PIN) : LL_GPIO_ResetOutputPin(AX_GPIO, AX3_PIN);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f003 0308 	and.w	r3, r3, #8
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d005      	beq.n	8000f5c <setConnection+0xc8>
 8000f50:	f242 0120 	movw	r1, #8224	@ 0x2020
 8000f54:	4832      	ldr	r0, [pc, #200]	@ (8001020 <setConnection+0x18c>)
 8000f56:	f7ff ff41 	bl	8000ddc <LL_GPIO_SetOutputPin>
 8000f5a:	e004      	b.n	8000f66 <setConnection+0xd2>
 8000f5c:	f242 0120 	movw	r1, #8224	@ 0x2020
 8000f60:	482f      	ldr	r0, [pc, #188]	@ (8001020 <setConnection+0x18c>)
 8000f62:	f7ff ff4a 	bl	8000dfa <LL_GPIO_ResetOutputPin>

    // Set Y address
    (y & 0x01) ? LL_GPIO_SetOutputPin(AY_GPIO, AY0_PIN) : LL_GPIO_ResetOutputPin(AY_GPIO, AY0_PIN);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d005      	beq.n	8000f7c <setConnection+0xe8>
 8000f70:	f240 1101 	movw	r1, #257	@ 0x101
 8000f74:	482a      	ldr	r0, [pc, #168]	@ (8001020 <setConnection+0x18c>)
 8000f76:	f7ff ff31 	bl	8000ddc <LL_GPIO_SetOutputPin>
 8000f7a:	e004      	b.n	8000f86 <setConnection+0xf2>
 8000f7c:	f240 1101 	movw	r1, #257	@ 0x101
 8000f80:	4827      	ldr	r0, [pc, #156]	@ (8001020 <setConnection+0x18c>)
 8000f82:	f7ff ff3a 	bl	8000dfa <LL_GPIO_ResetOutputPin>
    (y & 0x02) ? LL_GPIO_SetOutputPin(AY_GPIO, AY1_PIN) : LL_GPIO_ResetOutputPin(AY_GPIO, AY1_PIN);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	f003 0302 	and.w	r3, r3, #2
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d005      	beq.n	8000f9c <setConnection+0x108>
 8000f90:	f240 2102 	movw	r1, #514	@ 0x202
 8000f94:	4822      	ldr	r0, [pc, #136]	@ (8001020 <setConnection+0x18c>)
 8000f96:	f7ff ff21 	bl	8000ddc <LL_GPIO_SetOutputPin>
 8000f9a:	e004      	b.n	8000fa6 <setConnection+0x112>
 8000f9c:	f240 2102 	movw	r1, #514	@ 0x202
 8000fa0:	481f      	ldr	r0, [pc, #124]	@ (8001020 <setConnection+0x18c>)
 8000fa2:	f7ff ff2a 	bl	8000dfa <LL_GPIO_ResetOutputPin>
    (y & 0x04) ? LL_GPIO_SetOutputPin(AY_GPIO, AY2_PIN) : LL_GPIO_ResetOutputPin(AY_GPIO, AY2_PIN);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	f003 0304 	and.w	r3, r3, #4
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d005      	beq.n	8000fbc <setConnection+0x128>
 8000fb0:	f240 4104 	movw	r1, #1028	@ 0x404
 8000fb4:	481a      	ldr	r0, [pc, #104]	@ (8001020 <setConnection+0x18c>)
 8000fb6:	f7ff ff11 	bl	8000ddc <LL_GPIO_SetOutputPin>
 8000fba:	e004      	b.n	8000fc6 <setConnection+0x132>
 8000fbc:	f240 4104 	movw	r1, #1028	@ 0x404
 8000fc0:	4817      	ldr	r0, [pc, #92]	@ (8001020 <setConnection+0x18c>)
 8000fc2:	f7ff ff1a 	bl	8000dfa <LL_GPIO_ResetOutputPin>


    // Set data pin
    mode ? LL_GPIO_SetOutputPin(DAT_GPIO, DAT_PIN) : LL_GPIO_ResetOutputPin(DAT_GPIO, DAT_PIN);
 8000fc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d005      	beq.n	8000fda <setConnection+0x146>
 8000fce:	f248 0180 	movw	r1, #32896	@ 0x8080
 8000fd2:	4813      	ldr	r0, [pc, #76]	@ (8001020 <setConnection+0x18c>)
 8000fd4:	f7ff ff02 	bl	8000ddc <LL_GPIO_SetOutputPin>
 8000fd8:	e004      	b.n	8000fe4 <setConnection+0x150>
 8000fda:	f248 0180 	movw	r1, #32896	@ 0x8080
 8000fde:	4810      	ldr	r0, [pc, #64]	@ (8001020 <setConnection+0x18c>)
 8000fe0:	f7ff ff0b 	bl	8000dfa <LL_GPIO_ResetOutputPin>

    // Strobe signal
    LL_mDelay(20);
 8000fe4:	2014      	movs	r0, #20
 8000fe6:	f001 fae1 	bl	80025ac <LL_mDelay>
	LL_GPIO_SetOutputPin(STB_GPIO, STB_PIN);
 8000fea:	490e      	ldr	r1, [pc, #56]	@ (8001024 <setConnection+0x190>)
 8000fec:	480c      	ldr	r0, [pc, #48]	@ (8001020 <setConnection+0x18c>)
 8000fee:	f7ff fef5 	bl	8000ddc <LL_GPIO_SetOutputPin>
	LL_mDelay(20);
 8000ff2:	2014      	movs	r0, #20
 8000ff4:	f001 fada 	bl	80025ac <LL_mDelay>
	LL_GPIO_ResetOutputPin(STB_GPIO, STB_PIN);
 8000ff8:	490a      	ldr	r1, [pc, #40]	@ (8001024 <setConnection+0x190>)
 8000ffa:	4809      	ldr	r0, [pc, #36]	@ (8001020 <setConnection+0x18c>)
 8000ffc:	f7ff fefd 	bl	8000dfa <LL_GPIO_ResetOutputPin>

	LL_mDelay(200);
 8001000:	20c8      	movs	r0, #200	@ 0xc8
 8001002:	f001 fad3 	bl	80025ac <LL_mDelay>

	LL_GPIO_ResetOutputPin(DAT_GPIO, DAT_PIN);
 8001006:	f248 0180 	movw	r1, #32896	@ 0x8080
 800100a:	4805      	ldr	r0, [pc, #20]	@ (8001020 <setConnection+0x18c>)
 800100c:	f7ff fef5 	bl	8000dfa <LL_GPIO_ResetOutputPin>
 8001010:	e000      	b.n	8001014 <setConnection+0x180>
        return;
 8001012:	bf00      	nop
}
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800101c:	b002      	add	sp, #8
 800101e:	4770      	bx	lr
 8001020:	40010c00 	.word	0x40010c00
 8001024:	04010001 	.word	0x04010001

08001028 <route>:

void route(int breadboardPin1, int breadboardPin2, int net_id, MUX *muxes, size_t muxCount, uint8_t mode, RGB rgb) {
 8001028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800102a:	b0a5      	sub	sp, #148	@ 0x94
 800102c:	af0c      	add	r7, sp, #48	@ 0x30
 800102e:	61f8      	str	r0, [r7, #28]
 8001030:	61b9      	str	r1, [r7, #24]
 8001032:	617a      	str	r2, [r7, #20]
 8001034:	613b      	str	r3, [r7, #16]

    char pin1Name[6], pin2Name[6];
    snprintf(pin1Name, sizeof(pin1Name), "B_%d", breadboardPin1);
 8001036:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	4a9c      	ldr	r2, [pc, #624]	@ (80012b0 <route+0x288>)
 800103e:	2106      	movs	r1, #6
 8001040:	f001 fcd4 	bl	80029ec <sniprintf>
    snprintf(pin2Name, sizeof(pin2Name), "B_%d", breadboardPin2);
 8001044:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	4a99      	ldr	r2, [pc, #612]	@ (80012b0 <route+0x288>)
 800104c:	2106      	movs	r1, #6
 800104e:	f001 fccd 	bl	80029ec <sniprintf>


    printf("Routing %s to %s with net ID: %d\n", pin1Name, pin2Name, net_id);
 8001052:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001056:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	4895      	ldr	r0, [pc, #596]	@ (80012b4 <route+0x28c>)
 800105e:	f001 fc55 	bl	800290c <iprintf>
    fflush(stdout);
 8001062:	4b95      	ldr	r3, [pc, #596]	@ (80012b8 <route+0x290>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	4618      	mov	r0, r3
 800106a:	f001 fb79 	bl	8002760 <fflush>

    int xIndex1 = -1, yIndex1 = -1;
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
 8001072:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001074:	f04f 33ff 	mov.w	r3, #4294967295
 8001078:	65bb      	str	r3, [r7, #88]	@ 0x58
    int xIndex2 = -1, yIndex2 = -1;
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	657b      	str	r3, [r7, #84]	@ 0x54
 8001080:	f04f 33ff 	mov.w	r3, #4294967295
 8001084:	653b      	str	r3, [r7, #80]	@ 0x50
    MUX *mux1 = NULL;
 8001086:	2300      	movs	r3, #0
 8001088:	64fb      	str	r3, [r7, #76]	@ 0x4c
    MUX *mux2 = NULL;
 800108a:	2300      	movs	r3, #0
 800108c:	64bb      	str	r3, [r7, #72]	@ 0x48
    MainTrack *selectedTrack = NULL;
 800108e:	2300      	movs	r3, #0
 8001090:	647b      	str	r3, [r7, #68]	@ 0x44
    int muxIndex = -1;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
 8001096:	637b      	str	r3, [r7, #52]	@ 0x34

    // Find an available or existing main track for the given net ID
    for (int x = 0; x < 32; ++x) {
 8001098:	2300      	movs	r3, #0
 800109a:	643b      	str	r3, [r7, #64]	@ 0x40
 800109c:	e02c      	b.n	80010f8 <route+0xd0>
        if (mainTracks[x].net_id == net_id) {
 800109e:	4a87      	ldr	r2, [pc, #540]	@ (80012bc <route+0x294>)
 80010a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010a2:	011b      	lsls	r3, r3, #4
 80010a4:	4413      	add	r3, r2
 80010a6:	3304      	adds	r3, #4
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	697a      	ldr	r2, [r7, #20]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d105      	bne.n	80010bc <route+0x94>
            selectedTrack = &mainTracks[x];  // Reuse existing track if net ID matches
 80010b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010b2:	011b      	lsls	r3, r3, #4
 80010b4:	4a81      	ldr	r2, [pc, #516]	@ (80012bc <route+0x294>)
 80010b6:	4413      	add	r3, r2
 80010b8:	647b      	str	r3, [r7, #68]	@ 0x44
            break;
 80010ba:	e020      	b.n	80010fe <route+0xd6>
        } else if (!mainTracks[x].is_used) {
 80010bc:	4a7f      	ldr	r2, [pc, #508]	@ (80012bc <route+0x294>)
 80010be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010c0:	011b      	lsls	r3, r3, #4
 80010c2:	4413      	add	r3, r2
 80010c4:	3308      	adds	r3, #8
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d112      	bne.n	80010f2 <route+0xca>
            selectedTrack = &mainTracks[x];  // Assign new track if available
 80010cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010ce:	011b      	lsls	r3, r3, #4
 80010d0:	4a7a      	ldr	r2, [pc, #488]	@ (80012bc <route+0x294>)
 80010d2:	4413      	add	r3, r2
 80010d4:	647b      	str	r3, [r7, #68]	@ 0x44
            selectedTrack->is_used = 1;
 80010d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80010d8:	2201      	movs	r2, #1
 80010da:	609a      	str	r2, [r3, #8]
            selectedTrack->net_id = net_id;
 80010dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	605a      	str	r2, [r3, #4]
            selectedTrack->track_id = x; // Assign track ID here
 80010e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80010e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80010e6:	601a      	str	r2, [r3, #0]
            printf("Selected Track id: %d\n", x);
 80010e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80010ea:	4875      	ldr	r0, [pc, #468]	@ (80012c0 <route+0x298>)
 80010ec:	f001 fc0e 	bl	800290c <iprintf>
            break;
 80010f0:	e005      	b.n	80010fe <route+0xd6>
    for (int x = 0; x < 32; ++x) {
 80010f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010f4:	3301      	adds	r3, #1
 80010f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80010f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010fa:	2b1f      	cmp	r3, #31
 80010fc:	ddcf      	ble.n	800109e <route+0x76>
        }
    }

    if (!selectedTrack) {
 80010fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001100:	2b00      	cmp	r3, #0
 8001102:	d104      	bne.n	800110e <route+0xe6>
        printf("Error: No available main track for net ID %d\n", net_id);
 8001104:	6979      	ldr	r1, [r7, #20]
 8001106:	486f      	ldr	r0, [pc, #444]	@ (80012c4 <route+0x29c>)
 8001108:	f001 fc00 	bl	800290c <iprintf>
 800110c:	e148      	b.n	80013a0 <route+0x378>
        return;
    }

    // Update connection counter based on mode
	if (mode == 1) {
 800110e:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8001112:	2b01      	cmp	r3, #1
 8001114:	d10d      	bne.n	8001132 <route+0x10a>
		selectedTrack->current_connections++; // Increment current connections
 8001116:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	1c5a      	adds	r2, r3, #1
 800111c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800111e:	60da      	str	r2, [r3, #12]
		printf("Main Track %d incremented. Current connections: %d\n", selectedTrack->track_id, selectedTrack->current_connections);
 8001120:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001122:	6819      	ldr	r1, [r3, #0]
 8001124:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	461a      	mov	r2, r3
 800112a:	4867      	ldr	r0, [pc, #412]	@ (80012c8 <route+0x2a0>)
 800112c:	f001 fbee 	bl	800290c <iprintf>
 8001130:	e025      	b.n	800117e <route+0x156>
	} else if (mode == 0) {
 8001132:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8001136:	2b00      	cmp	r3, #0
 8001138:	d121      	bne.n	800117e <route+0x156>
		selectedTrack->current_connections--; // Decrement current connections
 800113a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	1e5a      	subs	r2, r3, #1
 8001140:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001142:	60da      	str	r2, [r3, #12]
		if (selectedTrack->current_connections <= 0) { // If counter is 0, free track
 8001144:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	2b00      	cmp	r3, #0
 800114a:	dc10      	bgt.n	800116e <route+0x146>
			printf("Main Track %d is now free\n", selectedTrack->track_id);
 800114c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	485e      	ldr	r0, [pc, #376]	@ (80012cc <route+0x2a4>)
 8001154:	f001 fbda 	bl	800290c <iprintf>
			selectedTrack->is_used = 0;
 8001158:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
			selectedTrack->net_id = -1;
 800115e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001160:	f04f 32ff 	mov.w	r2, #4294967295
 8001164:	605a      	str	r2, [r3, #4]
			selectedTrack->current_connections = 0;
 8001166:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001168:	2200      	movs	r2, #0
 800116a:	60da      	str	r2, [r3, #12]
 800116c:	e007      	b.n	800117e <route+0x156>
		}else{
			printf("Main Track %d decremented, but still occupied. Current connections: %d\n", selectedTrack->track_id, selectedTrack->current_connections);
 800116e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001170:	6819      	ldr	r1, [r3, #0]
 8001172:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	461a      	mov	r2, r3
 8001178:	4855      	ldr	r0, [pc, #340]	@ (80012d0 <route+0x2a8>)
 800117a:	f001 fbc7 	bl	800290c <iprintf>

		}
	}

    muxIndex = (selectedTrack->track_id < 16) ? 0 : 1;
 800117e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2b0f      	cmp	r3, #15
 8001184:	bfcc      	ite	gt
 8001186:	2301      	movgt	r3, #1
 8001188:	2300      	movle	r3, #0
 800118a:	b2db      	uxtb	r3, r3
 800118c:	637b      	str	r3, [r7, #52]	@ 0x34

        for (size_t i = muxIndex; i < muxCount; i += 2) {
 800118e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001190:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001192:	e05b      	b.n	800124c <route+0x224>
            for (int y = 0; y < 8; ++y) {
 8001194:	2300      	movs	r3, #0
 8001196:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001198:	e04c      	b.n	8001234 <route+0x20c>
                if (strcmp((*muxes[i].yPins)[y], pin1Name) == 0 && mux1 == NULL) {
 800119a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800119c:	011b      	lsls	r3, r3, #4
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4413      	add	r3, r2
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80011a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011aa:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80011ae:	4611      	mov	r1, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f837 	bl	8000224 <strcmp>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d113      	bne.n	80011e4 <route+0x1bc>
 80011bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d110      	bne.n	80011e4 <route+0x1bc>
                    xIndex1 = selectedTrack->track_id % 16;
 80011c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	425a      	negs	r2, r3
 80011c8:	f003 030f 	and.w	r3, r3, #15
 80011cc:	f002 020f 	and.w	r2, r2, #15
 80011d0:	bf58      	it	pl
 80011d2:	4253      	negpl	r3, r2
 80011d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    yIndex1 = y;
 80011d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011d8:	65bb      	str	r3, [r7, #88]	@ 0x58
                    mux1 = &muxes[i];
 80011da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011dc:	011b      	lsls	r3, r3, #4
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4413      	add	r3, r2
 80011e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }
                if (strcmp((*muxes[i].yPins)[y], pin2Name) == 0 && mux2 == NULL) {
 80011e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011e6:	011b      	lsls	r3, r3, #4
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4413      	add	r3, r2
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80011f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80011f8:	4611      	mov	r1, r2
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f812 	bl	8000224 <strcmp>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d113      	bne.n	800122e <route+0x206>
 8001206:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001208:	2b00      	cmp	r3, #0
 800120a:	d110      	bne.n	800122e <route+0x206>
                    xIndex2 = selectedTrack->track_id % 16;
 800120c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	425a      	negs	r2, r3
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	f002 020f 	and.w	r2, r2, #15
 800121a:	bf58      	it	pl
 800121c:	4253      	negpl	r3, r2
 800121e:	657b      	str	r3, [r7, #84]	@ 0x54
                    yIndex2 = y;
 8001220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001222:	653b      	str	r3, [r7, #80]	@ 0x50
                    mux2 = &muxes[i];
 8001224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001226:	011b      	lsls	r3, r3, #4
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4413      	add	r3, r2
 800122c:	64bb      	str	r3, [r7, #72]	@ 0x48
            for (int y = 0; y < 8; ++y) {
 800122e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001230:	3301      	adds	r3, #1
 8001232:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001236:	2b07      	cmp	r3, #7
 8001238:	ddaf      	ble.n	800119a <route+0x172>
                }
            }
            if (mux1 && mux2) break;
 800123a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800123c:	2b00      	cmp	r3, #0
 800123e:	d002      	beq.n	8001246 <route+0x21e>
 8001240:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001242:	2b00      	cmp	r3, #0
 8001244:	d107      	bne.n	8001256 <route+0x22e>
        for (size_t i = muxIndex; i < muxCount; i += 2) {
 8001246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001248:	3302      	adds	r3, #2
 800124a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800124c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800124e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001250:	429a      	cmp	r2, r3
 8001252:	d39f      	bcc.n	8001194 <route+0x16c>
 8001254:	e000      	b.n	8001258 <route+0x230>
            if (mux1 && mux2) break;
 8001256:	bf00      	nop
        }

        if (mux1 && mux2) {
 8001258:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 8097 	beq.w	800138e <route+0x366>
 8001260:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001262:	2b00      	cmp	r3, #0
 8001264:	f000 8093 	beq.w	800138e <route+0x366>
        	printf("%s (X:%d, Y:%d) at MUX[%d] CS: %s, Pin: %d, Main Track: %d\n"
 8001268:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800126c:	2b00      	cmp	r3, #0
 800126e:	d002      	beq.n	8001276 <route+0x24e>
 8001270:	4b18      	ldr	r3, [pc, #96]	@ (80012d4 <route+0x2ac>)
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	e001      	b.n	800127a <route+0x252>
 8001276:	4b18      	ldr	r3, [pc, #96]	@ (80012d8 <route+0x2b0>)
 8001278:	60fb      	str	r3, [r7, #12]
        			"%s (X:%d, Y:%d) at MUX[%d] CS: %s, Pin: %d, Main Track: %d\n\n",
        	                mode ? "Connecting" : "Disconnecting",
        	                xIndex1, yIndex1, mux1 - muxes + 1, getPortName(mux1->port), __builtin_ctz(mux1->pin), selectedTrack->track_id,
 800127a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	111b      	asrs	r3, r3, #4
        	printf("%s (X:%d, Y:%d) at MUX[%d] CS: %s, Pin: %d, Main Track: %d\n"
 8001282:	1c5c      	adds	r4, r3, #1
 8001284:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fdc5 	bl	8000e18 <getPortName>
 800128e:	6078      	str	r0, [r7, #4]
        	                xIndex1, yIndex1, mux1 - muxes + 1, getPortName(mux1->port), __builtin_ctz(mux1->pin), selectedTrack->track_id,
 8001290:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001292:	889b      	ldrh	r3, [r3, #4]
        	printf("%s (X:%d, Y:%d) at MUX[%d] CS: %s, Pin: %d, Main Track: %d\n"
 8001294:	fa93 f5a3 	rbit	r5, r3
 8001298:	fab5 f585 	clz	r5, r5
 800129c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800129e:	681e      	ldr	r6, [r3, #0]
 80012a0:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d019      	beq.n	80012dc <route+0x2b4>
 80012a8:	4b0a      	ldr	r3, [pc, #40]	@ (80012d4 <route+0x2ac>)
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	e018      	b.n	80012e0 <route+0x2b8>
 80012ae:	bf00      	nop
 80012b0:	080047d4 	.word	0x080047d4
 80012b4:	080047dc 	.word	0x080047dc
 80012b8:	20000cd8 	.word	0x20000cd8
 80012bc:	20000d8c 	.word	0x20000d8c
 80012c0:	08004800 	.word	0x08004800
 80012c4:	08004818 	.word	0x08004818
 80012c8:	08004848 	.word	0x08004848
 80012cc:	0800487c 	.word	0x0800487c
 80012d0:	08004898 	.word	0x08004898
 80012d4:	080048e0 	.word	0x080048e0
 80012d8:	080048ec 	.word	0x080048ec
 80012dc:	4b32      	ldr	r3, [pc, #200]	@ (80013a8 <route+0x380>)
 80012de:	60bb      	str	r3, [r7, #8]
							mode ? "Connecting" : "Disconnecting",
        	                xIndex2, yIndex2, mux2 - muxes + 1, getPortName(mux2->port), __builtin_ctz(mux2->pin), selectedTrack->track_id);
 80012e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	111b      	asrs	r3, r3, #4
        	printf("%s (X:%d, Y:%d) at MUX[%d] CS: %s, Pin: %d, Main Track: %d\n"
 80012e8:	3301      	adds	r3, #1
 80012ea:	603b      	str	r3, [r7, #0]
 80012ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fd91 	bl	8000e18 <getPortName>
 80012f6:	4601      	mov	r1, r0
        	                xIndex2, yIndex2, mux2 - muxes + 1, getPortName(mux2->port), __builtin_ctz(mux2->pin), selectedTrack->track_id);
 80012f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012fa:	889b      	ldrh	r3, [r3, #4]
        	printf("%s (X:%d, Y:%d) at MUX[%d] CS: %s, Pin: %d, Main Track: %d\n"
 80012fc:	fa93 f3a3 	rbit	r3, r3
 8001300:	fab3 f383 	clz	r3, r3
 8001304:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001306:	6812      	ldr	r2, [r2, #0]
 8001308:	920a      	str	r2, [sp, #40]	@ 0x28
 800130a:	9309      	str	r3, [sp, #36]	@ 0x24
 800130c:	9108      	str	r1, [sp, #32]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	9307      	str	r3, [sp, #28]
 8001312:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001314:	9306      	str	r3, [sp, #24]
 8001316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001318:	9305      	str	r3, [sp, #20]
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	9304      	str	r3, [sp, #16]
 800131e:	9603      	str	r6, [sp, #12]
 8001320:	9502      	str	r5, [sp, #8]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	9301      	str	r3, [sp, #4]
 8001326:	9400      	str	r4, [sp, #0]
 8001328:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800132a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800132c:	68f9      	ldr	r1, [r7, #12]
 800132e:	481f      	ldr	r0, [pc, #124]	@ (80013ac <route+0x384>)
 8001330:	f001 faec 	bl	800290c <iprintf>
        	        fflush(stdout);
 8001334:	4b1e      	ldr	r3, [pc, #120]	@ (80013b0 <route+0x388>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	4618      	mov	r0, r3
 800133c:	f001 fa10 	bl	8002760 <fflush>
			fflush(stdout);
 8001340:	4b1b      	ldr	r3, [pc, #108]	@ (80013b0 <route+0x388>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	4618      	mov	r0, r3
 8001348:	f001 fa0a 	bl	8002760 <fflush>


            setConnection(xIndex1, yIndex1, *mux1, mode);
 800134c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800134e:	f897 207c 	ldrb.w	r2, [r7, #124]	@ 0x7c
 8001352:	9202      	str	r2, [sp, #8]
 8001354:	466c      	mov	r4, sp
 8001356:	f103 0208 	add.w	r2, r3, #8
 800135a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800135e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001362:	cb0c      	ldmia	r3, {r2, r3}
 8001364:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001366:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001368:	f7ff fd94 	bl	8000e94 <setConnection>
            setConnection(xIndex2, yIndex2, *mux2, mode);
 800136c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800136e:	f897 207c 	ldrb.w	r2, [r7, #124]	@ 0x7c
 8001372:	9202      	str	r2, [sp, #8]
 8001374:	466c      	mov	r4, sp
 8001376:	f103 0208 	add.w	r2, r3, #8
 800137a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800137e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001382:	cb0c      	ldmia	r3, {r2, r3}
 8001384:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001386:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001388:	f7ff fd84 	bl	8000e94 <setConnection>
 800138c:	e008      	b.n	80013a0 <route+0x378>

// 			  Activate leds

        } else {
            printf("Error: Unable to route pins - No available MUX found!\n");
 800138e:	4809      	ldr	r0, [pc, #36]	@ (80013b4 <route+0x38c>)
 8001390:	f001 fb24 	bl	80029dc <puts>
            fflush(stdout);
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <route+0x388>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	4618      	mov	r0, r3
 800139c:	f001 f9e0 	bl	8002760 <fflush>
        }
    }
 80013a0:	3764      	adds	r7, #100	@ 0x64
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a6:	bf00      	nop
 80013a8:	080048ec 	.word	0x080048ec
 80013ac:	080048fc 	.word	0x080048fc
 80013b0:	20000cd8 	.word	0x20000cd8
 80013b4:	08004974 	.word	0x08004974

080013b8 <processCommand>:

void processCommand(char *command) {
 80013b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ba:	b097      	sub	sp, #92	@ 0x5c
 80013bc:	af06      	add	r7, sp, #24
 80013be:	60f8      	str	r0, [r7, #12]
    int pin1, pin2, net_id, mode, r, g, b;

    if (strncmp(command, "ROUTE", 5) == 0) {  // Check if it's a "ROUTE" command
 80013c0:	2205      	movs	r2, #5
 80013c2:	4932      	ldr	r1, [pc, #200]	@ (800148c <processCommand+0xd4>)
 80013c4:	68f8      	ldr	r0, [r7, #12]
 80013c6:	f001 fc51 	bl	8002c6c <strncmp>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d159      	bne.n	8001484 <processCommand+0xcc>
        int parsed = sscanf(command, "ROUTE %d %d %d %d %d %d %d",
 80013d0:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80013d4:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80013d8:	f107 0320 	add.w	r3, r7, #32
 80013dc:	9304      	str	r3, [sp, #16]
 80013de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e2:	9303      	str	r3, [sp, #12]
 80013e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013e8:	9302      	str	r3, [sp, #8]
 80013ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013ee:	9301      	str	r3, [sp, #4]
 80013f0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	460b      	mov	r3, r1
 80013f8:	4925      	ldr	r1, [pc, #148]	@ (8001490 <processCommand+0xd8>)
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	f001 fb2a 	bl	8002a54 <siscanf>
 8001400:	63f8      	str	r0, [r7, #60]	@ 0x3c
                            &pin1, &pin2, &net_id, &mode, &r, &g, &b);
        if (parsed == 7) {  // Ensure all arguments were parsed
 8001402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001404:	2b07      	cmp	r3, #7
 8001406:	d134      	bne.n	8001472 <processCommand+0xba>
            RGB color = {r, g, b};
 8001408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140e:	61bb      	str	r3, [r7, #24]
 8001410:	6a3b      	ldr	r3, [r7, #32]
 8001412:	61fb      	str	r3, [r7, #28]
            printf("Calling route with: Pin1=%d, Pin2=%d, NetID=%d, Mode=%d, RGB(%d,%d,%d)\n",
 8001414:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8001416:	6b7d      	ldr	r5, [r7, #52]	@ 0x34
 8001418:	6b3e      	ldr	r6, [r7, #48]	@ 0x30
 800141a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800141c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800141e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001420:	6a38      	ldr	r0, [r7, #32]
 8001422:	9003      	str	r0, [sp, #12]
 8001424:	9102      	str	r1, [sp, #8]
 8001426:	9201      	str	r2, [sp, #4]
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	4633      	mov	r3, r6
 800142c:	462a      	mov	r2, r5
 800142e:	4621      	mov	r1, r4
 8001430:	4818      	ldr	r0, [pc, #96]	@ (8001494 <processCommand+0xdc>)
 8001432:	f001 fa6b 	bl	800290c <iprintf>
                   pin1, pin2, net_id, mode, r, g, b);
            fflush(stdout);
 8001436:	4b18      	ldr	r3, [pc, #96]	@ (8001498 <processCommand+0xe0>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	4618      	mov	r0, r3
 800143e:	f001 f98f 	bl	8002760 <fflush>

            route(pin1, pin2, net_id, muxes, sizeof(muxes) / sizeof(muxes[0]), mode, color);
 8001442:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8001444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800144a:	607a      	str	r2, [r7, #4]
 800144c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800144e:	b2dd      	uxtb	r5, r3
 8001450:	ac02      	add	r4, sp, #8
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800145a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800145e:	9501      	str	r5, [sp, #4]
 8001460:	2322      	movs	r3, #34	@ 0x22
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	4b0d      	ldr	r3, [pc, #52]	@ (800149c <processCommand+0xe4>)
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	68b9      	ldr	r1, [r7, #8]
 800146a:	4630      	mov	r0, r6
 800146c:	f7ff fddc 	bl	8001028 <route>
        } else {
            printf("Error: Invalid ROUTE command format!\n");
            fflush(stdout);
        }
    }
}
 8001470:	e008      	b.n	8001484 <processCommand+0xcc>
            printf("Error: Invalid ROUTE command format!\n");
 8001472:	480b      	ldr	r0, [pc, #44]	@ (80014a0 <processCommand+0xe8>)
 8001474:	f001 fab2 	bl	80029dc <puts>
            fflush(stdout);
 8001478:	4b07      	ldr	r3, [pc, #28]	@ (8001498 <processCommand+0xe0>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	4618      	mov	r0, r3
 8001480:	f001 f96e 	bl	8002760 <fflush>
}
 8001484:	bf00      	nop
 8001486:	3744      	adds	r7, #68	@ 0x44
 8001488:	46bd      	mov	sp, r7
 800148a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800148c:	080049ac 	.word	0x080049ac
 8001490:	080049b4 	.word	0x080049b4
 8001494:	080049d0 	.word	0x080049d0
 8001498:	20000cd8 	.word	0x20000cd8
 800149c:	08004a80 	.word	0x08004a80
 80014a0:	08004a18 	.word	0x08004a18

080014a4 <UART_ProcessReceivedByte>:
    }
}


void UART_ProcessReceivedByte(uint8_t byte, uint8_t uartNumber)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	460a      	mov	r2, r1
 80014ae:	71fb      	strb	r3, [r7, #7]
 80014b0:	4613      	mov	r3, r2
 80014b2:	71bb      	strb	r3, [r7, #6]
    static uint8_t rxBuffer[RX_BUFFER_SIZE];
    static uint8_t rxIndex = 0;

    if (rxIndex < (RX_BUFFER_SIZE - 1))
 80014b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001520 <UART_ProcessReceivedByte+0x7c>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b62      	cmp	r3, #98	@ 0x62
 80014ba:	d809      	bhi.n	80014d0 <UART_ProcessReceivedByte+0x2c>
    {
        rxBuffer[rxIndex++] = byte;
 80014bc:	4b18      	ldr	r3, [pc, #96]	@ (8001520 <UART_ProcessReceivedByte+0x7c>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	1c5a      	adds	r2, r3, #1
 80014c2:	b2d1      	uxtb	r1, r2
 80014c4:	4a16      	ldr	r2, [pc, #88]	@ (8001520 <UART_ProcessReceivedByte+0x7c>)
 80014c6:	7011      	strb	r1, [r2, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	4a16      	ldr	r2, [pc, #88]	@ (8001524 <UART_ProcessReceivedByte+0x80>)
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	5453      	strb	r3, [r2, r1]
    }

    if (byte == '\n' || byte == '\r')
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	2b0a      	cmp	r3, #10
 80014d4:	d002      	beq.n	80014dc <UART_ProcessReceivedByte+0x38>
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	2b0d      	cmp	r3, #13
 80014da:	d11c      	bne.n	8001516 <UART_ProcessReceivedByte+0x72>
    {
        rxBuffer[rxIndex] = '\0';  // Null-terminate
 80014dc:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <UART_ProcessReceivedByte+0x7c>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b10      	ldr	r3, [pc, #64]	@ (8001524 <UART_ProcessReceivedByte+0x80>)
 80014e4:	2100      	movs	r1, #0
 80014e6:	5499      	strb	r1, [r3, r2]
        printf("Received from UART%d: %s\n", uartNumber, rxBuffer);
 80014e8:	79bb      	ldrb	r3, [r7, #6]
 80014ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001524 <UART_ProcessReceivedByte+0x80>)
 80014ec:	4619      	mov	r1, r3
 80014ee:	480e      	ldr	r0, [pc, #56]	@ (8001528 <UART_ProcessReceivedByte+0x84>)
 80014f0:	f001 fa0c 	bl	800290c <iprintf>
		fflush(stdout);
 80014f4:	4b0d      	ldr	r3, [pc, #52]	@ (800152c <UART_ProcessReceivedByte+0x88>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f001 f930 	bl	8002760 <fflush>
        processCommand((char *)rxBuffer);  // Pass to processing function
 8001500:	4808      	ldr	r0, [pc, #32]	@ (8001524 <UART_ProcessReceivedByte+0x80>)
 8001502:	f7ff ff59 	bl	80013b8 <processCommand>

        memset(rxBuffer, 0, RX_BUFFER_SIZE);
 8001506:	2264      	movs	r2, #100	@ 0x64
 8001508:	2100      	movs	r1, #0
 800150a:	4806      	ldr	r0, [pc, #24]	@ (8001524 <UART_ProcessReceivedByte+0x80>)
 800150c:	f001 fba6 	bl	8002c5c <memset>
        rxIndex = 0;
 8001510:	4b03      	ldr	r3, [pc, #12]	@ (8001520 <UART_ProcessReceivedByte+0x7c>)
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
    }
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000f8c 	.word	0x20000f8c
 8001524:	20000f90 	.word	0x20000f90
 8001528:	08004a58 	.word	0x08004a58
 800152c:	20000cd8 	.word	0x20000cd8

08001530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001536:	4b15      	ldr	r3, [pc, #84]	@ (800158c <HAL_MspInit+0x5c>)
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	4a14      	ldr	r2, [pc, #80]	@ (800158c <HAL_MspInit+0x5c>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6193      	str	r3, [r2, #24]
 8001542:	4b12      	ldr	r3, [pc, #72]	@ (800158c <HAL_MspInit+0x5c>)
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800154e:	4b0f      	ldr	r3, [pc, #60]	@ (800158c <HAL_MspInit+0x5c>)
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	4a0e      	ldr	r2, [pc, #56]	@ (800158c <HAL_MspInit+0x5c>)
 8001554:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001558:	61d3      	str	r3, [r2, #28]
 800155a:	4b0c      	ldr	r3, [pc, #48]	@ (800158c <HAL_MspInit+0x5c>)
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001566:	4b0a      	ldr	r3, [pc, #40]	@ (8001590 <HAL_MspInit+0x60>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	4a04      	ldr	r2, [pc, #16]	@ (8001590 <HAL_MspInit+0x60>)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001582:	bf00      	nop
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr
 800158c:	40021000 	.word	0x40021000
 8001590:	40010000 	.word	0x40010000

08001594 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a09      	ldr	r2, [pc, #36]	@ (80015c8 <HAL_TIM_Base_MspInit+0x34>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d10b      	bne.n	80015be <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80015a6:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <HAL_TIM_Base_MspInit+0x38>)
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	4a08      	ldr	r2, [pc, #32]	@ (80015cc <HAL_TIM_Base_MspInit+0x38>)
 80015ac:	f043 0310 	orr.w	r3, r3, #16
 80015b0:	61d3      	str	r3, [r2, #28]
 80015b2:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <HAL_TIM_Base_MspInit+0x38>)
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	f003 0310 	and.w	r3, r3, #16
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 80015be:	bf00      	nop
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr
 80015c8:	40001000 	.word	0x40001000
 80015cc:	40021000 	.word	0x40021000

080015d0 <LL_USART_IsActiveFlag_RXNE>:
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0320 	and.w	r3, r3, #32
 80015e0:	2b20      	cmp	r3, #32
 80015e2:	bf0c      	ite	eq
 80015e4:	2301      	moveq	r3, #1
 80015e6:	2300      	movne	r3, #0
 80015e8:	b2db      	uxtb	r3, r3
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr

080015f4 <LL_USART_ReceiveData8>:
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	b2db      	uxtb	r3, r3
}
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <NMI_Handler+0x4>

08001614 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001618:	bf00      	nop
 800161a:	e7fd      	b.n	8001618 <HardFault_Handler+0x4>

0800161c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001620:	bf00      	nop
 8001622:	e7fd      	b.n	8001620 <MemManage_Handler+0x4>

08001624 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <BusFault_Handler+0x4>

0800162c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <UsageFault_Handler+0x4>

08001634 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr

0800164c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr

08001658 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800165c:	f000 f92c 	bl	80018b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}

08001664 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */
	if (LL_USART_IsActiveFlag_RXNE(USART1))
 800166a:	480a      	ldr	r0, [pc, #40]	@ (8001694 <USART1_IRQHandler+0x30>)
 800166c:	f7ff ffb0 	bl	80015d0 <LL_USART_IsActiveFlag_RXNE>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d009      	beq.n	800168a <USART1_IRQHandler+0x26>
	{
		uint8_t receivedByte = LL_USART_ReceiveData8(USART1);
 8001676:	4807      	ldr	r0, [pc, #28]	@ (8001694 <USART1_IRQHandler+0x30>)
 8001678:	f7ff ffbc 	bl	80015f4 <LL_USART_ReceiveData8>
 800167c:	4603      	mov	r3, r0
 800167e:	71fb      	strb	r3, [r7, #7]
		UART_ProcessReceivedByte(receivedByte, 1);  // Process received data for UART1
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	2101      	movs	r1, #1
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff0d 	bl	80014a4 <UART_ProcessReceivedByte>
	}
  /* USER CODE END USART1_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40013800 	.word	0x40013800

08001698 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */
	 if (LL_USART_IsActiveFlag_RXNE(USART3))
 800169e:	480a      	ldr	r0, [pc, #40]	@ (80016c8 <USART3_IRQHandler+0x30>)
 80016a0:	f7ff ff96 	bl	80015d0 <LL_USART_IsActiveFlag_RXNE>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d009      	beq.n	80016be <USART3_IRQHandler+0x26>
	{
		uint8_t receivedByte = LL_USART_ReceiveData8(USART3);
 80016aa:	4807      	ldr	r0, [pc, #28]	@ (80016c8 <USART3_IRQHandler+0x30>)
 80016ac:	f7ff ffa2 	bl	80015f4 <LL_USART_ReceiveData8>
 80016b0:	4603      	mov	r3, r0
 80016b2:	71fb      	strb	r3, [r7, #7]
		UART_ProcessReceivedByte(receivedByte, 3);  // Process received data for UART3
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	2103      	movs	r1, #3
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fef3 	bl	80014a4 <UART_ProcessReceivedByte>
	}
  /* USER CODE END USART3_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40004800 	.word	0x40004800

080016cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	e00a      	b.n	80016f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016de:	f3af 8000 	nop.w
 80016e2:	4601      	mov	r1, r0
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	1c5a      	adds	r2, r3, #1
 80016e8:	60ba      	str	r2, [r7, #8]
 80016ea:	b2ca      	uxtb	r2, r1
 80016ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	3301      	adds	r3, #1
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	dbf0      	blt.n	80016de <_read+0x12>
  }

  return len;
 80016fc:	687b      	ldr	r3, [r7, #4]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800170e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001712:	4618      	mov	r0, r3
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800172c:	605a      	str	r2, [r3, #4]
  return 0;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr

0800173a <_isatty>:

int _isatty(int file)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001742:	2301      	movs	r3, #1
}
 8001744:	4618      	mov	r0, r3
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr

0800174e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800174e:	b480      	push	{r7}
 8001750:	b085      	sub	sp, #20
 8001752:	af00      	add	r7, sp, #0
 8001754:	60f8      	str	r0, [r7, #12]
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr
	...

08001768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001770:	4a14      	ldr	r2, [pc, #80]	@ (80017c4 <_sbrk+0x5c>)
 8001772:	4b15      	ldr	r3, [pc, #84]	@ (80017c8 <_sbrk+0x60>)
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800177c:	4b13      	ldr	r3, [pc, #76]	@ (80017cc <_sbrk+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d102      	bne.n	800178a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001784:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <_sbrk+0x64>)
 8001786:	4a12      	ldr	r2, [pc, #72]	@ (80017d0 <_sbrk+0x68>)
 8001788:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800178a:	4b10      	ldr	r3, [pc, #64]	@ (80017cc <_sbrk+0x64>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	429a      	cmp	r2, r3
 8001796:	d207      	bcs.n	80017a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001798:	f001 fac0 	bl	8002d1c <__errno>
 800179c:	4603      	mov	r3, r0
 800179e:	220c      	movs	r2, #12
 80017a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017a2:	f04f 33ff 	mov.w	r3, #4294967295
 80017a6:	e009      	b.n	80017bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a8:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <_sbrk+0x64>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ae:	4b07      	ldr	r3, [pc, #28]	@ (80017cc <_sbrk+0x64>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	4a05      	ldr	r2, [pc, #20]	@ (80017cc <_sbrk+0x64>)
 80017b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ba:	68fb      	ldr	r3, [r7, #12]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20010000 	.word	0x20010000
 80017c8:	00000400 	.word	0x00000400
 80017cc:	20000ff4 	.word	0x20000ff4
 80017d0:	20001148 	.word	0x20001148

080017d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr

080017e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017e0:	f7ff fff8 	bl	80017d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017e4:	480b      	ldr	r0, [pc, #44]	@ (8001814 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017e6:	490c      	ldr	r1, [pc, #48]	@ (8001818 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017e8:	4a0c      	ldr	r2, [pc, #48]	@ (800181c <LoopFillZerobss+0x16>)
  movs r3, #0
 80017ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ec:	e002      	b.n	80017f4 <LoopCopyDataInit>

080017ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f2:	3304      	adds	r3, #4

080017f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f8:	d3f9      	bcc.n	80017ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fa:	4a09      	ldr	r2, [pc, #36]	@ (8001820 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017fc:	4c09      	ldr	r4, [pc, #36]	@ (8001824 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001800:	e001      	b.n	8001806 <LoopFillZerobss>

08001802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001804:	3204      	adds	r2, #4

08001806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001808:	d3fb      	bcc.n	8001802 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800180a:	f001 fa8d 	bl	8002d28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800180e:	f7ff f81f 	bl	8000850 <main>
  bx lr
 8001812:	4770      	bx	lr
  ldr r0, =_sdata
 8001814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001818:	20000d28 	.word	0x20000d28
  ldr r2, =_sidata
 800181c:	08004e18 	.word	0x08004e18
  ldr r2, =_sbss
 8001820:	20000d28 	.word	0x20000d28
  ldr r4, =_ebss
 8001824:	20001148 	.word	0x20001148

08001828 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001828:	e7fe      	b.n	8001828 <ADC1_2_IRQHandler>
	...

0800182c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001830:	4b08      	ldr	r3, [pc, #32]	@ (8001854 <HAL_Init+0x28>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a07      	ldr	r2, [pc, #28]	@ (8001854 <HAL_Init+0x28>)
 8001836:	f043 0310 	orr.w	r3, r3, #16
 800183a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800183c:	2003      	movs	r0, #3
 800183e:	f000 f8fd 	bl	8001a3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001842:	200f      	movs	r0, #15
 8001844:	f000 f808 	bl	8001858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001848:	f7ff fe72 	bl	8001530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40022000 	.word	0x40022000

08001858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001860:	4b12      	ldr	r3, [pc, #72]	@ (80018ac <HAL_InitTick+0x54>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b12      	ldr	r3, [pc, #72]	@ (80018b0 <HAL_InitTick+0x58>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	4619      	mov	r1, r3
 800186a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800186e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001872:	fbb2 f3f3 	udiv	r3, r2, r3
 8001876:	4618      	mov	r0, r3
 8001878:	f000 f907 	bl	8001a8a <HAL_SYSTICK_Config>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e00e      	b.n	80018a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b0f      	cmp	r3, #15
 800188a:	d80a      	bhi.n	80018a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800188c:	2200      	movs	r2, #0
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	f04f 30ff 	mov.w	r0, #4294967295
 8001894:	f000 f8dd 	bl	8001a52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001898:	4a06      	ldr	r2, [pc, #24]	@ (80018b4 <HAL_InitTick+0x5c>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	e000      	b.n	80018a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000cc0 	.word	0x20000cc0
 80018b0:	20000cc8 	.word	0x20000cc8
 80018b4:	20000cc4 	.word	0x20000cc4

080018b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018bc:	4b05      	ldr	r3, [pc, #20]	@ (80018d4 <HAL_IncTick+0x1c>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b05      	ldr	r3, [pc, #20]	@ (80018d8 <HAL_IncTick+0x20>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4413      	add	r3, r2
 80018c8:	4a03      	ldr	r2, [pc, #12]	@ (80018d8 <HAL_IncTick+0x20>)
 80018ca:	6013      	str	r3, [r2, #0]
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	20000cc8 	.word	0x20000cc8
 80018d8:	20000ff8 	.word	0x20000ff8

080018dc <__NVIC_SetPriorityGrouping>:
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001920 <__NVIC_SetPriorityGrouping+0x44>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018f8:	4013      	ands	r3, r2
 80018fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001904:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001908:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800190c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800190e:	4a04      	ldr	r2, [pc, #16]	@ (8001920 <__NVIC_SetPriorityGrouping+0x44>)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	60d3      	str	r3, [r2, #12]
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <__NVIC_GetPriorityGrouping>:
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001928:	4b04      	ldr	r3, [pc, #16]	@ (800193c <__NVIC_GetPriorityGrouping+0x18>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	0a1b      	lsrs	r3, r3, #8
 800192e:	f003 0307 	and.w	r3, r3, #7
}
 8001932:	4618      	mov	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <__NVIC_SetPriority>:
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	6039      	str	r1, [r7, #0]
 800194a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001950:	2b00      	cmp	r3, #0
 8001952:	db0a      	blt.n	800196a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	b2da      	uxtb	r2, r3
 8001958:	490c      	ldr	r1, [pc, #48]	@ (800198c <__NVIC_SetPriority+0x4c>)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	0112      	lsls	r2, r2, #4
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	440b      	add	r3, r1
 8001964:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001968:	e00a      	b.n	8001980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	b2da      	uxtb	r2, r3
 800196e:	4908      	ldr	r1, [pc, #32]	@ (8001990 <__NVIC_SetPriority+0x50>)
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	3b04      	subs	r3, #4
 8001978:	0112      	lsls	r2, r2, #4
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	440b      	add	r3, r1
 800197e:	761a      	strb	r2, [r3, #24]
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000e100 	.word	0xe000e100
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <NVIC_EncodePriority>:
{
 8001994:	b480      	push	{r7}
 8001996:	b089      	sub	sp, #36	@ 0x24
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f1c3 0307 	rsb	r3, r3, #7
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	bf28      	it	cs
 80019b2:	2304      	movcs	r3, #4
 80019b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3304      	adds	r3, #4
 80019ba:	2b06      	cmp	r3, #6
 80019bc:	d902      	bls.n	80019c4 <NVIC_EncodePriority+0x30>
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3b03      	subs	r3, #3
 80019c2:	e000      	b.n	80019c6 <NVIC_EncodePriority+0x32>
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c8:	f04f 32ff 	mov.w	r2, #4294967295
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43da      	mvns	r2, r3
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	401a      	ands	r2, r3
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019dc:	f04f 31ff 	mov.w	r1, #4294967295
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	fa01 f303 	lsl.w	r3, r1, r3
 80019e6:	43d9      	mvns	r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ec:	4313      	orrs	r3, r2
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3724      	adds	r7, #36	@ 0x24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a08:	d301      	bcc.n	8001a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e00f      	b.n	8001a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a38 <SysTick_Config+0x40>)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a16:	210f      	movs	r1, #15
 8001a18:	f04f 30ff 	mov.w	r0, #4294967295
 8001a1c:	f7ff ff90 	bl	8001940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a20:	4b05      	ldr	r3, [pc, #20]	@ (8001a38 <SysTick_Config+0x40>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a26:	4b04      	ldr	r3, [pc, #16]	@ (8001a38 <SysTick_Config+0x40>)
 8001a28:	2207      	movs	r2, #7
 8001a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	e000e010 	.word	0xe000e010

08001a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff ff49 	bl	80018dc <__NVIC_SetPriorityGrouping>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b086      	sub	sp, #24
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	4603      	mov	r3, r0
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	607a      	str	r2, [r7, #4]
 8001a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a64:	f7ff ff5e 	bl	8001924 <__NVIC_GetPriorityGrouping>
 8001a68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	68b9      	ldr	r1, [r7, #8]
 8001a6e:	6978      	ldr	r0, [r7, #20]
 8001a70:	f7ff ff90 	bl	8001994 <NVIC_EncodePriority>
 8001a74:	4602      	mov	r2, r0
 8001a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff5f 	bl	8001940 <__NVIC_SetPriority>
}
 8001a82:	bf00      	nop
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ffb0 	bl	80019f8 <SysTick_Config>
 8001a98:	4603      	mov	r3, r0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e041      	b.n	8001b38 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d106      	bne.n	8001ace <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff fd63 	bl	8001594 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3304      	adds	r3, #4
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	f000 f82d 	bl	8001b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a33      	ldr	r2, [pc, #204]	@ (8001c20 <TIM_Base_SetConfig+0xe0>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d00f      	beq.n	8001b78 <TIM_Base_SetConfig+0x38>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b5e:	d00b      	beq.n	8001b78 <TIM_Base_SetConfig+0x38>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a30      	ldr	r2, [pc, #192]	@ (8001c24 <TIM_Base_SetConfig+0xe4>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d007      	beq.n	8001b78 <TIM_Base_SetConfig+0x38>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a2f      	ldr	r2, [pc, #188]	@ (8001c28 <TIM_Base_SetConfig+0xe8>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d003      	beq.n	8001b78 <TIM_Base_SetConfig+0x38>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a2e      	ldr	r2, [pc, #184]	@ (8001c2c <TIM_Base_SetConfig+0xec>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d108      	bne.n	8001b8a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a24      	ldr	r2, [pc, #144]	@ (8001c20 <TIM_Base_SetConfig+0xe0>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d00f      	beq.n	8001bb2 <TIM_Base_SetConfig+0x72>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b98:	d00b      	beq.n	8001bb2 <TIM_Base_SetConfig+0x72>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a21      	ldr	r2, [pc, #132]	@ (8001c24 <TIM_Base_SetConfig+0xe4>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d007      	beq.n	8001bb2 <TIM_Base_SetConfig+0x72>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a20      	ldr	r2, [pc, #128]	@ (8001c28 <TIM_Base_SetConfig+0xe8>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d003      	beq.n	8001bb2 <TIM_Base_SetConfig+0x72>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a1f      	ldr	r2, [pc, #124]	@ (8001c2c <TIM_Base_SetConfig+0xec>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d108      	bne.n	8001bc4 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a0d      	ldr	r2, [pc, #52]	@ (8001c20 <TIM_Base_SetConfig+0xe0>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d103      	bne.n	8001bf8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	691a      	ldr	r2, [r3, #16]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d005      	beq.n	8001c16 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	f023 0201 	bic.w	r2, r3, #1
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	611a      	str	r2, [r3, #16]
  }
}
 8001c16:	bf00      	nop
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr
 8001c20:	40012c00 	.word	0x40012c00
 8001c24:	40000400 	.word	0x40000400
 8001c28:	40000800 	.word	0x40000800
 8001c2c:	40000c00 	.word	0x40000c00

08001c30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d101      	bne.n	8001c48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001c44:	2302      	movs	r3, #2
 8001c46:	e04b      	b.n	8001ce0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2202      	movs	r2, #2
 8001c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a19      	ldr	r2, [pc, #100]	@ (8001cec <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d013      	beq.n	8001cb4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c94:	d00e      	beq.n	8001cb4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a15      	ldr	r2, [pc, #84]	@ (8001cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d009      	beq.n	8001cb4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a13      	ldr	r2, [pc, #76]	@ (8001cf4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d004      	beq.n	8001cb4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a12      	ldr	r2, [pc, #72]	@ (8001cf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d10c      	bne.n	8001cce <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001cba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	68ba      	ldr	r2, [r7, #8]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40012c00 	.word	0x40012c00
 8001cf0:	40000400 	.word	0x40000400
 8001cf4:	40000800 	.word	0x40000800
 8001cf8:	40000c00 	.word	0x40000c00

08001cfc <LL_ADC_REG_SetSequencerLength>:
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d0a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	431a      	orrs	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	bf0c      	ite	eq
 8001d34:	2301      	moveq	r3, #1
 8001d36:	2300      	movne	r3, #0
 8001d38:	b2db      	uxtb	r3, r3
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8001d44:	b590      	push	{r4, r7, lr}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8001d52:	4813      	ldr	r0, [pc, #76]	@ (8001da0 <LL_ADC_CommonInit+0x5c>)
 8001d54:	f7ff ffe4 	bl	8001d20 <LL_ADC_IsEnabled>
 8001d58:	4604      	mov	r4, r0
 8001d5a:	4812      	ldr	r0, [pc, #72]	@ (8001da4 <LL_ADC_CommonInit+0x60>)
 8001d5c:	f7ff ffe0 	bl	8001d20 <LL_ADC_IsEnabled>
 8001d60:	4603      	mov	r3, r0
 8001d62:	4323      	orrs	r3, r4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d114      	bne.n	8001d92 <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d009      	beq.n	8001d84 <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	e008      	b.n	8001d96 <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	e001      	b.n	8001d96 <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd90      	pop	{r4, r7, pc}
 8001da0:	40012400 	.word	0x40012400
 8001da4:	40012800 	.word	0x40012800

08001da8 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001db2:	2300      	movs	r3, #0
 8001db4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff ffb2 	bl	8001d20 <LL_ADC_IsEnabled>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d112      	bne.n	8001de8 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	431a      	orrs	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	e001      	b.n	8001dec <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b084      	sub	sp, #16
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001e00:	2300      	movs	r3, #0
 8001e02:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff ff8b 	bl	8001d20 <LL_ADC_IsEnabled>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d131      	bne.n	8001e74 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00c      	beq.n	8001e32 <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	6859      	ldr	r1, [r3, #4]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	430b      	orrs	r3, r1
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	e008      	b.n	8001e44 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 8001e4c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	6811      	ldr	r1, [r2, #0]
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	68d2      	ldr	r2, [r2, #12]
 8001e58:	4311      	orrs	r1, r2
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	6912      	ldr	r2, [r2, #16]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	431a      	orrs	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff ff45 	bl	8001cfc <LL_ADC_REG_SetSequencerLength>
 8001e72:	e001      	b.n	8001e78 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <LL_GPIO_SetPinMode>:
{
 8001e82:	b490      	push	{r4, r7}
 8001e84:	b088      	sub	sp, #32
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	461a      	mov	r2, r3
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	0e1b      	lsrs	r3, r3, #24
 8001e96:	4413      	add	r3, r2
 8001e98:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8001e9a:	6822      	ldr	r2, [r4, #0]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	fa93 f3a3 	rbit	r3, r3
 8001ea6:	613b      	str	r3, [r7, #16]
  return result;
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	fab3 f383 	clz	r3, r3
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	210f      	movs	r1, #15
 8001eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	401a      	ands	r2, r3
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	fa93 f3a3 	rbit	r3, r3
 8001ec6:	61bb      	str	r3, [r7, #24]
  return result;
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	fab3 f383 	clz	r3, r3
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	6023      	str	r3, [r4, #0]
}
 8001edc:	bf00      	nop
 8001ede:	3720      	adds	r7, #32
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc90      	pop	{r4, r7}
 8001ee4:	4770      	bx	lr

08001ee6 <LL_GPIO_SetPinSpeed>:
{
 8001ee6:	b490      	push	{r4, r7}
 8001ee8:	b088      	sub	sp, #32
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	60f8      	str	r0, [r7, #12]
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	0e1b      	lsrs	r3, r3, #24
 8001efa:	4413      	add	r3, r2
 8001efc:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8001efe:	6822      	ldr	r2, [r4, #0]
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	fa93 f3a3 	rbit	r3, r3
 8001f0a:	613b      	str	r3, [r7, #16]
  return result;
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	fab3 f383 	clz	r3, r3
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	2103      	movs	r1, #3
 8001f18:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	401a      	ands	r2, r3
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	fa93 f3a3 	rbit	r3, r3
 8001f2a:	61bb      	str	r3, [r7, #24]
  return result;
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	fab3 f383 	clz	r3, r3
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	6023      	str	r3, [r4, #0]
}
 8001f40:	bf00      	nop
 8001f42:	3720      	adds	r7, #32
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc90      	pop	{r4, r7}
 8001f48:	4770      	bx	lr

08001f4a <LL_GPIO_SetPinOutputType>:
{
 8001f4a:	b490      	push	{r4, r7}
 8001f4c:	b088      	sub	sp, #32
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	0e1b      	lsrs	r3, r3, #24
 8001f5e:	4413      	add	r3, r2
 8001f60:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8001f62:	6822      	ldr	r2, [r4, #0]
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	fa93 f3a3 	rbit	r3, r3
 8001f6e:	613b      	str	r3, [r7, #16]
  return result;
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	fab3 f383 	clz	r3, r3
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	2104      	movs	r1, #4
 8001f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	401a      	ands	r2, r3
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	fa93 f3a3 	rbit	r3, r3
 8001f8e:	61bb      	str	r3, [r7, #24]
  return result;
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	fab3 f383 	clz	r3, r3
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	6023      	str	r3, [r4, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	3720      	adds	r7, #32
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc90      	pop	{r4, r7}
 8001fac:	4770      	bx	lr

08001fae <LL_GPIO_SetPinPull>:
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b087      	sub	sp, #28
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	0a1b      	lsrs	r3, r3, #8
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	401a      	ands	r2, r3
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	0a1b      	lsrs	r3, r3, #8
 8001fca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	fa93 f3a3 	rbit	r3, r3
 8001fd2:	613b      	str	r3, [r7, #16]
  return result;
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	fab3 f383 	clz	r3, r3
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	4619      	mov	r1, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	408b      	lsls	r3, r1
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	60da      	str	r2, [r3, #12]
}
 8001fe8:	bf00      	nop
 8001fea:	371c      	adds	r7, #28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr

08001ff2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b088      	sub	sp, #32
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	0c1b      	lsrs	r3, r3, #16
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	fa93 f3a3 	rbit	r3, r3
 8002010:	60fb      	str	r3, [r7, #12]
  return result;
 8002012:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8002014:	fab3 f383 	clz	r3, r3
 8002018:	b2db      	uxtb	r3, r3
 800201a:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800201c:	e044      	b.n	80020a8 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 800201e:	2201      	movs	r2, #1
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	409a      	lsls	r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	4013      	ands	r3, r2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d03a      	beq.n	80020a2 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	2b07      	cmp	r3, #7
 8002030:	d806      	bhi.n	8002040 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8002032:	f240 1201 	movw	r2, #257	@ 0x101
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	61bb      	str	r3, [r7, #24]
 800203e:	e008      	b.n	8002052 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	3b08      	subs	r3, #8
 8002044:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002050:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b08      	cmp	r3, #8
 8002058:	d106      	bne.n	8002068 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	461a      	mov	r2, r3
 8002060:	69b9      	ldr	r1, [r7, #24]
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff ffa3 	bl	8001fae <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	461a      	mov	r2, r3
 800206e:	69b9      	ldr	r1, [r7, #24]
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff ff06 	bl	8001e82 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d003      	beq.n	8002086 <LL_GPIO_Init+0x94>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b09      	cmp	r3, #9
 8002084:	d10d      	bne.n	80020a2 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	461a      	mov	r2, r3
 800208c:	69b9      	ldr	r1, [r7, #24]
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff ff29 	bl	8001ee6 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	461a      	mov	r2, r3
 800209a:	69b9      	ldr	r1, [r7, #24]
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff ff54 	bl	8001f4a <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	3301      	adds	r3, #1
 80020a6:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	fa22 f303 	lsr.w	r3, r2, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1b4      	bne.n	800201e <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3720      	adds	r7, #32
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <LL_RCC_HSE_GetPrediv2>:
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV2));
 80020c4:	4b03      	ldr	r3, [pc, #12]	@ (80020d4 <LL_RCC_HSE_GetPrediv2+0x14>)
 80020c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr
 80020d4:	40021000 	.word	0x40021000

080020d8 <LL_RCC_GetSysClkSource>:
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80020dc:	4b03      	ldr	r3, [pc, #12]	@ (80020ec <LL_RCC_GetSysClkSource+0x14>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 030c 	and.w	r3, r3, #12
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr
 80020ec:	40021000 	.word	0x40021000

080020f0 <LL_RCC_GetAHBPrescaler>:
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80020f4:	4b03      	ldr	r3, [pc, #12]	@ (8002104 <LL_RCC_GetAHBPrescaler+0x14>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr
 8002104:	40021000 	.word	0x40021000

08002108 <LL_RCC_GetAPB1Prescaler>:
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800210c:	4b03      	ldr	r3, [pc, #12]	@ (800211c <LL_RCC_GetAPB1Prescaler+0x14>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002114:	4618      	mov	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr
 800211c:	40021000 	.word	0x40021000

08002120 <LL_RCC_GetAPB2Prescaler>:
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002124:	4b03      	ldr	r3, [pc, #12]	@ (8002134 <LL_RCC_GetAPB2Prescaler+0x14>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800212c:	4618      	mov	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr
 8002134:	40021000 	.word	0x40021000

08002138 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
 800213e:	4b09      	ldr	r3, [pc, #36]	@ (8002164 <LL_RCC_PLL_GetMainSource+0x2c>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002146:	607b      	str	r3, [r7, #4]
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
 8002148:	4b06      	ldr	r3, [pc, #24]	@ (8002164 <LL_RCC_PLL_GetMainSource+0x2c>)
 800214a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002152:	603b      	str	r3, [r7, #0]
  return (uint32_t)(pllsrc | predivsrc);
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	4313      	orrs	r3, r2
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr
 8002164:	40021000 	.word	0x40021000

08002168 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 800216c:	4b03      	ldr	r3, [pc, #12]	@ (800217c <LL_RCC_PLL_GetMultiplicator+0x14>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 8002174:	4618      	mov	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr
 800217c:	40021000 	.word	0x40021000

08002180 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
 8002184:	4b03      	ldr	r3, [pc, #12]	@ (8002194 <LL_RCC_PLL_GetPrediv+0x14>)
 8002186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002188:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
#endif /*RCC_CFGR2_PREDIV1*/
}
 800218c:	4618      	mov	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr
 8002194:	40021000 	.word	0x40021000

08002198 <LL_RCC_PLL2_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL2_MUL_14
  *         @arg @ref LL_RCC_PLL2_MUL_16
  *         @arg @ref LL_RCC_PLL2_MUL_20
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetMultiplicator(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL2MUL));
 800219c:	4b03      	ldr	r3, [pc, #12]	@ (80021ac <LL_RCC_PLL2_GetMultiplicator+0x14>)
 800219e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr
 80021ac:	40021000 	.word	0x40021000

080021b0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80021b8:	f000 f820 	bl	80021fc <RCC_GetSystemClockFreq>
 80021bc:	4602      	mov	r2, r0
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 f83e 	bl	8002248 <RCC_GetHCLKClockFreq>
 80021cc:	4602      	mov	r2, r0
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f84c 	bl	8002274 <RCC_GetPCLK1ClockFreq>
 80021dc:	4602      	mov	r2, r0
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 f858 	bl	800229c <RCC_GetPCLK2ClockFreq>
 80021ec:	4602      	mov	r2, r0
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	60da      	str	r2, [r3, #12]
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002202:	2300      	movs	r3, #0
 8002204:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002206:	f7ff ff67 	bl	80020d8 <LL_RCC_GetSysClkSource>
 800220a:	4603      	mov	r3, r0
 800220c:	2b08      	cmp	r3, #8
 800220e:	d00c      	beq.n	800222a <RCC_GetSystemClockFreq+0x2e>
 8002210:	2b08      	cmp	r3, #8
 8002212:	d80e      	bhi.n	8002232 <RCC_GetSystemClockFreq+0x36>
 8002214:	2b00      	cmp	r3, #0
 8002216:	d002      	beq.n	800221e <RCC_GetSystemClockFreq+0x22>
 8002218:	2b04      	cmp	r3, #4
 800221a:	d003      	beq.n	8002224 <RCC_GetSystemClockFreq+0x28>
 800221c:	e009      	b.n	8002232 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800221e:	4b09      	ldr	r3, [pc, #36]	@ (8002244 <RCC_GetSystemClockFreq+0x48>)
 8002220:	607b      	str	r3, [r7, #4]
      break;
 8002222:	e009      	b.n	8002238 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002224:	4b07      	ldr	r3, [pc, #28]	@ (8002244 <RCC_GetSystemClockFreq+0x48>)
 8002226:	607b      	str	r3, [r7, #4]
      break;
 8002228:	e006      	b.n	8002238 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800222a:	f000 f84b 	bl	80022c4 <RCC_PLL_GetFreqDomain_SYS>
 800222e:	6078      	str	r0, [r7, #4]
      break;
 8002230:	e002      	b.n	8002238 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8002232:	4b04      	ldr	r3, [pc, #16]	@ (8002244 <RCC_GetSystemClockFreq+0x48>)
 8002234:	607b      	str	r3, [r7, #4]
      break;
 8002236:	bf00      	nop
  }

  return frequency;
 8002238:	687b      	ldr	r3, [r7, #4]
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	007a1200 	.word	0x007a1200

08002248 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002250:	f7ff ff4e 	bl	80020f0 <LL_RCC_GetAHBPrescaler>
 8002254:	4603      	mov	r3, r0
 8002256:	091b      	lsrs	r3, r3, #4
 8002258:	f003 030f 	and.w	r3, r3, #15
 800225c:	4a04      	ldr	r2, [pc, #16]	@ (8002270 <RCC_GetHCLKClockFreq+0x28>)
 800225e:	5cd3      	ldrb	r3, [r2, r3]
 8002260:	461a      	mov	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	40d3      	lsrs	r3, r2
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	08004ca0 	.word	0x08004ca0

08002274 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800227c:	f7ff ff44 	bl	8002108 <LL_RCC_GetAPB1Prescaler>
 8002280:	4603      	mov	r3, r0
 8002282:	0a1b      	lsrs	r3, r3, #8
 8002284:	4a04      	ldr	r2, [pc, #16]	@ (8002298 <RCC_GetPCLK1ClockFreq+0x24>)
 8002286:	5cd3      	ldrb	r3, [r2, r3]
 8002288:	461a      	mov	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	40d3      	lsrs	r3, r2
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	08004cb0 	.word	0x08004cb0

0800229c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80022a4:	f7ff ff3c 	bl	8002120 <LL_RCC_GetAPB2Prescaler>
 80022a8:	4603      	mov	r3, r0
 80022aa:	0adb      	lsrs	r3, r3, #11
 80022ac:	4a04      	ldr	r2, [pc, #16]	@ (80022c0 <RCC_GetPCLK2ClockFreq+0x24>)
 80022ae:	5cd3      	ldrb	r3, [r2, r3]
 80022b0:	461a      	mov	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	40d3      	lsrs	r3, r2
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	08004cb0 	.word	0x08004cb0

080022c4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80022c4:	b590      	push	{r4, r7, lr}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	607b      	str	r3, [r7, #4]
 80022ce:	2300      	movs	r3, #0
 80022d0:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80022d2:	f7ff ff31 	bl	8002138 <LL_RCC_PLL_GetMainSource>
 80022d6:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 80022de:	d017      	beq.n	8002310 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 80022e6:	d81e      	bhi.n	8002326 <RCC_PLL_GetFreqDomain_SYS+0x62>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d004      	beq.n	80022f8 <RCC_PLL_GetFreqDomain_SYS+0x34>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022f4:	d003      	beq.n	80022fe <RCC_PLL_GetFreqDomain_SYS+0x3a>
 80022f6:	e016      	b.n	8002326 <RCC_PLL_GetFreqDomain_SYS+0x62>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80022f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002364 <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 80022fa:	607b      	str	r3, [r7, #4]
      break;
 80022fc:	e016      	b.n	800232c <RCC_PLL_GetFreqDomain_SYS+0x68>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 80022fe:	f7ff ff3f 	bl	8002180 <LL_RCC_PLL_GetPrediv>
 8002302:	4603      	mov	r3, r0
 8002304:	3301      	adds	r3, #1
 8002306:	4a18      	ldr	r2, [pc, #96]	@ (8002368 <RCC_PLL_GetFreqDomain_SYS+0xa4>)
 8002308:	fbb2 f3f3 	udiv	r3, r2, r3
 800230c:	607b      	str	r3, [r7, #4]
      break;
 800230e:	e00d      	b.n	800232c <RCC_PLL_GetFreqDomain_SYS+0x68>

#if defined(RCC_PLL2_SUPPORT)
    case LL_RCC_PLLSOURCE_PLL2:       /* PLL2 used as PLL clock source */
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
 8002310:	f000 f82c 	bl	800236c <RCC_PLL2_GetFreqClockFreq>
 8002314:	4604      	mov	r4, r0
 8002316:	f7ff ff33 	bl	8002180 <LL_RCC_PLL_GetPrediv>
 800231a:	4603      	mov	r3, r0
 800231c:	3301      	adds	r3, #1
 800231e:	fbb4 f3f3 	udiv	r3, r4, r3
 8002322:	607b      	str	r3, [r7, #4]
      break;
 8002324:	e002      	b.n	800232c <RCC_PLL_GetFreqDomain_SYS+0x68>
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8002326:	4b0f      	ldr	r3, [pc, #60]	@ (8002364 <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 8002328:	607b      	str	r3, [r7, #4]
      break;
 800232a:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 800232c:	f7ff ff1c 	bl	8002168 <LL_RCC_PLL_GetMultiplicator>
 8002330:	4603      	mov	r3, r0
 8002332:	f5b3 1f50 	cmp.w	r3, #3407872	@ 0x340000
 8002336:	d00a      	beq.n	800234e <RCC_PLL_GetFreqDomain_SYS+0x8a>
 8002338:	f7ff ff16 	bl	8002168 <LL_RCC_PLL_GetMultiplicator>
 800233c:	4603      	mov	r3, r0
 800233e:	0c9b      	lsrs	r3, r3, #18
 8002340:	f003 030f 	and.w	r3, r3, #15
 8002344:	3302      	adds	r3, #2
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	fb02 f303 	mul.w	r3, r2, r3
 800234c:	e006      	b.n	800235c <RCC_PLL_GetFreqDomain_SYS+0x98>
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	4413      	add	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	085b      	lsrs	r3, r3, #1
}
 800235c:	4618      	mov	r0, r3
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	bd90      	pop	{r4, r7, pc}
 8002364:	003d0900 	.word	0x003d0900
 8002368:	007a1200 	.word	0x007a1200

0800236c <RCC_PLL2_GetFreqClockFreq>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL2_GetFreqClockFreq(void)
{
 800236c:	b598      	push	{r3, r4, r7, lr}
 800236e:	af00      	add	r7, sp, #0
  return __LL_RCC_CALC_PLL2CLK_FREQ(HSE_VALUE, LL_RCC_PLL2_GetMultiplicator(), LL_RCC_HSE_GetPrediv2());
 8002370:	f7ff ff12 	bl	8002198 <LL_RCC_PLL2_GetMultiplicator>
 8002374:	4603      	mov	r3, r0
 8002376:	0a1b      	lsrs	r3, r3, #8
 8002378:	4a07      	ldr	r2, [pc, #28]	@ (8002398 <RCC_PLL2_GetFreqClockFreq+0x2c>)
 800237a:	fb02 f303 	mul.w	r3, r2, r3
 800237e:	f503 0474 	add.w	r4, r3, #15990784	@ 0xf40000
 8002382:	f504 5410 	add.w	r4, r4, #9216	@ 0x2400
 8002386:	f7ff fe9b 	bl	80020c0 <LL_RCC_HSE_GetPrediv2>
 800238a:	4603      	mov	r3, r0
 800238c:	091b      	lsrs	r3, r3, #4
 800238e:	3301      	adds	r3, #1
 8002390:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002394:	4618      	mov	r0, r3
 8002396:	bd98      	pop	{r3, r4, r7, pc}
 8002398:	007a1200 	.word	0x007a1200

0800239c <LL_USART_IsEnabled>:
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023b0:	bf0c      	ite	eq
 80023b2:	2301      	moveq	r3, #1
 80023b4:	2300      	movne	r3, #0
 80023b6:	b2db      	uxtb	r3, r3
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr

080023c2 <LL_USART_SetStopBitsLength>:
{
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	611a      	str	r2, [r3, #16]
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr

080023e6 <LL_USART_SetHWFlowCtrl>:
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	615a      	str	r2, [r3, #20]
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr
	...

0800240c <LL_USART_SetBaudRate>:
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	009a      	lsls	r2, r3, #2
 8002422:	441a      	add	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	fbb2 f3f3 	udiv	r3, r2, r3
 800242c:	4a25      	ldr	r2, [pc, #148]	@ (80024c4 <LL_USART_SetBaudRate+0xb8>)
 800242e:	fba2 2303 	umull	r2, r3, r2, r3
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	b29b      	uxth	r3, r3
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	b299      	uxth	r1, r3
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	009a      	lsls	r2, r3, #2
 8002444:	441a      	add	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	fbb2 f2f3 	udiv	r2, r2, r3
 800244e:	4b1d      	ldr	r3, [pc, #116]	@ (80024c4 <LL_USART_SetBaudRate+0xb8>)
 8002450:	fba3 0302 	umull	r0, r3, r3, r2
 8002454:	095b      	lsrs	r3, r3, #5
 8002456:	2064      	movs	r0, #100	@ 0x64
 8002458:	fb00 f303 	mul.w	r3, r0, r3
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	3332      	adds	r3, #50	@ 0x32
 8002462:	4a18      	ldr	r2, [pc, #96]	@ (80024c4 <LL_USART_SetBaudRate+0xb8>)
 8002464:	fba2 2303 	umull	r2, r3, r2, r3
 8002468:	095b      	lsrs	r3, r3, #5
 800246a:	b29b      	uxth	r3, r3
 800246c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002470:	b29b      	uxth	r3, r3
 8002472:	440b      	add	r3, r1
 8002474:	b299      	uxth	r1, r3
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	4613      	mov	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	009a      	lsls	r2, r3, #2
 8002480:	441a      	add	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	fbb2 f2f3 	udiv	r2, r2, r3
 800248a:	4b0e      	ldr	r3, [pc, #56]	@ (80024c4 <LL_USART_SetBaudRate+0xb8>)
 800248c:	fba3 0302 	umull	r0, r3, r3, r2
 8002490:	095b      	lsrs	r3, r3, #5
 8002492:	2064      	movs	r0, #100	@ 0x64
 8002494:	fb00 f303 	mul.w	r3, r0, r3
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	3332      	adds	r3, #50	@ 0x32
 800249e:	4a09      	ldr	r2, [pc, #36]	@ (80024c4 <LL_USART_SetBaudRate+0xb8>)
 80024a0:	fba2 2303 	umull	r2, r3, r2, r3
 80024a4:	095b      	lsrs	r3, r3, #5
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	440b      	add	r3, r1
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	461a      	mov	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	609a      	str	r2, [r3, #8]
}
 80024b8:	bf00      	nop
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	51eb851f 	.word	0x51eb851f

080024c8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff ff5e 	bl	800239c <LL_USART_IsEnabled>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d153      	bne.n	800258e <LL_USART_Init+0xc6>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80024ee:	f023 030c 	bic.w	r3, r3, #12
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	6851      	ldr	r1, [r2, #4]
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	68d2      	ldr	r2, [r2, #12]
 80024fa:	4311      	orrs	r1, r2
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	6912      	ldr	r2, [r2, #16]
 8002500:	430a      	orrs	r2, r1
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	4619      	mov	r1, r3
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff ff57 	bl	80023c2 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	4619      	mov	r1, r3
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff ff63 	bl	80023e6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002520:	f107 0308 	add.w	r3, r7, #8
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fe43 	bl	80021b0 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a1a      	ldr	r2, [pc, #104]	@ (8002598 <LL_USART_Init+0xd0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d102      	bne.n	8002538 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	61bb      	str	r3, [r7, #24]
 8002536:	e01a      	b.n	800256e <LL_USART_Init+0xa6>
    }
    else if (USARTx == USART2)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a18      	ldr	r2, [pc, #96]	@ (800259c <LL_USART_Init+0xd4>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d102      	bne.n	8002546 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	61bb      	str	r3, [r7, #24]
 8002544:	e013      	b.n	800256e <LL_USART_Init+0xa6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a15      	ldr	r2, [pc, #84]	@ (80025a0 <LL_USART_Init+0xd8>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d102      	bne.n	8002554 <LL_USART_Init+0x8c>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	61bb      	str	r3, [r7, #24]
 8002552:	e00c      	b.n	800256e <LL_USART_Init+0xa6>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a13      	ldr	r2, [pc, #76]	@ (80025a4 <LL_USART_Init+0xdc>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d102      	bne.n	8002562 <LL_USART_Init+0x9a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	61bb      	str	r3, [r7, #24]
 8002560:	e005      	b.n	800256e <LL_USART_Init+0xa6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a10      	ldr	r2, [pc, #64]	@ (80025a8 <LL_USART_Init+0xe0>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d101      	bne.n	800256e <LL_USART_Init+0xa6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00c      	beq.n	800258e <LL_USART_Init+0xc6>
        && (USART_InitStruct->BaudRate != 0U))
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d008      	beq.n	800258e <LL_USART_Init+0xc6>
    {
      status = SUCCESS;
 800257c:	2300      	movs	r3, #0
 800257e:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002584:	461a      	mov	r2, r3
 8002586:	69b9      	ldr	r1, [r7, #24]
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff ff3f 	bl	800240c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800258e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3720      	adds	r7, #32
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40013800 	.word	0x40013800
 800259c:	40004400 	.word	0x40004400
 80025a0:	40004800 	.word	0x40004800
 80025a4:	40004c00 	.word	0x40004c00
 80025a8:	40005000 	.word	0x40005000

080025ac <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80025b4:	4b0e      	ldr	r3, [pc, #56]	@ (80025f0 <LL_mDelay+0x44>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80025ba:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c2:	d00c      	beq.n	80025de <LL_mDelay+0x32>
  {
    Delay++;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3301      	adds	r3, #1
 80025c8:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80025ca:	e008      	b.n	80025de <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80025cc:	4b08      	ldr	r3, [pc, #32]	@ (80025f0 <LL_mDelay+0x44>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d002      	beq.n	80025de <LL_mDelay+0x32>
    {
      Delay--;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3b01      	subs	r3, #1
 80025dc:	607b      	str	r3, [r7, #4]
  while (Delay)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1f3      	bne.n	80025cc <LL_mDelay+0x20>
    }
  }
}
 80025e4:	bf00      	nop
 80025e6:	bf00      	nop
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr
 80025f0:	e000e010 	.word	0xe000e010

080025f4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80025fc:	4a03      	ldr	r2, [pc, #12]	@ (800260c <LL_SetSystemCoreClock+0x18>)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6013      	str	r3, [r2, #0]
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr
 800260c:	20000cc0 	.word	0x20000cc0

08002610 <__sflush_r>:
 8002610:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002616:	0716      	lsls	r6, r2, #28
 8002618:	4605      	mov	r5, r0
 800261a:	460c      	mov	r4, r1
 800261c:	d454      	bmi.n	80026c8 <__sflush_r+0xb8>
 800261e:	684b      	ldr	r3, [r1, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	dc02      	bgt.n	800262a <__sflush_r+0x1a>
 8002624:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002626:	2b00      	cmp	r3, #0
 8002628:	dd48      	ble.n	80026bc <__sflush_r+0xac>
 800262a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800262c:	2e00      	cmp	r6, #0
 800262e:	d045      	beq.n	80026bc <__sflush_r+0xac>
 8002630:	2300      	movs	r3, #0
 8002632:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002636:	682f      	ldr	r7, [r5, #0]
 8002638:	6a21      	ldr	r1, [r4, #32]
 800263a:	602b      	str	r3, [r5, #0]
 800263c:	d030      	beq.n	80026a0 <__sflush_r+0x90>
 800263e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002640:	89a3      	ldrh	r3, [r4, #12]
 8002642:	0759      	lsls	r1, r3, #29
 8002644:	d505      	bpl.n	8002652 <__sflush_r+0x42>
 8002646:	6863      	ldr	r3, [r4, #4]
 8002648:	1ad2      	subs	r2, r2, r3
 800264a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800264c:	b10b      	cbz	r3, 8002652 <__sflush_r+0x42>
 800264e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002650:	1ad2      	subs	r2, r2, r3
 8002652:	2300      	movs	r3, #0
 8002654:	4628      	mov	r0, r5
 8002656:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002658:	6a21      	ldr	r1, [r4, #32]
 800265a:	47b0      	blx	r6
 800265c:	1c43      	adds	r3, r0, #1
 800265e:	89a3      	ldrh	r3, [r4, #12]
 8002660:	d106      	bne.n	8002670 <__sflush_r+0x60>
 8002662:	6829      	ldr	r1, [r5, #0]
 8002664:	291d      	cmp	r1, #29
 8002666:	d82b      	bhi.n	80026c0 <__sflush_r+0xb0>
 8002668:	4a28      	ldr	r2, [pc, #160]	@ (800270c <__sflush_r+0xfc>)
 800266a:	410a      	asrs	r2, r1
 800266c:	07d6      	lsls	r6, r2, #31
 800266e:	d427      	bmi.n	80026c0 <__sflush_r+0xb0>
 8002670:	2200      	movs	r2, #0
 8002672:	6062      	str	r2, [r4, #4]
 8002674:	6922      	ldr	r2, [r4, #16]
 8002676:	04d9      	lsls	r1, r3, #19
 8002678:	6022      	str	r2, [r4, #0]
 800267a:	d504      	bpl.n	8002686 <__sflush_r+0x76>
 800267c:	1c42      	adds	r2, r0, #1
 800267e:	d101      	bne.n	8002684 <__sflush_r+0x74>
 8002680:	682b      	ldr	r3, [r5, #0]
 8002682:	b903      	cbnz	r3, 8002686 <__sflush_r+0x76>
 8002684:	6560      	str	r0, [r4, #84]	@ 0x54
 8002686:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002688:	602f      	str	r7, [r5, #0]
 800268a:	b1b9      	cbz	r1, 80026bc <__sflush_r+0xac>
 800268c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002690:	4299      	cmp	r1, r3
 8002692:	d002      	beq.n	800269a <__sflush_r+0x8a>
 8002694:	4628      	mov	r0, r5
 8002696:	f000 fb6f 	bl	8002d78 <_free_r>
 800269a:	2300      	movs	r3, #0
 800269c:	6363      	str	r3, [r4, #52]	@ 0x34
 800269e:	e00d      	b.n	80026bc <__sflush_r+0xac>
 80026a0:	2301      	movs	r3, #1
 80026a2:	4628      	mov	r0, r5
 80026a4:	47b0      	blx	r6
 80026a6:	4602      	mov	r2, r0
 80026a8:	1c50      	adds	r0, r2, #1
 80026aa:	d1c9      	bne.n	8002640 <__sflush_r+0x30>
 80026ac:	682b      	ldr	r3, [r5, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0c6      	beq.n	8002640 <__sflush_r+0x30>
 80026b2:	2b1d      	cmp	r3, #29
 80026b4:	d001      	beq.n	80026ba <__sflush_r+0xaa>
 80026b6:	2b16      	cmp	r3, #22
 80026b8:	d11d      	bne.n	80026f6 <__sflush_r+0xe6>
 80026ba:	602f      	str	r7, [r5, #0]
 80026bc:	2000      	movs	r0, #0
 80026be:	e021      	b.n	8002704 <__sflush_r+0xf4>
 80026c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026c4:	b21b      	sxth	r3, r3
 80026c6:	e01a      	b.n	80026fe <__sflush_r+0xee>
 80026c8:	690f      	ldr	r7, [r1, #16]
 80026ca:	2f00      	cmp	r7, #0
 80026cc:	d0f6      	beq.n	80026bc <__sflush_r+0xac>
 80026ce:	0793      	lsls	r3, r2, #30
 80026d0:	bf18      	it	ne
 80026d2:	2300      	movne	r3, #0
 80026d4:	680e      	ldr	r6, [r1, #0]
 80026d6:	bf08      	it	eq
 80026d8:	694b      	ldreq	r3, [r1, #20]
 80026da:	1bf6      	subs	r6, r6, r7
 80026dc:	600f      	str	r7, [r1, #0]
 80026de:	608b      	str	r3, [r1, #8]
 80026e0:	2e00      	cmp	r6, #0
 80026e2:	ddeb      	ble.n	80026bc <__sflush_r+0xac>
 80026e4:	4633      	mov	r3, r6
 80026e6:	463a      	mov	r2, r7
 80026e8:	4628      	mov	r0, r5
 80026ea:	6a21      	ldr	r1, [r4, #32]
 80026ec:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80026f0:	47e0      	blx	ip
 80026f2:	2800      	cmp	r0, #0
 80026f4:	dc07      	bgt.n	8002706 <__sflush_r+0xf6>
 80026f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002702:	81a3      	strh	r3, [r4, #12]
 8002704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002706:	4407      	add	r7, r0
 8002708:	1a36      	subs	r6, r6, r0
 800270a:	e7e9      	b.n	80026e0 <__sflush_r+0xd0>
 800270c:	dfbffffe 	.word	0xdfbffffe

08002710 <_fflush_r>:
 8002710:	b538      	push	{r3, r4, r5, lr}
 8002712:	690b      	ldr	r3, [r1, #16]
 8002714:	4605      	mov	r5, r0
 8002716:	460c      	mov	r4, r1
 8002718:	b913      	cbnz	r3, 8002720 <_fflush_r+0x10>
 800271a:	2500      	movs	r5, #0
 800271c:	4628      	mov	r0, r5
 800271e:	bd38      	pop	{r3, r4, r5, pc}
 8002720:	b118      	cbz	r0, 800272a <_fflush_r+0x1a>
 8002722:	6a03      	ldr	r3, [r0, #32]
 8002724:	b90b      	cbnz	r3, 800272a <_fflush_r+0x1a>
 8002726:	f000 f8bb 	bl	80028a0 <__sinit>
 800272a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f3      	beq.n	800271a <_fflush_r+0xa>
 8002732:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002734:	07d0      	lsls	r0, r2, #31
 8002736:	d404      	bmi.n	8002742 <_fflush_r+0x32>
 8002738:	0599      	lsls	r1, r3, #22
 800273a:	d402      	bmi.n	8002742 <_fflush_r+0x32>
 800273c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800273e:	f000 fb18 	bl	8002d72 <__retarget_lock_acquire_recursive>
 8002742:	4628      	mov	r0, r5
 8002744:	4621      	mov	r1, r4
 8002746:	f7ff ff63 	bl	8002610 <__sflush_r>
 800274a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800274c:	4605      	mov	r5, r0
 800274e:	07da      	lsls	r2, r3, #31
 8002750:	d4e4      	bmi.n	800271c <_fflush_r+0xc>
 8002752:	89a3      	ldrh	r3, [r4, #12]
 8002754:	059b      	lsls	r3, r3, #22
 8002756:	d4e1      	bmi.n	800271c <_fflush_r+0xc>
 8002758:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800275a:	f000 fb0b 	bl	8002d74 <__retarget_lock_release_recursive>
 800275e:	e7dd      	b.n	800271c <_fflush_r+0xc>

08002760 <fflush>:
 8002760:	4601      	mov	r1, r0
 8002762:	b920      	cbnz	r0, 800276e <fflush+0xe>
 8002764:	4a04      	ldr	r2, [pc, #16]	@ (8002778 <fflush+0x18>)
 8002766:	4905      	ldr	r1, [pc, #20]	@ (800277c <fflush+0x1c>)
 8002768:	4805      	ldr	r0, [pc, #20]	@ (8002780 <fflush+0x20>)
 800276a:	f000 b8b1 	b.w	80028d0 <_fwalk_sglue>
 800276e:	4b05      	ldr	r3, [pc, #20]	@ (8002784 <fflush+0x24>)
 8002770:	6818      	ldr	r0, [r3, #0]
 8002772:	f7ff bfcd 	b.w	8002710 <_fflush_r>
 8002776:	bf00      	nop
 8002778:	20000ccc 	.word	0x20000ccc
 800277c:	08002711 	.word	0x08002711
 8002780:	20000cdc 	.word	0x20000cdc
 8002784:	20000cd8 	.word	0x20000cd8

08002788 <std>:
 8002788:	2300      	movs	r3, #0
 800278a:	b510      	push	{r4, lr}
 800278c:	4604      	mov	r4, r0
 800278e:	e9c0 3300 	strd	r3, r3, [r0]
 8002792:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002796:	6083      	str	r3, [r0, #8]
 8002798:	8181      	strh	r1, [r0, #12]
 800279a:	6643      	str	r3, [r0, #100]	@ 0x64
 800279c:	81c2      	strh	r2, [r0, #14]
 800279e:	6183      	str	r3, [r0, #24]
 80027a0:	4619      	mov	r1, r3
 80027a2:	2208      	movs	r2, #8
 80027a4:	305c      	adds	r0, #92	@ 0x5c
 80027a6:	f000 fa59 	bl	8002c5c <memset>
 80027aa:	4b0d      	ldr	r3, [pc, #52]	@ (80027e0 <std+0x58>)
 80027ac:	6224      	str	r4, [r4, #32]
 80027ae:	6263      	str	r3, [r4, #36]	@ 0x24
 80027b0:	4b0c      	ldr	r3, [pc, #48]	@ (80027e4 <std+0x5c>)
 80027b2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80027b4:	4b0c      	ldr	r3, [pc, #48]	@ (80027e8 <std+0x60>)
 80027b6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80027b8:	4b0c      	ldr	r3, [pc, #48]	@ (80027ec <std+0x64>)
 80027ba:	6323      	str	r3, [r4, #48]	@ 0x30
 80027bc:	4b0c      	ldr	r3, [pc, #48]	@ (80027f0 <std+0x68>)
 80027be:	429c      	cmp	r4, r3
 80027c0:	d006      	beq.n	80027d0 <std+0x48>
 80027c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80027c6:	4294      	cmp	r4, r2
 80027c8:	d002      	beq.n	80027d0 <std+0x48>
 80027ca:	33d0      	adds	r3, #208	@ 0xd0
 80027cc:	429c      	cmp	r4, r3
 80027ce:	d105      	bne.n	80027dc <std+0x54>
 80027d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80027d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027d8:	f000 baca 	b.w	8002d70 <__retarget_lock_init_recursive>
 80027dc:	bd10      	pop	{r4, pc}
 80027de:	bf00      	nop
 80027e0:	08002aa9 	.word	0x08002aa9
 80027e4:	08002acf 	.word	0x08002acf
 80027e8:	08002b07 	.word	0x08002b07
 80027ec:	08002b2b 	.word	0x08002b2b
 80027f0:	20000ffc 	.word	0x20000ffc

080027f4 <stdio_exit_handler>:
 80027f4:	4a02      	ldr	r2, [pc, #8]	@ (8002800 <stdio_exit_handler+0xc>)
 80027f6:	4903      	ldr	r1, [pc, #12]	@ (8002804 <stdio_exit_handler+0x10>)
 80027f8:	4803      	ldr	r0, [pc, #12]	@ (8002808 <stdio_exit_handler+0x14>)
 80027fa:	f000 b869 	b.w	80028d0 <_fwalk_sglue>
 80027fe:	bf00      	nop
 8002800:	20000ccc 	.word	0x20000ccc
 8002804:	08002711 	.word	0x08002711
 8002808:	20000cdc 	.word	0x20000cdc

0800280c <cleanup_stdio>:
 800280c:	6841      	ldr	r1, [r0, #4]
 800280e:	4b0c      	ldr	r3, [pc, #48]	@ (8002840 <cleanup_stdio+0x34>)
 8002810:	b510      	push	{r4, lr}
 8002812:	4299      	cmp	r1, r3
 8002814:	4604      	mov	r4, r0
 8002816:	d001      	beq.n	800281c <cleanup_stdio+0x10>
 8002818:	f7ff ff7a 	bl	8002710 <_fflush_r>
 800281c:	68a1      	ldr	r1, [r4, #8]
 800281e:	4b09      	ldr	r3, [pc, #36]	@ (8002844 <cleanup_stdio+0x38>)
 8002820:	4299      	cmp	r1, r3
 8002822:	d002      	beq.n	800282a <cleanup_stdio+0x1e>
 8002824:	4620      	mov	r0, r4
 8002826:	f7ff ff73 	bl	8002710 <_fflush_r>
 800282a:	68e1      	ldr	r1, [r4, #12]
 800282c:	4b06      	ldr	r3, [pc, #24]	@ (8002848 <cleanup_stdio+0x3c>)
 800282e:	4299      	cmp	r1, r3
 8002830:	d004      	beq.n	800283c <cleanup_stdio+0x30>
 8002832:	4620      	mov	r0, r4
 8002834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002838:	f7ff bf6a 	b.w	8002710 <_fflush_r>
 800283c:	bd10      	pop	{r4, pc}
 800283e:	bf00      	nop
 8002840:	20000ffc 	.word	0x20000ffc
 8002844:	20001064 	.word	0x20001064
 8002848:	200010cc 	.word	0x200010cc

0800284c <global_stdio_init.part.0>:
 800284c:	b510      	push	{r4, lr}
 800284e:	4b0b      	ldr	r3, [pc, #44]	@ (800287c <global_stdio_init.part.0+0x30>)
 8002850:	4c0b      	ldr	r4, [pc, #44]	@ (8002880 <global_stdio_init.part.0+0x34>)
 8002852:	4a0c      	ldr	r2, [pc, #48]	@ (8002884 <global_stdio_init.part.0+0x38>)
 8002854:	4620      	mov	r0, r4
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	2104      	movs	r1, #4
 800285a:	2200      	movs	r2, #0
 800285c:	f7ff ff94 	bl	8002788 <std>
 8002860:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002864:	2201      	movs	r2, #1
 8002866:	2109      	movs	r1, #9
 8002868:	f7ff ff8e 	bl	8002788 <std>
 800286c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002870:	2202      	movs	r2, #2
 8002872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002876:	2112      	movs	r1, #18
 8002878:	f7ff bf86 	b.w	8002788 <std>
 800287c:	20001134 	.word	0x20001134
 8002880:	20000ffc 	.word	0x20000ffc
 8002884:	080027f5 	.word	0x080027f5

08002888 <__sfp_lock_acquire>:
 8002888:	4801      	ldr	r0, [pc, #4]	@ (8002890 <__sfp_lock_acquire+0x8>)
 800288a:	f000 ba72 	b.w	8002d72 <__retarget_lock_acquire_recursive>
 800288e:	bf00      	nop
 8002890:	2000113d 	.word	0x2000113d

08002894 <__sfp_lock_release>:
 8002894:	4801      	ldr	r0, [pc, #4]	@ (800289c <__sfp_lock_release+0x8>)
 8002896:	f000 ba6d 	b.w	8002d74 <__retarget_lock_release_recursive>
 800289a:	bf00      	nop
 800289c:	2000113d 	.word	0x2000113d

080028a0 <__sinit>:
 80028a0:	b510      	push	{r4, lr}
 80028a2:	4604      	mov	r4, r0
 80028a4:	f7ff fff0 	bl	8002888 <__sfp_lock_acquire>
 80028a8:	6a23      	ldr	r3, [r4, #32]
 80028aa:	b11b      	cbz	r3, 80028b4 <__sinit+0x14>
 80028ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028b0:	f7ff bff0 	b.w	8002894 <__sfp_lock_release>
 80028b4:	4b04      	ldr	r3, [pc, #16]	@ (80028c8 <__sinit+0x28>)
 80028b6:	6223      	str	r3, [r4, #32]
 80028b8:	4b04      	ldr	r3, [pc, #16]	@ (80028cc <__sinit+0x2c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f5      	bne.n	80028ac <__sinit+0xc>
 80028c0:	f7ff ffc4 	bl	800284c <global_stdio_init.part.0>
 80028c4:	e7f2      	b.n	80028ac <__sinit+0xc>
 80028c6:	bf00      	nop
 80028c8:	0800280d 	.word	0x0800280d
 80028cc:	20001134 	.word	0x20001134

080028d0 <_fwalk_sglue>:
 80028d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028d4:	4607      	mov	r7, r0
 80028d6:	4688      	mov	r8, r1
 80028d8:	4614      	mov	r4, r2
 80028da:	2600      	movs	r6, #0
 80028dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80028e0:	f1b9 0901 	subs.w	r9, r9, #1
 80028e4:	d505      	bpl.n	80028f2 <_fwalk_sglue+0x22>
 80028e6:	6824      	ldr	r4, [r4, #0]
 80028e8:	2c00      	cmp	r4, #0
 80028ea:	d1f7      	bne.n	80028dc <_fwalk_sglue+0xc>
 80028ec:	4630      	mov	r0, r6
 80028ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028f2:	89ab      	ldrh	r3, [r5, #12]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d907      	bls.n	8002908 <_fwalk_sglue+0x38>
 80028f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80028fc:	3301      	adds	r3, #1
 80028fe:	d003      	beq.n	8002908 <_fwalk_sglue+0x38>
 8002900:	4629      	mov	r1, r5
 8002902:	4638      	mov	r0, r7
 8002904:	47c0      	blx	r8
 8002906:	4306      	orrs	r6, r0
 8002908:	3568      	adds	r5, #104	@ 0x68
 800290a:	e7e9      	b.n	80028e0 <_fwalk_sglue+0x10>

0800290c <iprintf>:
 800290c:	b40f      	push	{r0, r1, r2, r3}
 800290e:	b507      	push	{r0, r1, r2, lr}
 8002910:	4906      	ldr	r1, [pc, #24]	@ (800292c <iprintf+0x20>)
 8002912:	ab04      	add	r3, sp, #16
 8002914:	6808      	ldr	r0, [r1, #0]
 8002916:	f853 2b04 	ldr.w	r2, [r3], #4
 800291a:	6881      	ldr	r1, [r0, #8]
 800291c:	9301      	str	r3, [sp, #4]
 800291e:	f000 fe6b 	bl	80035f8 <_vfiprintf_r>
 8002922:	b003      	add	sp, #12
 8002924:	f85d eb04 	ldr.w	lr, [sp], #4
 8002928:	b004      	add	sp, #16
 800292a:	4770      	bx	lr
 800292c:	20000cd8 	.word	0x20000cd8

08002930 <_puts_r>:
 8002930:	6a03      	ldr	r3, [r0, #32]
 8002932:	b570      	push	{r4, r5, r6, lr}
 8002934:	4605      	mov	r5, r0
 8002936:	460e      	mov	r6, r1
 8002938:	6884      	ldr	r4, [r0, #8]
 800293a:	b90b      	cbnz	r3, 8002940 <_puts_r+0x10>
 800293c:	f7ff ffb0 	bl	80028a0 <__sinit>
 8002940:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002942:	07db      	lsls	r3, r3, #31
 8002944:	d405      	bmi.n	8002952 <_puts_r+0x22>
 8002946:	89a3      	ldrh	r3, [r4, #12]
 8002948:	0598      	lsls	r0, r3, #22
 800294a:	d402      	bmi.n	8002952 <_puts_r+0x22>
 800294c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800294e:	f000 fa10 	bl	8002d72 <__retarget_lock_acquire_recursive>
 8002952:	89a3      	ldrh	r3, [r4, #12]
 8002954:	0719      	lsls	r1, r3, #28
 8002956:	d502      	bpl.n	800295e <_puts_r+0x2e>
 8002958:	6923      	ldr	r3, [r4, #16]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d135      	bne.n	80029ca <_puts_r+0x9a>
 800295e:	4621      	mov	r1, r4
 8002960:	4628      	mov	r0, r5
 8002962:	f000 f925 	bl	8002bb0 <__swsetup_r>
 8002966:	b380      	cbz	r0, 80029ca <_puts_r+0x9a>
 8002968:	f04f 35ff 	mov.w	r5, #4294967295
 800296c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800296e:	07da      	lsls	r2, r3, #31
 8002970:	d405      	bmi.n	800297e <_puts_r+0x4e>
 8002972:	89a3      	ldrh	r3, [r4, #12]
 8002974:	059b      	lsls	r3, r3, #22
 8002976:	d402      	bmi.n	800297e <_puts_r+0x4e>
 8002978:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800297a:	f000 f9fb 	bl	8002d74 <__retarget_lock_release_recursive>
 800297e:	4628      	mov	r0, r5
 8002980:	bd70      	pop	{r4, r5, r6, pc}
 8002982:	2b00      	cmp	r3, #0
 8002984:	da04      	bge.n	8002990 <_puts_r+0x60>
 8002986:	69a2      	ldr	r2, [r4, #24]
 8002988:	429a      	cmp	r2, r3
 800298a:	dc17      	bgt.n	80029bc <_puts_r+0x8c>
 800298c:	290a      	cmp	r1, #10
 800298e:	d015      	beq.n	80029bc <_puts_r+0x8c>
 8002990:	6823      	ldr	r3, [r4, #0]
 8002992:	1c5a      	adds	r2, r3, #1
 8002994:	6022      	str	r2, [r4, #0]
 8002996:	7019      	strb	r1, [r3, #0]
 8002998:	68a3      	ldr	r3, [r4, #8]
 800299a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800299e:	3b01      	subs	r3, #1
 80029a0:	60a3      	str	r3, [r4, #8]
 80029a2:	2900      	cmp	r1, #0
 80029a4:	d1ed      	bne.n	8002982 <_puts_r+0x52>
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	da11      	bge.n	80029ce <_puts_r+0x9e>
 80029aa:	4622      	mov	r2, r4
 80029ac:	210a      	movs	r1, #10
 80029ae:	4628      	mov	r0, r5
 80029b0:	f000 f8bf 	bl	8002b32 <__swbuf_r>
 80029b4:	3001      	adds	r0, #1
 80029b6:	d0d7      	beq.n	8002968 <_puts_r+0x38>
 80029b8:	250a      	movs	r5, #10
 80029ba:	e7d7      	b.n	800296c <_puts_r+0x3c>
 80029bc:	4622      	mov	r2, r4
 80029be:	4628      	mov	r0, r5
 80029c0:	f000 f8b7 	bl	8002b32 <__swbuf_r>
 80029c4:	3001      	adds	r0, #1
 80029c6:	d1e7      	bne.n	8002998 <_puts_r+0x68>
 80029c8:	e7ce      	b.n	8002968 <_puts_r+0x38>
 80029ca:	3e01      	subs	r6, #1
 80029cc:	e7e4      	b.n	8002998 <_puts_r+0x68>
 80029ce:	6823      	ldr	r3, [r4, #0]
 80029d0:	1c5a      	adds	r2, r3, #1
 80029d2:	6022      	str	r2, [r4, #0]
 80029d4:	220a      	movs	r2, #10
 80029d6:	701a      	strb	r2, [r3, #0]
 80029d8:	e7ee      	b.n	80029b8 <_puts_r+0x88>
	...

080029dc <puts>:
 80029dc:	4b02      	ldr	r3, [pc, #8]	@ (80029e8 <puts+0xc>)
 80029de:	4601      	mov	r1, r0
 80029e0:	6818      	ldr	r0, [r3, #0]
 80029e2:	f7ff bfa5 	b.w	8002930 <_puts_r>
 80029e6:	bf00      	nop
 80029e8:	20000cd8 	.word	0x20000cd8

080029ec <sniprintf>:
 80029ec:	b40c      	push	{r2, r3}
 80029ee:	b530      	push	{r4, r5, lr}
 80029f0:	4b17      	ldr	r3, [pc, #92]	@ (8002a50 <sniprintf+0x64>)
 80029f2:	1e0c      	subs	r4, r1, #0
 80029f4:	681d      	ldr	r5, [r3, #0]
 80029f6:	b09d      	sub	sp, #116	@ 0x74
 80029f8:	da08      	bge.n	8002a0c <sniprintf+0x20>
 80029fa:	238b      	movs	r3, #139	@ 0x8b
 80029fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002a00:	602b      	str	r3, [r5, #0]
 8002a02:	b01d      	add	sp, #116	@ 0x74
 8002a04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002a08:	b002      	add	sp, #8
 8002a0a:	4770      	bx	lr
 8002a0c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002a10:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002a14:	bf0c      	ite	eq
 8002a16:	4623      	moveq	r3, r4
 8002a18:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002a1c:	9304      	str	r3, [sp, #16]
 8002a1e:	9307      	str	r3, [sp, #28]
 8002a20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a24:	9002      	str	r0, [sp, #8]
 8002a26:	9006      	str	r0, [sp, #24]
 8002a28:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002a2c:	4628      	mov	r0, r5
 8002a2e:	ab21      	add	r3, sp, #132	@ 0x84
 8002a30:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002a32:	a902      	add	r1, sp, #8
 8002a34:	9301      	str	r3, [sp, #4]
 8002a36:	f000 faf1 	bl	800301c <_svfiprintf_r>
 8002a3a:	1c43      	adds	r3, r0, #1
 8002a3c:	bfbc      	itt	lt
 8002a3e:	238b      	movlt	r3, #139	@ 0x8b
 8002a40:	602b      	strlt	r3, [r5, #0]
 8002a42:	2c00      	cmp	r4, #0
 8002a44:	d0dd      	beq.n	8002a02 <sniprintf+0x16>
 8002a46:	2200      	movs	r2, #0
 8002a48:	9b02      	ldr	r3, [sp, #8]
 8002a4a:	701a      	strb	r2, [r3, #0]
 8002a4c:	e7d9      	b.n	8002a02 <sniprintf+0x16>
 8002a4e:	bf00      	nop
 8002a50:	20000cd8 	.word	0x20000cd8

08002a54 <siscanf>:
 8002a54:	b40e      	push	{r1, r2, r3}
 8002a56:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8002a5a:	b530      	push	{r4, r5, lr}
 8002a5c:	b09c      	sub	sp, #112	@ 0x70
 8002a5e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8002a60:	f854 5b04 	ldr.w	r5, [r4], #4
 8002a64:	f8ad 2014 	strh.w	r2, [sp, #20]
 8002a68:	9002      	str	r0, [sp, #8]
 8002a6a:	9006      	str	r0, [sp, #24]
 8002a6c:	f7fd fbe4 	bl	8000238 <strlen>
 8002a70:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa0 <siscanf+0x4c>)
 8002a72:	9003      	str	r0, [sp, #12]
 8002a74:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002a76:	2300      	movs	r3, #0
 8002a78:	930f      	str	r3, [sp, #60]	@ 0x3c
 8002a7a:	9314      	str	r3, [sp, #80]	@ 0x50
 8002a7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a80:	9007      	str	r0, [sp, #28]
 8002a82:	4808      	ldr	r0, [pc, #32]	@ (8002aa4 <siscanf+0x50>)
 8002a84:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002a88:	462a      	mov	r2, r5
 8002a8a:	4623      	mov	r3, r4
 8002a8c:	a902      	add	r1, sp, #8
 8002a8e:	6800      	ldr	r0, [r0, #0]
 8002a90:	9401      	str	r4, [sp, #4]
 8002a92:	f000 fc17 	bl	80032c4 <__ssvfiscanf_r>
 8002a96:	b01c      	add	sp, #112	@ 0x70
 8002a98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002a9c:	b003      	add	sp, #12
 8002a9e:	4770      	bx	lr
 8002aa0:	08002acb 	.word	0x08002acb
 8002aa4:	20000cd8 	.word	0x20000cd8

08002aa8 <__sread>:
 8002aa8:	b510      	push	{r4, lr}
 8002aaa:	460c      	mov	r4, r1
 8002aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ab0:	f000 f910 	bl	8002cd4 <_read_r>
 8002ab4:	2800      	cmp	r0, #0
 8002ab6:	bfab      	itete	ge
 8002ab8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002aba:	89a3      	ldrhlt	r3, [r4, #12]
 8002abc:	181b      	addge	r3, r3, r0
 8002abe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002ac2:	bfac      	ite	ge
 8002ac4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002ac6:	81a3      	strhlt	r3, [r4, #12]
 8002ac8:	bd10      	pop	{r4, pc}

08002aca <__seofread>:
 8002aca:	2000      	movs	r0, #0
 8002acc:	4770      	bx	lr

08002ace <__swrite>:
 8002ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ad2:	461f      	mov	r7, r3
 8002ad4:	898b      	ldrh	r3, [r1, #12]
 8002ad6:	4605      	mov	r5, r0
 8002ad8:	05db      	lsls	r3, r3, #23
 8002ada:	460c      	mov	r4, r1
 8002adc:	4616      	mov	r6, r2
 8002ade:	d505      	bpl.n	8002aec <__swrite+0x1e>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ae8:	f000 f8e2 	bl	8002cb0 <_lseek_r>
 8002aec:	89a3      	ldrh	r3, [r4, #12]
 8002aee:	4632      	mov	r2, r6
 8002af0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002af4:	81a3      	strh	r3, [r4, #12]
 8002af6:	4628      	mov	r0, r5
 8002af8:	463b      	mov	r3, r7
 8002afa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002afe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b02:	f000 b8f9 	b.w	8002cf8 <_write_r>

08002b06 <__sseek>:
 8002b06:	b510      	push	{r4, lr}
 8002b08:	460c      	mov	r4, r1
 8002b0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b0e:	f000 f8cf 	bl	8002cb0 <_lseek_r>
 8002b12:	1c43      	adds	r3, r0, #1
 8002b14:	89a3      	ldrh	r3, [r4, #12]
 8002b16:	bf15      	itete	ne
 8002b18:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002b1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002b1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002b22:	81a3      	strheq	r3, [r4, #12]
 8002b24:	bf18      	it	ne
 8002b26:	81a3      	strhne	r3, [r4, #12]
 8002b28:	bd10      	pop	{r4, pc}

08002b2a <__sclose>:
 8002b2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b2e:	f000 b8af 	b.w	8002c90 <_close_r>

08002b32 <__swbuf_r>:
 8002b32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b34:	460e      	mov	r6, r1
 8002b36:	4614      	mov	r4, r2
 8002b38:	4605      	mov	r5, r0
 8002b3a:	b118      	cbz	r0, 8002b44 <__swbuf_r+0x12>
 8002b3c:	6a03      	ldr	r3, [r0, #32]
 8002b3e:	b90b      	cbnz	r3, 8002b44 <__swbuf_r+0x12>
 8002b40:	f7ff feae 	bl	80028a0 <__sinit>
 8002b44:	69a3      	ldr	r3, [r4, #24]
 8002b46:	60a3      	str	r3, [r4, #8]
 8002b48:	89a3      	ldrh	r3, [r4, #12]
 8002b4a:	071a      	lsls	r2, r3, #28
 8002b4c:	d501      	bpl.n	8002b52 <__swbuf_r+0x20>
 8002b4e:	6923      	ldr	r3, [r4, #16]
 8002b50:	b943      	cbnz	r3, 8002b64 <__swbuf_r+0x32>
 8002b52:	4621      	mov	r1, r4
 8002b54:	4628      	mov	r0, r5
 8002b56:	f000 f82b 	bl	8002bb0 <__swsetup_r>
 8002b5a:	b118      	cbz	r0, 8002b64 <__swbuf_r+0x32>
 8002b5c:	f04f 37ff 	mov.w	r7, #4294967295
 8002b60:	4638      	mov	r0, r7
 8002b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b64:	6823      	ldr	r3, [r4, #0]
 8002b66:	6922      	ldr	r2, [r4, #16]
 8002b68:	b2f6      	uxtb	r6, r6
 8002b6a:	1a98      	subs	r0, r3, r2
 8002b6c:	6963      	ldr	r3, [r4, #20]
 8002b6e:	4637      	mov	r7, r6
 8002b70:	4283      	cmp	r3, r0
 8002b72:	dc05      	bgt.n	8002b80 <__swbuf_r+0x4e>
 8002b74:	4621      	mov	r1, r4
 8002b76:	4628      	mov	r0, r5
 8002b78:	f7ff fdca 	bl	8002710 <_fflush_r>
 8002b7c:	2800      	cmp	r0, #0
 8002b7e:	d1ed      	bne.n	8002b5c <__swbuf_r+0x2a>
 8002b80:	68a3      	ldr	r3, [r4, #8]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	60a3      	str	r3, [r4, #8]
 8002b86:	6823      	ldr	r3, [r4, #0]
 8002b88:	1c5a      	adds	r2, r3, #1
 8002b8a:	6022      	str	r2, [r4, #0]
 8002b8c:	701e      	strb	r6, [r3, #0]
 8002b8e:	6962      	ldr	r2, [r4, #20]
 8002b90:	1c43      	adds	r3, r0, #1
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d004      	beq.n	8002ba0 <__swbuf_r+0x6e>
 8002b96:	89a3      	ldrh	r3, [r4, #12]
 8002b98:	07db      	lsls	r3, r3, #31
 8002b9a:	d5e1      	bpl.n	8002b60 <__swbuf_r+0x2e>
 8002b9c:	2e0a      	cmp	r6, #10
 8002b9e:	d1df      	bne.n	8002b60 <__swbuf_r+0x2e>
 8002ba0:	4621      	mov	r1, r4
 8002ba2:	4628      	mov	r0, r5
 8002ba4:	f7ff fdb4 	bl	8002710 <_fflush_r>
 8002ba8:	2800      	cmp	r0, #0
 8002baa:	d0d9      	beq.n	8002b60 <__swbuf_r+0x2e>
 8002bac:	e7d6      	b.n	8002b5c <__swbuf_r+0x2a>
	...

08002bb0 <__swsetup_r>:
 8002bb0:	b538      	push	{r3, r4, r5, lr}
 8002bb2:	4b29      	ldr	r3, [pc, #164]	@ (8002c58 <__swsetup_r+0xa8>)
 8002bb4:	4605      	mov	r5, r0
 8002bb6:	6818      	ldr	r0, [r3, #0]
 8002bb8:	460c      	mov	r4, r1
 8002bba:	b118      	cbz	r0, 8002bc4 <__swsetup_r+0x14>
 8002bbc:	6a03      	ldr	r3, [r0, #32]
 8002bbe:	b90b      	cbnz	r3, 8002bc4 <__swsetup_r+0x14>
 8002bc0:	f7ff fe6e 	bl	80028a0 <__sinit>
 8002bc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002bc8:	0719      	lsls	r1, r3, #28
 8002bca:	d422      	bmi.n	8002c12 <__swsetup_r+0x62>
 8002bcc:	06da      	lsls	r2, r3, #27
 8002bce:	d407      	bmi.n	8002be0 <__swsetup_r+0x30>
 8002bd0:	2209      	movs	r2, #9
 8002bd2:	602a      	str	r2, [r5, #0]
 8002bd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bdc:	81a3      	strh	r3, [r4, #12]
 8002bde:	e033      	b.n	8002c48 <__swsetup_r+0x98>
 8002be0:	0758      	lsls	r0, r3, #29
 8002be2:	d512      	bpl.n	8002c0a <__swsetup_r+0x5a>
 8002be4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002be6:	b141      	cbz	r1, 8002bfa <__swsetup_r+0x4a>
 8002be8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002bec:	4299      	cmp	r1, r3
 8002bee:	d002      	beq.n	8002bf6 <__swsetup_r+0x46>
 8002bf0:	4628      	mov	r0, r5
 8002bf2:	f000 f8c1 	bl	8002d78 <_free_r>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	6363      	str	r3, [r4, #52]	@ 0x34
 8002bfa:	89a3      	ldrh	r3, [r4, #12]
 8002bfc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002c00:	81a3      	strh	r3, [r4, #12]
 8002c02:	2300      	movs	r3, #0
 8002c04:	6063      	str	r3, [r4, #4]
 8002c06:	6923      	ldr	r3, [r4, #16]
 8002c08:	6023      	str	r3, [r4, #0]
 8002c0a:	89a3      	ldrh	r3, [r4, #12]
 8002c0c:	f043 0308 	orr.w	r3, r3, #8
 8002c10:	81a3      	strh	r3, [r4, #12]
 8002c12:	6923      	ldr	r3, [r4, #16]
 8002c14:	b94b      	cbnz	r3, 8002c2a <__swsetup_r+0x7a>
 8002c16:	89a3      	ldrh	r3, [r4, #12]
 8002c18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002c1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c20:	d003      	beq.n	8002c2a <__swsetup_r+0x7a>
 8002c22:	4621      	mov	r1, r4
 8002c24:	4628      	mov	r0, r5
 8002c26:	f001 f902 	bl	8003e2e <__smakebuf_r>
 8002c2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c2e:	f013 0201 	ands.w	r2, r3, #1
 8002c32:	d00a      	beq.n	8002c4a <__swsetup_r+0x9a>
 8002c34:	2200      	movs	r2, #0
 8002c36:	60a2      	str	r2, [r4, #8]
 8002c38:	6962      	ldr	r2, [r4, #20]
 8002c3a:	4252      	negs	r2, r2
 8002c3c:	61a2      	str	r2, [r4, #24]
 8002c3e:	6922      	ldr	r2, [r4, #16]
 8002c40:	b942      	cbnz	r2, 8002c54 <__swsetup_r+0xa4>
 8002c42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002c46:	d1c5      	bne.n	8002bd4 <__swsetup_r+0x24>
 8002c48:	bd38      	pop	{r3, r4, r5, pc}
 8002c4a:	0799      	lsls	r1, r3, #30
 8002c4c:	bf58      	it	pl
 8002c4e:	6962      	ldrpl	r2, [r4, #20]
 8002c50:	60a2      	str	r2, [r4, #8]
 8002c52:	e7f4      	b.n	8002c3e <__swsetup_r+0x8e>
 8002c54:	2000      	movs	r0, #0
 8002c56:	e7f7      	b.n	8002c48 <__swsetup_r+0x98>
 8002c58:	20000cd8 	.word	0x20000cd8

08002c5c <memset>:
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	4402      	add	r2, r0
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d100      	bne.n	8002c66 <memset+0xa>
 8002c64:	4770      	bx	lr
 8002c66:	f803 1b01 	strb.w	r1, [r3], #1
 8002c6a:	e7f9      	b.n	8002c60 <memset+0x4>

08002c6c <strncmp>:
 8002c6c:	b510      	push	{r4, lr}
 8002c6e:	b16a      	cbz	r2, 8002c8c <strncmp+0x20>
 8002c70:	3901      	subs	r1, #1
 8002c72:	1884      	adds	r4, r0, r2
 8002c74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c78:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d103      	bne.n	8002c88 <strncmp+0x1c>
 8002c80:	42a0      	cmp	r0, r4
 8002c82:	d001      	beq.n	8002c88 <strncmp+0x1c>
 8002c84:	2a00      	cmp	r2, #0
 8002c86:	d1f5      	bne.n	8002c74 <strncmp+0x8>
 8002c88:	1ad0      	subs	r0, r2, r3
 8002c8a:	bd10      	pop	{r4, pc}
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	e7fc      	b.n	8002c8a <strncmp+0x1e>

08002c90 <_close_r>:
 8002c90:	b538      	push	{r3, r4, r5, lr}
 8002c92:	2300      	movs	r3, #0
 8002c94:	4d05      	ldr	r5, [pc, #20]	@ (8002cac <_close_r+0x1c>)
 8002c96:	4604      	mov	r4, r0
 8002c98:	4608      	mov	r0, r1
 8002c9a:	602b      	str	r3, [r5, #0]
 8002c9c:	f7fe fd33 	bl	8001706 <_close>
 8002ca0:	1c43      	adds	r3, r0, #1
 8002ca2:	d102      	bne.n	8002caa <_close_r+0x1a>
 8002ca4:	682b      	ldr	r3, [r5, #0]
 8002ca6:	b103      	cbz	r3, 8002caa <_close_r+0x1a>
 8002ca8:	6023      	str	r3, [r4, #0]
 8002caa:	bd38      	pop	{r3, r4, r5, pc}
 8002cac:	20001138 	.word	0x20001138

08002cb0 <_lseek_r>:
 8002cb0:	b538      	push	{r3, r4, r5, lr}
 8002cb2:	4604      	mov	r4, r0
 8002cb4:	4608      	mov	r0, r1
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	2200      	movs	r2, #0
 8002cba:	4d05      	ldr	r5, [pc, #20]	@ (8002cd0 <_lseek_r+0x20>)
 8002cbc:	602a      	str	r2, [r5, #0]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	f7fe fd45 	bl	800174e <_lseek>
 8002cc4:	1c43      	adds	r3, r0, #1
 8002cc6:	d102      	bne.n	8002cce <_lseek_r+0x1e>
 8002cc8:	682b      	ldr	r3, [r5, #0]
 8002cca:	b103      	cbz	r3, 8002cce <_lseek_r+0x1e>
 8002ccc:	6023      	str	r3, [r4, #0]
 8002cce:	bd38      	pop	{r3, r4, r5, pc}
 8002cd0:	20001138 	.word	0x20001138

08002cd4 <_read_r>:
 8002cd4:	b538      	push	{r3, r4, r5, lr}
 8002cd6:	4604      	mov	r4, r0
 8002cd8:	4608      	mov	r0, r1
 8002cda:	4611      	mov	r1, r2
 8002cdc:	2200      	movs	r2, #0
 8002cde:	4d05      	ldr	r5, [pc, #20]	@ (8002cf4 <_read_r+0x20>)
 8002ce0:	602a      	str	r2, [r5, #0]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	f7fe fcf2 	bl	80016cc <_read>
 8002ce8:	1c43      	adds	r3, r0, #1
 8002cea:	d102      	bne.n	8002cf2 <_read_r+0x1e>
 8002cec:	682b      	ldr	r3, [r5, #0]
 8002cee:	b103      	cbz	r3, 8002cf2 <_read_r+0x1e>
 8002cf0:	6023      	str	r3, [r4, #0]
 8002cf2:	bd38      	pop	{r3, r4, r5, pc}
 8002cf4:	20001138 	.word	0x20001138

08002cf8 <_write_r>:
 8002cf8:	b538      	push	{r3, r4, r5, lr}
 8002cfa:	4604      	mov	r4, r0
 8002cfc:	4608      	mov	r0, r1
 8002cfe:	4611      	mov	r1, r2
 8002d00:	2200      	movs	r2, #0
 8002d02:	4d05      	ldr	r5, [pc, #20]	@ (8002d18 <_write_r+0x20>)
 8002d04:	602a      	str	r2, [r5, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	f7fd fd74 	bl	80007f4 <_write>
 8002d0c:	1c43      	adds	r3, r0, #1
 8002d0e:	d102      	bne.n	8002d16 <_write_r+0x1e>
 8002d10:	682b      	ldr	r3, [r5, #0]
 8002d12:	b103      	cbz	r3, 8002d16 <_write_r+0x1e>
 8002d14:	6023      	str	r3, [r4, #0]
 8002d16:	bd38      	pop	{r3, r4, r5, pc}
 8002d18:	20001138 	.word	0x20001138

08002d1c <__errno>:
 8002d1c:	4b01      	ldr	r3, [pc, #4]	@ (8002d24 <__errno+0x8>)
 8002d1e:	6818      	ldr	r0, [r3, #0]
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	20000cd8 	.word	0x20000cd8

08002d28 <__libc_init_array>:
 8002d28:	b570      	push	{r4, r5, r6, lr}
 8002d2a:	2600      	movs	r6, #0
 8002d2c:	4d0c      	ldr	r5, [pc, #48]	@ (8002d60 <__libc_init_array+0x38>)
 8002d2e:	4c0d      	ldr	r4, [pc, #52]	@ (8002d64 <__libc_init_array+0x3c>)
 8002d30:	1b64      	subs	r4, r4, r5
 8002d32:	10a4      	asrs	r4, r4, #2
 8002d34:	42a6      	cmp	r6, r4
 8002d36:	d109      	bne.n	8002d4c <__libc_init_array+0x24>
 8002d38:	f001 fab0 	bl	800429c <_init>
 8002d3c:	2600      	movs	r6, #0
 8002d3e:	4d0a      	ldr	r5, [pc, #40]	@ (8002d68 <__libc_init_array+0x40>)
 8002d40:	4c0a      	ldr	r4, [pc, #40]	@ (8002d6c <__libc_init_array+0x44>)
 8002d42:	1b64      	subs	r4, r4, r5
 8002d44:	10a4      	asrs	r4, r4, #2
 8002d46:	42a6      	cmp	r6, r4
 8002d48:	d105      	bne.n	8002d56 <__libc_init_array+0x2e>
 8002d4a:	bd70      	pop	{r4, r5, r6, pc}
 8002d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d50:	4798      	blx	r3
 8002d52:	3601      	adds	r6, #1
 8002d54:	e7ee      	b.n	8002d34 <__libc_init_array+0xc>
 8002d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d5a:	4798      	blx	r3
 8002d5c:	3601      	adds	r6, #1
 8002d5e:	e7f2      	b.n	8002d46 <__libc_init_array+0x1e>
 8002d60:	08004e10 	.word	0x08004e10
 8002d64:	08004e10 	.word	0x08004e10
 8002d68:	08004e10 	.word	0x08004e10
 8002d6c:	08004e14 	.word	0x08004e14

08002d70 <__retarget_lock_init_recursive>:
 8002d70:	4770      	bx	lr

08002d72 <__retarget_lock_acquire_recursive>:
 8002d72:	4770      	bx	lr

08002d74 <__retarget_lock_release_recursive>:
 8002d74:	4770      	bx	lr
	...

08002d78 <_free_r>:
 8002d78:	b538      	push	{r3, r4, r5, lr}
 8002d7a:	4605      	mov	r5, r0
 8002d7c:	2900      	cmp	r1, #0
 8002d7e:	d040      	beq.n	8002e02 <_free_r+0x8a>
 8002d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d84:	1f0c      	subs	r4, r1, #4
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	bfb8      	it	lt
 8002d8a:	18e4      	addlt	r4, r4, r3
 8002d8c:	f000 f8de 	bl	8002f4c <__malloc_lock>
 8002d90:	4a1c      	ldr	r2, [pc, #112]	@ (8002e04 <_free_r+0x8c>)
 8002d92:	6813      	ldr	r3, [r2, #0]
 8002d94:	b933      	cbnz	r3, 8002da4 <_free_r+0x2c>
 8002d96:	6063      	str	r3, [r4, #4]
 8002d98:	6014      	str	r4, [r2, #0]
 8002d9a:	4628      	mov	r0, r5
 8002d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002da0:	f000 b8da 	b.w	8002f58 <__malloc_unlock>
 8002da4:	42a3      	cmp	r3, r4
 8002da6:	d908      	bls.n	8002dba <_free_r+0x42>
 8002da8:	6820      	ldr	r0, [r4, #0]
 8002daa:	1821      	adds	r1, r4, r0
 8002dac:	428b      	cmp	r3, r1
 8002dae:	bf01      	itttt	eq
 8002db0:	6819      	ldreq	r1, [r3, #0]
 8002db2:	685b      	ldreq	r3, [r3, #4]
 8002db4:	1809      	addeq	r1, r1, r0
 8002db6:	6021      	streq	r1, [r4, #0]
 8002db8:	e7ed      	b.n	8002d96 <_free_r+0x1e>
 8002dba:	461a      	mov	r2, r3
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	b10b      	cbz	r3, 8002dc4 <_free_r+0x4c>
 8002dc0:	42a3      	cmp	r3, r4
 8002dc2:	d9fa      	bls.n	8002dba <_free_r+0x42>
 8002dc4:	6811      	ldr	r1, [r2, #0]
 8002dc6:	1850      	adds	r0, r2, r1
 8002dc8:	42a0      	cmp	r0, r4
 8002dca:	d10b      	bne.n	8002de4 <_free_r+0x6c>
 8002dcc:	6820      	ldr	r0, [r4, #0]
 8002dce:	4401      	add	r1, r0
 8002dd0:	1850      	adds	r0, r2, r1
 8002dd2:	4283      	cmp	r3, r0
 8002dd4:	6011      	str	r1, [r2, #0]
 8002dd6:	d1e0      	bne.n	8002d9a <_free_r+0x22>
 8002dd8:	6818      	ldr	r0, [r3, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	4408      	add	r0, r1
 8002dde:	6010      	str	r0, [r2, #0]
 8002de0:	6053      	str	r3, [r2, #4]
 8002de2:	e7da      	b.n	8002d9a <_free_r+0x22>
 8002de4:	d902      	bls.n	8002dec <_free_r+0x74>
 8002de6:	230c      	movs	r3, #12
 8002de8:	602b      	str	r3, [r5, #0]
 8002dea:	e7d6      	b.n	8002d9a <_free_r+0x22>
 8002dec:	6820      	ldr	r0, [r4, #0]
 8002dee:	1821      	adds	r1, r4, r0
 8002df0:	428b      	cmp	r3, r1
 8002df2:	bf01      	itttt	eq
 8002df4:	6819      	ldreq	r1, [r3, #0]
 8002df6:	685b      	ldreq	r3, [r3, #4]
 8002df8:	1809      	addeq	r1, r1, r0
 8002dfa:	6021      	streq	r1, [r4, #0]
 8002dfc:	6063      	str	r3, [r4, #4]
 8002dfe:	6054      	str	r4, [r2, #4]
 8002e00:	e7cb      	b.n	8002d9a <_free_r+0x22>
 8002e02:	bd38      	pop	{r3, r4, r5, pc}
 8002e04:	20001144 	.word	0x20001144

08002e08 <sbrk_aligned>:
 8002e08:	b570      	push	{r4, r5, r6, lr}
 8002e0a:	4e0f      	ldr	r6, [pc, #60]	@ (8002e48 <sbrk_aligned+0x40>)
 8002e0c:	460c      	mov	r4, r1
 8002e0e:	6831      	ldr	r1, [r6, #0]
 8002e10:	4605      	mov	r5, r0
 8002e12:	b911      	cbnz	r1, 8002e1a <sbrk_aligned+0x12>
 8002e14:	f001 f8f4 	bl	8004000 <_sbrk_r>
 8002e18:	6030      	str	r0, [r6, #0]
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	4628      	mov	r0, r5
 8002e1e:	f001 f8ef 	bl	8004000 <_sbrk_r>
 8002e22:	1c43      	adds	r3, r0, #1
 8002e24:	d103      	bne.n	8002e2e <sbrk_aligned+0x26>
 8002e26:	f04f 34ff 	mov.w	r4, #4294967295
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	bd70      	pop	{r4, r5, r6, pc}
 8002e2e:	1cc4      	adds	r4, r0, #3
 8002e30:	f024 0403 	bic.w	r4, r4, #3
 8002e34:	42a0      	cmp	r0, r4
 8002e36:	d0f8      	beq.n	8002e2a <sbrk_aligned+0x22>
 8002e38:	1a21      	subs	r1, r4, r0
 8002e3a:	4628      	mov	r0, r5
 8002e3c:	f001 f8e0 	bl	8004000 <_sbrk_r>
 8002e40:	3001      	adds	r0, #1
 8002e42:	d1f2      	bne.n	8002e2a <sbrk_aligned+0x22>
 8002e44:	e7ef      	b.n	8002e26 <sbrk_aligned+0x1e>
 8002e46:	bf00      	nop
 8002e48:	20001140 	.word	0x20001140

08002e4c <_malloc_r>:
 8002e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e50:	1ccd      	adds	r5, r1, #3
 8002e52:	f025 0503 	bic.w	r5, r5, #3
 8002e56:	3508      	adds	r5, #8
 8002e58:	2d0c      	cmp	r5, #12
 8002e5a:	bf38      	it	cc
 8002e5c:	250c      	movcc	r5, #12
 8002e5e:	2d00      	cmp	r5, #0
 8002e60:	4606      	mov	r6, r0
 8002e62:	db01      	blt.n	8002e68 <_malloc_r+0x1c>
 8002e64:	42a9      	cmp	r1, r5
 8002e66:	d904      	bls.n	8002e72 <_malloc_r+0x26>
 8002e68:	230c      	movs	r3, #12
 8002e6a:	6033      	str	r3, [r6, #0]
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002f48 <_malloc_r+0xfc>
 8002e76:	f000 f869 	bl	8002f4c <__malloc_lock>
 8002e7a:	f8d8 3000 	ldr.w	r3, [r8]
 8002e7e:	461c      	mov	r4, r3
 8002e80:	bb44      	cbnz	r4, 8002ed4 <_malloc_r+0x88>
 8002e82:	4629      	mov	r1, r5
 8002e84:	4630      	mov	r0, r6
 8002e86:	f7ff ffbf 	bl	8002e08 <sbrk_aligned>
 8002e8a:	1c43      	adds	r3, r0, #1
 8002e8c:	4604      	mov	r4, r0
 8002e8e:	d158      	bne.n	8002f42 <_malloc_r+0xf6>
 8002e90:	f8d8 4000 	ldr.w	r4, [r8]
 8002e94:	4627      	mov	r7, r4
 8002e96:	2f00      	cmp	r7, #0
 8002e98:	d143      	bne.n	8002f22 <_malloc_r+0xd6>
 8002e9a:	2c00      	cmp	r4, #0
 8002e9c:	d04b      	beq.n	8002f36 <_malloc_r+0xea>
 8002e9e:	6823      	ldr	r3, [r4, #0]
 8002ea0:	4639      	mov	r1, r7
 8002ea2:	4630      	mov	r0, r6
 8002ea4:	eb04 0903 	add.w	r9, r4, r3
 8002ea8:	f001 f8aa 	bl	8004000 <_sbrk_r>
 8002eac:	4581      	cmp	r9, r0
 8002eae:	d142      	bne.n	8002f36 <_malloc_r+0xea>
 8002eb0:	6821      	ldr	r1, [r4, #0]
 8002eb2:	4630      	mov	r0, r6
 8002eb4:	1a6d      	subs	r5, r5, r1
 8002eb6:	4629      	mov	r1, r5
 8002eb8:	f7ff ffa6 	bl	8002e08 <sbrk_aligned>
 8002ebc:	3001      	adds	r0, #1
 8002ebe:	d03a      	beq.n	8002f36 <_malloc_r+0xea>
 8002ec0:	6823      	ldr	r3, [r4, #0]
 8002ec2:	442b      	add	r3, r5
 8002ec4:	6023      	str	r3, [r4, #0]
 8002ec6:	f8d8 3000 	ldr.w	r3, [r8]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	bb62      	cbnz	r2, 8002f28 <_malloc_r+0xdc>
 8002ece:	f8c8 7000 	str.w	r7, [r8]
 8002ed2:	e00f      	b.n	8002ef4 <_malloc_r+0xa8>
 8002ed4:	6822      	ldr	r2, [r4, #0]
 8002ed6:	1b52      	subs	r2, r2, r5
 8002ed8:	d420      	bmi.n	8002f1c <_malloc_r+0xd0>
 8002eda:	2a0b      	cmp	r2, #11
 8002edc:	d917      	bls.n	8002f0e <_malloc_r+0xc2>
 8002ede:	1961      	adds	r1, r4, r5
 8002ee0:	42a3      	cmp	r3, r4
 8002ee2:	6025      	str	r5, [r4, #0]
 8002ee4:	bf18      	it	ne
 8002ee6:	6059      	strne	r1, [r3, #4]
 8002ee8:	6863      	ldr	r3, [r4, #4]
 8002eea:	bf08      	it	eq
 8002eec:	f8c8 1000 	streq.w	r1, [r8]
 8002ef0:	5162      	str	r2, [r4, r5]
 8002ef2:	604b      	str	r3, [r1, #4]
 8002ef4:	4630      	mov	r0, r6
 8002ef6:	f000 f82f 	bl	8002f58 <__malloc_unlock>
 8002efa:	f104 000b 	add.w	r0, r4, #11
 8002efe:	1d23      	adds	r3, r4, #4
 8002f00:	f020 0007 	bic.w	r0, r0, #7
 8002f04:	1ac2      	subs	r2, r0, r3
 8002f06:	bf1c      	itt	ne
 8002f08:	1a1b      	subne	r3, r3, r0
 8002f0a:	50a3      	strne	r3, [r4, r2]
 8002f0c:	e7af      	b.n	8002e6e <_malloc_r+0x22>
 8002f0e:	6862      	ldr	r2, [r4, #4]
 8002f10:	42a3      	cmp	r3, r4
 8002f12:	bf0c      	ite	eq
 8002f14:	f8c8 2000 	streq.w	r2, [r8]
 8002f18:	605a      	strne	r2, [r3, #4]
 8002f1a:	e7eb      	b.n	8002ef4 <_malloc_r+0xa8>
 8002f1c:	4623      	mov	r3, r4
 8002f1e:	6864      	ldr	r4, [r4, #4]
 8002f20:	e7ae      	b.n	8002e80 <_malloc_r+0x34>
 8002f22:	463c      	mov	r4, r7
 8002f24:	687f      	ldr	r7, [r7, #4]
 8002f26:	e7b6      	b.n	8002e96 <_malloc_r+0x4a>
 8002f28:	461a      	mov	r2, r3
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	42a3      	cmp	r3, r4
 8002f2e:	d1fb      	bne.n	8002f28 <_malloc_r+0xdc>
 8002f30:	2300      	movs	r3, #0
 8002f32:	6053      	str	r3, [r2, #4]
 8002f34:	e7de      	b.n	8002ef4 <_malloc_r+0xa8>
 8002f36:	230c      	movs	r3, #12
 8002f38:	4630      	mov	r0, r6
 8002f3a:	6033      	str	r3, [r6, #0]
 8002f3c:	f000 f80c 	bl	8002f58 <__malloc_unlock>
 8002f40:	e794      	b.n	8002e6c <_malloc_r+0x20>
 8002f42:	6005      	str	r5, [r0, #0]
 8002f44:	e7d6      	b.n	8002ef4 <_malloc_r+0xa8>
 8002f46:	bf00      	nop
 8002f48:	20001144 	.word	0x20001144

08002f4c <__malloc_lock>:
 8002f4c:	4801      	ldr	r0, [pc, #4]	@ (8002f54 <__malloc_lock+0x8>)
 8002f4e:	f7ff bf10 	b.w	8002d72 <__retarget_lock_acquire_recursive>
 8002f52:	bf00      	nop
 8002f54:	2000113c 	.word	0x2000113c

08002f58 <__malloc_unlock>:
 8002f58:	4801      	ldr	r0, [pc, #4]	@ (8002f60 <__malloc_unlock+0x8>)
 8002f5a:	f7ff bf0b 	b.w	8002d74 <__retarget_lock_release_recursive>
 8002f5e:	bf00      	nop
 8002f60:	2000113c 	.word	0x2000113c

08002f64 <__ssputs_r>:
 8002f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f68:	461f      	mov	r7, r3
 8002f6a:	688e      	ldr	r6, [r1, #8]
 8002f6c:	4682      	mov	sl, r0
 8002f6e:	42be      	cmp	r6, r7
 8002f70:	460c      	mov	r4, r1
 8002f72:	4690      	mov	r8, r2
 8002f74:	680b      	ldr	r3, [r1, #0]
 8002f76:	d82d      	bhi.n	8002fd4 <__ssputs_r+0x70>
 8002f78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002f7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002f80:	d026      	beq.n	8002fd0 <__ssputs_r+0x6c>
 8002f82:	6965      	ldr	r5, [r4, #20]
 8002f84:	6909      	ldr	r1, [r1, #16]
 8002f86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f8a:	eba3 0901 	sub.w	r9, r3, r1
 8002f8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002f92:	1c7b      	adds	r3, r7, #1
 8002f94:	444b      	add	r3, r9
 8002f96:	106d      	asrs	r5, r5, #1
 8002f98:	429d      	cmp	r5, r3
 8002f9a:	bf38      	it	cc
 8002f9c:	461d      	movcc	r5, r3
 8002f9e:	0553      	lsls	r3, r2, #21
 8002fa0:	d527      	bpl.n	8002ff2 <__ssputs_r+0x8e>
 8002fa2:	4629      	mov	r1, r5
 8002fa4:	f7ff ff52 	bl	8002e4c <_malloc_r>
 8002fa8:	4606      	mov	r6, r0
 8002faa:	b360      	cbz	r0, 8003006 <__ssputs_r+0xa2>
 8002fac:	464a      	mov	r2, r9
 8002fae:	6921      	ldr	r1, [r4, #16]
 8002fb0:	f001 f844 	bl	800403c <memcpy>
 8002fb4:	89a3      	ldrh	r3, [r4, #12]
 8002fb6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002fba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fbe:	81a3      	strh	r3, [r4, #12]
 8002fc0:	6126      	str	r6, [r4, #16]
 8002fc2:	444e      	add	r6, r9
 8002fc4:	6026      	str	r6, [r4, #0]
 8002fc6:	463e      	mov	r6, r7
 8002fc8:	6165      	str	r5, [r4, #20]
 8002fca:	eba5 0509 	sub.w	r5, r5, r9
 8002fce:	60a5      	str	r5, [r4, #8]
 8002fd0:	42be      	cmp	r6, r7
 8002fd2:	d900      	bls.n	8002fd6 <__ssputs_r+0x72>
 8002fd4:	463e      	mov	r6, r7
 8002fd6:	4632      	mov	r2, r6
 8002fd8:	4641      	mov	r1, r8
 8002fda:	6820      	ldr	r0, [r4, #0]
 8002fdc:	f000 ffd4 	bl	8003f88 <memmove>
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	68a3      	ldr	r3, [r4, #8]
 8002fe4:	1b9b      	subs	r3, r3, r6
 8002fe6:	60a3      	str	r3, [r4, #8]
 8002fe8:	6823      	ldr	r3, [r4, #0]
 8002fea:	4433      	add	r3, r6
 8002fec:	6023      	str	r3, [r4, #0]
 8002fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ff2:	462a      	mov	r2, r5
 8002ff4:	f001 f830 	bl	8004058 <_realloc_r>
 8002ff8:	4606      	mov	r6, r0
 8002ffa:	2800      	cmp	r0, #0
 8002ffc:	d1e0      	bne.n	8002fc0 <__ssputs_r+0x5c>
 8002ffe:	4650      	mov	r0, sl
 8003000:	6921      	ldr	r1, [r4, #16]
 8003002:	f7ff feb9 	bl	8002d78 <_free_r>
 8003006:	230c      	movs	r3, #12
 8003008:	f8ca 3000 	str.w	r3, [sl]
 800300c:	89a3      	ldrh	r3, [r4, #12]
 800300e:	f04f 30ff 	mov.w	r0, #4294967295
 8003012:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003016:	81a3      	strh	r3, [r4, #12]
 8003018:	e7e9      	b.n	8002fee <__ssputs_r+0x8a>
	...

0800301c <_svfiprintf_r>:
 800301c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003020:	4698      	mov	r8, r3
 8003022:	898b      	ldrh	r3, [r1, #12]
 8003024:	4607      	mov	r7, r0
 8003026:	061b      	lsls	r3, r3, #24
 8003028:	460d      	mov	r5, r1
 800302a:	4614      	mov	r4, r2
 800302c:	b09d      	sub	sp, #116	@ 0x74
 800302e:	d510      	bpl.n	8003052 <_svfiprintf_r+0x36>
 8003030:	690b      	ldr	r3, [r1, #16]
 8003032:	b973      	cbnz	r3, 8003052 <_svfiprintf_r+0x36>
 8003034:	2140      	movs	r1, #64	@ 0x40
 8003036:	f7ff ff09 	bl	8002e4c <_malloc_r>
 800303a:	6028      	str	r0, [r5, #0]
 800303c:	6128      	str	r0, [r5, #16]
 800303e:	b930      	cbnz	r0, 800304e <_svfiprintf_r+0x32>
 8003040:	230c      	movs	r3, #12
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	f04f 30ff 	mov.w	r0, #4294967295
 8003048:	b01d      	add	sp, #116	@ 0x74
 800304a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800304e:	2340      	movs	r3, #64	@ 0x40
 8003050:	616b      	str	r3, [r5, #20]
 8003052:	2300      	movs	r3, #0
 8003054:	9309      	str	r3, [sp, #36]	@ 0x24
 8003056:	2320      	movs	r3, #32
 8003058:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800305c:	2330      	movs	r3, #48	@ 0x30
 800305e:	f04f 0901 	mov.w	r9, #1
 8003062:	f8cd 800c 	str.w	r8, [sp, #12]
 8003066:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003200 <_svfiprintf_r+0x1e4>
 800306a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800306e:	4623      	mov	r3, r4
 8003070:	469a      	mov	sl, r3
 8003072:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003076:	b10a      	cbz	r2, 800307c <_svfiprintf_r+0x60>
 8003078:	2a25      	cmp	r2, #37	@ 0x25
 800307a:	d1f9      	bne.n	8003070 <_svfiprintf_r+0x54>
 800307c:	ebba 0b04 	subs.w	fp, sl, r4
 8003080:	d00b      	beq.n	800309a <_svfiprintf_r+0x7e>
 8003082:	465b      	mov	r3, fp
 8003084:	4622      	mov	r2, r4
 8003086:	4629      	mov	r1, r5
 8003088:	4638      	mov	r0, r7
 800308a:	f7ff ff6b 	bl	8002f64 <__ssputs_r>
 800308e:	3001      	adds	r0, #1
 8003090:	f000 80a7 	beq.w	80031e2 <_svfiprintf_r+0x1c6>
 8003094:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003096:	445a      	add	r2, fp
 8003098:	9209      	str	r2, [sp, #36]	@ 0x24
 800309a:	f89a 3000 	ldrb.w	r3, [sl]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 809f 	beq.w	80031e2 <_svfiprintf_r+0x1c6>
 80030a4:	2300      	movs	r3, #0
 80030a6:	f04f 32ff 	mov.w	r2, #4294967295
 80030aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80030ae:	f10a 0a01 	add.w	sl, sl, #1
 80030b2:	9304      	str	r3, [sp, #16]
 80030b4:	9307      	str	r3, [sp, #28]
 80030b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80030ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80030bc:	4654      	mov	r4, sl
 80030be:	2205      	movs	r2, #5
 80030c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030c4:	484e      	ldr	r0, [pc, #312]	@ (8003200 <_svfiprintf_r+0x1e4>)
 80030c6:	f000 ffab 	bl	8004020 <memchr>
 80030ca:	9a04      	ldr	r2, [sp, #16]
 80030cc:	b9d8      	cbnz	r0, 8003106 <_svfiprintf_r+0xea>
 80030ce:	06d0      	lsls	r0, r2, #27
 80030d0:	bf44      	itt	mi
 80030d2:	2320      	movmi	r3, #32
 80030d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80030d8:	0711      	lsls	r1, r2, #28
 80030da:	bf44      	itt	mi
 80030dc:	232b      	movmi	r3, #43	@ 0x2b
 80030de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80030e2:	f89a 3000 	ldrb.w	r3, [sl]
 80030e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80030e8:	d015      	beq.n	8003116 <_svfiprintf_r+0xfa>
 80030ea:	4654      	mov	r4, sl
 80030ec:	2000      	movs	r0, #0
 80030ee:	f04f 0c0a 	mov.w	ip, #10
 80030f2:	9a07      	ldr	r2, [sp, #28]
 80030f4:	4621      	mov	r1, r4
 80030f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030fa:	3b30      	subs	r3, #48	@ 0x30
 80030fc:	2b09      	cmp	r3, #9
 80030fe:	d94b      	bls.n	8003198 <_svfiprintf_r+0x17c>
 8003100:	b1b0      	cbz	r0, 8003130 <_svfiprintf_r+0x114>
 8003102:	9207      	str	r2, [sp, #28]
 8003104:	e014      	b.n	8003130 <_svfiprintf_r+0x114>
 8003106:	eba0 0308 	sub.w	r3, r0, r8
 800310a:	fa09 f303 	lsl.w	r3, r9, r3
 800310e:	4313      	orrs	r3, r2
 8003110:	46a2      	mov	sl, r4
 8003112:	9304      	str	r3, [sp, #16]
 8003114:	e7d2      	b.n	80030bc <_svfiprintf_r+0xa0>
 8003116:	9b03      	ldr	r3, [sp, #12]
 8003118:	1d19      	adds	r1, r3, #4
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	9103      	str	r1, [sp, #12]
 800311e:	2b00      	cmp	r3, #0
 8003120:	bfbb      	ittet	lt
 8003122:	425b      	neglt	r3, r3
 8003124:	f042 0202 	orrlt.w	r2, r2, #2
 8003128:	9307      	strge	r3, [sp, #28]
 800312a:	9307      	strlt	r3, [sp, #28]
 800312c:	bfb8      	it	lt
 800312e:	9204      	strlt	r2, [sp, #16]
 8003130:	7823      	ldrb	r3, [r4, #0]
 8003132:	2b2e      	cmp	r3, #46	@ 0x2e
 8003134:	d10a      	bne.n	800314c <_svfiprintf_r+0x130>
 8003136:	7863      	ldrb	r3, [r4, #1]
 8003138:	2b2a      	cmp	r3, #42	@ 0x2a
 800313a:	d132      	bne.n	80031a2 <_svfiprintf_r+0x186>
 800313c:	9b03      	ldr	r3, [sp, #12]
 800313e:	3402      	adds	r4, #2
 8003140:	1d1a      	adds	r2, r3, #4
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	9203      	str	r2, [sp, #12]
 8003146:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800314a:	9305      	str	r3, [sp, #20]
 800314c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003204 <_svfiprintf_r+0x1e8>
 8003150:	2203      	movs	r2, #3
 8003152:	4650      	mov	r0, sl
 8003154:	7821      	ldrb	r1, [r4, #0]
 8003156:	f000 ff63 	bl	8004020 <memchr>
 800315a:	b138      	cbz	r0, 800316c <_svfiprintf_r+0x150>
 800315c:	2240      	movs	r2, #64	@ 0x40
 800315e:	9b04      	ldr	r3, [sp, #16]
 8003160:	eba0 000a 	sub.w	r0, r0, sl
 8003164:	4082      	lsls	r2, r0
 8003166:	4313      	orrs	r3, r2
 8003168:	3401      	adds	r4, #1
 800316a:	9304      	str	r3, [sp, #16]
 800316c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003170:	2206      	movs	r2, #6
 8003172:	4825      	ldr	r0, [pc, #148]	@ (8003208 <_svfiprintf_r+0x1ec>)
 8003174:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003178:	f000 ff52 	bl	8004020 <memchr>
 800317c:	2800      	cmp	r0, #0
 800317e:	d036      	beq.n	80031ee <_svfiprintf_r+0x1d2>
 8003180:	4b22      	ldr	r3, [pc, #136]	@ (800320c <_svfiprintf_r+0x1f0>)
 8003182:	bb1b      	cbnz	r3, 80031cc <_svfiprintf_r+0x1b0>
 8003184:	9b03      	ldr	r3, [sp, #12]
 8003186:	3307      	adds	r3, #7
 8003188:	f023 0307 	bic.w	r3, r3, #7
 800318c:	3308      	adds	r3, #8
 800318e:	9303      	str	r3, [sp, #12]
 8003190:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003192:	4433      	add	r3, r6
 8003194:	9309      	str	r3, [sp, #36]	@ 0x24
 8003196:	e76a      	b.n	800306e <_svfiprintf_r+0x52>
 8003198:	460c      	mov	r4, r1
 800319a:	2001      	movs	r0, #1
 800319c:	fb0c 3202 	mla	r2, ip, r2, r3
 80031a0:	e7a8      	b.n	80030f4 <_svfiprintf_r+0xd8>
 80031a2:	2300      	movs	r3, #0
 80031a4:	f04f 0c0a 	mov.w	ip, #10
 80031a8:	4619      	mov	r1, r3
 80031aa:	3401      	adds	r4, #1
 80031ac:	9305      	str	r3, [sp, #20]
 80031ae:	4620      	mov	r0, r4
 80031b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031b4:	3a30      	subs	r2, #48	@ 0x30
 80031b6:	2a09      	cmp	r2, #9
 80031b8:	d903      	bls.n	80031c2 <_svfiprintf_r+0x1a6>
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0c6      	beq.n	800314c <_svfiprintf_r+0x130>
 80031be:	9105      	str	r1, [sp, #20]
 80031c0:	e7c4      	b.n	800314c <_svfiprintf_r+0x130>
 80031c2:	4604      	mov	r4, r0
 80031c4:	2301      	movs	r3, #1
 80031c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80031ca:	e7f0      	b.n	80031ae <_svfiprintf_r+0x192>
 80031cc:	ab03      	add	r3, sp, #12
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	462a      	mov	r2, r5
 80031d2:	4638      	mov	r0, r7
 80031d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003210 <_svfiprintf_r+0x1f4>)
 80031d6:	a904      	add	r1, sp, #16
 80031d8:	f3af 8000 	nop.w
 80031dc:	1c42      	adds	r2, r0, #1
 80031de:	4606      	mov	r6, r0
 80031e0:	d1d6      	bne.n	8003190 <_svfiprintf_r+0x174>
 80031e2:	89ab      	ldrh	r3, [r5, #12]
 80031e4:	065b      	lsls	r3, r3, #25
 80031e6:	f53f af2d 	bmi.w	8003044 <_svfiprintf_r+0x28>
 80031ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80031ec:	e72c      	b.n	8003048 <_svfiprintf_r+0x2c>
 80031ee:	ab03      	add	r3, sp, #12
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	462a      	mov	r2, r5
 80031f4:	4638      	mov	r0, r7
 80031f6:	4b06      	ldr	r3, [pc, #24]	@ (8003210 <_svfiprintf_r+0x1f4>)
 80031f8:	a904      	add	r1, sp, #16
 80031fa:	f000 fb87 	bl	800390c <_printf_i>
 80031fe:	e7ed      	b.n	80031dc <_svfiprintf_r+0x1c0>
 8003200:	08004cb8 	.word	0x08004cb8
 8003204:	08004cbe 	.word	0x08004cbe
 8003208:	08004cc2 	.word	0x08004cc2
 800320c:	00000000 	.word	0x00000000
 8003210:	08002f65 	.word	0x08002f65

08003214 <_sungetc_r>:
 8003214:	b538      	push	{r3, r4, r5, lr}
 8003216:	1c4b      	adds	r3, r1, #1
 8003218:	4614      	mov	r4, r2
 800321a:	d103      	bne.n	8003224 <_sungetc_r+0x10>
 800321c:	f04f 35ff 	mov.w	r5, #4294967295
 8003220:	4628      	mov	r0, r5
 8003222:	bd38      	pop	{r3, r4, r5, pc}
 8003224:	8993      	ldrh	r3, [r2, #12]
 8003226:	b2cd      	uxtb	r5, r1
 8003228:	f023 0320 	bic.w	r3, r3, #32
 800322c:	8193      	strh	r3, [r2, #12]
 800322e:	6853      	ldr	r3, [r2, #4]
 8003230:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003232:	b18a      	cbz	r2, 8003258 <_sungetc_r+0x44>
 8003234:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003236:	429a      	cmp	r2, r3
 8003238:	dd08      	ble.n	800324c <_sungetc_r+0x38>
 800323a:	6823      	ldr	r3, [r4, #0]
 800323c:	1e5a      	subs	r2, r3, #1
 800323e:	6022      	str	r2, [r4, #0]
 8003240:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003244:	6863      	ldr	r3, [r4, #4]
 8003246:	3301      	adds	r3, #1
 8003248:	6063      	str	r3, [r4, #4]
 800324a:	e7e9      	b.n	8003220 <_sungetc_r+0xc>
 800324c:	4621      	mov	r1, r4
 800324e:	f000 fe63 	bl	8003f18 <__submore>
 8003252:	2800      	cmp	r0, #0
 8003254:	d0f1      	beq.n	800323a <_sungetc_r+0x26>
 8003256:	e7e1      	b.n	800321c <_sungetc_r+0x8>
 8003258:	6921      	ldr	r1, [r4, #16]
 800325a:	6822      	ldr	r2, [r4, #0]
 800325c:	b141      	cbz	r1, 8003270 <_sungetc_r+0x5c>
 800325e:	4291      	cmp	r1, r2
 8003260:	d206      	bcs.n	8003270 <_sungetc_r+0x5c>
 8003262:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8003266:	42a9      	cmp	r1, r5
 8003268:	d102      	bne.n	8003270 <_sungetc_r+0x5c>
 800326a:	3a01      	subs	r2, #1
 800326c:	6022      	str	r2, [r4, #0]
 800326e:	e7ea      	b.n	8003246 <_sungetc_r+0x32>
 8003270:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8003274:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003278:	6363      	str	r3, [r4, #52]	@ 0x34
 800327a:	2303      	movs	r3, #3
 800327c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800327e:	4623      	mov	r3, r4
 8003280:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003284:	6023      	str	r3, [r4, #0]
 8003286:	2301      	movs	r3, #1
 8003288:	e7de      	b.n	8003248 <_sungetc_r+0x34>

0800328a <__ssrefill_r>:
 800328a:	b510      	push	{r4, lr}
 800328c:	460c      	mov	r4, r1
 800328e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8003290:	b169      	cbz	r1, 80032ae <__ssrefill_r+0x24>
 8003292:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003296:	4299      	cmp	r1, r3
 8003298:	d001      	beq.n	800329e <__ssrefill_r+0x14>
 800329a:	f7ff fd6d 	bl	8002d78 <_free_r>
 800329e:	2000      	movs	r0, #0
 80032a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80032a2:	6360      	str	r0, [r4, #52]	@ 0x34
 80032a4:	6063      	str	r3, [r4, #4]
 80032a6:	b113      	cbz	r3, 80032ae <__ssrefill_r+0x24>
 80032a8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80032aa:	6023      	str	r3, [r4, #0]
 80032ac:	bd10      	pop	{r4, pc}
 80032ae:	6923      	ldr	r3, [r4, #16]
 80032b0:	f04f 30ff 	mov.w	r0, #4294967295
 80032b4:	6023      	str	r3, [r4, #0]
 80032b6:	2300      	movs	r3, #0
 80032b8:	6063      	str	r3, [r4, #4]
 80032ba:	89a3      	ldrh	r3, [r4, #12]
 80032bc:	f043 0320 	orr.w	r3, r3, #32
 80032c0:	81a3      	strh	r3, [r4, #12]
 80032c2:	e7f3      	b.n	80032ac <__ssrefill_r+0x22>

080032c4 <__ssvfiscanf_r>:
 80032c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032c8:	460c      	mov	r4, r1
 80032ca:	2100      	movs	r1, #0
 80032cc:	4606      	mov	r6, r0
 80032ce:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80032d2:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80032d6:	49aa      	ldr	r1, [pc, #680]	@ (8003580 <__ssvfiscanf_r+0x2bc>)
 80032d8:	f10d 0804 	add.w	r8, sp, #4
 80032dc:	91a0      	str	r1, [sp, #640]	@ 0x280
 80032de:	49a9      	ldr	r1, [pc, #676]	@ (8003584 <__ssvfiscanf_r+0x2c0>)
 80032e0:	4fa9      	ldr	r7, [pc, #676]	@ (8003588 <__ssvfiscanf_r+0x2c4>)
 80032e2:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80032e6:	91a1      	str	r1, [sp, #644]	@ 0x284
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	7813      	ldrb	r3, [r2, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 8159 	beq.w	80035a4 <__ssvfiscanf_r+0x2e0>
 80032f2:	5cf9      	ldrb	r1, [r7, r3]
 80032f4:	1c55      	adds	r5, r2, #1
 80032f6:	f011 0108 	ands.w	r1, r1, #8
 80032fa:	d019      	beq.n	8003330 <__ssvfiscanf_r+0x6c>
 80032fc:	6863      	ldr	r3, [r4, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	dd0f      	ble.n	8003322 <__ssvfiscanf_r+0x5e>
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	781a      	ldrb	r2, [r3, #0]
 8003306:	5cba      	ldrb	r2, [r7, r2]
 8003308:	0712      	lsls	r2, r2, #28
 800330a:	d401      	bmi.n	8003310 <__ssvfiscanf_r+0x4c>
 800330c:	462a      	mov	r2, r5
 800330e:	e7ec      	b.n	80032ea <__ssvfiscanf_r+0x26>
 8003310:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8003312:	3301      	adds	r3, #1
 8003314:	3201      	adds	r2, #1
 8003316:	9245      	str	r2, [sp, #276]	@ 0x114
 8003318:	6862      	ldr	r2, [r4, #4]
 800331a:	6023      	str	r3, [r4, #0]
 800331c:	3a01      	subs	r2, #1
 800331e:	6062      	str	r2, [r4, #4]
 8003320:	e7ec      	b.n	80032fc <__ssvfiscanf_r+0x38>
 8003322:	4621      	mov	r1, r4
 8003324:	4630      	mov	r0, r6
 8003326:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003328:	4798      	blx	r3
 800332a:	2800      	cmp	r0, #0
 800332c:	d0e9      	beq.n	8003302 <__ssvfiscanf_r+0x3e>
 800332e:	e7ed      	b.n	800330c <__ssvfiscanf_r+0x48>
 8003330:	2b25      	cmp	r3, #37	@ 0x25
 8003332:	d012      	beq.n	800335a <__ssvfiscanf_r+0x96>
 8003334:	4699      	mov	r9, r3
 8003336:	6863      	ldr	r3, [r4, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	f340 8094 	ble.w	8003466 <__ssvfiscanf_r+0x1a2>
 800333e:	6822      	ldr	r2, [r4, #0]
 8003340:	7813      	ldrb	r3, [r2, #0]
 8003342:	454b      	cmp	r3, r9
 8003344:	f040 812e 	bne.w	80035a4 <__ssvfiscanf_r+0x2e0>
 8003348:	6863      	ldr	r3, [r4, #4]
 800334a:	3201      	adds	r2, #1
 800334c:	3b01      	subs	r3, #1
 800334e:	6063      	str	r3, [r4, #4]
 8003350:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8003352:	6022      	str	r2, [r4, #0]
 8003354:	3301      	adds	r3, #1
 8003356:	9345      	str	r3, [sp, #276]	@ 0x114
 8003358:	e7d8      	b.n	800330c <__ssvfiscanf_r+0x48>
 800335a:	9141      	str	r1, [sp, #260]	@ 0x104
 800335c:	9143      	str	r1, [sp, #268]	@ 0x10c
 800335e:	7853      	ldrb	r3, [r2, #1]
 8003360:	2b2a      	cmp	r3, #42	@ 0x2a
 8003362:	bf04      	itt	eq
 8003364:	2310      	moveq	r3, #16
 8003366:	1c95      	addeq	r5, r2, #2
 8003368:	f04f 020a 	mov.w	r2, #10
 800336c:	bf08      	it	eq
 800336e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8003370:	46a9      	mov	r9, r5
 8003372:	f819 1b01 	ldrb.w	r1, [r9], #1
 8003376:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800337a:	2b09      	cmp	r3, #9
 800337c:	d91e      	bls.n	80033bc <__ssvfiscanf_r+0xf8>
 800337e:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 800358c <__ssvfiscanf_r+0x2c8>
 8003382:	2203      	movs	r2, #3
 8003384:	4650      	mov	r0, sl
 8003386:	f000 fe4b 	bl	8004020 <memchr>
 800338a:	b138      	cbz	r0, 800339c <__ssvfiscanf_r+0xd8>
 800338c:	2301      	movs	r3, #1
 800338e:	464d      	mov	r5, r9
 8003390:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8003392:	eba0 000a 	sub.w	r0, r0, sl
 8003396:	4083      	lsls	r3, r0
 8003398:	4313      	orrs	r3, r2
 800339a:	9341      	str	r3, [sp, #260]	@ 0x104
 800339c:	f815 3b01 	ldrb.w	r3, [r5], #1
 80033a0:	2b78      	cmp	r3, #120	@ 0x78
 80033a2:	d806      	bhi.n	80033b2 <__ssvfiscanf_r+0xee>
 80033a4:	2b57      	cmp	r3, #87	@ 0x57
 80033a6:	d810      	bhi.n	80033ca <__ssvfiscanf_r+0x106>
 80033a8:	2b25      	cmp	r3, #37	@ 0x25
 80033aa:	d0c3      	beq.n	8003334 <__ssvfiscanf_r+0x70>
 80033ac:	d856      	bhi.n	800345c <__ssvfiscanf_r+0x198>
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d064      	beq.n	800347c <__ssvfiscanf_r+0x1b8>
 80033b2:	2303      	movs	r3, #3
 80033b4:	9347      	str	r3, [sp, #284]	@ 0x11c
 80033b6:	230a      	movs	r3, #10
 80033b8:	9342      	str	r3, [sp, #264]	@ 0x108
 80033ba:	e077      	b.n	80034ac <__ssvfiscanf_r+0x1e8>
 80033bc:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80033be:	464d      	mov	r5, r9
 80033c0:	fb02 1103 	mla	r1, r2, r3, r1
 80033c4:	3930      	subs	r1, #48	@ 0x30
 80033c6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80033c8:	e7d2      	b.n	8003370 <__ssvfiscanf_r+0xac>
 80033ca:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80033ce:	2a20      	cmp	r2, #32
 80033d0:	d8ef      	bhi.n	80033b2 <__ssvfiscanf_r+0xee>
 80033d2:	a101      	add	r1, pc, #4	@ (adr r1, 80033d8 <__ssvfiscanf_r+0x114>)
 80033d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80033d8:	0800348b 	.word	0x0800348b
 80033dc:	080033b3 	.word	0x080033b3
 80033e0:	080033b3 	.word	0x080033b3
 80033e4:	080034e5 	.word	0x080034e5
 80033e8:	080033b3 	.word	0x080033b3
 80033ec:	080033b3 	.word	0x080033b3
 80033f0:	080033b3 	.word	0x080033b3
 80033f4:	080033b3 	.word	0x080033b3
 80033f8:	080033b3 	.word	0x080033b3
 80033fc:	080033b3 	.word	0x080033b3
 8003400:	080033b3 	.word	0x080033b3
 8003404:	080034fb 	.word	0x080034fb
 8003408:	080034e1 	.word	0x080034e1
 800340c:	08003463 	.word	0x08003463
 8003410:	08003463 	.word	0x08003463
 8003414:	08003463 	.word	0x08003463
 8003418:	080033b3 	.word	0x080033b3
 800341c:	0800349d 	.word	0x0800349d
 8003420:	080033b3 	.word	0x080033b3
 8003424:	080033b3 	.word	0x080033b3
 8003428:	080033b3 	.word	0x080033b3
 800342c:	080033b3 	.word	0x080033b3
 8003430:	0800350b 	.word	0x0800350b
 8003434:	080034a5 	.word	0x080034a5
 8003438:	08003483 	.word	0x08003483
 800343c:	080033b3 	.word	0x080033b3
 8003440:	080033b3 	.word	0x080033b3
 8003444:	08003507 	.word	0x08003507
 8003448:	080033b3 	.word	0x080033b3
 800344c:	080034e1 	.word	0x080034e1
 8003450:	080033b3 	.word	0x080033b3
 8003454:	080033b3 	.word	0x080033b3
 8003458:	0800348b 	.word	0x0800348b
 800345c:	3b45      	subs	r3, #69	@ 0x45
 800345e:	2b02      	cmp	r3, #2
 8003460:	d8a7      	bhi.n	80033b2 <__ssvfiscanf_r+0xee>
 8003462:	2305      	movs	r3, #5
 8003464:	e021      	b.n	80034aa <__ssvfiscanf_r+0x1e6>
 8003466:	4621      	mov	r1, r4
 8003468:	4630      	mov	r0, r6
 800346a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800346c:	4798      	blx	r3
 800346e:	2800      	cmp	r0, #0
 8003470:	f43f af65 	beq.w	800333e <__ssvfiscanf_r+0x7a>
 8003474:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8003476:	2800      	cmp	r0, #0
 8003478:	f040 808c 	bne.w	8003594 <__ssvfiscanf_r+0x2d0>
 800347c:	f04f 30ff 	mov.w	r0, #4294967295
 8003480:	e08c      	b.n	800359c <__ssvfiscanf_r+0x2d8>
 8003482:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8003484:	f042 0220 	orr.w	r2, r2, #32
 8003488:	9241      	str	r2, [sp, #260]	@ 0x104
 800348a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800348c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003490:	9241      	str	r2, [sp, #260]	@ 0x104
 8003492:	2210      	movs	r2, #16
 8003494:	2b6e      	cmp	r3, #110	@ 0x6e
 8003496:	9242      	str	r2, [sp, #264]	@ 0x108
 8003498:	d902      	bls.n	80034a0 <__ssvfiscanf_r+0x1dc>
 800349a:	e005      	b.n	80034a8 <__ssvfiscanf_r+0x1e4>
 800349c:	2300      	movs	r3, #0
 800349e:	9342      	str	r3, [sp, #264]	@ 0x108
 80034a0:	2303      	movs	r3, #3
 80034a2:	e002      	b.n	80034aa <__ssvfiscanf_r+0x1e6>
 80034a4:	2308      	movs	r3, #8
 80034a6:	9342      	str	r3, [sp, #264]	@ 0x108
 80034a8:	2304      	movs	r3, #4
 80034aa:	9347      	str	r3, [sp, #284]	@ 0x11c
 80034ac:	6863      	ldr	r3, [r4, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	dd39      	ble.n	8003526 <__ssvfiscanf_r+0x262>
 80034b2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80034b4:	0659      	lsls	r1, r3, #25
 80034b6:	d404      	bmi.n	80034c2 <__ssvfiscanf_r+0x1fe>
 80034b8:	6823      	ldr	r3, [r4, #0]
 80034ba:	781a      	ldrb	r2, [r3, #0]
 80034bc:	5cba      	ldrb	r2, [r7, r2]
 80034be:	0712      	lsls	r2, r2, #28
 80034c0:	d438      	bmi.n	8003534 <__ssvfiscanf_r+0x270>
 80034c2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	dc47      	bgt.n	8003558 <__ssvfiscanf_r+0x294>
 80034c8:	466b      	mov	r3, sp
 80034ca:	4622      	mov	r2, r4
 80034cc:	4630      	mov	r0, r6
 80034ce:	a941      	add	r1, sp, #260	@ 0x104
 80034d0:	f000 fb3c 	bl	8003b4c <_scanf_chars>
 80034d4:	2801      	cmp	r0, #1
 80034d6:	d065      	beq.n	80035a4 <__ssvfiscanf_r+0x2e0>
 80034d8:	2802      	cmp	r0, #2
 80034da:	f47f af17 	bne.w	800330c <__ssvfiscanf_r+0x48>
 80034de:	e7c9      	b.n	8003474 <__ssvfiscanf_r+0x1b0>
 80034e0:	220a      	movs	r2, #10
 80034e2:	e7d7      	b.n	8003494 <__ssvfiscanf_r+0x1d0>
 80034e4:	4629      	mov	r1, r5
 80034e6:	4640      	mov	r0, r8
 80034e8:	f000 fcdd 	bl	8003ea6 <__sccl>
 80034ec:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80034ee:	4605      	mov	r5, r0
 80034f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034f4:	9341      	str	r3, [sp, #260]	@ 0x104
 80034f6:	2301      	movs	r3, #1
 80034f8:	e7d7      	b.n	80034aa <__ssvfiscanf_r+0x1e6>
 80034fa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80034fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003500:	9341      	str	r3, [sp, #260]	@ 0x104
 8003502:	2300      	movs	r3, #0
 8003504:	e7d1      	b.n	80034aa <__ssvfiscanf_r+0x1e6>
 8003506:	2302      	movs	r3, #2
 8003508:	e7cf      	b.n	80034aa <__ssvfiscanf_r+0x1e6>
 800350a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800350c:	06c3      	lsls	r3, r0, #27
 800350e:	f53f aefd 	bmi.w	800330c <__ssvfiscanf_r+0x48>
 8003512:	9b00      	ldr	r3, [sp, #0]
 8003514:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8003516:	1d19      	adds	r1, r3, #4
 8003518:	9100      	str	r1, [sp, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	07c0      	lsls	r0, r0, #31
 800351e:	bf4c      	ite	mi
 8003520:	801a      	strhmi	r2, [r3, #0]
 8003522:	601a      	strpl	r2, [r3, #0]
 8003524:	e6f2      	b.n	800330c <__ssvfiscanf_r+0x48>
 8003526:	4621      	mov	r1, r4
 8003528:	4630      	mov	r0, r6
 800352a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800352c:	4798      	blx	r3
 800352e:	2800      	cmp	r0, #0
 8003530:	d0bf      	beq.n	80034b2 <__ssvfiscanf_r+0x1ee>
 8003532:	e79f      	b.n	8003474 <__ssvfiscanf_r+0x1b0>
 8003534:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8003536:	3201      	adds	r2, #1
 8003538:	9245      	str	r2, [sp, #276]	@ 0x114
 800353a:	6862      	ldr	r2, [r4, #4]
 800353c:	3a01      	subs	r2, #1
 800353e:	2a00      	cmp	r2, #0
 8003540:	6062      	str	r2, [r4, #4]
 8003542:	dd02      	ble.n	800354a <__ssvfiscanf_r+0x286>
 8003544:	3301      	adds	r3, #1
 8003546:	6023      	str	r3, [r4, #0]
 8003548:	e7b6      	b.n	80034b8 <__ssvfiscanf_r+0x1f4>
 800354a:	4621      	mov	r1, r4
 800354c:	4630      	mov	r0, r6
 800354e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003550:	4798      	blx	r3
 8003552:	2800      	cmp	r0, #0
 8003554:	d0b0      	beq.n	80034b8 <__ssvfiscanf_r+0x1f4>
 8003556:	e78d      	b.n	8003474 <__ssvfiscanf_r+0x1b0>
 8003558:	2b04      	cmp	r3, #4
 800355a:	dc06      	bgt.n	800356a <__ssvfiscanf_r+0x2a6>
 800355c:	466b      	mov	r3, sp
 800355e:	4622      	mov	r2, r4
 8003560:	4630      	mov	r0, r6
 8003562:	a941      	add	r1, sp, #260	@ 0x104
 8003564:	f000 fb4c 	bl	8003c00 <_scanf_i>
 8003568:	e7b4      	b.n	80034d4 <__ssvfiscanf_r+0x210>
 800356a:	4b09      	ldr	r3, [pc, #36]	@ (8003590 <__ssvfiscanf_r+0x2cc>)
 800356c:	2b00      	cmp	r3, #0
 800356e:	f43f aecd 	beq.w	800330c <__ssvfiscanf_r+0x48>
 8003572:	466b      	mov	r3, sp
 8003574:	4622      	mov	r2, r4
 8003576:	4630      	mov	r0, r6
 8003578:	a941      	add	r1, sp, #260	@ 0x104
 800357a:	f3af 8000 	nop.w
 800357e:	e7a9      	b.n	80034d4 <__ssvfiscanf_r+0x210>
 8003580:	08003215 	.word	0x08003215
 8003584:	0800328b 	.word	0x0800328b
 8003588:	08004d07 	.word	0x08004d07
 800358c:	08004cbe 	.word	0x08004cbe
 8003590:	00000000 	.word	0x00000000
 8003594:	89a3      	ldrh	r3, [r4, #12]
 8003596:	065b      	lsls	r3, r3, #25
 8003598:	f53f af70 	bmi.w	800347c <__ssvfiscanf_r+0x1b8>
 800359c:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80035a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035a4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80035a6:	e7f9      	b.n	800359c <__ssvfiscanf_r+0x2d8>

080035a8 <__sfputc_r>:
 80035a8:	6893      	ldr	r3, [r2, #8]
 80035aa:	b410      	push	{r4}
 80035ac:	3b01      	subs	r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	6093      	str	r3, [r2, #8]
 80035b2:	da07      	bge.n	80035c4 <__sfputc_r+0x1c>
 80035b4:	6994      	ldr	r4, [r2, #24]
 80035b6:	42a3      	cmp	r3, r4
 80035b8:	db01      	blt.n	80035be <__sfputc_r+0x16>
 80035ba:	290a      	cmp	r1, #10
 80035bc:	d102      	bne.n	80035c4 <__sfputc_r+0x1c>
 80035be:	bc10      	pop	{r4}
 80035c0:	f7ff bab7 	b.w	8002b32 <__swbuf_r>
 80035c4:	6813      	ldr	r3, [r2, #0]
 80035c6:	1c58      	adds	r0, r3, #1
 80035c8:	6010      	str	r0, [r2, #0]
 80035ca:	7019      	strb	r1, [r3, #0]
 80035cc:	4608      	mov	r0, r1
 80035ce:	bc10      	pop	{r4}
 80035d0:	4770      	bx	lr

080035d2 <__sfputs_r>:
 80035d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d4:	4606      	mov	r6, r0
 80035d6:	460f      	mov	r7, r1
 80035d8:	4614      	mov	r4, r2
 80035da:	18d5      	adds	r5, r2, r3
 80035dc:	42ac      	cmp	r4, r5
 80035de:	d101      	bne.n	80035e4 <__sfputs_r+0x12>
 80035e0:	2000      	movs	r0, #0
 80035e2:	e007      	b.n	80035f4 <__sfputs_r+0x22>
 80035e4:	463a      	mov	r2, r7
 80035e6:	4630      	mov	r0, r6
 80035e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035ec:	f7ff ffdc 	bl	80035a8 <__sfputc_r>
 80035f0:	1c43      	adds	r3, r0, #1
 80035f2:	d1f3      	bne.n	80035dc <__sfputs_r+0xa>
 80035f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080035f8 <_vfiprintf_r>:
 80035f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035fc:	460d      	mov	r5, r1
 80035fe:	4614      	mov	r4, r2
 8003600:	4698      	mov	r8, r3
 8003602:	4606      	mov	r6, r0
 8003604:	b09d      	sub	sp, #116	@ 0x74
 8003606:	b118      	cbz	r0, 8003610 <_vfiprintf_r+0x18>
 8003608:	6a03      	ldr	r3, [r0, #32]
 800360a:	b90b      	cbnz	r3, 8003610 <_vfiprintf_r+0x18>
 800360c:	f7ff f948 	bl	80028a0 <__sinit>
 8003610:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003612:	07d9      	lsls	r1, r3, #31
 8003614:	d405      	bmi.n	8003622 <_vfiprintf_r+0x2a>
 8003616:	89ab      	ldrh	r3, [r5, #12]
 8003618:	059a      	lsls	r2, r3, #22
 800361a:	d402      	bmi.n	8003622 <_vfiprintf_r+0x2a>
 800361c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800361e:	f7ff fba8 	bl	8002d72 <__retarget_lock_acquire_recursive>
 8003622:	89ab      	ldrh	r3, [r5, #12]
 8003624:	071b      	lsls	r3, r3, #28
 8003626:	d501      	bpl.n	800362c <_vfiprintf_r+0x34>
 8003628:	692b      	ldr	r3, [r5, #16]
 800362a:	b99b      	cbnz	r3, 8003654 <_vfiprintf_r+0x5c>
 800362c:	4629      	mov	r1, r5
 800362e:	4630      	mov	r0, r6
 8003630:	f7ff fabe 	bl	8002bb0 <__swsetup_r>
 8003634:	b170      	cbz	r0, 8003654 <_vfiprintf_r+0x5c>
 8003636:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003638:	07dc      	lsls	r4, r3, #31
 800363a:	d504      	bpl.n	8003646 <_vfiprintf_r+0x4e>
 800363c:	f04f 30ff 	mov.w	r0, #4294967295
 8003640:	b01d      	add	sp, #116	@ 0x74
 8003642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003646:	89ab      	ldrh	r3, [r5, #12]
 8003648:	0598      	lsls	r0, r3, #22
 800364a:	d4f7      	bmi.n	800363c <_vfiprintf_r+0x44>
 800364c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800364e:	f7ff fb91 	bl	8002d74 <__retarget_lock_release_recursive>
 8003652:	e7f3      	b.n	800363c <_vfiprintf_r+0x44>
 8003654:	2300      	movs	r3, #0
 8003656:	9309      	str	r3, [sp, #36]	@ 0x24
 8003658:	2320      	movs	r3, #32
 800365a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800365e:	2330      	movs	r3, #48	@ 0x30
 8003660:	f04f 0901 	mov.w	r9, #1
 8003664:	f8cd 800c 	str.w	r8, [sp, #12]
 8003668:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003814 <_vfiprintf_r+0x21c>
 800366c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003670:	4623      	mov	r3, r4
 8003672:	469a      	mov	sl, r3
 8003674:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003678:	b10a      	cbz	r2, 800367e <_vfiprintf_r+0x86>
 800367a:	2a25      	cmp	r2, #37	@ 0x25
 800367c:	d1f9      	bne.n	8003672 <_vfiprintf_r+0x7a>
 800367e:	ebba 0b04 	subs.w	fp, sl, r4
 8003682:	d00b      	beq.n	800369c <_vfiprintf_r+0xa4>
 8003684:	465b      	mov	r3, fp
 8003686:	4622      	mov	r2, r4
 8003688:	4629      	mov	r1, r5
 800368a:	4630      	mov	r0, r6
 800368c:	f7ff ffa1 	bl	80035d2 <__sfputs_r>
 8003690:	3001      	adds	r0, #1
 8003692:	f000 80a7 	beq.w	80037e4 <_vfiprintf_r+0x1ec>
 8003696:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003698:	445a      	add	r2, fp
 800369a:	9209      	str	r2, [sp, #36]	@ 0x24
 800369c:	f89a 3000 	ldrb.w	r3, [sl]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 809f 	beq.w	80037e4 <_vfiprintf_r+0x1ec>
 80036a6:	2300      	movs	r3, #0
 80036a8:	f04f 32ff 	mov.w	r2, #4294967295
 80036ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036b0:	f10a 0a01 	add.w	sl, sl, #1
 80036b4:	9304      	str	r3, [sp, #16]
 80036b6:	9307      	str	r3, [sp, #28]
 80036b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80036bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80036be:	4654      	mov	r4, sl
 80036c0:	2205      	movs	r2, #5
 80036c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036c6:	4853      	ldr	r0, [pc, #332]	@ (8003814 <_vfiprintf_r+0x21c>)
 80036c8:	f000 fcaa 	bl	8004020 <memchr>
 80036cc:	9a04      	ldr	r2, [sp, #16]
 80036ce:	b9d8      	cbnz	r0, 8003708 <_vfiprintf_r+0x110>
 80036d0:	06d1      	lsls	r1, r2, #27
 80036d2:	bf44      	itt	mi
 80036d4:	2320      	movmi	r3, #32
 80036d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80036da:	0713      	lsls	r3, r2, #28
 80036dc:	bf44      	itt	mi
 80036de:	232b      	movmi	r3, #43	@ 0x2b
 80036e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80036e4:	f89a 3000 	ldrb.w	r3, [sl]
 80036e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80036ea:	d015      	beq.n	8003718 <_vfiprintf_r+0x120>
 80036ec:	4654      	mov	r4, sl
 80036ee:	2000      	movs	r0, #0
 80036f0:	f04f 0c0a 	mov.w	ip, #10
 80036f4:	9a07      	ldr	r2, [sp, #28]
 80036f6:	4621      	mov	r1, r4
 80036f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036fc:	3b30      	subs	r3, #48	@ 0x30
 80036fe:	2b09      	cmp	r3, #9
 8003700:	d94b      	bls.n	800379a <_vfiprintf_r+0x1a2>
 8003702:	b1b0      	cbz	r0, 8003732 <_vfiprintf_r+0x13a>
 8003704:	9207      	str	r2, [sp, #28]
 8003706:	e014      	b.n	8003732 <_vfiprintf_r+0x13a>
 8003708:	eba0 0308 	sub.w	r3, r0, r8
 800370c:	fa09 f303 	lsl.w	r3, r9, r3
 8003710:	4313      	orrs	r3, r2
 8003712:	46a2      	mov	sl, r4
 8003714:	9304      	str	r3, [sp, #16]
 8003716:	e7d2      	b.n	80036be <_vfiprintf_r+0xc6>
 8003718:	9b03      	ldr	r3, [sp, #12]
 800371a:	1d19      	adds	r1, r3, #4
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	9103      	str	r1, [sp, #12]
 8003720:	2b00      	cmp	r3, #0
 8003722:	bfbb      	ittet	lt
 8003724:	425b      	neglt	r3, r3
 8003726:	f042 0202 	orrlt.w	r2, r2, #2
 800372a:	9307      	strge	r3, [sp, #28]
 800372c:	9307      	strlt	r3, [sp, #28]
 800372e:	bfb8      	it	lt
 8003730:	9204      	strlt	r2, [sp, #16]
 8003732:	7823      	ldrb	r3, [r4, #0]
 8003734:	2b2e      	cmp	r3, #46	@ 0x2e
 8003736:	d10a      	bne.n	800374e <_vfiprintf_r+0x156>
 8003738:	7863      	ldrb	r3, [r4, #1]
 800373a:	2b2a      	cmp	r3, #42	@ 0x2a
 800373c:	d132      	bne.n	80037a4 <_vfiprintf_r+0x1ac>
 800373e:	9b03      	ldr	r3, [sp, #12]
 8003740:	3402      	adds	r4, #2
 8003742:	1d1a      	adds	r2, r3, #4
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	9203      	str	r2, [sp, #12]
 8003748:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800374c:	9305      	str	r3, [sp, #20]
 800374e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003818 <_vfiprintf_r+0x220>
 8003752:	2203      	movs	r2, #3
 8003754:	4650      	mov	r0, sl
 8003756:	7821      	ldrb	r1, [r4, #0]
 8003758:	f000 fc62 	bl	8004020 <memchr>
 800375c:	b138      	cbz	r0, 800376e <_vfiprintf_r+0x176>
 800375e:	2240      	movs	r2, #64	@ 0x40
 8003760:	9b04      	ldr	r3, [sp, #16]
 8003762:	eba0 000a 	sub.w	r0, r0, sl
 8003766:	4082      	lsls	r2, r0
 8003768:	4313      	orrs	r3, r2
 800376a:	3401      	adds	r4, #1
 800376c:	9304      	str	r3, [sp, #16]
 800376e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003772:	2206      	movs	r2, #6
 8003774:	4829      	ldr	r0, [pc, #164]	@ (800381c <_vfiprintf_r+0x224>)
 8003776:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800377a:	f000 fc51 	bl	8004020 <memchr>
 800377e:	2800      	cmp	r0, #0
 8003780:	d03f      	beq.n	8003802 <_vfiprintf_r+0x20a>
 8003782:	4b27      	ldr	r3, [pc, #156]	@ (8003820 <_vfiprintf_r+0x228>)
 8003784:	bb1b      	cbnz	r3, 80037ce <_vfiprintf_r+0x1d6>
 8003786:	9b03      	ldr	r3, [sp, #12]
 8003788:	3307      	adds	r3, #7
 800378a:	f023 0307 	bic.w	r3, r3, #7
 800378e:	3308      	adds	r3, #8
 8003790:	9303      	str	r3, [sp, #12]
 8003792:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003794:	443b      	add	r3, r7
 8003796:	9309      	str	r3, [sp, #36]	@ 0x24
 8003798:	e76a      	b.n	8003670 <_vfiprintf_r+0x78>
 800379a:	460c      	mov	r4, r1
 800379c:	2001      	movs	r0, #1
 800379e:	fb0c 3202 	mla	r2, ip, r2, r3
 80037a2:	e7a8      	b.n	80036f6 <_vfiprintf_r+0xfe>
 80037a4:	2300      	movs	r3, #0
 80037a6:	f04f 0c0a 	mov.w	ip, #10
 80037aa:	4619      	mov	r1, r3
 80037ac:	3401      	adds	r4, #1
 80037ae:	9305      	str	r3, [sp, #20]
 80037b0:	4620      	mov	r0, r4
 80037b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037b6:	3a30      	subs	r2, #48	@ 0x30
 80037b8:	2a09      	cmp	r2, #9
 80037ba:	d903      	bls.n	80037c4 <_vfiprintf_r+0x1cc>
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0c6      	beq.n	800374e <_vfiprintf_r+0x156>
 80037c0:	9105      	str	r1, [sp, #20]
 80037c2:	e7c4      	b.n	800374e <_vfiprintf_r+0x156>
 80037c4:	4604      	mov	r4, r0
 80037c6:	2301      	movs	r3, #1
 80037c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80037cc:	e7f0      	b.n	80037b0 <_vfiprintf_r+0x1b8>
 80037ce:	ab03      	add	r3, sp, #12
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	462a      	mov	r2, r5
 80037d4:	4630      	mov	r0, r6
 80037d6:	4b13      	ldr	r3, [pc, #76]	@ (8003824 <_vfiprintf_r+0x22c>)
 80037d8:	a904      	add	r1, sp, #16
 80037da:	f3af 8000 	nop.w
 80037de:	4607      	mov	r7, r0
 80037e0:	1c78      	adds	r0, r7, #1
 80037e2:	d1d6      	bne.n	8003792 <_vfiprintf_r+0x19a>
 80037e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80037e6:	07d9      	lsls	r1, r3, #31
 80037e8:	d405      	bmi.n	80037f6 <_vfiprintf_r+0x1fe>
 80037ea:	89ab      	ldrh	r3, [r5, #12]
 80037ec:	059a      	lsls	r2, r3, #22
 80037ee:	d402      	bmi.n	80037f6 <_vfiprintf_r+0x1fe>
 80037f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80037f2:	f7ff fabf 	bl	8002d74 <__retarget_lock_release_recursive>
 80037f6:	89ab      	ldrh	r3, [r5, #12]
 80037f8:	065b      	lsls	r3, r3, #25
 80037fa:	f53f af1f 	bmi.w	800363c <_vfiprintf_r+0x44>
 80037fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003800:	e71e      	b.n	8003640 <_vfiprintf_r+0x48>
 8003802:	ab03      	add	r3, sp, #12
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	462a      	mov	r2, r5
 8003808:	4630      	mov	r0, r6
 800380a:	4b06      	ldr	r3, [pc, #24]	@ (8003824 <_vfiprintf_r+0x22c>)
 800380c:	a904      	add	r1, sp, #16
 800380e:	f000 f87d 	bl	800390c <_printf_i>
 8003812:	e7e4      	b.n	80037de <_vfiprintf_r+0x1e6>
 8003814:	08004cb8 	.word	0x08004cb8
 8003818:	08004cbe 	.word	0x08004cbe
 800381c:	08004cc2 	.word	0x08004cc2
 8003820:	00000000 	.word	0x00000000
 8003824:	080035d3 	.word	0x080035d3

08003828 <_printf_common>:
 8003828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800382c:	4616      	mov	r6, r2
 800382e:	4698      	mov	r8, r3
 8003830:	688a      	ldr	r2, [r1, #8]
 8003832:	690b      	ldr	r3, [r1, #16]
 8003834:	4607      	mov	r7, r0
 8003836:	4293      	cmp	r3, r2
 8003838:	bfb8      	it	lt
 800383a:	4613      	movlt	r3, r2
 800383c:	6033      	str	r3, [r6, #0]
 800383e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003842:	460c      	mov	r4, r1
 8003844:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003848:	b10a      	cbz	r2, 800384e <_printf_common+0x26>
 800384a:	3301      	adds	r3, #1
 800384c:	6033      	str	r3, [r6, #0]
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	0699      	lsls	r1, r3, #26
 8003852:	bf42      	ittt	mi
 8003854:	6833      	ldrmi	r3, [r6, #0]
 8003856:	3302      	addmi	r3, #2
 8003858:	6033      	strmi	r3, [r6, #0]
 800385a:	6825      	ldr	r5, [r4, #0]
 800385c:	f015 0506 	ands.w	r5, r5, #6
 8003860:	d106      	bne.n	8003870 <_printf_common+0x48>
 8003862:	f104 0a19 	add.w	sl, r4, #25
 8003866:	68e3      	ldr	r3, [r4, #12]
 8003868:	6832      	ldr	r2, [r6, #0]
 800386a:	1a9b      	subs	r3, r3, r2
 800386c:	42ab      	cmp	r3, r5
 800386e:	dc2b      	bgt.n	80038c8 <_printf_common+0xa0>
 8003870:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003874:	6822      	ldr	r2, [r4, #0]
 8003876:	3b00      	subs	r3, #0
 8003878:	bf18      	it	ne
 800387a:	2301      	movne	r3, #1
 800387c:	0692      	lsls	r2, r2, #26
 800387e:	d430      	bmi.n	80038e2 <_printf_common+0xba>
 8003880:	4641      	mov	r1, r8
 8003882:	4638      	mov	r0, r7
 8003884:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003888:	47c8      	blx	r9
 800388a:	3001      	adds	r0, #1
 800388c:	d023      	beq.n	80038d6 <_printf_common+0xae>
 800388e:	6823      	ldr	r3, [r4, #0]
 8003890:	6922      	ldr	r2, [r4, #16]
 8003892:	f003 0306 	and.w	r3, r3, #6
 8003896:	2b04      	cmp	r3, #4
 8003898:	bf14      	ite	ne
 800389a:	2500      	movne	r5, #0
 800389c:	6833      	ldreq	r3, [r6, #0]
 800389e:	f04f 0600 	mov.w	r6, #0
 80038a2:	bf08      	it	eq
 80038a4:	68e5      	ldreq	r5, [r4, #12]
 80038a6:	f104 041a 	add.w	r4, r4, #26
 80038aa:	bf08      	it	eq
 80038ac:	1aed      	subeq	r5, r5, r3
 80038ae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80038b2:	bf08      	it	eq
 80038b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038b8:	4293      	cmp	r3, r2
 80038ba:	bfc4      	itt	gt
 80038bc:	1a9b      	subgt	r3, r3, r2
 80038be:	18ed      	addgt	r5, r5, r3
 80038c0:	42b5      	cmp	r5, r6
 80038c2:	d11a      	bne.n	80038fa <_printf_common+0xd2>
 80038c4:	2000      	movs	r0, #0
 80038c6:	e008      	b.n	80038da <_printf_common+0xb2>
 80038c8:	2301      	movs	r3, #1
 80038ca:	4652      	mov	r2, sl
 80038cc:	4641      	mov	r1, r8
 80038ce:	4638      	mov	r0, r7
 80038d0:	47c8      	blx	r9
 80038d2:	3001      	adds	r0, #1
 80038d4:	d103      	bne.n	80038de <_printf_common+0xb6>
 80038d6:	f04f 30ff 	mov.w	r0, #4294967295
 80038da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038de:	3501      	adds	r5, #1
 80038e0:	e7c1      	b.n	8003866 <_printf_common+0x3e>
 80038e2:	2030      	movs	r0, #48	@ 0x30
 80038e4:	18e1      	adds	r1, r4, r3
 80038e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80038f0:	4422      	add	r2, r4
 80038f2:	3302      	adds	r3, #2
 80038f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80038f8:	e7c2      	b.n	8003880 <_printf_common+0x58>
 80038fa:	2301      	movs	r3, #1
 80038fc:	4622      	mov	r2, r4
 80038fe:	4641      	mov	r1, r8
 8003900:	4638      	mov	r0, r7
 8003902:	47c8      	blx	r9
 8003904:	3001      	adds	r0, #1
 8003906:	d0e6      	beq.n	80038d6 <_printf_common+0xae>
 8003908:	3601      	adds	r6, #1
 800390a:	e7d9      	b.n	80038c0 <_printf_common+0x98>

0800390c <_printf_i>:
 800390c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003910:	7e0f      	ldrb	r7, [r1, #24]
 8003912:	4691      	mov	r9, r2
 8003914:	2f78      	cmp	r7, #120	@ 0x78
 8003916:	4680      	mov	r8, r0
 8003918:	460c      	mov	r4, r1
 800391a:	469a      	mov	sl, r3
 800391c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800391e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003922:	d807      	bhi.n	8003934 <_printf_i+0x28>
 8003924:	2f62      	cmp	r7, #98	@ 0x62
 8003926:	d80a      	bhi.n	800393e <_printf_i+0x32>
 8003928:	2f00      	cmp	r7, #0
 800392a:	f000 80d3 	beq.w	8003ad4 <_printf_i+0x1c8>
 800392e:	2f58      	cmp	r7, #88	@ 0x58
 8003930:	f000 80ba 	beq.w	8003aa8 <_printf_i+0x19c>
 8003934:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003938:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800393c:	e03a      	b.n	80039b4 <_printf_i+0xa8>
 800393e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003942:	2b15      	cmp	r3, #21
 8003944:	d8f6      	bhi.n	8003934 <_printf_i+0x28>
 8003946:	a101      	add	r1, pc, #4	@ (adr r1, 800394c <_printf_i+0x40>)
 8003948:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800394c:	080039a5 	.word	0x080039a5
 8003950:	080039b9 	.word	0x080039b9
 8003954:	08003935 	.word	0x08003935
 8003958:	08003935 	.word	0x08003935
 800395c:	08003935 	.word	0x08003935
 8003960:	08003935 	.word	0x08003935
 8003964:	080039b9 	.word	0x080039b9
 8003968:	08003935 	.word	0x08003935
 800396c:	08003935 	.word	0x08003935
 8003970:	08003935 	.word	0x08003935
 8003974:	08003935 	.word	0x08003935
 8003978:	08003abb 	.word	0x08003abb
 800397c:	080039e3 	.word	0x080039e3
 8003980:	08003a75 	.word	0x08003a75
 8003984:	08003935 	.word	0x08003935
 8003988:	08003935 	.word	0x08003935
 800398c:	08003add 	.word	0x08003add
 8003990:	08003935 	.word	0x08003935
 8003994:	080039e3 	.word	0x080039e3
 8003998:	08003935 	.word	0x08003935
 800399c:	08003935 	.word	0x08003935
 80039a0:	08003a7d 	.word	0x08003a7d
 80039a4:	6833      	ldr	r3, [r6, #0]
 80039a6:	1d1a      	adds	r2, r3, #4
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6032      	str	r2, [r6, #0]
 80039ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80039b4:	2301      	movs	r3, #1
 80039b6:	e09e      	b.n	8003af6 <_printf_i+0x1ea>
 80039b8:	6833      	ldr	r3, [r6, #0]
 80039ba:	6820      	ldr	r0, [r4, #0]
 80039bc:	1d19      	adds	r1, r3, #4
 80039be:	6031      	str	r1, [r6, #0]
 80039c0:	0606      	lsls	r6, r0, #24
 80039c2:	d501      	bpl.n	80039c8 <_printf_i+0xbc>
 80039c4:	681d      	ldr	r5, [r3, #0]
 80039c6:	e003      	b.n	80039d0 <_printf_i+0xc4>
 80039c8:	0645      	lsls	r5, r0, #25
 80039ca:	d5fb      	bpl.n	80039c4 <_printf_i+0xb8>
 80039cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80039d0:	2d00      	cmp	r5, #0
 80039d2:	da03      	bge.n	80039dc <_printf_i+0xd0>
 80039d4:	232d      	movs	r3, #45	@ 0x2d
 80039d6:	426d      	negs	r5, r5
 80039d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039dc:	230a      	movs	r3, #10
 80039de:	4859      	ldr	r0, [pc, #356]	@ (8003b44 <_printf_i+0x238>)
 80039e0:	e011      	b.n	8003a06 <_printf_i+0xfa>
 80039e2:	6821      	ldr	r1, [r4, #0]
 80039e4:	6833      	ldr	r3, [r6, #0]
 80039e6:	0608      	lsls	r0, r1, #24
 80039e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80039ec:	d402      	bmi.n	80039f4 <_printf_i+0xe8>
 80039ee:	0649      	lsls	r1, r1, #25
 80039f0:	bf48      	it	mi
 80039f2:	b2ad      	uxthmi	r5, r5
 80039f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80039f6:	6033      	str	r3, [r6, #0]
 80039f8:	bf14      	ite	ne
 80039fa:	230a      	movne	r3, #10
 80039fc:	2308      	moveq	r3, #8
 80039fe:	4851      	ldr	r0, [pc, #324]	@ (8003b44 <_printf_i+0x238>)
 8003a00:	2100      	movs	r1, #0
 8003a02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a06:	6866      	ldr	r6, [r4, #4]
 8003a08:	2e00      	cmp	r6, #0
 8003a0a:	bfa8      	it	ge
 8003a0c:	6821      	ldrge	r1, [r4, #0]
 8003a0e:	60a6      	str	r6, [r4, #8]
 8003a10:	bfa4      	itt	ge
 8003a12:	f021 0104 	bicge.w	r1, r1, #4
 8003a16:	6021      	strge	r1, [r4, #0]
 8003a18:	b90d      	cbnz	r5, 8003a1e <_printf_i+0x112>
 8003a1a:	2e00      	cmp	r6, #0
 8003a1c:	d04b      	beq.n	8003ab6 <_printf_i+0x1aa>
 8003a1e:	4616      	mov	r6, r2
 8003a20:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a24:	fb03 5711 	mls	r7, r3, r1, r5
 8003a28:	5dc7      	ldrb	r7, [r0, r7]
 8003a2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a2e:	462f      	mov	r7, r5
 8003a30:	42bb      	cmp	r3, r7
 8003a32:	460d      	mov	r5, r1
 8003a34:	d9f4      	bls.n	8003a20 <_printf_i+0x114>
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d10b      	bne.n	8003a52 <_printf_i+0x146>
 8003a3a:	6823      	ldr	r3, [r4, #0]
 8003a3c:	07df      	lsls	r7, r3, #31
 8003a3e:	d508      	bpl.n	8003a52 <_printf_i+0x146>
 8003a40:	6923      	ldr	r3, [r4, #16]
 8003a42:	6861      	ldr	r1, [r4, #4]
 8003a44:	4299      	cmp	r1, r3
 8003a46:	bfde      	ittt	le
 8003a48:	2330      	movle	r3, #48	@ 0x30
 8003a4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a52:	1b92      	subs	r2, r2, r6
 8003a54:	6122      	str	r2, [r4, #16]
 8003a56:	464b      	mov	r3, r9
 8003a58:	4621      	mov	r1, r4
 8003a5a:	4640      	mov	r0, r8
 8003a5c:	f8cd a000 	str.w	sl, [sp]
 8003a60:	aa03      	add	r2, sp, #12
 8003a62:	f7ff fee1 	bl	8003828 <_printf_common>
 8003a66:	3001      	adds	r0, #1
 8003a68:	d14a      	bne.n	8003b00 <_printf_i+0x1f4>
 8003a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a6e:	b004      	add	sp, #16
 8003a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a74:	6823      	ldr	r3, [r4, #0]
 8003a76:	f043 0320 	orr.w	r3, r3, #32
 8003a7a:	6023      	str	r3, [r4, #0]
 8003a7c:	2778      	movs	r7, #120	@ 0x78
 8003a7e:	4832      	ldr	r0, [pc, #200]	@ (8003b48 <_printf_i+0x23c>)
 8003a80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003a84:	6823      	ldr	r3, [r4, #0]
 8003a86:	6831      	ldr	r1, [r6, #0]
 8003a88:	061f      	lsls	r7, r3, #24
 8003a8a:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a8e:	d402      	bmi.n	8003a96 <_printf_i+0x18a>
 8003a90:	065f      	lsls	r7, r3, #25
 8003a92:	bf48      	it	mi
 8003a94:	b2ad      	uxthmi	r5, r5
 8003a96:	6031      	str	r1, [r6, #0]
 8003a98:	07d9      	lsls	r1, r3, #31
 8003a9a:	bf44      	itt	mi
 8003a9c:	f043 0320 	orrmi.w	r3, r3, #32
 8003aa0:	6023      	strmi	r3, [r4, #0]
 8003aa2:	b11d      	cbz	r5, 8003aac <_printf_i+0x1a0>
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	e7ab      	b.n	8003a00 <_printf_i+0xf4>
 8003aa8:	4826      	ldr	r0, [pc, #152]	@ (8003b44 <_printf_i+0x238>)
 8003aaa:	e7e9      	b.n	8003a80 <_printf_i+0x174>
 8003aac:	6823      	ldr	r3, [r4, #0]
 8003aae:	f023 0320 	bic.w	r3, r3, #32
 8003ab2:	6023      	str	r3, [r4, #0]
 8003ab4:	e7f6      	b.n	8003aa4 <_printf_i+0x198>
 8003ab6:	4616      	mov	r6, r2
 8003ab8:	e7bd      	b.n	8003a36 <_printf_i+0x12a>
 8003aba:	6833      	ldr	r3, [r6, #0]
 8003abc:	6825      	ldr	r5, [r4, #0]
 8003abe:	1d18      	adds	r0, r3, #4
 8003ac0:	6961      	ldr	r1, [r4, #20]
 8003ac2:	6030      	str	r0, [r6, #0]
 8003ac4:	062e      	lsls	r6, r5, #24
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	d501      	bpl.n	8003ace <_printf_i+0x1c2>
 8003aca:	6019      	str	r1, [r3, #0]
 8003acc:	e002      	b.n	8003ad4 <_printf_i+0x1c8>
 8003ace:	0668      	lsls	r0, r5, #25
 8003ad0:	d5fb      	bpl.n	8003aca <_printf_i+0x1be>
 8003ad2:	8019      	strh	r1, [r3, #0]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	4616      	mov	r6, r2
 8003ad8:	6123      	str	r3, [r4, #16]
 8003ada:	e7bc      	b.n	8003a56 <_printf_i+0x14a>
 8003adc:	6833      	ldr	r3, [r6, #0]
 8003ade:	2100      	movs	r1, #0
 8003ae0:	1d1a      	adds	r2, r3, #4
 8003ae2:	6032      	str	r2, [r6, #0]
 8003ae4:	681e      	ldr	r6, [r3, #0]
 8003ae6:	6862      	ldr	r2, [r4, #4]
 8003ae8:	4630      	mov	r0, r6
 8003aea:	f000 fa99 	bl	8004020 <memchr>
 8003aee:	b108      	cbz	r0, 8003af4 <_printf_i+0x1e8>
 8003af0:	1b80      	subs	r0, r0, r6
 8003af2:	6060      	str	r0, [r4, #4]
 8003af4:	6863      	ldr	r3, [r4, #4]
 8003af6:	6123      	str	r3, [r4, #16]
 8003af8:	2300      	movs	r3, #0
 8003afa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003afe:	e7aa      	b.n	8003a56 <_printf_i+0x14a>
 8003b00:	4632      	mov	r2, r6
 8003b02:	4649      	mov	r1, r9
 8003b04:	4640      	mov	r0, r8
 8003b06:	6923      	ldr	r3, [r4, #16]
 8003b08:	47d0      	blx	sl
 8003b0a:	3001      	adds	r0, #1
 8003b0c:	d0ad      	beq.n	8003a6a <_printf_i+0x15e>
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	079b      	lsls	r3, r3, #30
 8003b12:	d413      	bmi.n	8003b3c <_printf_i+0x230>
 8003b14:	68e0      	ldr	r0, [r4, #12]
 8003b16:	9b03      	ldr	r3, [sp, #12]
 8003b18:	4298      	cmp	r0, r3
 8003b1a:	bfb8      	it	lt
 8003b1c:	4618      	movlt	r0, r3
 8003b1e:	e7a6      	b.n	8003a6e <_printf_i+0x162>
 8003b20:	2301      	movs	r3, #1
 8003b22:	4632      	mov	r2, r6
 8003b24:	4649      	mov	r1, r9
 8003b26:	4640      	mov	r0, r8
 8003b28:	47d0      	blx	sl
 8003b2a:	3001      	adds	r0, #1
 8003b2c:	d09d      	beq.n	8003a6a <_printf_i+0x15e>
 8003b2e:	3501      	adds	r5, #1
 8003b30:	68e3      	ldr	r3, [r4, #12]
 8003b32:	9903      	ldr	r1, [sp, #12]
 8003b34:	1a5b      	subs	r3, r3, r1
 8003b36:	42ab      	cmp	r3, r5
 8003b38:	dcf2      	bgt.n	8003b20 <_printf_i+0x214>
 8003b3a:	e7eb      	b.n	8003b14 <_printf_i+0x208>
 8003b3c:	2500      	movs	r5, #0
 8003b3e:	f104 0619 	add.w	r6, r4, #25
 8003b42:	e7f5      	b.n	8003b30 <_printf_i+0x224>
 8003b44:	08004cc9 	.word	0x08004cc9
 8003b48:	08004cda 	.word	0x08004cda

08003b4c <_scanf_chars>:
 8003b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b50:	4615      	mov	r5, r2
 8003b52:	688a      	ldr	r2, [r1, #8]
 8003b54:	4680      	mov	r8, r0
 8003b56:	460c      	mov	r4, r1
 8003b58:	b932      	cbnz	r2, 8003b68 <_scanf_chars+0x1c>
 8003b5a:	698a      	ldr	r2, [r1, #24]
 8003b5c:	2a00      	cmp	r2, #0
 8003b5e:	bf14      	ite	ne
 8003b60:	f04f 32ff 	movne.w	r2, #4294967295
 8003b64:	2201      	moveq	r2, #1
 8003b66:	608a      	str	r2, [r1, #8]
 8003b68:	2700      	movs	r7, #0
 8003b6a:	6822      	ldr	r2, [r4, #0]
 8003b6c:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8003bfc <_scanf_chars+0xb0>
 8003b70:	06d1      	lsls	r1, r2, #27
 8003b72:	bf5f      	itttt	pl
 8003b74:	681a      	ldrpl	r2, [r3, #0]
 8003b76:	1d11      	addpl	r1, r2, #4
 8003b78:	6019      	strpl	r1, [r3, #0]
 8003b7a:	6816      	ldrpl	r6, [r2, #0]
 8003b7c:	69a0      	ldr	r0, [r4, #24]
 8003b7e:	b188      	cbz	r0, 8003ba4 <_scanf_chars+0x58>
 8003b80:	2801      	cmp	r0, #1
 8003b82:	d107      	bne.n	8003b94 <_scanf_chars+0x48>
 8003b84:	682b      	ldr	r3, [r5, #0]
 8003b86:	781a      	ldrb	r2, [r3, #0]
 8003b88:	6963      	ldr	r3, [r4, #20]
 8003b8a:	5c9b      	ldrb	r3, [r3, r2]
 8003b8c:	b953      	cbnz	r3, 8003ba4 <_scanf_chars+0x58>
 8003b8e:	2f00      	cmp	r7, #0
 8003b90:	d031      	beq.n	8003bf6 <_scanf_chars+0xaa>
 8003b92:	e022      	b.n	8003bda <_scanf_chars+0x8e>
 8003b94:	2802      	cmp	r0, #2
 8003b96:	d120      	bne.n	8003bda <_scanf_chars+0x8e>
 8003b98:	682b      	ldr	r3, [r5, #0]
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8003ba0:	071b      	lsls	r3, r3, #28
 8003ba2:	d41a      	bmi.n	8003bda <_scanf_chars+0x8e>
 8003ba4:	6823      	ldr	r3, [r4, #0]
 8003ba6:	3701      	adds	r7, #1
 8003ba8:	06da      	lsls	r2, r3, #27
 8003baa:	bf5e      	ittt	pl
 8003bac:	682b      	ldrpl	r3, [r5, #0]
 8003bae:	781b      	ldrbpl	r3, [r3, #0]
 8003bb0:	f806 3b01 	strbpl.w	r3, [r6], #1
 8003bb4:	682a      	ldr	r2, [r5, #0]
 8003bb6:	686b      	ldr	r3, [r5, #4]
 8003bb8:	3201      	adds	r2, #1
 8003bba:	602a      	str	r2, [r5, #0]
 8003bbc:	68a2      	ldr	r2, [r4, #8]
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	3a01      	subs	r2, #1
 8003bc2:	606b      	str	r3, [r5, #4]
 8003bc4:	60a2      	str	r2, [r4, #8]
 8003bc6:	b142      	cbz	r2, 8003bda <_scanf_chars+0x8e>
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	dcd7      	bgt.n	8003b7c <_scanf_chars+0x30>
 8003bcc:	4629      	mov	r1, r5
 8003bce:	4640      	mov	r0, r8
 8003bd0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003bd4:	4798      	blx	r3
 8003bd6:	2800      	cmp	r0, #0
 8003bd8:	d0d0      	beq.n	8003b7c <_scanf_chars+0x30>
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	f013 0310 	ands.w	r3, r3, #16
 8003be0:	d105      	bne.n	8003bee <_scanf_chars+0xa2>
 8003be2:	68e2      	ldr	r2, [r4, #12]
 8003be4:	3201      	adds	r2, #1
 8003be6:	60e2      	str	r2, [r4, #12]
 8003be8:	69a2      	ldr	r2, [r4, #24]
 8003bea:	b102      	cbz	r2, 8003bee <_scanf_chars+0xa2>
 8003bec:	7033      	strb	r3, [r6, #0]
 8003bee:	2000      	movs	r0, #0
 8003bf0:	6923      	ldr	r3, [r4, #16]
 8003bf2:	443b      	add	r3, r7
 8003bf4:	6123      	str	r3, [r4, #16]
 8003bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bfa:	bf00      	nop
 8003bfc:	08004d07 	.word	0x08004d07

08003c00 <_scanf_i>:
 8003c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c04:	460c      	mov	r4, r1
 8003c06:	4698      	mov	r8, r3
 8003c08:	4b72      	ldr	r3, [pc, #456]	@ (8003dd4 <_scanf_i+0x1d4>)
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	4682      	mov	sl, r0
 8003c0e:	4616      	mov	r6, r2
 8003c10:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003c14:	ab03      	add	r3, sp, #12
 8003c16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003c1a:	4b6f      	ldr	r3, [pc, #444]	@ (8003dd8 <_scanf_i+0x1d8>)
 8003c1c:	69a1      	ldr	r1, [r4, #24]
 8003c1e:	4a6f      	ldr	r2, [pc, #444]	@ (8003ddc <_scanf_i+0x1dc>)
 8003c20:	4627      	mov	r7, r4
 8003c22:	2903      	cmp	r1, #3
 8003c24:	bf08      	it	eq
 8003c26:	461a      	moveq	r2, r3
 8003c28:	68a3      	ldr	r3, [r4, #8]
 8003c2a:	9201      	str	r2, [sp, #4]
 8003c2c:	1e5a      	subs	r2, r3, #1
 8003c2e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8003c32:	bf81      	itttt	hi
 8003c34:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8003c38:	eb03 0905 	addhi.w	r9, r3, r5
 8003c3c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8003c40:	60a3      	strhi	r3, [r4, #8]
 8003c42:	f857 3b1c 	ldr.w	r3, [r7], #28
 8003c46:	bf98      	it	ls
 8003c48:	f04f 0900 	movls.w	r9, #0
 8003c4c:	463d      	mov	r5, r7
 8003c4e:	f04f 0b00 	mov.w	fp, #0
 8003c52:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8003c56:	6023      	str	r3, [r4, #0]
 8003c58:	6831      	ldr	r1, [r6, #0]
 8003c5a:	ab03      	add	r3, sp, #12
 8003c5c:	2202      	movs	r2, #2
 8003c5e:	7809      	ldrb	r1, [r1, #0]
 8003c60:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8003c64:	f000 f9dc 	bl	8004020 <memchr>
 8003c68:	b328      	cbz	r0, 8003cb6 <_scanf_i+0xb6>
 8003c6a:	f1bb 0f01 	cmp.w	fp, #1
 8003c6e:	d159      	bne.n	8003d24 <_scanf_i+0x124>
 8003c70:	6862      	ldr	r2, [r4, #4]
 8003c72:	b92a      	cbnz	r2, 8003c80 <_scanf_i+0x80>
 8003c74:	2108      	movs	r1, #8
 8003c76:	6822      	ldr	r2, [r4, #0]
 8003c78:	6061      	str	r1, [r4, #4]
 8003c7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c7e:	6022      	str	r2, [r4, #0]
 8003c80:	6822      	ldr	r2, [r4, #0]
 8003c82:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8003c86:	6022      	str	r2, [r4, #0]
 8003c88:	68a2      	ldr	r2, [r4, #8]
 8003c8a:	1e51      	subs	r1, r2, #1
 8003c8c:	60a1      	str	r1, [r4, #8]
 8003c8e:	b192      	cbz	r2, 8003cb6 <_scanf_i+0xb6>
 8003c90:	6832      	ldr	r2, [r6, #0]
 8003c92:	1c51      	adds	r1, r2, #1
 8003c94:	6031      	str	r1, [r6, #0]
 8003c96:	7812      	ldrb	r2, [r2, #0]
 8003c98:	f805 2b01 	strb.w	r2, [r5], #1
 8003c9c:	6872      	ldr	r2, [r6, #4]
 8003c9e:	3a01      	subs	r2, #1
 8003ca0:	2a00      	cmp	r2, #0
 8003ca2:	6072      	str	r2, [r6, #4]
 8003ca4:	dc07      	bgt.n	8003cb6 <_scanf_i+0xb6>
 8003ca6:	4631      	mov	r1, r6
 8003ca8:	4650      	mov	r0, sl
 8003caa:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8003cae:	4790      	blx	r2
 8003cb0:	2800      	cmp	r0, #0
 8003cb2:	f040 8085 	bne.w	8003dc0 <_scanf_i+0x1c0>
 8003cb6:	f10b 0b01 	add.w	fp, fp, #1
 8003cba:	f1bb 0f03 	cmp.w	fp, #3
 8003cbe:	d1cb      	bne.n	8003c58 <_scanf_i+0x58>
 8003cc0:	6863      	ldr	r3, [r4, #4]
 8003cc2:	b90b      	cbnz	r3, 8003cc8 <_scanf_i+0xc8>
 8003cc4:	230a      	movs	r3, #10
 8003cc6:	6063      	str	r3, [r4, #4]
 8003cc8:	6863      	ldr	r3, [r4, #4]
 8003cca:	4945      	ldr	r1, [pc, #276]	@ (8003de0 <_scanf_i+0x1e0>)
 8003ccc:	6960      	ldr	r0, [r4, #20]
 8003cce:	1ac9      	subs	r1, r1, r3
 8003cd0:	f000 f8e9 	bl	8003ea6 <__sccl>
 8003cd4:	f04f 0b00 	mov.w	fp, #0
 8003cd8:	68a3      	ldr	r3, [r4, #8]
 8003cda:	6822      	ldr	r2, [r4, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d03d      	beq.n	8003d5c <_scanf_i+0x15c>
 8003ce0:	6831      	ldr	r1, [r6, #0]
 8003ce2:	6960      	ldr	r0, [r4, #20]
 8003ce4:	f891 c000 	ldrb.w	ip, [r1]
 8003ce8:	f810 000c 	ldrb.w	r0, [r0, ip]
 8003cec:	2800      	cmp	r0, #0
 8003cee:	d035      	beq.n	8003d5c <_scanf_i+0x15c>
 8003cf0:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8003cf4:	d124      	bne.n	8003d40 <_scanf_i+0x140>
 8003cf6:	0510      	lsls	r0, r2, #20
 8003cf8:	d522      	bpl.n	8003d40 <_scanf_i+0x140>
 8003cfa:	f10b 0b01 	add.w	fp, fp, #1
 8003cfe:	f1b9 0f00 	cmp.w	r9, #0
 8003d02:	d003      	beq.n	8003d0c <_scanf_i+0x10c>
 8003d04:	3301      	adds	r3, #1
 8003d06:	f109 39ff 	add.w	r9, r9, #4294967295
 8003d0a:	60a3      	str	r3, [r4, #8]
 8003d0c:	6873      	ldr	r3, [r6, #4]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	6073      	str	r3, [r6, #4]
 8003d14:	dd1b      	ble.n	8003d4e <_scanf_i+0x14e>
 8003d16:	6833      	ldr	r3, [r6, #0]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	6033      	str	r3, [r6, #0]
 8003d1c:	68a3      	ldr	r3, [r4, #8]
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	60a3      	str	r3, [r4, #8]
 8003d22:	e7d9      	b.n	8003cd8 <_scanf_i+0xd8>
 8003d24:	f1bb 0f02 	cmp.w	fp, #2
 8003d28:	d1ae      	bne.n	8003c88 <_scanf_i+0x88>
 8003d2a:	6822      	ldr	r2, [r4, #0]
 8003d2c:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8003d30:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8003d34:	d1bf      	bne.n	8003cb6 <_scanf_i+0xb6>
 8003d36:	2110      	movs	r1, #16
 8003d38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d3c:	6061      	str	r1, [r4, #4]
 8003d3e:	e7a2      	b.n	8003c86 <_scanf_i+0x86>
 8003d40:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8003d44:	6022      	str	r2, [r4, #0]
 8003d46:	780b      	ldrb	r3, [r1, #0]
 8003d48:	f805 3b01 	strb.w	r3, [r5], #1
 8003d4c:	e7de      	b.n	8003d0c <_scanf_i+0x10c>
 8003d4e:	4631      	mov	r1, r6
 8003d50:	4650      	mov	r0, sl
 8003d52:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003d56:	4798      	blx	r3
 8003d58:	2800      	cmp	r0, #0
 8003d5a:	d0df      	beq.n	8003d1c <_scanf_i+0x11c>
 8003d5c:	6823      	ldr	r3, [r4, #0]
 8003d5e:	05d9      	lsls	r1, r3, #23
 8003d60:	d50d      	bpl.n	8003d7e <_scanf_i+0x17e>
 8003d62:	42bd      	cmp	r5, r7
 8003d64:	d909      	bls.n	8003d7a <_scanf_i+0x17a>
 8003d66:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003d6a:	4632      	mov	r2, r6
 8003d6c:	4650      	mov	r0, sl
 8003d6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003d72:	f105 39ff 	add.w	r9, r5, #4294967295
 8003d76:	4798      	blx	r3
 8003d78:	464d      	mov	r5, r9
 8003d7a:	42bd      	cmp	r5, r7
 8003d7c:	d028      	beq.n	8003dd0 <_scanf_i+0x1d0>
 8003d7e:	6822      	ldr	r2, [r4, #0]
 8003d80:	f012 0210 	ands.w	r2, r2, #16
 8003d84:	d113      	bne.n	8003dae <_scanf_i+0x1ae>
 8003d86:	702a      	strb	r2, [r5, #0]
 8003d88:	4639      	mov	r1, r7
 8003d8a:	6863      	ldr	r3, [r4, #4]
 8003d8c:	4650      	mov	r0, sl
 8003d8e:	9e01      	ldr	r6, [sp, #4]
 8003d90:	47b0      	blx	r6
 8003d92:	f8d8 3000 	ldr.w	r3, [r8]
 8003d96:	6821      	ldr	r1, [r4, #0]
 8003d98:	1d1a      	adds	r2, r3, #4
 8003d9a:	f8c8 2000 	str.w	r2, [r8]
 8003d9e:	f011 0f20 	tst.w	r1, #32
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	d00f      	beq.n	8003dc6 <_scanf_i+0x1c6>
 8003da6:	6018      	str	r0, [r3, #0]
 8003da8:	68e3      	ldr	r3, [r4, #12]
 8003daa:	3301      	adds	r3, #1
 8003dac:	60e3      	str	r3, [r4, #12]
 8003dae:	2000      	movs	r0, #0
 8003db0:	6923      	ldr	r3, [r4, #16]
 8003db2:	1bed      	subs	r5, r5, r7
 8003db4:	445d      	add	r5, fp
 8003db6:	442b      	add	r3, r5
 8003db8:	6123      	str	r3, [r4, #16]
 8003dba:	b007      	add	sp, #28
 8003dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dc0:	f04f 0b00 	mov.w	fp, #0
 8003dc4:	e7ca      	b.n	8003d5c <_scanf_i+0x15c>
 8003dc6:	07ca      	lsls	r2, r1, #31
 8003dc8:	bf4c      	ite	mi
 8003dca:	8018      	strhmi	r0, [r3, #0]
 8003dcc:	6018      	strpl	r0, [r3, #0]
 8003dce:	e7eb      	b.n	8003da8 <_scanf_i+0x1a8>
 8003dd0:	2001      	movs	r0, #1
 8003dd2:	e7f2      	b.n	8003dba <_scanf_i+0x1ba>
 8003dd4:	08004a74 	.word	0x08004a74
 8003dd8:	080041a9 	.word	0x080041a9
 8003ddc:	08004289 	.word	0x08004289
 8003de0:	08004cfb 	.word	0x08004cfb

08003de4 <__swhatbuf_r>:
 8003de4:	b570      	push	{r4, r5, r6, lr}
 8003de6:	460c      	mov	r4, r1
 8003de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dec:	4615      	mov	r5, r2
 8003dee:	2900      	cmp	r1, #0
 8003df0:	461e      	mov	r6, r3
 8003df2:	b096      	sub	sp, #88	@ 0x58
 8003df4:	da0c      	bge.n	8003e10 <__swhatbuf_r+0x2c>
 8003df6:	89a3      	ldrh	r3, [r4, #12]
 8003df8:	2100      	movs	r1, #0
 8003dfa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003dfe:	bf14      	ite	ne
 8003e00:	2340      	movne	r3, #64	@ 0x40
 8003e02:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003e06:	2000      	movs	r0, #0
 8003e08:	6031      	str	r1, [r6, #0]
 8003e0a:	602b      	str	r3, [r5, #0]
 8003e0c:	b016      	add	sp, #88	@ 0x58
 8003e0e:	bd70      	pop	{r4, r5, r6, pc}
 8003e10:	466a      	mov	r2, sp
 8003e12:	f000 f8d3 	bl	8003fbc <_fstat_r>
 8003e16:	2800      	cmp	r0, #0
 8003e18:	dbed      	blt.n	8003df6 <__swhatbuf_r+0x12>
 8003e1a:	9901      	ldr	r1, [sp, #4]
 8003e1c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003e20:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003e24:	4259      	negs	r1, r3
 8003e26:	4159      	adcs	r1, r3
 8003e28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e2c:	e7eb      	b.n	8003e06 <__swhatbuf_r+0x22>

08003e2e <__smakebuf_r>:
 8003e2e:	898b      	ldrh	r3, [r1, #12]
 8003e30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e32:	079d      	lsls	r5, r3, #30
 8003e34:	4606      	mov	r6, r0
 8003e36:	460c      	mov	r4, r1
 8003e38:	d507      	bpl.n	8003e4a <__smakebuf_r+0x1c>
 8003e3a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003e3e:	6023      	str	r3, [r4, #0]
 8003e40:	6123      	str	r3, [r4, #16]
 8003e42:	2301      	movs	r3, #1
 8003e44:	6163      	str	r3, [r4, #20]
 8003e46:	b003      	add	sp, #12
 8003e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e4a:	466a      	mov	r2, sp
 8003e4c:	ab01      	add	r3, sp, #4
 8003e4e:	f7ff ffc9 	bl	8003de4 <__swhatbuf_r>
 8003e52:	9f00      	ldr	r7, [sp, #0]
 8003e54:	4605      	mov	r5, r0
 8003e56:	4639      	mov	r1, r7
 8003e58:	4630      	mov	r0, r6
 8003e5a:	f7fe fff7 	bl	8002e4c <_malloc_r>
 8003e5e:	b948      	cbnz	r0, 8003e74 <__smakebuf_r+0x46>
 8003e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e64:	059a      	lsls	r2, r3, #22
 8003e66:	d4ee      	bmi.n	8003e46 <__smakebuf_r+0x18>
 8003e68:	f023 0303 	bic.w	r3, r3, #3
 8003e6c:	f043 0302 	orr.w	r3, r3, #2
 8003e70:	81a3      	strh	r3, [r4, #12]
 8003e72:	e7e2      	b.n	8003e3a <__smakebuf_r+0xc>
 8003e74:	89a3      	ldrh	r3, [r4, #12]
 8003e76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003e7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e7e:	81a3      	strh	r3, [r4, #12]
 8003e80:	9b01      	ldr	r3, [sp, #4]
 8003e82:	6020      	str	r0, [r4, #0]
 8003e84:	b15b      	cbz	r3, 8003e9e <__smakebuf_r+0x70>
 8003e86:	4630      	mov	r0, r6
 8003e88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e8c:	f000 f8a8 	bl	8003fe0 <_isatty_r>
 8003e90:	b128      	cbz	r0, 8003e9e <__smakebuf_r+0x70>
 8003e92:	89a3      	ldrh	r3, [r4, #12]
 8003e94:	f023 0303 	bic.w	r3, r3, #3
 8003e98:	f043 0301 	orr.w	r3, r3, #1
 8003e9c:	81a3      	strh	r3, [r4, #12]
 8003e9e:	89a3      	ldrh	r3, [r4, #12]
 8003ea0:	431d      	orrs	r5, r3
 8003ea2:	81a5      	strh	r5, [r4, #12]
 8003ea4:	e7cf      	b.n	8003e46 <__smakebuf_r+0x18>

08003ea6 <__sccl>:
 8003ea6:	b570      	push	{r4, r5, r6, lr}
 8003ea8:	780b      	ldrb	r3, [r1, #0]
 8003eaa:	4604      	mov	r4, r0
 8003eac:	2b5e      	cmp	r3, #94	@ 0x5e
 8003eae:	bf0b      	itete	eq
 8003eb0:	784b      	ldrbeq	r3, [r1, #1]
 8003eb2:	1c4a      	addne	r2, r1, #1
 8003eb4:	1c8a      	addeq	r2, r1, #2
 8003eb6:	2100      	movne	r1, #0
 8003eb8:	bf08      	it	eq
 8003eba:	2101      	moveq	r1, #1
 8003ebc:	3801      	subs	r0, #1
 8003ebe:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8003ec2:	f800 1f01 	strb.w	r1, [r0, #1]!
 8003ec6:	42a8      	cmp	r0, r5
 8003ec8:	d1fb      	bne.n	8003ec2 <__sccl+0x1c>
 8003eca:	b90b      	cbnz	r3, 8003ed0 <__sccl+0x2a>
 8003ecc:	1e50      	subs	r0, r2, #1
 8003ece:	bd70      	pop	{r4, r5, r6, pc}
 8003ed0:	f081 0101 	eor.w	r1, r1, #1
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	54e1      	strb	r1, [r4, r3]
 8003ed8:	4602      	mov	r2, r0
 8003eda:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003ede:	2d2d      	cmp	r5, #45	@ 0x2d
 8003ee0:	d005      	beq.n	8003eee <__sccl+0x48>
 8003ee2:	2d5d      	cmp	r5, #93	@ 0x5d
 8003ee4:	d016      	beq.n	8003f14 <__sccl+0x6e>
 8003ee6:	2d00      	cmp	r5, #0
 8003ee8:	d0f1      	beq.n	8003ece <__sccl+0x28>
 8003eea:	462b      	mov	r3, r5
 8003eec:	e7f2      	b.n	8003ed4 <__sccl+0x2e>
 8003eee:	7846      	ldrb	r6, [r0, #1]
 8003ef0:	2e5d      	cmp	r6, #93	@ 0x5d
 8003ef2:	d0fa      	beq.n	8003eea <__sccl+0x44>
 8003ef4:	42b3      	cmp	r3, r6
 8003ef6:	dcf8      	bgt.n	8003eea <__sccl+0x44>
 8003ef8:	461a      	mov	r2, r3
 8003efa:	3002      	adds	r0, #2
 8003efc:	3201      	adds	r2, #1
 8003efe:	4296      	cmp	r6, r2
 8003f00:	54a1      	strb	r1, [r4, r2]
 8003f02:	dcfb      	bgt.n	8003efc <__sccl+0x56>
 8003f04:	1af2      	subs	r2, r6, r3
 8003f06:	3a01      	subs	r2, #1
 8003f08:	42b3      	cmp	r3, r6
 8003f0a:	bfa8      	it	ge
 8003f0c:	2200      	movge	r2, #0
 8003f0e:	1c5d      	adds	r5, r3, #1
 8003f10:	18ab      	adds	r3, r5, r2
 8003f12:	e7e1      	b.n	8003ed8 <__sccl+0x32>
 8003f14:	4610      	mov	r0, r2
 8003f16:	e7da      	b.n	8003ece <__sccl+0x28>

08003f18 <__submore>:
 8003f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f1c:	460c      	mov	r4, r1
 8003f1e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8003f20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003f24:	4299      	cmp	r1, r3
 8003f26:	d11b      	bne.n	8003f60 <__submore+0x48>
 8003f28:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003f2c:	f7fe ff8e 	bl	8002e4c <_malloc_r>
 8003f30:	b918      	cbnz	r0, 8003f3a <__submore+0x22>
 8003f32:	f04f 30ff 	mov.w	r0, #4294967295
 8003f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f3e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003f40:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8003f44:	6360      	str	r0, [r4, #52]	@ 0x34
 8003f46:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8003f4a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8003f4e:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8003f52:	7043      	strb	r3, [r0, #1]
 8003f54:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8003f58:	7003      	strb	r3, [r0, #0]
 8003f5a:	6020      	str	r0, [r4, #0]
 8003f5c:	2000      	movs	r0, #0
 8003f5e:	e7ea      	b.n	8003f36 <__submore+0x1e>
 8003f60:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8003f62:	0077      	lsls	r7, r6, #1
 8003f64:	463a      	mov	r2, r7
 8003f66:	f000 f877 	bl	8004058 <_realloc_r>
 8003f6a:	4605      	mov	r5, r0
 8003f6c:	2800      	cmp	r0, #0
 8003f6e:	d0e0      	beq.n	8003f32 <__submore+0x1a>
 8003f70:	eb00 0806 	add.w	r8, r0, r6
 8003f74:	4601      	mov	r1, r0
 8003f76:	4632      	mov	r2, r6
 8003f78:	4640      	mov	r0, r8
 8003f7a:	f000 f85f 	bl	800403c <memcpy>
 8003f7e:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8003f82:	f8c4 8000 	str.w	r8, [r4]
 8003f86:	e7e9      	b.n	8003f5c <__submore+0x44>

08003f88 <memmove>:
 8003f88:	4288      	cmp	r0, r1
 8003f8a:	b510      	push	{r4, lr}
 8003f8c:	eb01 0402 	add.w	r4, r1, r2
 8003f90:	d902      	bls.n	8003f98 <memmove+0x10>
 8003f92:	4284      	cmp	r4, r0
 8003f94:	4623      	mov	r3, r4
 8003f96:	d807      	bhi.n	8003fa8 <memmove+0x20>
 8003f98:	1e43      	subs	r3, r0, #1
 8003f9a:	42a1      	cmp	r1, r4
 8003f9c:	d008      	beq.n	8003fb0 <memmove+0x28>
 8003f9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fa2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003fa6:	e7f8      	b.n	8003f9a <memmove+0x12>
 8003fa8:	4601      	mov	r1, r0
 8003faa:	4402      	add	r2, r0
 8003fac:	428a      	cmp	r2, r1
 8003fae:	d100      	bne.n	8003fb2 <memmove+0x2a>
 8003fb0:	bd10      	pop	{r4, pc}
 8003fb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003fb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003fba:	e7f7      	b.n	8003fac <memmove+0x24>

08003fbc <_fstat_r>:
 8003fbc:	b538      	push	{r3, r4, r5, lr}
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	4d06      	ldr	r5, [pc, #24]	@ (8003fdc <_fstat_r+0x20>)
 8003fc2:	4604      	mov	r4, r0
 8003fc4:	4608      	mov	r0, r1
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	602b      	str	r3, [r5, #0]
 8003fca:	f7fd fba7 	bl	800171c <_fstat>
 8003fce:	1c43      	adds	r3, r0, #1
 8003fd0:	d102      	bne.n	8003fd8 <_fstat_r+0x1c>
 8003fd2:	682b      	ldr	r3, [r5, #0]
 8003fd4:	b103      	cbz	r3, 8003fd8 <_fstat_r+0x1c>
 8003fd6:	6023      	str	r3, [r4, #0]
 8003fd8:	bd38      	pop	{r3, r4, r5, pc}
 8003fda:	bf00      	nop
 8003fdc:	20001138 	.word	0x20001138

08003fe0 <_isatty_r>:
 8003fe0:	b538      	push	{r3, r4, r5, lr}
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	4d05      	ldr	r5, [pc, #20]	@ (8003ffc <_isatty_r+0x1c>)
 8003fe6:	4604      	mov	r4, r0
 8003fe8:	4608      	mov	r0, r1
 8003fea:	602b      	str	r3, [r5, #0]
 8003fec:	f7fd fba5 	bl	800173a <_isatty>
 8003ff0:	1c43      	adds	r3, r0, #1
 8003ff2:	d102      	bne.n	8003ffa <_isatty_r+0x1a>
 8003ff4:	682b      	ldr	r3, [r5, #0]
 8003ff6:	b103      	cbz	r3, 8003ffa <_isatty_r+0x1a>
 8003ff8:	6023      	str	r3, [r4, #0]
 8003ffa:	bd38      	pop	{r3, r4, r5, pc}
 8003ffc:	20001138 	.word	0x20001138

08004000 <_sbrk_r>:
 8004000:	b538      	push	{r3, r4, r5, lr}
 8004002:	2300      	movs	r3, #0
 8004004:	4d05      	ldr	r5, [pc, #20]	@ (800401c <_sbrk_r+0x1c>)
 8004006:	4604      	mov	r4, r0
 8004008:	4608      	mov	r0, r1
 800400a:	602b      	str	r3, [r5, #0]
 800400c:	f7fd fbac 	bl	8001768 <_sbrk>
 8004010:	1c43      	adds	r3, r0, #1
 8004012:	d102      	bne.n	800401a <_sbrk_r+0x1a>
 8004014:	682b      	ldr	r3, [r5, #0]
 8004016:	b103      	cbz	r3, 800401a <_sbrk_r+0x1a>
 8004018:	6023      	str	r3, [r4, #0]
 800401a:	bd38      	pop	{r3, r4, r5, pc}
 800401c:	20001138 	.word	0x20001138

08004020 <memchr>:
 8004020:	4603      	mov	r3, r0
 8004022:	b510      	push	{r4, lr}
 8004024:	b2c9      	uxtb	r1, r1
 8004026:	4402      	add	r2, r0
 8004028:	4293      	cmp	r3, r2
 800402a:	4618      	mov	r0, r3
 800402c:	d101      	bne.n	8004032 <memchr+0x12>
 800402e:	2000      	movs	r0, #0
 8004030:	e003      	b.n	800403a <memchr+0x1a>
 8004032:	7804      	ldrb	r4, [r0, #0]
 8004034:	3301      	adds	r3, #1
 8004036:	428c      	cmp	r4, r1
 8004038:	d1f6      	bne.n	8004028 <memchr+0x8>
 800403a:	bd10      	pop	{r4, pc}

0800403c <memcpy>:
 800403c:	440a      	add	r2, r1
 800403e:	4291      	cmp	r1, r2
 8004040:	f100 33ff 	add.w	r3, r0, #4294967295
 8004044:	d100      	bne.n	8004048 <memcpy+0xc>
 8004046:	4770      	bx	lr
 8004048:	b510      	push	{r4, lr}
 800404a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800404e:	4291      	cmp	r1, r2
 8004050:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004054:	d1f9      	bne.n	800404a <memcpy+0xe>
 8004056:	bd10      	pop	{r4, pc}

08004058 <_realloc_r>:
 8004058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800405c:	4680      	mov	r8, r0
 800405e:	4615      	mov	r5, r2
 8004060:	460c      	mov	r4, r1
 8004062:	b921      	cbnz	r1, 800406e <_realloc_r+0x16>
 8004064:	4611      	mov	r1, r2
 8004066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800406a:	f7fe beef 	b.w	8002e4c <_malloc_r>
 800406e:	b92a      	cbnz	r2, 800407c <_realloc_r+0x24>
 8004070:	f7fe fe82 	bl	8002d78 <_free_r>
 8004074:	2400      	movs	r4, #0
 8004076:	4620      	mov	r0, r4
 8004078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800407c:	f000 f906 	bl	800428c <_malloc_usable_size_r>
 8004080:	4285      	cmp	r5, r0
 8004082:	4606      	mov	r6, r0
 8004084:	d802      	bhi.n	800408c <_realloc_r+0x34>
 8004086:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800408a:	d8f4      	bhi.n	8004076 <_realloc_r+0x1e>
 800408c:	4629      	mov	r1, r5
 800408e:	4640      	mov	r0, r8
 8004090:	f7fe fedc 	bl	8002e4c <_malloc_r>
 8004094:	4607      	mov	r7, r0
 8004096:	2800      	cmp	r0, #0
 8004098:	d0ec      	beq.n	8004074 <_realloc_r+0x1c>
 800409a:	42b5      	cmp	r5, r6
 800409c:	462a      	mov	r2, r5
 800409e:	4621      	mov	r1, r4
 80040a0:	bf28      	it	cs
 80040a2:	4632      	movcs	r2, r6
 80040a4:	f7ff ffca 	bl	800403c <memcpy>
 80040a8:	4621      	mov	r1, r4
 80040aa:	4640      	mov	r0, r8
 80040ac:	f7fe fe64 	bl	8002d78 <_free_r>
 80040b0:	463c      	mov	r4, r7
 80040b2:	e7e0      	b.n	8004076 <_realloc_r+0x1e>

080040b4 <_strtol_l.constprop.0>:
 80040b4:	2b24      	cmp	r3, #36	@ 0x24
 80040b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040ba:	4686      	mov	lr, r0
 80040bc:	4690      	mov	r8, r2
 80040be:	d801      	bhi.n	80040c4 <_strtol_l.constprop.0+0x10>
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d106      	bne.n	80040d2 <_strtol_l.constprop.0+0x1e>
 80040c4:	f7fe fe2a 	bl	8002d1c <__errno>
 80040c8:	2316      	movs	r3, #22
 80040ca:	6003      	str	r3, [r0, #0]
 80040cc:	2000      	movs	r0, #0
 80040ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040d2:	460d      	mov	r5, r1
 80040d4:	4833      	ldr	r0, [pc, #204]	@ (80041a4 <_strtol_l.constprop.0+0xf0>)
 80040d6:	462a      	mov	r2, r5
 80040d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80040dc:	5d06      	ldrb	r6, [r0, r4]
 80040de:	f016 0608 	ands.w	r6, r6, #8
 80040e2:	d1f8      	bne.n	80040d6 <_strtol_l.constprop.0+0x22>
 80040e4:	2c2d      	cmp	r4, #45	@ 0x2d
 80040e6:	d12d      	bne.n	8004144 <_strtol_l.constprop.0+0x90>
 80040e8:	2601      	movs	r6, #1
 80040ea:	782c      	ldrb	r4, [r5, #0]
 80040ec:	1c95      	adds	r5, r2, #2
 80040ee:	f033 0210 	bics.w	r2, r3, #16
 80040f2:	d109      	bne.n	8004108 <_strtol_l.constprop.0+0x54>
 80040f4:	2c30      	cmp	r4, #48	@ 0x30
 80040f6:	d12a      	bne.n	800414e <_strtol_l.constprop.0+0x9a>
 80040f8:	782a      	ldrb	r2, [r5, #0]
 80040fa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80040fe:	2a58      	cmp	r2, #88	@ 0x58
 8004100:	d125      	bne.n	800414e <_strtol_l.constprop.0+0x9a>
 8004102:	2310      	movs	r3, #16
 8004104:	786c      	ldrb	r4, [r5, #1]
 8004106:	3502      	adds	r5, #2
 8004108:	2200      	movs	r2, #0
 800410a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800410e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004112:	fbbc f9f3 	udiv	r9, ip, r3
 8004116:	4610      	mov	r0, r2
 8004118:	fb03 ca19 	mls	sl, r3, r9, ip
 800411c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004120:	2f09      	cmp	r7, #9
 8004122:	d81b      	bhi.n	800415c <_strtol_l.constprop.0+0xa8>
 8004124:	463c      	mov	r4, r7
 8004126:	42a3      	cmp	r3, r4
 8004128:	dd27      	ble.n	800417a <_strtol_l.constprop.0+0xc6>
 800412a:	1c57      	adds	r7, r2, #1
 800412c:	d007      	beq.n	800413e <_strtol_l.constprop.0+0x8a>
 800412e:	4581      	cmp	r9, r0
 8004130:	d320      	bcc.n	8004174 <_strtol_l.constprop.0+0xc0>
 8004132:	d101      	bne.n	8004138 <_strtol_l.constprop.0+0x84>
 8004134:	45a2      	cmp	sl, r4
 8004136:	db1d      	blt.n	8004174 <_strtol_l.constprop.0+0xc0>
 8004138:	2201      	movs	r2, #1
 800413a:	fb00 4003 	mla	r0, r0, r3, r4
 800413e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004142:	e7eb      	b.n	800411c <_strtol_l.constprop.0+0x68>
 8004144:	2c2b      	cmp	r4, #43	@ 0x2b
 8004146:	bf04      	itt	eq
 8004148:	782c      	ldrbeq	r4, [r5, #0]
 800414a:	1c95      	addeq	r5, r2, #2
 800414c:	e7cf      	b.n	80040ee <_strtol_l.constprop.0+0x3a>
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1da      	bne.n	8004108 <_strtol_l.constprop.0+0x54>
 8004152:	2c30      	cmp	r4, #48	@ 0x30
 8004154:	bf0c      	ite	eq
 8004156:	2308      	moveq	r3, #8
 8004158:	230a      	movne	r3, #10
 800415a:	e7d5      	b.n	8004108 <_strtol_l.constprop.0+0x54>
 800415c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004160:	2f19      	cmp	r7, #25
 8004162:	d801      	bhi.n	8004168 <_strtol_l.constprop.0+0xb4>
 8004164:	3c37      	subs	r4, #55	@ 0x37
 8004166:	e7de      	b.n	8004126 <_strtol_l.constprop.0+0x72>
 8004168:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800416c:	2f19      	cmp	r7, #25
 800416e:	d804      	bhi.n	800417a <_strtol_l.constprop.0+0xc6>
 8004170:	3c57      	subs	r4, #87	@ 0x57
 8004172:	e7d8      	b.n	8004126 <_strtol_l.constprop.0+0x72>
 8004174:	f04f 32ff 	mov.w	r2, #4294967295
 8004178:	e7e1      	b.n	800413e <_strtol_l.constprop.0+0x8a>
 800417a:	1c53      	adds	r3, r2, #1
 800417c:	d108      	bne.n	8004190 <_strtol_l.constprop.0+0xdc>
 800417e:	2322      	movs	r3, #34	@ 0x22
 8004180:	4660      	mov	r0, ip
 8004182:	f8ce 3000 	str.w	r3, [lr]
 8004186:	f1b8 0f00 	cmp.w	r8, #0
 800418a:	d0a0      	beq.n	80040ce <_strtol_l.constprop.0+0x1a>
 800418c:	1e69      	subs	r1, r5, #1
 800418e:	e006      	b.n	800419e <_strtol_l.constprop.0+0xea>
 8004190:	b106      	cbz	r6, 8004194 <_strtol_l.constprop.0+0xe0>
 8004192:	4240      	negs	r0, r0
 8004194:	f1b8 0f00 	cmp.w	r8, #0
 8004198:	d099      	beq.n	80040ce <_strtol_l.constprop.0+0x1a>
 800419a:	2a00      	cmp	r2, #0
 800419c:	d1f6      	bne.n	800418c <_strtol_l.constprop.0+0xd8>
 800419e:	f8c8 1000 	str.w	r1, [r8]
 80041a2:	e794      	b.n	80040ce <_strtol_l.constprop.0+0x1a>
 80041a4:	08004d07 	.word	0x08004d07

080041a8 <_strtol_r>:
 80041a8:	f7ff bf84 	b.w	80040b4 <_strtol_l.constprop.0>

080041ac <_strtoul_l.constprop.0>:
 80041ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80041b0:	4686      	mov	lr, r0
 80041b2:	460d      	mov	r5, r1
 80041b4:	4e33      	ldr	r6, [pc, #204]	@ (8004284 <_strtoul_l.constprop.0+0xd8>)
 80041b6:	4628      	mov	r0, r5
 80041b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80041bc:	5d37      	ldrb	r7, [r6, r4]
 80041be:	f017 0708 	ands.w	r7, r7, #8
 80041c2:	d1f8      	bne.n	80041b6 <_strtoul_l.constprop.0+0xa>
 80041c4:	2c2d      	cmp	r4, #45	@ 0x2d
 80041c6:	d12f      	bne.n	8004228 <_strtoul_l.constprop.0+0x7c>
 80041c8:	2701      	movs	r7, #1
 80041ca:	782c      	ldrb	r4, [r5, #0]
 80041cc:	1c85      	adds	r5, r0, #2
 80041ce:	f033 0010 	bics.w	r0, r3, #16
 80041d2:	d109      	bne.n	80041e8 <_strtoul_l.constprop.0+0x3c>
 80041d4:	2c30      	cmp	r4, #48	@ 0x30
 80041d6:	d12c      	bne.n	8004232 <_strtoul_l.constprop.0+0x86>
 80041d8:	7828      	ldrb	r0, [r5, #0]
 80041da:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80041de:	2858      	cmp	r0, #88	@ 0x58
 80041e0:	d127      	bne.n	8004232 <_strtoul_l.constprop.0+0x86>
 80041e2:	2310      	movs	r3, #16
 80041e4:	786c      	ldrb	r4, [r5, #1]
 80041e6:	3502      	adds	r5, #2
 80041e8:	f04f 38ff 	mov.w	r8, #4294967295
 80041ec:	fbb8 f8f3 	udiv	r8, r8, r3
 80041f0:	2600      	movs	r6, #0
 80041f2:	fb03 f908 	mul.w	r9, r3, r8
 80041f6:	4630      	mov	r0, r6
 80041f8:	ea6f 0909 	mvn.w	r9, r9
 80041fc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8004200:	f1bc 0f09 	cmp.w	ip, #9
 8004204:	d81c      	bhi.n	8004240 <_strtoul_l.constprop.0+0x94>
 8004206:	4664      	mov	r4, ip
 8004208:	42a3      	cmp	r3, r4
 800420a:	dd2a      	ble.n	8004262 <_strtoul_l.constprop.0+0xb6>
 800420c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004210:	d007      	beq.n	8004222 <_strtoul_l.constprop.0+0x76>
 8004212:	4580      	cmp	r8, r0
 8004214:	d322      	bcc.n	800425c <_strtoul_l.constprop.0+0xb0>
 8004216:	d101      	bne.n	800421c <_strtoul_l.constprop.0+0x70>
 8004218:	45a1      	cmp	r9, r4
 800421a:	db1f      	blt.n	800425c <_strtoul_l.constprop.0+0xb0>
 800421c:	2601      	movs	r6, #1
 800421e:	fb00 4003 	mla	r0, r0, r3, r4
 8004222:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004226:	e7e9      	b.n	80041fc <_strtoul_l.constprop.0+0x50>
 8004228:	2c2b      	cmp	r4, #43	@ 0x2b
 800422a:	bf04      	itt	eq
 800422c:	782c      	ldrbeq	r4, [r5, #0]
 800422e:	1c85      	addeq	r5, r0, #2
 8004230:	e7cd      	b.n	80041ce <_strtoul_l.constprop.0+0x22>
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1d8      	bne.n	80041e8 <_strtoul_l.constprop.0+0x3c>
 8004236:	2c30      	cmp	r4, #48	@ 0x30
 8004238:	bf0c      	ite	eq
 800423a:	2308      	moveq	r3, #8
 800423c:	230a      	movne	r3, #10
 800423e:	e7d3      	b.n	80041e8 <_strtoul_l.constprop.0+0x3c>
 8004240:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8004244:	f1bc 0f19 	cmp.w	ip, #25
 8004248:	d801      	bhi.n	800424e <_strtoul_l.constprop.0+0xa2>
 800424a:	3c37      	subs	r4, #55	@ 0x37
 800424c:	e7dc      	b.n	8004208 <_strtoul_l.constprop.0+0x5c>
 800424e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8004252:	f1bc 0f19 	cmp.w	ip, #25
 8004256:	d804      	bhi.n	8004262 <_strtoul_l.constprop.0+0xb6>
 8004258:	3c57      	subs	r4, #87	@ 0x57
 800425a:	e7d5      	b.n	8004208 <_strtoul_l.constprop.0+0x5c>
 800425c:	f04f 36ff 	mov.w	r6, #4294967295
 8004260:	e7df      	b.n	8004222 <_strtoul_l.constprop.0+0x76>
 8004262:	1c73      	adds	r3, r6, #1
 8004264:	d106      	bne.n	8004274 <_strtoul_l.constprop.0+0xc8>
 8004266:	2322      	movs	r3, #34	@ 0x22
 8004268:	4630      	mov	r0, r6
 800426a:	f8ce 3000 	str.w	r3, [lr]
 800426e:	b932      	cbnz	r2, 800427e <_strtoul_l.constprop.0+0xd2>
 8004270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004274:	b107      	cbz	r7, 8004278 <_strtoul_l.constprop.0+0xcc>
 8004276:	4240      	negs	r0, r0
 8004278:	2a00      	cmp	r2, #0
 800427a:	d0f9      	beq.n	8004270 <_strtoul_l.constprop.0+0xc4>
 800427c:	b106      	cbz	r6, 8004280 <_strtoul_l.constprop.0+0xd4>
 800427e:	1e69      	subs	r1, r5, #1
 8004280:	6011      	str	r1, [r2, #0]
 8004282:	e7f5      	b.n	8004270 <_strtoul_l.constprop.0+0xc4>
 8004284:	08004d07 	.word	0x08004d07

08004288 <_strtoul_r>:
 8004288:	f7ff bf90 	b.w	80041ac <_strtoul_l.constprop.0>

0800428c <_malloc_usable_size_r>:
 800428c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004290:	1f18      	subs	r0, r3, #4
 8004292:	2b00      	cmp	r3, #0
 8004294:	bfbc      	itt	lt
 8004296:	580b      	ldrlt	r3, [r1, r0]
 8004298:	18c0      	addlt	r0, r0, r3
 800429a:	4770      	bx	lr

0800429c <_init>:
 800429c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800429e:	bf00      	nop
 80042a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042a2:	bc08      	pop	{r3}
 80042a4:	469e      	mov	lr, r3
 80042a6:	4770      	bx	lr

080042a8 <_fini>:
 80042a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042aa:	bf00      	nop
 80042ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ae:	bc08      	pop	{r3}
 80042b0:	469e      	mov	lr, r3
 80042b2:	4770      	bx	lr
