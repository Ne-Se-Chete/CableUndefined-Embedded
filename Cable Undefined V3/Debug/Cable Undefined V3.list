
Cable Undefined V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e84  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000086c  08004068  08004068  00005068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048d4  080048d4  00006d28  2**0
                  CONTENTS
  4 .ARM          00000008  080048d4  080048d4  000058d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048dc  080048dc  00006d28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048dc  080048dc  000058dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048e0  080048e0  000058e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000d28  20000000  080048e4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f8  20000d28  0800560c  00006d28  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001120  0800560c  00007120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006d28  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009803  00000000  00000000  00006d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bad  00000000  00000000  00010554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000850  00000000  00000000  00012108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000064d  00000000  00000000  00012958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002064e  00000000  00000000  00012fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ada0  00000000  00000000  000335f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9569  00000000  00000000  0003e393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f78fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a38  00000000  00000000  000f7940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000fa378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000d28 	.word	0x20000d28
 8000200:	00000000 	.word	0x00000000
 8000204:	08004050 	.word	0x08004050

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000d2c 	.word	0x20000d2c
 8000220:	08004050 	.word	0x08004050

08000224 <strcmp>:
 8000224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800022c:	2a01      	cmp	r2, #1
 800022e:	bf28      	it	cs
 8000230:	429a      	cmpcs	r2, r3
 8000232:	d0f7      	beq.n	8000224 <strcmp>
 8000234:	1ad0      	subs	r0, r2, r3
 8000236:	4770      	bx	lr

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b968 	b.w	8000520 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fbb1 f4f7 	udiv	r4, r1, r7
 800029e:	fb07 1114 	mls	r1, r7, r4, r1
 80002a2:	fa1f f68c 	uxth.w	r6, ip
 80002a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8110 	bcs.w	80004e2 <__udivmoddi4+0x27a>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810d 	bls.w	80004e2 <__udivmoddi4+0x27a>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d2:	fb07 1110 	mls	r1, r7, r0, r1
 80002d6:	fb00 f606 	mul.w	r6, r0, r6
 80002da:	fa1f f38e 	uxth.w	r3, lr
 80002de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fa 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f7 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	2100      	movs	r1, #0
 80002fe:	1b9b      	subs	r3, r3, r6
 8000300:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80ee 	bcc.w	8000510 <__udivmoddi4+0x2a8>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 808f 	bne.w	800046a <__udivmoddi4+0x202>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	2101      	movs	r1, #1
 8000352:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	fb08 4416 	mls	r4, r8, r6, r4
 8000362:	fb07 f006 	mul.w	r0, r7, r6
 8000366:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cb 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fbb4 f0f8 	udiv	r0, r4, r8
 800038a:	fb08 4410 	mls	r4, r8, r0, r4
 800038e:	fb00 f707 	mul.w	r7, r0, r7
 8000392:	fa1f f38e 	uxth.w	r3, lr
 8000396:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80ae 	bhi.w	800050a <__udivmoddi4+0x2a2>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0720 	rsb	r7, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c6:	fa24 f607 	lsr.w	r6, r4, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fbb6 f8f9 	udiv	r8, r6, r9
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	fb09 6618 	mls	r6, r9, r8, r6
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	408c      	lsls	r4, r1
 80003e0:	fa00 fa01 	lsl.w	sl, r0, r1
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	431c      	orrs	r4, r3
 80003ea:	0c23      	lsrs	r3, r4, #16
 80003ec:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003f0:	4298      	cmp	r0, r3
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	eb1c 0303 	adds.w	r3, ip, r3
 80003fc:	f108 36ff 	add.w	r6, r8, #4294967295
 8000400:	f080 8081 	bcs.w	8000506 <__udivmoddi4+0x29e>
 8000404:	4298      	cmp	r0, r3
 8000406:	d97e      	bls.n	8000506 <__udivmoddi4+0x29e>
 8000408:	f1a8 0802 	sub.w	r8, r8, #2
 800040c:	4463      	add	r3, ip
 800040e:	1a1e      	subs	r6, r3, r0
 8000410:	fbb6 f3f9 	udiv	r3, r6, r9
 8000414:	fb09 6613 	mls	r6, r9, r3, r6
 8000418:	fb03 fe0e 	mul.w	lr, r3, lr
 800041c:	b2a4      	uxth	r4, r4
 800041e:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000422:	45a6      	cmp	lr, r4
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x1d0>
 8000426:	eb1c 0404 	adds.w	r4, ip, r4
 800042a:	f103 30ff 	add.w	r0, r3, #4294967295
 800042e:	d266      	bcs.n	80004fe <__udivmoddi4+0x296>
 8000430:	45a6      	cmp	lr, r4
 8000432:	d964      	bls.n	80004fe <__udivmoddi4+0x296>
 8000434:	3b02      	subs	r3, #2
 8000436:	4464      	add	r4, ip
 8000438:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800043c:	fba0 8302 	umull	r8, r3, r0, r2
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	429c      	cmp	r4, r3
 8000446:	46c6      	mov	lr, r8
 8000448:	461e      	mov	r6, r3
 800044a:	d350      	bcc.n	80004ee <__udivmoddi4+0x286>
 800044c:	d04d      	beq.n	80004ea <__udivmoddi4+0x282>
 800044e:	b155      	cbz	r5, 8000466 <__udivmoddi4+0x1fe>
 8000450:	ebba 030e 	subs.w	r3, sl, lr
 8000454:	eb64 0406 	sbc.w	r4, r4, r6
 8000458:	fa04 f707 	lsl.w	r7, r4, r7
 800045c:	40cb      	lsrs	r3, r1
 800045e:	431f      	orrs	r7, r3
 8000460:	40cc      	lsrs	r4, r1
 8000462:	e9c5 7400 	strd	r7, r4, [r5]
 8000466:	2100      	movs	r1, #0
 8000468:	e751      	b.n	800030e <__udivmoddi4+0xa6>
 800046a:	fa0c fc02 	lsl.w	ip, ip, r2
 800046e:	f1c2 0320 	rsb	r3, r2, #32
 8000472:	40d9      	lsrs	r1, r3
 8000474:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000478:	fa20 f303 	lsr.w	r3, r0, r3
 800047c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000480:	fbb1 f0f8 	udiv	r0, r1, r8
 8000484:	fb08 1110 	mls	r1, r8, r0, r1
 8000488:	4094      	lsls	r4, r2
 800048a:	431c      	orrs	r4, r3
 800048c:	fa1f f78c 	uxth.w	r7, ip
 8000490:	0c23      	lsrs	r3, r4, #16
 8000492:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000496:	fb00 f107 	mul.w	r1, r0, r7
 800049a:	4299      	cmp	r1, r3
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x248>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004a6:	d22c      	bcs.n	8000502 <__udivmoddi4+0x29a>
 80004a8:	4299      	cmp	r1, r3
 80004aa:	d92a      	bls.n	8000502 <__udivmoddi4+0x29a>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1a5b      	subs	r3, r3, r1
 80004b2:	fbb3 f1f8 	udiv	r1, r3, r8
 80004b6:	fb08 3311 	mls	r3, r8, r1, r3
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c0:	fb01 f307 	mul.w	r3, r1, r7
 80004c4:	42a3      	cmp	r3, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x272>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d0:	d213      	bcs.n	80004fa <__udivmoddi4+0x292>
 80004d2:	42a3      	cmp	r3, r4
 80004d4:	d911      	bls.n	80004fa <__udivmoddi4+0x292>
 80004d6:	3902      	subs	r1, #2
 80004d8:	4464      	add	r4, ip
 80004da:	1ae4      	subs	r4, r4, r3
 80004dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e0:	e73b      	b.n	800035a <__udivmoddi4+0xf2>
 80004e2:	4604      	mov	r4, r0
 80004e4:	e6f2      	b.n	80002cc <__udivmoddi4+0x64>
 80004e6:	4608      	mov	r0, r1
 80004e8:	e708      	b.n	80002fc <__udivmoddi4+0x94>
 80004ea:	45c2      	cmp	sl, r8
 80004ec:	d2af      	bcs.n	800044e <__udivmoddi4+0x1e6>
 80004ee:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f2:	eb63 060c 	sbc.w	r6, r3, ip
 80004f6:	3801      	subs	r0, #1
 80004f8:	e7a9      	b.n	800044e <__udivmoddi4+0x1e6>
 80004fa:	4631      	mov	r1, r6
 80004fc:	e7ed      	b.n	80004da <__udivmoddi4+0x272>
 80004fe:	4603      	mov	r3, r0
 8000500:	e79a      	b.n	8000438 <__udivmoddi4+0x1d0>
 8000502:	4630      	mov	r0, r6
 8000504:	e7d4      	b.n	80004b0 <__udivmoddi4+0x248>
 8000506:	46b0      	mov	r8, r6
 8000508:	e781      	b.n	800040e <__udivmoddi4+0x1a6>
 800050a:	4463      	add	r3, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e74f      	b.n	80003b0 <__udivmoddi4+0x148>
 8000510:	4606      	mov	r6, r0
 8000512:	4623      	mov	r3, r4
 8000514:	4608      	mov	r0, r1
 8000516:	e711      	b.n	800033c <__udivmoddi4+0xd4>
 8000518:	3e02      	subs	r6, #2
 800051a:	4463      	add	r3, ip
 800051c:	e732      	b.n	8000384 <__udivmoddi4+0x11c>
 800051e:	bf00      	nop

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <_write>:
static void MX_ADC1_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART3_UART_Init(void);

int _write(int file, char *ptr, int len) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	b29a      	uxth	r2, r3
 8000534:	f04f 33ff 	mov.w	r3, #4294967295
 8000538:	68b9      	ldr	r1, [r7, #8]
 800053a:	4804      	ldr	r0, [pc, #16]	@ (800054c <_write+0x28>)
 800053c:	f002 fa1e 	bl	800297c <HAL_UART_Transmit>
    return len;
 8000540:	687b      	ldr	r3, [r7, #4]
}
 8000542:	4618      	mov	r0, r3
 8000544:	3710      	adds	r7, #16
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	20000dbc 	.word	0x20000dbc

08000550 <main>:

int main(void)
{
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b085      	sub	sp, #20
 8000554:	af04      	add	r7, sp, #16


  HAL_Init();
 8000556:	f000 fe33 	bl	80011c0 <HAL_Init>

  SystemClock_Config();
 800055a:	f000 f863 	bl	8000624 <SystemClock_Config>

  MX_GPIO_Init();
 800055e:	f000 f981 	bl	8000864 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000562:	f000 f8c3 	bl	80006ec <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000566:	f000 f8ff 	bl	8000768 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800056a:	f000 f927 	bl	80007bc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800056e:	f000 f94f 	bl	8000810 <MX_USART3_UART_Init>

  // Reset all MUXES (clear all latches to 0)
  HAL_GPIO_WritePin(RST_GPIO, RST_PIN, GPIO_PIN_SET);
 8000572:	2201      	movs	r2, #1
 8000574:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000578:	4828      	ldr	r0, [pc, #160]	@ (800061c <main+0xcc>)
 800057a:	f001 fb21 	bl	8001bc0 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 800057e:	2014      	movs	r0, #20
 8000580:	f000 fe80 	bl	8001284 <HAL_Delay>
  HAL_GPIO_WritePin(RST_GPIO, RST_PIN, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800058a:	4824      	ldr	r0, [pc, #144]	@ (800061c <main+0xcc>)
 800058c:	f001 fb18 	bl	8001bc0 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8000590:	2014      	movs	r0, #20
 8000592:	f000 fe77 	bl	8001284 <HAL_Delay>


  setConnection(0, 0, muxes[0], 1);  // CS_1 (PC0)
 8000596:	4b22      	ldr	r3, [pc, #136]	@ (8000620 <main+0xd0>)
 8000598:	2201      	movs	r2, #1
 800059a:	9202      	str	r2, [sp, #8]
 800059c:	466c      	mov	r4, sp
 800059e:	f103 0208 	add.w	r2, r3, #8
 80005a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005a6:	e884 0003 	stmia.w	r4, {r0, r1}
 80005aa:	cb0c      	ldmia	r3, {r2, r3}
 80005ac:	2100      	movs	r1, #0
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 fa1e 	bl	80009f0 <setConnection>
  setConnection(0, 1, muxes[2], 1);  // CS_3 (PC2)
 80005b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000620 <main+0xd0>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	9202      	str	r2, [sp, #8]
 80005ba:	466c      	mov	r4, sp
 80005bc:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80005c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005c4:	e884 0003 	stmia.w	r4, {r0, r1}
 80005c8:	3320      	adds	r3, #32
 80005ca:	cb0c      	ldmia	r3, {r2, r3}
 80005cc:	2101      	movs	r1, #1
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 fa0e 	bl	80009f0 <setConnection>

  route(1, 1, 10, muxes, sizeof(muxes), 1);
 80005d4:	2301      	movs	r3, #1
 80005d6:	9301      	str	r3, [sp, #4]
 80005d8:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	4b10      	ldr	r3, [pc, #64]	@ (8000620 <main+0xd0>)
 80005e0:	220a      	movs	r2, #10
 80005e2:	2101      	movs	r1, #1
 80005e4:	2001      	movs	r0, #1
 80005e6:	f000 faa7 	bl	8000b38 <route>
  route(2, 2, 11, muxes, sizeof(muxes), 1);
 80005ea:	2301      	movs	r3, #1
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000620 <main+0xd0>)
 80005f6:	220b      	movs	r2, #11
 80005f8:	2102      	movs	r1, #2
 80005fa:	2002      	movs	r0, #2
 80005fc:	f000 fa9c 	bl	8000b38 <route>
  route(3, 3, 10, muxes, sizeof(muxes), 1);
 8000600:	2301      	movs	r3, #1
 8000602:	9301      	str	r3, [sp, #4]
 8000604:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	4b05      	ldr	r3, [pc, #20]	@ (8000620 <main+0xd0>)
 800060c:	220a      	movs	r2, #10
 800060e:	2103      	movs	r1, #3
 8000610:	2003      	movs	r0, #3
 8000612:	f000 fa91 	bl	8000b38 <route>


  while (1)
 8000616:	bf00      	nop
 8000618:	e7fd      	b.n	8000616 <main+0xc6>
 800061a:	bf00      	nop
 800061c:	40010c00 	.word	0x40010c00
 8000620:	08004648 	.word	0x08004648

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b09c      	sub	sp, #112	@ 0x70
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800062e:	2238      	movs	r2, #56	@ 0x38
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f002 fe70 	bl	8003318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2220      	movs	r2, #32
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f002 fe62 	bl	8003318 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000654:	2301      	movs	r3, #1
 8000656:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000658:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800065c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000662:	2301      	movs	r3, #1
 8000664:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8000666:	2300      	movs	r3, #0
 8000668:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	2302      	movs	r3, #2
 800066c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000672:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000674:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000678:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 800067a:	2300      	movs	r3, #0
 800067c:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000682:	4618      	mov	r0, r3
 8000684:	f001 fab4 	bl	8001bf0 <HAL_RCC_OscConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800068e:	f000 f9a9 	bl	80009e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000692:	230f      	movs	r3, #15
 8000694:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000696:	2302      	movs	r3, #2
 8000698:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800069e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ac:	2102      	movs	r1, #2
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 fdb4 	bl	800221c <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ba:	f000 f993 	bl	80009e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006be:	2302      	movs	r3, #2
 80006c0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80006c2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80006c6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 ffd4 	bl	8002678 <HAL_RCCEx_PeriphCLKConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006d6:	f000 f985 	bl	80009e4 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80006da:	4b03      	ldr	r3, [pc, #12]	@ (80006e8 <SystemClock_Config+0xc4>)
 80006dc:	2201      	movs	r2, #1
 80006de:	601a      	str	r2, [r3, #0]
}
 80006e0:	bf00      	nop
 80006e2:	3770      	adds	r7, #112	@ 0x70
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	42420070 	.word	0x42420070

080006ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006fc:	4b18      	ldr	r3, [pc, #96]	@ (8000760 <MX_ADC1_Init+0x74>)
 80006fe:	4a19      	ldr	r2, [pc, #100]	@ (8000764 <MX_ADC1_Init+0x78>)
 8000700:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000702:	4b17      	ldr	r3, [pc, #92]	@ (8000760 <MX_ADC1_Init+0x74>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000708:	4b15      	ldr	r3, [pc, #84]	@ (8000760 <MX_ADC1_Init+0x74>)
 800070a:	2201      	movs	r2, #1
 800070c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800070e:	4b14      	ldr	r3, [pc, #80]	@ (8000760 <MX_ADC1_Init+0x74>)
 8000710:	2200      	movs	r2, #0
 8000712:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000714:	4b12      	ldr	r3, [pc, #72]	@ (8000760 <MX_ADC1_Init+0x74>)
 8000716:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800071a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800071c:	4b10      	ldr	r3, [pc, #64]	@ (8000760 <MX_ADC1_Init+0x74>)
 800071e:	2200      	movs	r2, #0
 8000720:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000722:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <MX_ADC1_Init+0x74>)
 8000724:	2201      	movs	r2, #1
 8000726:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000728:	480d      	ldr	r0, [pc, #52]	@ (8000760 <MX_ADC1_Init+0x74>)
 800072a:	f000 fdcf 	bl	80012cc <HAL_ADC_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000734:	f000 f956 	bl	80009e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000738:	2301      	movs	r3, #1
 800073a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800073c:	2301      	movs	r3, #1
 800073e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	4619      	mov	r1, r3
 8000748:	4805      	ldr	r0, [pc, #20]	@ (8000760 <MX_ADC1_Init+0x74>)
 800074a:	f000 fe97 	bl	800147c <HAL_ADC_ConfigChannel>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000754:	f000 f946 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000d44 	.word	0x20000d44
 8000764:	40012400 	.word	0x40012400

08000768 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800076c:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <MX_USART1_UART_Init+0x4c>)
 800076e:	4a12      	ldr	r2, [pc, #72]	@ (80007b8 <MX_USART1_UART_Init+0x50>)
 8000770:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000772:	4b10      	ldr	r3, [pc, #64]	@ (80007b4 <MX_USART1_UART_Init+0x4c>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <MX_USART1_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <MX_USART1_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	@ (80007b4 <MX_USART1_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <MX_USART1_UART_Init+0x4c>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <MX_USART1_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <MX_USART1_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <MX_USART1_UART_Init+0x4c>)
 80007a0:	f002 f89c 	bl	80028dc <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007aa:	f000 f91b 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000d74 	.word	0x20000d74
 80007b8:	40013800 	.word	0x40013800

080007bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c0:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007c2:	4a12      	ldr	r2, [pc, #72]	@ (800080c <MX_USART2_UART_Init+0x50>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007c6:	4b10      	ldr	r3, [pc, #64]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007f4:	f002 f872 	bl	80028dc <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007fe:	f000 f8f1 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000dbc 	.word	0x20000dbc
 800080c:	40004400 	.word	0x40004400

08000810 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000814:	4b11      	ldr	r3, [pc, #68]	@ (800085c <MX_USART3_UART_Init+0x4c>)
 8000816:	4a12      	ldr	r2, [pc, #72]	@ (8000860 <MX_USART3_UART_Init+0x50>)
 8000818:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800081a:	4b10      	ldr	r3, [pc, #64]	@ (800085c <MX_USART3_UART_Init+0x4c>)
 800081c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000820:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000822:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <MX_USART3_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b0c      	ldr	r3, [pc, #48]	@ (800085c <MX_USART3_UART_Init+0x4c>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	@ (800085c <MX_USART3_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b09      	ldr	r3, [pc, #36]	@ (800085c <MX_USART3_UART_Init+0x4c>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b08      	ldr	r3, [pc, #32]	@ (800085c <MX_USART3_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	4b06      	ldr	r3, [pc, #24]	@ (800085c <MX_USART3_UART_Init+0x4c>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	@ (800085c <MX_USART3_UART_Init+0x4c>)
 8000848:	f002 f848 	bl	80028dc <HAL_UART_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000852:	f000 f8c7 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000e04 	.word	0x20000e04
 8000860:	40004800 	.word	0x40004800

08000864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	@ 0x28
 8000868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	f107 0318 	add.w	r3, r7, #24
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000878:	4b55      	ldr	r3, [pc, #340]	@ (80009d0 <MX_GPIO_Init+0x16c>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	4a54      	ldr	r2, [pc, #336]	@ (80009d0 <MX_GPIO_Init+0x16c>)
 800087e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b52      	ldr	r3, [pc, #328]	@ (80009d0 <MX_GPIO_Init+0x16c>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800088c:	617b      	str	r3, [r7, #20]
 800088e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000890:	4b4f      	ldr	r3, [pc, #316]	@ (80009d0 <MX_GPIO_Init+0x16c>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	4a4e      	ldr	r2, [pc, #312]	@ (80009d0 <MX_GPIO_Init+0x16c>)
 8000896:	f043 0310 	orr.w	r3, r3, #16
 800089a:	6193      	str	r3, [r2, #24]
 800089c:	4b4c      	ldr	r3, [pc, #304]	@ (80009d0 <MX_GPIO_Init+0x16c>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	f003 0310 	and.w	r3, r3, #16
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a8:	4b49      	ldr	r3, [pc, #292]	@ (80009d0 <MX_GPIO_Init+0x16c>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	4a48      	ldr	r2, [pc, #288]	@ (80009d0 <MX_GPIO_Init+0x16c>)
 80008ae:	f043 0304 	orr.w	r3, r3, #4
 80008b2:	6193      	str	r3, [r2, #24]
 80008b4:	4b46      	ldr	r3, [pc, #280]	@ (80009d0 <MX_GPIO_Init+0x16c>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f003 0304 	and.w	r3, r3, #4
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c0:	4b43      	ldr	r3, [pc, #268]	@ (80009d0 <MX_GPIO_Init+0x16c>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4a42      	ldr	r2, [pc, #264]	@ (80009d0 <MX_GPIO_Init+0x16c>)
 80008c6:	f043 0308 	orr.w	r3, r3, #8
 80008ca:	6193      	str	r3, [r2, #24]
 80008cc:	4b40      	ldr	r3, [pc, #256]	@ (80009d0 <MX_GPIO_Init+0x16c>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f003 0308 	and.w	r3, r3, #8
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d8:	4b3d      	ldr	r3, [pc, #244]	@ (80009d0 <MX_GPIO_Init+0x16c>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	4a3c      	ldr	r2, [pc, #240]	@ (80009d0 <MX_GPIO_Init+0x16c>)
 80008de:	f043 0320 	orr.w	r3, r3, #32
 80008e2:	6193      	str	r3, [r2, #24]
 80008e4:	4b3a      	ldr	r3, [pc, #232]	@ (80009d0 <MX_GPIO_Init+0x16c>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f003 0320 	and.w	r3, r3, #32
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80008f0:	2200      	movs	r2, #0
 80008f2:	f240 31fd 	movw	r1, #1021	@ 0x3fd
 80008f6:	4837      	ldr	r0, [pc, #220]	@ (80009d4 <MX_GPIO_Init+0x170>)
 80008f8:	f001 f962 	bl	8001bc0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_0, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 80008fc:	2200      	movs	r2, #0
 80008fe:	f242 31ff 	movw	r1, #9215	@ 0x23ff
 8000902:	4835      	ldr	r0, [pc, #212]	@ (80009d8 <MX_GPIO_Init+0x174>)
 8000904:	f001 f95c 	bl	8001bc0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8000908:	2200      	movs	r2, #0
 800090a:	f24f 31ff 	movw	r1, #62463	@ 0xf3ff
 800090e:	4833      	ldr	r0, [pc, #204]	@ (80009dc <MX_GPIO_Init+0x178>)
 8000910:	f001 f956 	bl	8001bc0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000914:	2200      	movs	r2, #0
 8000916:	f64f 719b 	movw	r1, #65435	@ 0xff9b
 800091a:	4831      	ldr	r0, [pc, #196]	@ (80009e0 <MX_GPIO_Init+0x17c>)
 800091c:	f001 f950 	bl	8001bc0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000920:	f240 33fd 	movw	r3, #1021	@ 0x3fd
 8000924:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2302      	movs	r3, #2
 8000930:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000932:	f107 0318 	add.w	r3, r7, #24
 8000936:	4619      	mov	r1, r3
 8000938:	4826      	ldr	r0, [pc, #152]	@ (80009d4 <MX_GPIO_Init+0x170>)
 800093a:	f000 ffbd 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC6
                           PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 800093e:	f242 33ff 	movw	r3, #9215	@ 0x23ff
 8000942:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2302      	movs	r3, #2
 800094e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000950:	f107 0318 	add.w	r3, r7, #24
 8000954:	4619      	mov	r1, r3
 8000956:	4820      	ldr	r0, [pc, #128]	@ (80009d8 <MX_GPIO_Init+0x174>)
 8000958:	f000 ffae 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 PB3
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 800095c:	f24f 33ff 	movw	r3, #62463	@ 0xf3ff
 8000960:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000962:	2301      	movs	r3, #1
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2302      	movs	r3, #2
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096e:	f107 0318 	add.w	r3, r7, #24
 8000972:	4619      	mov	r1, r3
 8000974:	4819      	ldr	r0, [pc, #100]	@ (80009dc <MX_GPIO_Init+0x178>)
 8000976:	f000 ff9f 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800097a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800097e:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000988:	f107 0318 	add.w	r3, r7, #24
 800098c:	4619      	mov	r1, r3
 800098e:	4811      	ldr	r0, [pc, #68]	@ (80009d4 <MX_GPIO_Init+0x170>)
 8000990:	f000 ff92 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000994:	f64f 739b 	movw	r3, #65435	@ 0xff9b
 8000998:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2302      	movs	r3, #2
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a6:	f107 0318 	add.w	r3, r7, #24
 80009aa:	4619      	mov	r1, r3
 80009ac:	480c      	ldr	r0, [pc, #48]	@ (80009e0 <MX_GPIO_Init+0x17c>)
 80009ae:	f000 ff83 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009b2:	2302      	movs	r3, #2
 80009b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009b6:	2303      	movs	r3, #3
 80009b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009ba:	f107 0318 	add.w	r3, r7, #24
 80009be:	4619      	mov	r1, r3
 80009c0:	4804      	ldr	r0, [pc, #16]	@ (80009d4 <MX_GPIO_Init+0x170>)
 80009c2:	f000 ff79 	bl	80018b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c6:	bf00      	nop
 80009c8:	3728      	adds	r7, #40	@ 0x28
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40021000 	.word	0x40021000
 80009d4:	40011800 	.word	0x40011800
 80009d8:	40011000 	.word	0x40011000
 80009dc:	40010c00 	.word	0x40010c00
 80009e0:	40011400 	.word	0x40011400

080009e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e8:	b672      	cpsid	i
}
 80009ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <Error_Handler+0x8>

080009f0 <setConnection>:
};



// Set connection function with dynamic CS handling
void setConnection(int x, int y, MUX mux, uint8_t mode) {
 80009f0:	b082      	sub	sp, #8
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b082      	sub	sp, #8
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
 80009fa:	6039      	str	r1, [r7, #0]
 80009fc:	f107 0110 	add.w	r1, r7, #16
 8000a00:	e881 000c 	stmia.w	r1, {r2, r3}
    if (x < 0 || x > 15 || y < 0 || y > 7) {
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	f2c0 808d 	blt.w	8000b26 <setConnection+0x136>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2b0f      	cmp	r3, #15
 8000a10:	f300 8089 	bgt.w	8000b26 <setConnection+0x136>
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	f2c0 8085 	blt.w	8000b26 <setConnection+0x136>
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	2b07      	cmp	r3, #7
 8000a20:	f300 8081 	bgt.w	8000b26 <setConnection+0x136>
    }

//    HAL_Delay(5000);

    // Activate multiplexer using the struct for CS
    HAL_GPIO_WritePin(mux.port, mux.pin, GPIO_PIN_RESET);
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	8ab9      	ldrh	r1, [r7, #20]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f001 f8c8 	bl	8001bc0 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8000a30:	2014      	movs	r0, #20
 8000a32:	f000 fc27 	bl	8001284 <HAL_Delay>
    HAL_GPIO_WritePin(mux.port, mux.pin, GPIO_PIN_SET);
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	8ab9      	ldrh	r1, [r7, #20]
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f001 f8bf 	bl	8001bc0 <HAL_GPIO_WritePin>

    // Set X address
    HAL_GPIO_WritePin(AX_GPIO, AX0_PIN, (x & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	2140      	movs	r1, #64	@ 0x40
 8000a50:	4838      	ldr	r0, [pc, #224]	@ (8000b34 <setConnection+0x144>)
 8000a52:	f001 f8b5 	bl	8001bc0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AX_GPIO, AX1_PIN, (x & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	105b      	asrs	r3, r3, #1
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	461a      	mov	r2, r3
 8000a64:	2110      	movs	r1, #16
 8000a66:	4833      	ldr	r0, [pc, #204]	@ (8000b34 <setConnection+0x144>)
 8000a68:	f001 f8aa 	bl	8001bc0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AX_GPIO, AX2_PIN, (x & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	109b      	asrs	r3, r3, #2
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	461a      	mov	r2, r3
 8000a7a:	2108      	movs	r1, #8
 8000a7c:	482d      	ldr	r0, [pc, #180]	@ (8000b34 <setConnection+0x144>)
 8000a7e:	f001 f89f 	bl	8001bc0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AX_GPIO, AX3_PIN, (x & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	10db      	asrs	r3, r3, #3
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	461a      	mov	r2, r3
 8000a90:	2120      	movs	r1, #32
 8000a92:	4828      	ldr	r0, [pc, #160]	@ (8000b34 <setConnection+0x144>)
 8000a94:	f001 f894 	bl	8001bc0 <HAL_GPIO_WritePin>

    // Set Y address
    HAL_GPIO_WritePin(AY_GPIO, AY0_PIN, (y & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	4823      	ldr	r0, [pc, #140]	@ (8000b34 <setConnection+0x144>)
 8000aa8:	f001 f88a 	bl	8001bc0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AY_GPIO, AY1_PIN, (y & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	105b      	asrs	r3, r3, #1
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	461a      	mov	r2, r3
 8000aba:	2102      	movs	r1, #2
 8000abc:	481d      	ldr	r0, [pc, #116]	@ (8000b34 <setConnection+0x144>)
 8000abe:	f001 f87f 	bl	8001bc0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AY_GPIO, AY2_PIN, (y & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	109b      	asrs	r3, r3, #2
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	f003 0301 	and.w	r3, r3, #1
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	461a      	mov	r2, r3
 8000ad0:	2104      	movs	r1, #4
 8000ad2:	4818      	ldr	r0, [pc, #96]	@ (8000b34 <setConnection+0x144>)
 8000ad4:	f001 f874 	bl	8001bc0 <HAL_GPIO_WritePin>

    // Set data pin
    HAL_GPIO_WritePin(DAT_GPIO, DAT_PIN, mode ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000ad8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	bf14      	ite	ne
 8000ae0:	2301      	movne	r3, #1
 8000ae2:	2300      	moveq	r3, #0
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	2180      	movs	r1, #128	@ 0x80
 8000aea:	4812      	ldr	r0, [pc, #72]	@ (8000b34 <setConnection+0x144>)
 8000aec:	f001 f868 	bl	8001bc0 <HAL_GPIO_WritePin>

    // Strobe signal
    HAL_Delay(20);
 8000af0:	2014      	movs	r0, #20
 8000af2:	f000 fbc7 	bl	8001284 <HAL_Delay>
    HAL_GPIO_WritePin(STB_GPIO, STB_PIN, GPIO_PIN_SET);
 8000af6:	2201      	movs	r2, #1
 8000af8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000afc:	480d      	ldr	r0, [pc, #52]	@ (8000b34 <setConnection+0x144>)
 8000afe:	f001 f85f 	bl	8001bc0 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8000b02:	2014      	movs	r0, #20
 8000b04:	f000 fbbe 	bl	8001284 <HAL_Delay>
    HAL_GPIO_WritePin(STB_GPIO, STB_PIN, GPIO_PIN_RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b0e:	4809      	ldr	r0, [pc, #36]	@ (8000b34 <setConnection+0x144>)
 8000b10:	f001 f856 	bl	8001bc0 <HAL_GPIO_WritePin>

    HAL_Delay(200);
 8000b14:	20c8      	movs	r0, #200	@ 0xc8
 8000b16:	f000 fbb5 	bl	8001284 <HAL_Delay>

    HAL_GPIO_WritePin(DAT_GPIO, DAT_PIN, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2180      	movs	r1, #128	@ 0x80
 8000b1e:	4805      	ldr	r0, [pc, #20]	@ (8000b34 <setConnection+0x144>)
 8000b20:	f001 f84e 	bl	8001bc0 <HAL_GPIO_WritePin>
 8000b24:	e000      	b.n	8000b28 <setConnection+0x138>
        return;
 8000b26:	bf00      	nop
}
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b30:	b002      	add	sp, #8
 8000b32:	4770      	bx	lr
 8000b34:	40010c00 	.word	0x40010c00

08000b38 <route>:

MainTrack mainTracks[32] = {0};

void route(int breadboardPin1, int breadboardPin2, int net_id, MUX *muxes, size_t muxCount, uint8_t mode) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b09a      	sub	sp, #104	@ 0x68
 8000b3c:	af06      	add	r7, sp, #24
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
 8000b44:	603b      	str	r3, [r7, #0]
    char pin1Name[6], pin2Name[6];
    snprintf(pin1Name, sizeof(pin1Name), "B_%d", breadboardPin1);
 8000b46:	f107 001c 	add.w	r0, r7, #28
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	4a86      	ldr	r2, [pc, #536]	@ (8000d68 <route+0x230>)
 8000b4e:	2106      	movs	r1, #6
 8000b50:	f002 fad6 	bl	8003100 <sniprintf>
    snprintf(pin2Name, sizeof(pin2Name), "B_%d", breadboardPin2);
 8000b54:	f107 0014 	add.w	r0, r7, #20
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	4a83      	ldr	r2, [pc, #524]	@ (8000d68 <route+0x230>)
 8000b5c:	2106      	movs	r1, #6
 8000b5e:	f002 facf 	bl	8003100 <sniprintf>

    printf("Routing %s to %s with net ID: %d\n", pin1Name, pin2Name, net_id);
 8000b62:	f107 0214 	add.w	r2, r7, #20
 8000b66:	f107 011c 	add.w	r1, r7, #28
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	487f      	ldr	r0, [pc, #508]	@ (8000d6c <route+0x234>)
 8000b6e:	f002 fa57 	bl	8003020 <iprintf>
    fflush(stdout);
 8000b72:	4b7f      	ldr	r3, [pc, #508]	@ (8000d70 <route+0x238>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f002 f97b 	bl	8002e74 <fflush>

    int xIndex1 = -1, yIndex1 = -1;
 8000b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000b84:	f04f 33ff 	mov.w	r3, #4294967295
 8000b88:	64bb      	str	r3, [r7, #72]	@ 0x48
    int xIndex2 = -1, yIndex2 = -1;
 8000b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8000b90:	f04f 33ff 	mov.w	r3, #4294967295
 8000b94:	643b      	str	r3, [r7, #64]	@ 0x40
    MUX *mux1 = NULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
    MUX *mux2 = NULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	63bb      	str	r3, [r7, #56]	@ 0x38
    MainTrack *selectedTrack = NULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	637b      	str	r3, [r7, #52]	@ 0x34
    int muxIndex = -1;
 8000ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba6:	627b      	str	r3, [r7, #36]	@ 0x24

    // Find an available or existing main track for the given net ID
    for (int x = 0; x < 32; ++x) {
 8000ba8:	2300      	movs	r3, #0
 8000baa:	633b      	str	r3, [r7, #48]	@ 0x30
 8000bac:	e038      	b.n	8000c20 <route+0xe8>
        if (mainTracks[x].net_id == net_id) {
 8000bae:	4971      	ldr	r1, [pc, #452]	@ (8000d74 <route+0x23c>)
 8000bb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	4413      	add	r3, r2
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	440b      	add	r3, r1
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d108      	bne.n	8000bd8 <route+0xa0>
            selectedTrack = &mainTracks[x];  // Reuse existing track if net ID matches
 8000bc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000bc8:	4613      	mov	r3, r2
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	4413      	add	r3, r2
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	4a68      	ldr	r2, [pc, #416]	@ (8000d74 <route+0x23c>)
 8000bd2:	4413      	add	r3, r2
 8000bd4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8000bd6:	e026      	b.n	8000c26 <route+0xee>
        } else if (!mainTracks[x].is_used) {
 8000bd8:	4966      	ldr	r1, [pc, #408]	@ (8000d74 <route+0x23c>)
 8000bda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000bdc:	4613      	mov	r3, r2
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	4413      	add	r3, r2
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	440b      	add	r3, r1
 8000be6:	3308      	adds	r3, #8
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d115      	bne.n	8000c1a <route+0xe2>
            selectedTrack = &mainTracks[x];  // Assign new track if available
 8000bee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	4413      	add	r3, r2
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	4a5e      	ldr	r2, [pc, #376]	@ (8000d74 <route+0x23c>)
 8000bfa:	4413      	add	r3, r2
 8000bfc:	637b      	str	r3, [r7, #52]	@ 0x34
            selectedTrack->is_used = 1;
 8000bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c00:	2201      	movs	r2, #1
 8000c02:	609a      	str	r2, [r3, #8]
            selectedTrack->net_id = net_id;
 8000c04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	605a      	str	r2, [r3, #4]
            selectedTrack->track_id = x; // Assign track ID here
 8000c0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000c0e:	601a      	str	r2, [r3, #0]
            printf("Selected Track id: %d\n", x);
 8000c10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000c12:	4859      	ldr	r0, [pc, #356]	@ (8000d78 <route+0x240>)
 8000c14:	f002 fa04 	bl	8003020 <iprintf>
            break;
 8000c18:	e005      	b.n	8000c26 <route+0xee>
    for (int x = 0; x < 32; ++x) {
 8000c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8000c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c22:	2b1f      	cmp	r3, #31
 8000c24:	ddc3      	ble.n	8000bae <route+0x76>
        }
    }

    if (!selectedTrack) {
 8000c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d104      	bne.n	8000c36 <route+0xfe>
        printf("Error: No available main track for net ID %d\n", net_id);
 8000c2c:	6879      	ldr	r1, [r7, #4]
 8000c2e:	4853      	ldr	r0, [pc, #332]	@ (8000d7c <route+0x244>)
 8000c30:	f002 f9f6 	bl	8003020 <iprintf>
 8000c34:	e094      	b.n	8000d60 <route+0x228>
        return;
    }

    // Seems legit ^^^

    muxIndex = (selectedTrack->track_id < 16) ? 0 : 1;
 8000c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2b0f      	cmp	r3, #15
 8000c3c:	bfcc      	ite	gt
 8000c3e:	2301      	movgt	r3, #1
 8000c40:	2300      	movle	r3, #0
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	627b      	str	r3, [r7, #36]	@ 0x24

        for (size_t i = muxIndex; i < muxCount; i += 2) {
 8000c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c4a:	e05b      	b.n	8000d04 <route+0x1cc>
            for (int y = 0; y < 8; ++y) {
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c50:	e04c      	b.n	8000cec <route+0x1b4>
                if (strcmp((*muxes[i].yPins)[y], pin1Name) == 0 && mux1 == NULL) {
 8000c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c54:	011b      	lsls	r3, r3, #4
 8000c56:	683a      	ldr	r2, [r7, #0]
 8000c58:	4413      	add	r3, r2
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c62:	f107 021c 	add.w	r2, r7, #28
 8000c66:	4611      	mov	r1, r2
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fadb 	bl	8000224 <strcmp>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d113      	bne.n	8000c9c <route+0x164>
 8000c74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d110      	bne.n	8000c9c <route+0x164>
                    xIndex1 = selectedTrack->track_id % 16;
 8000c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	425a      	negs	r2, r3
 8000c80:	f003 030f 	and.w	r3, r3, #15
 8000c84:	f002 020f 	and.w	r2, r2, #15
 8000c88:	bf58      	it	pl
 8000c8a:	4253      	negpl	r3, r2
 8000c8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    yIndex1 = y;
 8000c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c90:	64bb      	str	r3, [r7, #72]	@ 0x48
                    mux1 = &muxes[i];
 8000c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c94:	011b      	lsls	r3, r3, #4
 8000c96:	683a      	ldr	r2, [r7, #0]
 8000c98:	4413      	add	r3, r2
 8000c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                }
                if (strcmp((*muxes[i].yPins)[y], pin2Name) == 0 && mux2 == NULL) {
 8000c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c9e:	011b      	lsls	r3, r3, #4
 8000ca0:	683a      	ldr	r2, [r7, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cac:	f107 0214 	add.w	r2, r7, #20
 8000cb0:	4611      	mov	r1, r2
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fab6 	bl	8000224 <strcmp>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d113      	bne.n	8000ce6 <route+0x1ae>
 8000cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d110      	bne.n	8000ce6 <route+0x1ae>
                    xIndex2 = selectedTrack->track_id % 16;
 8000cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	425a      	negs	r2, r3
 8000cca:	f003 030f 	and.w	r3, r3, #15
 8000cce:	f002 020f 	and.w	r2, r2, #15
 8000cd2:	bf58      	it	pl
 8000cd4:	4253      	negpl	r3, r2
 8000cd6:	647b      	str	r3, [r7, #68]	@ 0x44
                    yIndex2 = y;
 8000cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cda:	643b      	str	r3, [r7, #64]	@ 0x40
                    mux2 = &muxes[i];
 8000cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cde:	011b      	lsls	r3, r3, #4
 8000ce0:	683a      	ldr	r2, [r7, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
            for (int y = 0; y < 8; ++y) {
 8000ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ce8:	3301      	adds	r3, #1
 8000cea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cee:	2b07      	cmp	r3, #7
 8000cf0:	ddaf      	ble.n	8000c52 <route+0x11a>
                }
            }
            if (mux1 && mux2) break;
 8000cf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d002      	beq.n	8000cfe <route+0x1c6>
 8000cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d107      	bne.n	8000d0e <route+0x1d6>
        for (size_t i = muxIndex; i < muxCount; i += 2) {
 8000cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d00:	3302      	adds	r3, #2
 8000d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d39f      	bcc.n	8000c4c <route+0x114>
 8000d0c:	e000      	b.n	8000d10 <route+0x1d8>
            if (mux1 && mux2) break;
 8000d0e:	bf00      	nop
        }

        if (mux1 && mux2) {
 8000d10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d01b      	beq.n	8000d4e <route+0x216>
 8000d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d018      	beq.n	8000d4e <route+0x216>
            printf("Connecting %s at MUX %p (X:%d, Y:%d) and %s at MUX %p (X:%d, Y:%d)\n",
 8000d1c:	f107 011c 	add.w	r1, r7, #28
 8000d20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000d22:	9304      	str	r3, [sp, #16]
 8000d24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d26:	9303      	str	r3, [sp, #12]
 8000d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d2a:	9302      	str	r3, [sp, #8]
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	9301      	str	r3, [sp, #4]
 8000d32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000d3a:	4811      	ldr	r0, [pc, #68]	@ (8000d80 <route+0x248>)
 8000d3c:	f002 f970 	bl	8003020 <iprintf>
                    pin1Name, (void*)mux1, xIndex1, yIndex1,
                    pin2Name, (void*)mux2, xIndex2, yIndex2);
            fflush(stdout);
 8000d40:	4b0b      	ldr	r3, [pc, #44]	@ (8000d70 <route+0x238>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f002 f894 	bl	8002e74 <fflush>
 8000d4c:	e008      	b.n	8000d60 <route+0x228>

//            setConnection(xIndex1, yIndex1, *mux1, mode);
//            setConnection(xIndex2, yIndex2, *mux2, mode);
        } else {
            printf("Error: Unable to route pins - No available MUX found!\n");
 8000d4e:	480d      	ldr	r0, [pc, #52]	@ (8000d84 <route+0x24c>)
 8000d50:	f002 f9ce 	bl	80030f0 <puts>
            fflush(stdout);
 8000d54:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <route+0x238>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f002 f88a 	bl	8002e74 <fflush>
        }
    }
 8000d60:	3750      	adds	r7, #80	@ 0x50
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	08004558 	.word	0x08004558
 8000d6c:	08004560 	.word	0x08004560
 8000d70:	20000cd8 	.word	0x20000cd8
 8000d74:	20000e4c 	.word	0x20000e4c
 8000d78:	08004584 	.word	0x08004584
 8000d7c:	0800459c 	.word	0x0800459c
 8000d80:	080045cc 	.word	0x080045cc
 8000d84:	08004610 	.word	0x08004610

08000d88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <HAL_MspInit+0x5c>)
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	4a14      	ldr	r2, [pc, #80]	@ (8000de4 <HAL_MspInit+0x5c>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6193      	str	r3, [r2, #24]
 8000d9a:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <HAL_MspInit+0x5c>)
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <HAL_MspInit+0x5c>)
 8000da8:	69db      	ldr	r3, [r3, #28]
 8000daa:	4a0e      	ldr	r2, [pc, #56]	@ (8000de4 <HAL_MspInit+0x5c>)
 8000dac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000db0:	61d3      	str	r3, [r2, #28]
 8000db2:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <HAL_MspInit+0x5c>)
 8000db4:	69db      	ldr	r3, [r3, #28]
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000de8 <HAL_MspInit+0x60>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	4a04      	ldr	r2, [pc, #16]	@ (8000de8 <HAL_MspInit+0x60>)
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40010000 	.word	0x40010000

08000dec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a14      	ldr	r2, [pc, #80]	@ (8000e58 <HAL_ADC_MspInit+0x6c>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d121      	bne.n	8000e50 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e0c:	4b13      	ldr	r3, [pc, #76]	@ (8000e5c <HAL_ADC_MspInit+0x70>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	4a12      	ldr	r2, [pc, #72]	@ (8000e5c <HAL_ADC_MspInit+0x70>)
 8000e12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e16:	6193      	str	r3, [r2, #24]
 8000e18:	4b10      	ldr	r3, [pc, #64]	@ (8000e5c <HAL_ADC_MspInit+0x70>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e24:	4b0d      	ldr	r3, [pc, #52]	@ (8000e5c <HAL_ADC_MspInit+0x70>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a0c      	ldr	r2, [pc, #48]	@ (8000e5c <HAL_ADC_MspInit+0x70>)
 8000e2a:	f043 0304 	orr.w	r3, r3, #4
 8000e2e:	6193      	str	r3, [r2, #24]
 8000e30:	4b0a      	ldr	r3, [pc, #40]	@ (8000e5c <HAL_ADC_MspInit+0x70>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f003 0304 	and.w	r3, r3, #4
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e3c:	23ff      	movs	r3, #255	@ 0xff
 8000e3e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e40:	2303      	movs	r3, #3
 8000e42:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e44:	f107 0310 	add.w	r3, r7, #16
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4805      	ldr	r0, [pc, #20]	@ (8000e60 <HAL_ADC_MspInit+0x74>)
 8000e4c:	f000 fd34 	bl	80018b8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e50:	bf00      	nop
 8000e52:	3720      	adds	r7, #32
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40012400 	.word	0x40012400
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	40010800 	.word	0x40010800

08000e64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08e      	sub	sp, #56	@ 0x38
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a5a      	ldr	r2, [pc, #360]	@ (8000fe8 <HAL_UART_MspInit+0x184>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d132      	bne.n	8000eea <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e84:	4b59      	ldr	r3, [pc, #356]	@ (8000fec <HAL_UART_MspInit+0x188>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	4a58      	ldr	r2, [pc, #352]	@ (8000fec <HAL_UART_MspInit+0x188>)
 8000e8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e8e:	6193      	str	r3, [r2, #24]
 8000e90:	4b56      	ldr	r3, [pc, #344]	@ (8000fec <HAL_UART_MspInit+0x188>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e98:	623b      	str	r3, [r7, #32]
 8000e9a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9c:	4b53      	ldr	r3, [pc, #332]	@ (8000fec <HAL_UART_MspInit+0x188>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	4a52      	ldr	r2, [pc, #328]	@ (8000fec <HAL_UART_MspInit+0x188>)
 8000ea2:	f043 0304 	orr.w	r3, r3, #4
 8000ea6:	6193      	str	r3, [r2, #24]
 8000ea8:	4b50      	ldr	r3, [pc, #320]	@ (8000fec <HAL_UART_MspInit+0x188>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	f003 0304 	and.w	r3, r3, #4
 8000eb0:	61fb      	str	r3, [r7, #28]
 8000eb2:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000eb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000eb8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4849      	ldr	r0, [pc, #292]	@ (8000ff0 <HAL_UART_MspInit+0x18c>)
 8000eca:	f000 fcf5 	bl	80018b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ece:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ed2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4843      	ldr	r0, [pc, #268]	@ (8000ff0 <HAL_UART_MspInit+0x18c>)
 8000ee4:	f000 fce8 	bl	80018b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ee8:	e07a      	b.n	8000fe0 <HAL_UART_MspInit+0x17c>
  else if(huart->Instance==USART2)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a41      	ldr	r2, [pc, #260]	@ (8000ff4 <HAL_UART_MspInit+0x190>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d13e      	bne.n	8000f72 <HAL_UART_MspInit+0x10e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ef4:	4b3d      	ldr	r3, [pc, #244]	@ (8000fec <HAL_UART_MspInit+0x188>)
 8000ef6:	69db      	ldr	r3, [r3, #28]
 8000ef8:	4a3c      	ldr	r2, [pc, #240]	@ (8000fec <HAL_UART_MspInit+0x188>)
 8000efa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000efe:	61d3      	str	r3, [r2, #28]
 8000f00:	4b3a      	ldr	r3, [pc, #232]	@ (8000fec <HAL_UART_MspInit+0x188>)
 8000f02:	69db      	ldr	r3, [r3, #28]
 8000f04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f08:	61bb      	str	r3, [r7, #24]
 8000f0a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f0c:	4b37      	ldr	r3, [pc, #220]	@ (8000fec <HAL_UART_MspInit+0x188>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	4a36      	ldr	r2, [pc, #216]	@ (8000fec <HAL_UART_MspInit+0x188>)
 8000f12:	f043 0320 	orr.w	r3, r3, #32
 8000f16:	6193      	str	r3, [r2, #24]
 8000f18:	4b34      	ldr	r3, [pc, #208]	@ (8000fec <HAL_UART_MspInit+0x188>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	f003 0320 	and.w	r3, r3, #32
 8000f20:	617b      	str	r3, [r7, #20]
 8000f22:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f24:	2320      	movs	r3, #32
 8000f26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f34:	4619      	mov	r1, r3
 8000f36:	4830      	ldr	r0, [pc, #192]	@ (8000ff8 <HAL_UART_MspInit+0x194>)
 8000f38:	f000 fcbe 	bl	80018b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f3c:	2340      	movs	r3, #64	@ 0x40
 8000f3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f40:	2300      	movs	r3, #0
 8000f42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	482a      	ldr	r0, [pc, #168]	@ (8000ff8 <HAL_UART_MspInit+0x194>)
 8000f50:	f000 fcb2 	bl	80018b8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART2_ENABLE();
 8000f54:	4b29      	ldr	r3, [pc, #164]	@ (8000ffc <HAL_UART_MspInit+0x198>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f5c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000f60:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f64:	f043 0308 	orr.w	r3, r3, #8
 8000f68:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f6a:	4a24      	ldr	r2, [pc, #144]	@ (8000ffc <HAL_UART_MspInit+0x198>)
 8000f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f6e:	6053      	str	r3, [r2, #4]
}
 8000f70:	e036      	b.n	8000fe0 <HAL_UART_MspInit+0x17c>
  else if(huart->Instance==USART3)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a22      	ldr	r2, [pc, #136]	@ (8001000 <HAL_UART_MspInit+0x19c>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d131      	bne.n	8000fe0 <HAL_UART_MspInit+0x17c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fec <HAL_UART_MspInit+0x188>)
 8000f7e:	69db      	ldr	r3, [r3, #28]
 8000f80:	4a1a      	ldr	r2, [pc, #104]	@ (8000fec <HAL_UART_MspInit+0x188>)
 8000f82:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f86:	61d3      	str	r3, [r2, #28]
 8000f88:	4b18      	ldr	r3, [pc, #96]	@ (8000fec <HAL_UART_MspInit+0x188>)
 8000f8a:	69db      	ldr	r3, [r3, #28]
 8000f8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f94:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <HAL_UART_MspInit+0x188>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	4a14      	ldr	r2, [pc, #80]	@ (8000fec <HAL_UART_MspInit+0x188>)
 8000f9a:	f043 0308 	orr.w	r3, r3, #8
 8000f9e:	6193      	str	r3, [r2, #24]
 8000fa0:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <HAL_UART_MspInit+0x188>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	f003 0308 	and.w	r3, r3, #8
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fb0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4810      	ldr	r0, [pc, #64]	@ (8001004 <HAL_UART_MspInit+0x1a0>)
 8000fc2:	f000 fc79 	bl	80018b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fc6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000fca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fd8:	4619      	mov	r1, r3
 8000fda:	480a      	ldr	r0, [pc, #40]	@ (8001004 <HAL_UART_MspInit+0x1a0>)
 8000fdc:	f000 fc6c 	bl	80018b8 <HAL_GPIO_Init>
}
 8000fe0:	bf00      	nop
 8000fe2:	3738      	adds	r7, #56	@ 0x38
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40013800 	.word	0x40013800
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40010800 	.word	0x40010800
 8000ff4:	40004400 	.word	0x40004400
 8000ff8:	40011400 	.word	0x40011400
 8000ffc:	40010000 	.word	0x40010000
 8001000:	40004800 	.word	0x40004800
 8001004:	40010c00 	.word	0x40010c00

08001008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <NMI_Handler+0x4>

08001010 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <HardFault_Handler+0x4>

08001018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <MemManage_Handler+0x4>

08001020 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <BusFault_Handler+0x4>

08001028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <UsageFault_Handler+0x4>

08001030 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr

08001048 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001058:	f000 f8f8 	bl	800124c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}

08001060 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	e00a      	b.n	8001088 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001072:	f3af 8000 	nop.w
 8001076:	4601      	mov	r1, r0
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	1c5a      	adds	r2, r3, #1
 800107c:	60ba      	str	r2, [r7, #8]
 800107e:	b2ca      	uxtb	r2, r1
 8001080:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	3301      	adds	r3, #1
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	697a      	ldr	r2, [r7, #20]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	429a      	cmp	r2, r3
 800108e:	dbf0      	blt.n	8001072 <_read+0x12>
  }

  return len;
 8001090:	687b      	ldr	r3, [r7, #4]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <_close>:
  }
  return len;
}

int _close(int file)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010c0:	605a      	str	r2, [r3, #4]
  return 0;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr

080010ce <_isatty>:

int _isatty(int file)
{
 80010ce:	b480      	push	{r7}
 80010d0:	b083      	sub	sp, #12
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010d6:	2301      	movs	r3, #1
}
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr

080010e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b085      	sub	sp, #20
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	60f8      	str	r0, [r7, #12]
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
	...

080010fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001104:	4a14      	ldr	r2, [pc, #80]	@ (8001158 <_sbrk+0x5c>)
 8001106:	4b15      	ldr	r3, [pc, #84]	@ (800115c <_sbrk+0x60>)
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001110:	4b13      	ldr	r3, [pc, #76]	@ (8001160 <_sbrk+0x64>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d102      	bne.n	800111e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001118:	4b11      	ldr	r3, [pc, #68]	@ (8001160 <_sbrk+0x64>)
 800111a:	4a12      	ldr	r2, [pc, #72]	@ (8001164 <_sbrk+0x68>)
 800111c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800111e:	4b10      	ldr	r3, [pc, #64]	@ (8001160 <_sbrk+0x64>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	429a      	cmp	r2, r3
 800112a:	d207      	bcs.n	800113c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800112c:	f002 f942 	bl	80033b4 <__errno>
 8001130:	4603      	mov	r3, r0
 8001132:	220c      	movs	r2, #12
 8001134:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	e009      	b.n	8001150 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800113c:	4b08      	ldr	r3, [pc, #32]	@ (8001160 <_sbrk+0x64>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001142:	4b07      	ldr	r3, [pc, #28]	@ (8001160 <_sbrk+0x64>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	4a05      	ldr	r2, [pc, #20]	@ (8001160 <_sbrk+0x64>)
 800114c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800114e:	68fb      	ldr	r3, [r7, #12]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20010000 	.word	0x20010000
 800115c:	00000400 	.word	0x00000400
 8001160:	20000fcc 	.word	0x20000fcc
 8001164:	20001120 	.word	0x20001120

08001168 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001174:	f7ff fff8 	bl	8001168 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001178:	480b      	ldr	r0, [pc, #44]	@ (80011a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800117a:	490c      	ldr	r1, [pc, #48]	@ (80011ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800117c:	4a0c      	ldr	r2, [pc, #48]	@ (80011b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001180:	e002      	b.n	8001188 <LoopCopyDataInit>

08001182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001186:	3304      	adds	r3, #4

08001188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800118c:	d3f9      	bcc.n	8001182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118e:	4a09      	ldr	r2, [pc, #36]	@ (80011b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001190:	4c09      	ldr	r4, [pc, #36]	@ (80011b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001194:	e001      	b.n	800119a <LoopFillZerobss>

08001196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001198:	3204      	adds	r2, #4

0800119a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800119c:	d3fb      	bcc.n	8001196 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800119e:	f002 f90f 	bl	80033c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011a2:	f7ff f9d5 	bl	8000550 <main>
  bx lr
 80011a6:	4770      	bx	lr
  ldr r0, =_sdata
 80011a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ac:	20000d28 	.word	0x20000d28
  ldr r2, =_sidata
 80011b0:	080048e4 	.word	0x080048e4
  ldr r2, =_sbss
 80011b4:	20000d28 	.word	0x20000d28
  ldr r4, =_ebss
 80011b8:	20001120 	.word	0x20001120

080011bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011bc:	e7fe      	b.n	80011bc <ADC1_2_IRQHandler>
	...

080011c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c4:	4b08      	ldr	r3, [pc, #32]	@ (80011e8 <HAL_Init+0x28>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a07      	ldr	r2, [pc, #28]	@ (80011e8 <HAL_Init+0x28>)
 80011ca:	f043 0310 	orr.w	r3, r3, #16
 80011ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d0:	2003      	movs	r0, #3
 80011d2:	f000 fb3d 	bl	8001850 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d6:	200f      	movs	r0, #15
 80011d8:	f000 f808 	bl	80011ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011dc:	f7ff fdd4 	bl	8000d88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40022000 	.word	0x40022000

080011ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f4:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <HAL_InitTick+0x54>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <HAL_InitTick+0x58>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4619      	mov	r1, r3
 80011fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001202:	fbb3 f3f1 	udiv	r3, r3, r1
 8001206:	fbb2 f3f3 	udiv	r3, r2, r3
 800120a:	4618      	mov	r0, r3
 800120c:	f000 fb47 	bl	800189e <HAL_SYSTICK_Config>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e00e      	b.n	8001238 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b0f      	cmp	r3, #15
 800121e:	d80a      	bhi.n	8001236 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001220:	2200      	movs	r2, #0
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f000 fb1d 	bl	8001866 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800122c:	4a06      	ldr	r2, [pc, #24]	@ (8001248 <HAL_InitTick+0x5c>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	e000      	b.n	8001238 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
}
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000cc0 	.word	0x20000cc0
 8001244:	20000cc8 	.word	0x20000cc8
 8001248:	20000cc4 	.word	0x20000cc4

0800124c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001250:	4b05      	ldr	r3, [pc, #20]	@ (8001268 <HAL_IncTick+0x1c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4b05      	ldr	r3, [pc, #20]	@ (800126c <HAL_IncTick+0x20>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4413      	add	r3, r2
 800125c:	4a03      	ldr	r2, [pc, #12]	@ (800126c <HAL_IncTick+0x20>)
 800125e:	6013      	str	r3, [r2, #0]
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	20000cc8 	.word	0x20000cc8
 800126c:	20000fd0 	.word	0x20000fd0

08001270 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return uwTick;
 8001274:	4b02      	ldr	r3, [pc, #8]	@ (8001280 <HAL_GetTick+0x10>)
 8001276:	681b      	ldr	r3, [r3, #0]
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	20000fd0 	.word	0x20000fd0

08001284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800128c:	f7ff fff0 	bl	8001270 <HAL_GetTick>
 8001290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800129c:	d005      	beq.n	80012aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800129e:	4b0a      	ldr	r3, [pc, #40]	@ (80012c8 <HAL_Delay+0x44>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4413      	add	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012aa:	bf00      	nop
 80012ac:	f7ff ffe0 	bl	8001270 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d8f7      	bhi.n	80012ac <HAL_Delay+0x28>
  {
  }
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000cc8 	.word	0x20000cc8

080012cc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012d4:	2300      	movs	r3, #0
 80012d6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80012d8:	2300      	movs	r3, #0
 80012da:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80012dc:	2300      	movs	r3, #0
 80012de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e0be      	b.n	800146c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d109      	bne.n	8001310 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff fd6e 	bl	8000dec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f000 f9ab 	bl	800166c <ADC_ConversionStop_Disable>
 8001316:	4603      	mov	r3, r0
 8001318:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800131e:	f003 0310 	and.w	r3, r3, #16
 8001322:	2b00      	cmp	r3, #0
 8001324:	f040 8099 	bne.w	800145a <HAL_ADC_Init+0x18e>
 8001328:	7dfb      	ldrb	r3, [r7, #23]
 800132a:	2b00      	cmp	r3, #0
 800132c:	f040 8095 	bne.w	800145a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001334:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001338:	f023 0302 	bic.w	r3, r3, #2
 800133c:	f043 0202 	orr.w	r2, r3, #2
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800134c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	7b1b      	ldrb	r3, [r3, #12]
 8001352:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001354:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	4313      	orrs	r3, r2
 800135a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001364:	d003      	beq.n	800136e <HAL_ADC_Init+0xa2>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d102      	bne.n	8001374 <HAL_ADC_Init+0xa8>
 800136e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001372:	e000      	b.n	8001376 <HAL_ADC_Init+0xaa>
 8001374:	2300      	movs	r3, #0
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	7d1b      	ldrb	r3, [r3, #20]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d119      	bne.n	80013b8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	7b1b      	ldrb	r3, [r3, #12]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d109      	bne.n	80013a0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	3b01      	subs	r3, #1
 8001392:	035a      	lsls	r2, r3, #13
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	e00b      	b.n	80013b8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013a4:	f043 0220 	orr.w	r2, r3, #32
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013b0:	f043 0201 	orr.w	r2, r3, #1
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689a      	ldr	r2, [r3, #8]
 80013d2:	4b28      	ldr	r3, [pc, #160]	@ (8001474 <HAL_ADC_Init+0x1a8>)
 80013d4:	4013      	ands	r3, r2
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	6812      	ldr	r2, [r2, #0]
 80013da:	68b9      	ldr	r1, [r7, #8]
 80013dc:	430b      	orrs	r3, r1
 80013de:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80013e8:	d003      	beq.n	80013f2 <HAL_ADC_Init+0x126>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d104      	bne.n	80013fc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	051b      	lsls	r3, r3, #20
 80013fa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001402:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	430a      	orrs	r2, r1
 800140e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	689a      	ldr	r2, [r3, #8]
 8001416:	4b18      	ldr	r3, [pc, #96]	@ (8001478 <HAL_ADC_Init+0x1ac>)
 8001418:	4013      	ands	r3, r2
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	429a      	cmp	r2, r3
 800141e:	d10b      	bne.n	8001438 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800142a:	f023 0303 	bic.w	r3, r3, #3
 800142e:	f043 0201 	orr.w	r2, r3, #1
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001436:	e018      	b.n	800146a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800143c:	f023 0312 	bic.w	r3, r3, #18
 8001440:	f043 0210 	orr.w	r2, r3, #16
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800144c:	f043 0201 	orr.w	r2, r3, #1
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001458:	e007      	b.n	800146a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800145e:	f043 0210 	orr.w	r2, r3, #16
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800146a:	7dfb      	ldrb	r3, [r7, #23]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	ffe1f7fd 	.word	0xffe1f7fd
 8001478:	ff1f0efe 	.word	0xff1f0efe

0800147c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001486:	2300      	movs	r3, #0
 8001488:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800148a:	2300      	movs	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001494:	2b01      	cmp	r3, #1
 8001496:	d101      	bne.n	800149c <HAL_ADC_ConfigChannel+0x20>
 8001498:	2302      	movs	r3, #2
 800149a:	e0dc      	b.n	8001656 <HAL_ADC_ConfigChannel+0x1da>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b06      	cmp	r3, #6
 80014aa:	d81c      	bhi.n	80014e6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	4613      	mov	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	3b05      	subs	r3, #5
 80014be:	221f      	movs	r2, #31
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	4019      	ands	r1, r3
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	6818      	ldr	r0, [r3, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	4613      	mov	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	3b05      	subs	r3, #5
 80014d8:	fa00 f203 	lsl.w	r2, r0, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	430a      	orrs	r2, r1
 80014e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80014e4:	e03c      	b.n	8001560 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b0c      	cmp	r3, #12
 80014ec:	d81c      	bhi.n	8001528 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	3b23      	subs	r3, #35	@ 0x23
 8001500:	221f      	movs	r2, #31
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	4019      	ands	r1, r3
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	6818      	ldr	r0, [r3, #0]
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	4613      	mov	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	3b23      	subs	r3, #35	@ 0x23
 800151a:	fa00 f203 	lsl.w	r2, r0, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	430a      	orrs	r2, r1
 8001524:	631a      	str	r2, [r3, #48]	@ 0x30
 8001526:	e01b      	b.n	8001560 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685a      	ldr	r2, [r3, #4]
 8001532:	4613      	mov	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4413      	add	r3, r2
 8001538:	3b41      	subs	r3, #65	@ 0x41
 800153a:	221f      	movs	r2, #31
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	4019      	ands	r1, r3
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	6818      	ldr	r0, [r3, #0]
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	4613      	mov	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	3b41      	subs	r3, #65	@ 0x41
 8001554:	fa00 f203 	lsl.w	r2, r0, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	430a      	orrs	r2, r1
 800155e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b09      	cmp	r3, #9
 8001566:	d91c      	bls.n	80015a2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	68d9      	ldr	r1, [r3, #12]
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	4613      	mov	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	3b1e      	subs	r3, #30
 800157a:	2207      	movs	r2, #7
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	4019      	ands	r1, r3
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	6898      	ldr	r0, [r3, #8]
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4613      	mov	r3, r2
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	4413      	add	r3, r2
 8001592:	3b1e      	subs	r3, #30
 8001594:	fa00 f203 	lsl.w	r2, r0, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	60da      	str	r2, [r3, #12]
 80015a0:	e019      	b.n	80015d6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6919      	ldr	r1, [r3, #16]
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4613      	mov	r3, r2
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	4413      	add	r3, r2
 80015b2:	2207      	movs	r2, #7
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	4019      	ands	r1, r3
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	6898      	ldr	r0, [r3, #8]
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4613      	mov	r3, r2
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	4413      	add	r3, r2
 80015ca:	fa00 f203 	lsl.w	r2, r0, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2b10      	cmp	r3, #16
 80015dc:	d003      	beq.n	80015e6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80015e2:	2b11      	cmp	r3, #17
 80015e4:	d132      	bne.n	800164c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001660 <HAL_ADC_ConfigChannel+0x1e4>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d125      	bne.n	800163c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d126      	bne.n	800164c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800160c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b10      	cmp	r3, #16
 8001614:	d11a      	bne.n	800164c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001616:	4b13      	ldr	r3, [pc, #76]	@ (8001664 <HAL_ADC_ConfigChannel+0x1e8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a13      	ldr	r2, [pc, #76]	@ (8001668 <HAL_ADC_ConfigChannel+0x1ec>)
 800161c:	fba2 2303 	umull	r2, r3, r2, r3
 8001620:	0c9a      	lsrs	r2, r3, #18
 8001622:	4613      	mov	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800162c:	e002      	b.n	8001634 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	3b01      	subs	r3, #1
 8001632:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f9      	bne.n	800162e <HAL_ADC_ConfigChannel+0x1b2>
 800163a:	e007      	b.n	800164c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001640:	f043 0220 	orr.w	r2, r3, #32
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001654:	7bfb      	ldrb	r3, [r7, #15]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	40012400 	.word	0x40012400
 8001664:	20000cc0 	.word	0x20000cc0
 8001668:	431bde83 	.word	0x431bde83

0800166c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b01      	cmp	r3, #1
 8001684:	d12e      	bne.n	80016e4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 0201 	bic.w	r2, r2, #1
 8001694:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001696:	f7ff fdeb 	bl	8001270 <HAL_GetTick>
 800169a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800169c:	e01b      	b.n	80016d6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800169e:	f7ff fde7 	bl	8001270 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d914      	bls.n	80016d6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d10d      	bne.n	80016d6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016be:	f043 0210 	orr.w	r2, r3, #16
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ca:	f043 0201 	orr.w	r2, r3, #1
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e007      	b.n	80016e6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d0dc      	beq.n	800169e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001700:	4b0c      	ldr	r3, [pc, #48]	@ (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800170c:	4013      	ands	r3, r2
 800170e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001718:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800171c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001722:	4a04      	ldr	r2, [pc, #16]	@ (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	60d3      	str	r3, [r2, #12]
}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800173c:	4b04      	ldr	r3, [pc, #16]	@ (8001750 <__NVIC_GetPriorityGrouping+0x18>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	0a1b      	lsrs	r3, r3, #8
 8001742:	f003 0307 	and.w	r3, r3, #7
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	6039      	str	r1, [r7, #0]
 800175e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001764:	2b00      	cmp	r3, #0
 8001766:	db0a      	blt.n	800177e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	b2da      	uxtb	r2, r3
 800176c:	490c      	ldr	r1, [pc, #48]	@ (80017a0 <__NVIC_SetPriority+0x4c>)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	0112      	lsls	r2, r2, #4
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	440b      	add	r3, r1
 8001778:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800177c:	e00a      	b.n	8001794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4908      	ldr	r1, [pc, #32]	@ (80017a4 <__NVIC_SetPriority+0x50>)
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	3b04      	subs	r3, #4
 800178c:	0112      	lsls	r2, r2, #4
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	440b      	add	r3, r1
 8001792:	761a      	strb	r2, [r3, #24]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000e100 	.word	0xe000e100
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b089      	sub	sp, #36	@ 0x24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f1c3 0307 	rsb	r3, r3, #7
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	bf28      	it	cs
 80017c6:	2304      	movcs	r3, #4
 80017c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3304      	adds	r3, #4
 80017ce:	2b06      	cmp	r3, #6
 80017d0:	d902      	bls.n	80017d8 <NVIC_EncodePriority+0x30>
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3b03      	subs	r3, #3
 80017d6:	e000      	b.n	80017da <NVIC_EncodePriority+0x32>
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017dc:	f04f 32ff 	mov.w	r2, #4294967295
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43da      	mvns	r2, r3
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	401a      	ands	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f0:	f04f 31ff 	mov.w	r1, #4294967295
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	fa01 f303 	lsl.w	r3, r1, r3
 80017fa:	43d9      	mvns	r1, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	4313      	orrs	r3, r2
         );
}
 8001802:	4618      	mov	r0, r3
 8001804:	3724      	adds	r7, #36	@ 0x24
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr

0800180c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3b01      	subs	r3, #1
 8001818:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800181c:	d301      	bcc.n	8001822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800181e:	2301      	movs	r3, #1
 8001820:	e00f      	b.n	8001842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001822:	4a0a      	ldr	r2, [pc, #40]	@ (800184c <SysTick_Config+0x40>)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3b01      	subs	r3, #1
 8001828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800182a:	210f      	movs	r1, #15
 800182c:	f04f 30ff 	mov.w	r0, #4294967295
 8001830:	f7ff ff90 	bl	8001754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001834:	4b05      	ldr	r3, [pc, #20]	@ (800184c <SysTick_Config+0x40>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800183a:	4b04      	ldr	r3, [pc, #16]	@ (800184c <SysTick_Config+0x40>)
 800183c:	2207      	movs	r2, #7
 800183e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	e000e010 	.word	0xe000e010

08001850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff ff49 	bl	80016f0 <__NVIC_SetPriorityGrouping>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001866:	b580      	push	{r7, lr}
 8001868:	b086      	sub	sp, #24
 800186a:	af00      	add	r7, sp, #0
 800186c:	4603      	mov	r3, r0
 800186e:	60b9      	str	r1, [r7, #8]
 8001870:	607a      	str	r2, [r7, #4]
 8001872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001878:	f7ff ff5e 	bl	8001738 <__NVIC_GetPriorityGrouping>
 800187c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	68b9      	ldr	r1, [r7, #8]
 8001882:	6978      	ldr	r0, [r7, #20]
 8001884:	f7ff ff90 	bl	80017a8 <NVIC_EncodePriority>
 8001888:	4602      	mov	r2, r0
 800188a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800188e:	4611      	mov	r1, r2
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ff5f 	bl	8001754 <__NVIC_SetPriority>
}
 8001896:	bf00      	nop
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff ffb0 	bl	800180c <SysTick_Config>
 80018ac:	4603      	mov	r3, r0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b08b      	sub	sp, #44	@ 0x2c
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018c2:	2300      	movs	r3, #0
 80018c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018c6:	2300      	movs	r3, #0
 80018c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ca:	e169      	b.n	8001ba0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018cc:	2201      	movs	r2, #1
 80018ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	69fa      	ldr	r2, [r7, #28]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	f040 8158 	bne.w	8001b9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	4a9a      	ldr	r2, [pc, #616]	@ (8001b58 <HAL_GPIO_Init+0x2a0>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d05e      	beq.n	80019b2 <HAL_GPIO_Init+0xfa>
 80018f4:	4a98      	ldr	r2, [pc, #608]	@ (8001b58 <HAL_GPIO_Init+0x2a0>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d875      	bhi.n	80019e6 <HAL_GPIO_Init+0x12e>
 80018fa:	4a98      	ldr	r2, [pc, #608]	@ (8001b5c <HAL_GPIO_Init+0x2a4>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d058      	beq.n	80019b2 <HAL_GPIO_Init+0xfa>
 8001900:	4a96      	ldr	r2, [pc, #600]	@ (8001b5c <HAL_GPIO_Init+0x2a4>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d86f      	bhi.n	80019e6 <HAL_GPIO_Init+0x12e>
 8001906:	4a96      	ldr	r2, [pc, #600]	@ (8001b60 <HAL_GPIO_Init+0x2a8>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d052      	beq.n	80019b2 <HAL_GPIO_Init+0xfa>
 800190c:	4a94      	ldr	r2, [pc, #592]	@ (8001b60 <HAL_GPIO_Init+0x2a8>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d869      	bhi.n	80019e6 <HAL_GPIO_Init+0x12e>
 8001912:	4a94      	ldr	r2, [pc, #592]	@ (8001b64 <HAL_GPIO_Init+0x2ac>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d04c      	beq.n	80019b2 <HAL_GPIO_Init+0xfa>
 8001918:	4a92      	ldr	r2, [pc, #584]	@ (8001b64 <HAL_GPIO_Init+0x2ac>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d863      	bhi.n	80019e6 <HAL_GPIO_Init+0x12e>
 800191e:	4a92      	ldr	r2, [pc, #584]	@ (8001b68 <HAL_GPIO_Init+0x2b0>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d046      	beq.n	80019b2 <HAL_GPIO_Init+0xfa>
 8001924:	4a90      	ldr	r2, [pc, #576]	@ (8001b68 <HAL_GPIO_Init+0x2b0>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d85d      	bhi.n	80019e6 <HAL_GPIO_Init+0x12e>
 800192a:	2b12      	cmp	r3, #18
 800192c:	d82a      	bhi.n	8001984 <HAL_GPIO_Init+0xcc>
 800192e:	2b12      	cmp	r3, #18
 8001930:	d859      	bhi.n	80019e6 <HAL_GPIO_Init+0x12e>
 8001932:	a201      	add	r2, pc, #4	@ (adr r2, 8001938 <HAL_GPIO_Init+0x80>)
 8001934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001938:	080019b3 	.word	0x080019b3
 800193c:	0800198d 	.word	0x0800198d
 8001940:	0800199f 	.word	0x0800199f
 8001944:	080019e1 	.word	0x080019e1
 8001948:	080019e7 	.word	0x080019e7
 800194c:	080019e7 	.word	0x080019e7
 8001950:	080019e7 	.word	0x080019e7
 8001954:	080019e7 	.word	0x080019e7
 8001958:	080019e7 	.word	0x080019e7
 800195c:	080019e7 	.word	0x080019e7
 8001960:	080019e7 	.word	0x080019e7
 8001964:	080019e7 	.word	0x080019e7
 8001968:	080019e7 	.word	0x080019e7
 800196c:	080019e7 	.word	0x080019e7
 8001970:	080019e7 	.word	0x080019e7
 8001974:	080019e7 	.word	0x080019e7
 8001978:	080019e7 	.word	0x080019e7
 800197c:	08001995 	.word	0x08001995
 8001980:	080019a9 	.word	0x080019a9
 8001984:	4a79      	ldr	r2, [pc, #484]	@ (8001b6c <HAL_GPIO_Init+0x2b4>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d013      	beq.n	80019b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800198a:	e02c      	b.n	80019e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	623b      	str	r3, [r7, #32]
          break;
 8001992:	e029      	b.n	80019e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	3304      	adds	r3, #4
 800199a:	623b      	str	r3, [r7, #32]
          break;
 800199c:	e024      	b.n	80019e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	3308      	adds	r3, #8
 80019a4:	623b      	str	r3, [r7, #32]
          break;
 80019a6:	e01f      	b.n	80019e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	330c      	adds	r3, #12
 80019ae:	623b      	str	r3, [r7, #32]
          break;
 80019b0:	e01a      	b.n	80019e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d102      	bne.n	80019c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019ba:	2304      	movs	r3, #4
 80019bc:	623b      	str	r3, [r7, #32]
          break;
 80019be:	e013      	b.n	80019e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d105      	bne.n	80019d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019c8:	2308      	movs	r3, #8
 80019ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69fa      	ldr	r2, [r7, #28]
 80019d0:	611a      	str	r2, [r3, #16]
          break;
 80019d2:	e009      	b.n	80019e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019d4:	2308      	movs	r3, #8
 80019d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	69fa      	ldr	r2, [r7, #28]
 80019dc:	615a      	str	r2, [r3, #20]
          break;
 80019de:	e003      	b.n	80019e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019e0:	2300      	movs	r3, #0
 80019e2:	623b      	str	r3, [r7, #32]
          break;
 80019e4:	e000      	b.n	80019e8 <HAL_GPIO_Init+0x130>
          break;
 80019e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	2bff      	cmp	r3, #255	@ 0xff
 80019ec:	d801      	bhi.n	80019f2 <HAL_GPIO_Init+0x13a>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	e001      	b.n	80019f6 <HAL_GPIO_Init+0x13e>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3304      	adds	r3, #4
 80019f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	2bff      	cmp	r3, #255	@ 0xff
 80019fc:	d802      	bhi.n	8001a04 <HAL_GPIO_Init+0x14c>
 80019fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	e002      	b.n	8001a0a <HAL_GPIO_Init+0x152>
 8001a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a06:	3b08      	subs	r3, #8
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	210f      	movs	r1, #15
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	fa01 f303 	lsl.w	r3, r1, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	6a39      	ldr	r1, [r7, #32]
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	fa01 f303 	lsl.w	r3, r1, r3
 8001a24:	431a      	orrs	r2, r3
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f000 80b1 	beq.w	8001b9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a38:	4b4d      	ldr	r3, [pc, #308]	@ (8001b70 <HAL_GPIO_Init+0x2b8>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	4a4c      	ldr	r2, [pc, #304]	@ (8001b70 <HAL_GPIO_Init+0x2b8>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	6193      	str	r3, [r2, #24]
 8001a44:	4b4a      	ldr	r3, [pc, #296]	@ (8001b70 <HAL_GPIO_Init+0x2b8>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a50:	4a48      	ldr	r2, [pc, #288]	@ (8001b74 <HAL_GPIO_Init+0x2bc>)
 8001a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a54:	089b      	lsrs	r3, r3, #2
 8001a56:	3302      	adds	r3, #2
 8001a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	220f      	movs	r2, #15
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	4013      	ands	r3, r2
 8001a72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a40      	ldr	r2, [pc, #256]	@ (8001b78 <HAL_GPIO_Init+0x2c0>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d013      	beq.n	8001aa4 <HAL_GPIO_Init+0x1ec>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a3f      	ldr	r2, [pc, #252]	@ (8001b7c <HAL_GPIO_Init+0x2c4>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d00d      	beq.n	8001aa0 <HAL_GPIO_Init+0x1e8>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a3e      	ldr	r2, [pc, #248]	@ (8001b80 <HAL_GPIO_Init+0x2c8>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d007      	beq.n	8001a9c <HAL_GPIO_Init+0x1e4>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a3d      	ldr	r2, [pc, #244]	@ (8001b84 <HAL_GPIO_Init+0x2cc>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d101      	bne.n	8001a98 <HAL_GPIO_Init+0x1e0>
 8001a94:	2303      	movs	r3, #3
 8001a96:	e006      	b.n	8001aa6 <HAL_GPIO_Init+0x1ee>
 8001a98:	2304      	movs	r3, #4
 8001a9a:	e004      	b.n	8001aa6 <HAL_GPIO_Init+0x1ee>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e002      	b.n	8001aa6 <HAL_GPIO_Init+0x1ee>
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e000      	b.n	8001aa6 <HAL_GPIO_Init+0x1ee>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aa8:	f002 0203 	and.w	r2, r2, #3
 8001aac:	0092      	lsls	r2, r2, #2
 8001aae:	4093      	lsls	r3, r2
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ab6:	492f      	ldr	r1, [pc, #188]	@ (8001b74 <HAL_GPIO_Init+0x2bc>)
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aba:	089b      	lsrs	r3, r3, #2
 8001abc:	3302      	adds	r3, #2
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d006      	beq.n	8001ade <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ad0:	4b2d      	ldr	r3, [pc, #180]	@ (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	492c      	ldr	r1, [pc, #176]	@ (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	608b      	str	r3, [r1, #8]
 8001adc:	e006      	b.n	8001aec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ade:	4b2a      	ldr	r3, [pc, #168]	@ (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	4928      	ldr	r1, [pc, #160]	@ (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001ae8:	4013      	ands	r3, r2
 8001aea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d006      	beq.n	8001b06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001af8:	4b23      	ldr	r3, [pc, #140]	@ (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001afa:	68da      	ldr	r2, [r3, #12]
 8001afc:	4922      	ldr	r1, [pc, #136]	@ (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	60cb      	str	r3, [r1, #12]
 8001b04:	e006      	b.n	8001b14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b06:	4b20      	ldr	r3, [pc, #128]	@ (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	491e      	ldr	r1, [pc, #120]	@ (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d006      	beq.n	8001b2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b20:	4b19      	ldr	r3, [pc, #100]	@ (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	4918      	ldr	r1, [pc, #96]	@ (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	604b      	str	r3, [r1, #4]
 8001b2c:	e006      	b.n	8001b3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b2e:	4b16      	ldr	r3, [pc, #88]	@ (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	4914      	ldr	r1, [pc, #80]	@ (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d021      	beq.n	8001b8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b48:	4b0f      	ldr	r3, [pc, #60]	@ (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	490e      	ldr	r1, [pc, #56]	@ (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	600b      	str	r3, [r1, #0]
 8001b54:	e021      	b.n	8001b9a <HAL_GPIO_Init+0x2e2>
 8001b56:	bf00      	nop
 8001b58:	10320000 	.word	0x10320000
 8001b5c:	10310000 	.word	0x10310000
 8001b60:	10220000 	.word	0x10220000
 8001b64:	10210000 	.word	0x10210000
 8001b68:	10120000 	.word	0x10120000
 8001b6c:	10110000 	.word	0x10110000
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40010000 	.word	0x40010000
 8001b78:	40010800 	.word	0x40010800
 8001b7c:	40010c00 	.word	0x40010c00
 8001b80:	40011000 	.word	0x40011000
 8001b84:	40011400 	.word	0x40011400
 8001b88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bbc <HAL_GPIO_Init+0x304>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	4909      	ldr	r1, [pc, #36]	@ (8001bbc <HAL_GPIO_Init+0x304>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f47f ae8e 	bne.w	80018cc <HAL_GPIO_Init+0x14>
  }
}
 8001bb0:	bf00      	nop
 8001bb2:	bf00      	nop
 8001bb4:	372c      	adds	r7, #44	@ 0x2c
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr
 8001bbc:	40010400 	.word	0x40010400

08001bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	807b      	strh	r3, [r7, #2]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bd0:	787b      	ldrb	r3, [r7, #1]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bd6:	887a      	ldrh	r2, [r7, #2]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bdc:	e003      	b.n	8001be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bde:	887b      	ldrh	r3, [r7, #2]
 8001be0:	041a      	lsls	r2, r3, #16
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	611a      	str	r2, [r3, #16]
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr

08001bf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e304      	b.n	800220c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 8087 	beq.w	8001d1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c10:	4b92      	ldr	r3, [pc, #584]	@ (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	2b04      	cmp	r3, #4
 8001c1a:	d00c      	beq.n	8001c36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c1c:	4b8f      	ldr	r3, [pc, #572]	@ (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 030c 	and.w	r3, r3, #12
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d112      	bne.n	8001c4e <HAL_RCC_OscConfig+0x5e>
 8001c28:	4b8c      	ldr	r3, [pc, #560]	@ (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c34:	d10b      	bne.n	8001c4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c36:	4b89      	ldr	r3, [pc, #548]	@ (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d06c      	beq.n	8001d1c <HAL_RCC_OscConfig+0x12c>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d168      	bne.n	8001d1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e2de      	b.n	800220c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c56:	d106      	bne.n	8001c66 <HAL_RCC_OscConfig+0x76>
 8001c58:	4b80      	ldr	r3, [pc, #512]	@ (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a7f      	ldr	r2, [pc, #508]	@ (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001c5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	e02e      	b.n	8001cc4 <HAL_RCC_OscConfig+0xd4>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10c      	bne.n	8001c88 <HAL_RCC_OscConfig+0x98>
 8001c6e:	4b7b      	ldr	r3, [pc, #492]	@ (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a7a      	ldr	r2, [pc, #488]	@ (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001c74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	4b78      	ldr	r3, [pc, #480]	@ (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a77      	ldr	r2, [pc, #476]	@ (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001c80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	e01d      	b.n	8001cc4 <HAL_RCC_OscConfig+0xd4>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c90:	d10c      	bne.n	8001cac <HAL_RCC_OscConfig+0xbc>
 8001c92:	4b72      	ldr	r3, [pc, #456]	@ (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a71      	ldr	r2, [pc, #452]	@ (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001c98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	4b6f      	ldr	r3, [pc, #444]	@ (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a6e      	ldr	r2, [pc, #440]	@ (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	e00b      	b.n	8001cc4 <HAL_RCC_OscConfig+0xd4>
 8001cac:	4b6b      	ldr	r3, [pc, #428]	@ (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a6a      	ldr	r2, [pc, #424]	@ (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cb6:	6013      	str	r3, [r2, #0]
 8001cb8:	4b68      	ldr	r3, [pc, #416]	@ (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a67      	ldr	r2, [pc, #412]	@ (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001cbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cc2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d013      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ccc:	f7ff fad0 	bl	8001270 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd4:	f7ff facc 	bl	8001270 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b64      	cmp	r3, #100	@ 0x64
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e292      	b.n	800220c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce6:	4b5d      	ldr	r3, [pc, #372]	@ (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0f0      	beq.n	8001cd4 <HAL_RCC_OscConfig+0xe4>
 8001cf2:	e014      	b.n	8001d1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7ff fabc 	bl	8001270 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cfc:	f7ff fab8 	bl	8001270 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b64      	cmp	r3, #100	@ 0x64
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e27e      	b.n	800220c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0e:	4b53      	ldr	r3, [pc, #332]	@ (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f0      	bne.n	8001cfc <HAL_RCC_OscConfig+0x10c>
 8001d1a:	e000      	b.n	8001d1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d063      	beq.n	8001df2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d2a:	4b4c      	ldr	r3, [pc, #304]	@ (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 030c 	and.w	r3, r3, #12
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00b      	beq.n	8001d4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d36:	4b49      	ldr	r3, [pc, #292]	@ (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 030c 	and.w	r3, r3, #12
 8001d3e:	2b08      	cmp	r3, #8
 8001d40:	d11c      	bne.n	8001d7c <HAL_RCC_OscConfig+0x18c>
 8001d42:	4b46      	ldr	r3, [pc, #280]	@ (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d116      	bne.n	8001d7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d4e:	4b43      	ldr	r3, [pc, #268]	@ (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d005      	beq.n	8001d66 <HAL_RCC_OscConfig+0x176>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d001      	beq.n	8001d66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e252      	b.n	800220c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d66:	4b3d      	ldr	r3, [pc, #244]	@ (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	4939      	ldr	r1, [pc, #228]	@ (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7a:	e03a      	b.n	8001df2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d020      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d84:	4b36      	ldr	r3, [pc, #216]	@ (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8a:	f7ff fa71 	bl	8001270 <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d92:	f7ff fa6d 	bl	8001270 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e233      	b.n	800220c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da4:	4b2d      	ldr	r3, [pc, #180]	@ (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0f0      	beq.n	8001d92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	4927      	ldr	r1, [pc, #156]	@ (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	600b      	str	r3, [r1, #0]
 8001dc4:	e015      	b.n	8001df2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dc6:	4b26      	ldr	r3, [pc, #152]	@ (8001e60 <HAL_RCC_OscConfig+0x270>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dcc:	f7ff fa50 	bl	8001270 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd4:	f7ff fa4c 	bl	8001270 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e212      	b.n	800220c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f0      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d03a      	beq.n	8001e74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d019      	beq.n	8001e3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e06:	4b17      	ldr	r3, [pc, #92]	@ (8001e64 <HAL_RCC_OscConfig+0x274>)
 8001e08:	2201      	movs	r2, #1
 8001e0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0c:	f7ff fa30 	bl	8001270 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e14:	f7ff fa2c 	bl	8001270 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e1f2      	b.n	800220c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e26:	4b0d      	ldr	r3, [pc, #52]	@ (8001e5c <HAL_RCC_OscConfig+0x26c>)
 8001e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d0f0      	beq.n	8001e14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e32:	2001      	movs	r0, #1
 8001e34:	f000 fc02 	bl	800263c <RCC_Delay>
 8001e38:	e01c      	b.n	8001e74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e64 <HAL_RCC_OscConfig+0x274>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e40:	f7ff fa16 	bl	8001270 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e46:	e00f      	b.n	8001e68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e48:	f7ff fa12 	bl	8001270 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d908      	bls.n	8001e68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e1d8      	b.n	800220c <HAL_RCC_OscConfig+0x61c>
 8001e5a:	bf00      	nop
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	42420000 	.word	0x42420000
 8001e64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e68:	4b9b      	ldr	r3, [pc, #620]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1e9      	bne.n	8001e48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 80a6 	beq.w	8001fce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e82:	2300      	movs	r3, #0
 8001e84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e86:	4b94      	ldr	r3, [pc, #592]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10d      	bne.n	8001eae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e92:	4b91      	ldr	r3, [pc, #580]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	4a90      	ldr	r2, [pc, #576]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 8001e98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e9c:	61d3      	str	r3, [r2, #28]
 8001e9e:	4b8e      	ldr	r3, [pc, #568]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eae:	4b8b      	ldr	r3, [pc, #556]	@ (80020dc <HAL_RCC_OscConfig+0x4ec>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d118      	bne.n	8001eec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eba:	4b88      	ldr	r3, [pc, #544]	@ (80020dc <HAL_RCC_OscConfig+0x4ec>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a87      	ldr	r2, [pc, #540]	@ (80020dc <HAL_RCC_OscConfig+0x4ec>)
 8001ec0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ec4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ec6:	f7ff f9d3 	bl	8001270 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ece:	f7ff f9cf 	bl	8001270 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b64      	cmp	r3, #100	@ 0x64
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e195      	b.n	800220c <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee0:	4b7e      	ldr	r3, [pc, #504]	@ (80020dc <HAL_RCC_OscConfig+0x4ec>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0f0      	beq.n	8001ece <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d106      	bne.n	8001f02 <HAL_RCC_OscConfig+0x312>
 8001ef4:	4b78      	ldr	r3, [pc, #480]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	4a77      	ldr	r2, [pc, #476]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	6213      	str	r3, [r2, #32]
 8001f00:	e02d      	b.n	8001f5e <HAL_RCC_OscConfig+0x36e>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10c      	bne.n	8001f24 <HAL_RCC_OscConfig+0x334>
 8001f0a:	4b73      	ldr	r3, [pc, #460]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	4a72      	ldr	r2, [pc, #456]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 8001f10:	f023 0301 	bic.w	r3, r3, #1
 8001f14:	6213      	str	r3, [r2, #32]
 8001f16:	4b70      	ldr	r3, [pc, #448]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	4a6f      	ldr	r2, [pc, #444]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 8001f1c:	f023 0304 	bic.w	r3, r3, #4
 8001f20:	6213      	str	r3, [r2, #32]
 8001f22:	e01c      	b.n	8001f5e <HAL_RCC_OscConfig+0x36e>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	2b05      	cmp	r3, #5
 8001f2a:	d10c      	bne.n	8001f46 <HAL_RCC_OscConfig+0x356>
 8001f2c:	4b6a      	ldr	r3, [pc, #424]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	4a69      	ldr	r2, [pc, #420]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 8001f32:	f043 0304 	orr.w	r3, r3, #4
 8001f36:	6213      	str	r3, [r2, #32]
 8001f38:	4b67      	ldr	r3, [pc, #412]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	4a66      	ldr	r2, [pc, #408]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	6213      	str	r3, [r2, #32]
 8001f44:	e00b      	b.n	8001f5e <HAL_RCC_OscConfig+0x36e>
 8001f46:	4b64      	ldr	r3, [pc, #400]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	4a63      	ldr	r2, [pc, #396]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 8001f4c:	f023 0301 	bic.w	r3, r3, #1
 8001f50:	6213      	str	r3, [r2, #32]
 8001f52:	4b61      	ldr	r3, [pc, #388]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	4a60      	ldr	r2, [pc, #384]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 8001f58:	f023 0304 	bic.w	r3, r3, #4
 8001f5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d015      	beq.n	8001f92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f66:	f7ff f983 	bl	8001270 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f6c:	e00a      	b.n	8001f84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f6e:	f7ff f97f 	bl	8001270 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e143      	b.n	800220c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f84:	4b54      	ldr	r3, [pc, #336]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0ee      	beq.n	8001f6e <HAL_RCC_OscConfig+0x37e>
 8001f90:	e014      	b.n	8001fbc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f92:	f7ff f96d 	bl	8001270 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f98:	e00a      	b.n	8001fb0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9a:	f7ff f969 	bl	8001270 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e12d      	b.n	800220c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb0:	4b49      	ldr	r3, [pc, #292]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1ee      	bne.n	8001f9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fbc:	7dfb      	ldrb	r3, [r7, #23]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d105      	bne.n	8001fce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc2:	4b45      	ldr	r3, [pc, #276]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	4a44      	ldr	r2, [pc, #272]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 8001fc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fcc:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 808c 	beq.w	80020f0 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001fd8:	4b3f      	ldr	r3, [pc, #252]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fe4:	d10e      	bne.n	8002004 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001fe6:	4b3c      	ldr	r3, [pc, #240]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d108      	bne.n	8002004 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8001ff2:	4b39      	ldr	r3, [pc, #228]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 8001ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001ffa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ffe:	d101      	bne.n	8002004 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e103      	b.n	800220c <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002008:	2b02      	cmp	r3, #2
 800200a:	d14e      	bne.n	80020aa <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800200c:	4b32      	ldr	r3, [pc, #200]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d009      	beq.n	800202c <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002018:	4b2f      	ldr	r3, [pc, #188]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 800201a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800201c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0ef      	b.n	800220c <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800202c:	4b2c      	ldr	r3, [pc, #176]	@ (80020e0 <HAL_RCC_OscConfig+0x4f0>)
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002032:	f7ff f91d 	bl	8001270 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800203a:	f7ff f919 	bl	8001270 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b64      	cmp	r3, #100	@ 0x64
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e0df      	b.n	800220c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 800204c:	4b22      	ldr	r3, [pc, #136]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1f0      	bne.n	800203a <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8002058:	4b1f      	ldr	r3, [pc, #124]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 800205a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800205c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002064:	491c      	ldr	r1, [pc, #112]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 8002066:	4313      	orrs	r3, r2
 8002068:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 800206a:	4b1b      	ldr	r3, [pc, #108]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 800206c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800206e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002076:	4918      	ldr	r1, [pc, #96]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 8002078:	4313      	orrs	r3, r2
 800207a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 800207c:	4b18      	ldr	r3, [pc, #96]	@ (80020e0 <HAL_RCC_OscConfig+0x4f0>)
 800207e:	2201      	movs	r2, #1
 8002080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002082:	f7ff f8f5 	bl	8001270 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800208a:	f7ff f8f1 	bl	8001270 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b64      	cmp	r3, #100	@ 0x64
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e0b7      	b.n	800220c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 800209c:	4b0e      	ldr	r3, [pc, #56]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0f0      	beq.n	800208a <HAL_RCC_OscConfig+0x49a>
 80020a8:	e022      	b.n	80020f0 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80020aa:	4b0b      	ldr	r3, [pc, #44]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 80020ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ae:	4a0a      	ldr	r2, [pc, #40]	@ (80020d8 <HAL_RCC_OscConfig+0x4e8>)
 80020b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80020b6:	4b0a      	ldr	r3, [pc, #40]	@ (80020e0 <HAL_RCC_OscConfig+0x4f0>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020bc:	f7ff f8d8 	bl	8001270 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80020c2:	e00f      	b.n	80020e4 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80020c4:	f7ff f8d4 	bl	8001270 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b64      	cmp	r3, #100	@ 0x64
 80020d0:	d908      	bls.n	80020e4 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e09a      	b.n	800220c <HAL_RCC_OscConfig+0x61c>
 80020d6:	bf00      	nop
 80020d8:	40021000 	.word	0x40021000
 80020dc:	40007000 	.word	0x40007000
 80020e0:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80020e4:	4b4b      	ldr	r3, [pc, #300]	@ (8002214 <HAL_RCC_OscConfig+0x624>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1e9      	bne.n	80020c4 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 8088 	beq.w	800220a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020fa:	4b46      	ldr	r3, [pc, #280]	@ (8002214 <HAL_RCC_OscConfig+0x624>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 030c 	and.w	r3, r3, #12
 8002102:	2b08      	cmp	r3, #8
 8002104:	d068      	beq.n	80021d8 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d14d      	bne.n	80021aa <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210e:	4b42      	ldr	r3, [pc, #264]	@ (8002218 <HAL_RCC_OscConfig+0x628>)
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7ff f8ac 	bl	8001270 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211c:	f7ff f8a8 	bl	8001270 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e06e      	b.n	800220c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800212e:	4b39      	ldr	r3, [pc, #228]	@ (8002214 <HAL_RCC_OscConfig+0x624>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002142:	d10f      	bne.n	8002164 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8002144:	4b33      	ldr	r3, [pc, #204]	@ (8002214 <HAL_RCC_OscConfig+0x624>)
 8002146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	4931      	ldr	r1, [pc, #196]	@ (8002214 <HAL_RCC_OscConfig+0x624>)
 800214e:	4313      	orrs	r3, r2
 8002150:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002152:	4b30      	ldr	r3, [pc, #192]	@ (8002214 <HAL_RCC_OscConfig+0x624>)
 8002154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002156:	f023 020f 	bic.w	r2, r3, #15
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	492d      	ldr	r1, [pc, #180]	@ (8002214 <HAL_RCC_OscConfig+0x624>)
 8002160:	4313      	orrs	r3, r2
 8002162:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002164:	4b2b      	ldr	r3, [pc, #172]	@ (8002214 <HAL_RCC_OscConfig+0x624>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002174:	430b      	orrs	r3, r1
 8002176:	4927      	ldr	r1, [pc, #156]	@ (8002214 <HAL_RCC_OscConfig+0x624>)
 8002178:	4313      	orrs	r3, r2
 800217a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800217c:	4b26      	ldr	r3, [pc, #152]	@ (8002218 <HAL_RCC_OscConfig+0x628>)
 800217e:	2201      	movs	r2, #1
 8002180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002182:	f7ff f875 	bl	8001270 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800218a:	f7ff f871 	bl	8001270 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e037      	b.n	800220c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800219c:	4b1d      	ldr	r3, [pc, #116]	@ (8002214 <HAL_RCC_OscConfig+0x624>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f0      	beq.n	800218a <HAL_RCC_OscConfig+0x59a>
 80021a8:	e02f      	b.n	800220a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002218 <HAL_RCC_OscConfig+0x628>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b0:	f7ff f85e 	bl	8001270 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b8:	f7ff f85a 	bl	8001270 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e020      	b.n	800220c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ca:	4b12      	ldr	r3, [pc, #72]	@ (8002214 <HAL_RCC_OscConfig+0x624>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCC_OscConfig+0x5c8>
 80021d6:	e018      	b.n	800220a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e013      	b.n	800220c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002214 <HAL_RCC_OscConfig+0x624>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d106      	bne.n	8002206 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002202:	429a      	cmp	r2, r3
 8002204:	d001      	beq.n	800220a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e000      	b.n	800220c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40021000 	.word	0x40021000
 8002218:	42420060 	.word	0x42420060

0800221c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0d0      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002230:	4b6a      	ldr	r3, [pc, #424]	@ (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d910      	bls.n	8002260 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223e:	4b67      	ldr	r3, [pc, #412]	@ (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f023 0207 	bic.w	r2, r3, #7
 8002246:	4965      	ldr	r1, [pc, #404]	@ (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	4313      	orrs	r3, r2
 800224c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800224e:	4b63      	ldr	r3, [pc, #396]	@ (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d001      	beq.n	8002260 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e0b8      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d020      	beq.n	80022ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	d005      	beq.n	8002284 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002278:	4b59      	ldr	r3, [pc, #356]	@ (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	4a58      	ldr	r2, [pc, #352]	@ (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002282:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0308 	and.w	r3, r3, #8
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002290:	4b53      	ldr	r3, [pc, #332]	@ (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	4a52      	ldr	r2, [pc, #328]	@ (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002296:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800229a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800229c:	4b50      	ldr	r3, [pc, #320]	@ (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	494d      	ldr	r1, [pc, #308]	@ (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d040      	beq.n	800233c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d107      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c2:	4b47      	ldr	r3, [pc, #284]	@ (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d115      	bne.n	80022fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e07f      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d107      	bne.n	80022ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022da:	4b41      	ldr	r3, [pc, #260]	@ (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d109      	bne.n	80022fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e073      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ea:	4b3d      	ldr	r3, [pc, #244]	@ (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e06b      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022fa:	4b39      	ldr	r3, [pc, #228]	@ (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f023 0203 	bic.w	r2, r3, #3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	4936      	ldr	r1, [pc, #216]	@ (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002308:	4313      	orrs	r3, r2
 800230a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800230c:	f7fe ffb0 	bl	8001270 <HAL_GetTick>
 8002310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002312:	e00a      	b.n	800232a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002314:	f7fe ffac 	bl	8001270 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002322:	4293      	cmp	r3, r2
 8002324:	d901      	bls.n	800232a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e053      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232a:	4b2d      	ldr	r3, [pc, #180]	@ (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 020c 	and.w	r2, r3, #12
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	429a      	cmp	r2, r3
 800233a:	d1eb      	bne.n	8002314 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800233c:	4b27      	ldr	r3, [pc, #156]	@ (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d210      	bcs.n	800236c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234a:	4b24      	ldr	r3, [pc, #144]	@ (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f023 0207 	bic.w	r2, r3, #7
 8002352:	4922      	ldr	r1, [pc, #136]	@ (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	4313      	orrs	r3, r2
 8002358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800235a:	4b20      	ldr	r3, [pc, #128]	@ (80023dc <HAL_RCC_ClockConfig+0x1c0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d001      	beq.n	800236c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e032      	b.n	80023d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b00      	cmp	r3, #0
 8002376:	d008      	beq.n	800238a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002378:	4b19      	ldr	r3, [pc, #100]	@ (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4916      	ldr	r1, [pc, #88]	@ (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002386:	4313      	orrs	r3, r2
 8002388:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b00      	cmp	r3, #0
 8002394:	d009      	beq.n	80023aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002396:	4b12      	ldr	r3, [pc, #72]	@ (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	490e      	ldr	r1, [pc, #56]	@ (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023aa:	f000 f821 	bl	80023f0 <HAL_RCC_GetSysClockFreq>
 80023ae:	4602      	mov	r2, r0
 80023b0:	4b0b      	ldr	r3, [pc, #44]	@ (80023e0 <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	091b      	lsrs	r3, r3, #4
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	490a      	ldr	r1, [pc, #40]	@ (80023e4 <HAL_RCC_ClockConfig+0x1c8>)
 80023bc:	5ccb      	ldrb	r3, [r1, r3]
 80023be:	fa22 f303 	lsr.w	r3, r2, r3
 80023c2:	4a09      	ldr	r2, [pc, #36]	@ (80023e8 <HAL_RCC_ClockConfig+0x1cc>)
 80023c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023c6:	4b09      	ldr	r3, [pc, #36]	@ (80023ec <HAL_RCC_ClockConfig+0x1d0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fe ff0e 	bl	80011ec <HAL_InitTick>

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40022000 	.word	0x40022000
 80023e0:	40021000 	.word	0x40021000
 80023e4:	08004868 	.word	0x08004868
 80023e8:	20000cc0 	.word	0x20000cc0
 80023ec:	20000cc4 	.word	0x20000cc4

080023f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023f4:	b092      	sub	sp, #72	@ 0x48
 80023f6:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023fc:	2300      	movs	r3, #0
 80023fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002400:	2300      	movs	r3, #0
 8002402:	647b      	str	r3, [r7, #68]	@ 0x44
 8002404:	2300      	movs	r3, #0
 8002406:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t sysclockfreq = 0U;
 8002408:	2300      	movs	r3, #0
 800240a:	643b      	str	r3, [r7, #64]	@ 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002410:	2300      	movs	r3, #0
 8002412:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002414:	4b6b      	ldr	r3, [pc, #428]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800241a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800241c:	f003 030c 	and.w	r3, r3, #12
 8002420:	2b04      	cmp	r3, #4
 8002422:	d002      	beq.n	800242a <HAL_RCC_GetSysClockFreq+0x3a>
 8002424:	2b08      	cmp	r3, #8
 8002426:	d003      	beq.n	8002430 <HAL_RCC_GetSysClockFreq+0x40>
 8002428:	e0c3      	b.n	80025b2 <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800242a:	4b67      	ldr	r3, [pc, #412]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800242c:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800242e:	e0c3      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002430:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002432:	0c9b      	lsrs	r3, r3, #18
 8002434:	f003 020f 	and.w	r2, r3, #15
 8002438:	4b64      	ldr	r3, [pc, #400]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x1dc>)
 800243a:	5c9b      	ldrb	r3, [r3, r2]
 800243c:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800243e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002440:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 80ac 	beq.w	80025a2 <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800244a:	4b5e      	ldr	r3, [pc, #376]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800244c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800244e:	f003 020f 	and.w	r2, r3, #15
 8002452:	4b5f      	ldr	r3, [pc, #380]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0x1e0>)
 8002454:	5c9b      	ldrb	r3, [r3, r2]
 8002456:	63bb      	str	r3, [r7, #56]	@ 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002458:	4b5a      	ldr	r3, [pc, #360]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800245a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800245c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 808c 	beq.w	800257e <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002466:	4b57      	ldr	r3, [pc, #348]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800246a:	091b      	lsrs	r3, r3, #4
 800246c:	f003 030f 	and.w	r3, r3, #15
 8002470:	3301      	adds	r3, #1
 8002472:	633b      	str	r3, [r7, #48]	@ 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002474:	4b53      	ldr	r3, [pc, #332]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002478:	0a1b      	lsrs	r3, r3, #8
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	3302      	adds	r3, #2
 8002480:	62fb      	str	r3, [r7, #44]	@ 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8002482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002484:	2200      	movs	r2, #0
 8002486:	623b      	str	r3, [r7, #32]
 8002488:	627a      	str	r2, [r7, #36]	@ 0x24
 800248a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800248c:	2200      	movs	r2, #0
 800248e:	4618      	mov	r0, r3
 8002490:	4611      	mov	r1, r2
 8002492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002494:	fb00 f203 	mul.w	r2, r0, r3
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	fb03 f301 	mul.w	r3, r3, r1
 800249e:	4413      	add	r3, r2
 80024a0:	6a3a      	ldr	r2, [r7, #32]
 80024a2:	fba2 4500 	umull	r4, r5, r2, r0
 80024a6:	442b      	add	r3, r5
 80024a8:	461d      	mov	r5, r3
 80024aa:	4622      	mov	r2, r4
 80024ac:	462b      	mov	r3, r5
 80024ae:	f04f 0000 	mov.w	r0, #0
 80024b2:	f04f 0100 	mov.w	r1, #0
 80024b6:	0159      	lsls	r1, r3, #5
 80024b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024bc:	0150      	lsls	r0, r2, #5
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	ebb2 0a04 	subs.w	sl, r2, r4
 80024c6:	eb63 0b05 	sbc.w	fp, r3, r5
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	f04f 0300 	mov.w	r3, #0
 80024d2:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024d6:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024da:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80024de:	ebb2 080a 	subs.w	r8, r2, sl
 80024e2:	eb63 090b 	sbc.w	r9, r3, fp
 80024e6:	f04f 0200 	mov.w	r2, #0
 80024ea:	f04f 0300 	mov.w	r3, #0
 80024ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024fa:	4690      	mov	r8, r2
 80024fc:	4699      	mov	r9, r3
 80024fe:	eb18 0304 	adds.w	r3, r8, r4
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	eb49 0305 	adc.w	r3, r9, r5
 8002508:	607b      	str	r3, [r7, #4]
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	f04f 0300 	mov.w	r3, #0
 8002512:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002516:	4629      	mov	r1, r5
 8002518:	024b      	lsls	r3, r1, #9
 800251a:	4620      	mov	r0, r4
 800251c:	4629      	mov	r1, r5
 800251e:	4604      	mov	r4, r0
 8002520:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002524:	4601      	mov	r1, r0
 8002526:	024a      	lsls	r2, r1, #9
 8002528:	4610      	mov	r0, r2
 800252a:	4619      	mov	r1, r3
 800252c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800252e:	2200      	movs	r2, #0
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	617a      	str	r2, [r7, #20]
 8002534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002536:	2200      	movs	r2, #0
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	60fa      	str	r2, [r7, #12]
 800253c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002540:	4622      	mov	r2, r4
 8002542:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8002546:	4645      	mov	r5, r8
 8002548:	fb05 f202 	mul.w	r2, r5, r2
 800254c:	46cc      	mov	ip, r9
 800254e:	4625      	mov	r5, r4
 8002550:	461c      	mov	r4, r3
 8002552:	4623      	mov	r3, r4
 8002554:	fb03 f30c 	mul.w	r3, r3, ip
 8002558:	4413      	add	r3, r2
 800255a:	4622      	mov	r2, r4
 800255c:	4644      	mov	r4, r8
 800255e:	fba2 2404 	umull	r2, r4, r2, r4
 8002562:	61fc      	str	r4, [r7, #28]
 8002564:	61ba      	str	r2, [r7, #24]
 8002566:	69fa      	ldr	r2, [r7, #28]
 8002568:	4413      	add	r3, r2
 800256a:	61fb      	str	r3, [r7, #28]
 800256c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002570:	f7fd fe62 	bl	8000238 <__aeabi_uldivmod>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	4613      	mov	r3, r2
 800257a:	647b      	str	r3, [r7, #68]	@ 0x44
 800257c:	e007      	b.n	800258e <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 800257e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002580:	4a11      	ldr	r2, [pc, #68]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8002582:	fb03 f202 	mul.w	r2, r3, r2
 8002586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002588:	fbb2 f3f3 	udiv	r3, r2, r3
 800258c:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 800258e:	4b0f      	ldr	r3, [pc, #60]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x1dc>)
 8002590:	7b5b      	ldrb	r3, [r3, #13]
 8002592:	461a      	mov	r2, r3
 8002594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002596:	4293      	cmp	r3, r2
 8002598:	d108      	bne.n	80025ac <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 800259a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800259c:	085b      	lsrs	r3, r3, #1
 800259e:	647b      	str	r3, [r7, #68]	@ 0x44
 80025a0:	e004      	b.n	80025ac <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025a4:	4a0b      	ldr	r2, [pc, #44]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80025a6:	fb02 f303 	mul.w	r3, r2, r3
 80025aa:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllclk;
 80025ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025ae:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80025b0:	e002      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025b2:	4b05      	ldr	r3, [pc, #20]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80025b4:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80025b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3748      	adds	r7, #72	@ 0x48
 80025be:	46bd      	mov	sp, r7
 80025c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025c4:	40021000 	.word	0x40021000
 80025c8:	007a1200 	.word	0x007a1200
 80025cc:	08004880 	.word	0x08004880
 80025d0:	08004890 	.word	0x08004890
 80025d4:	003d0900 	.word	0x003d0900

080025d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025dc:	4b02      	ldr	r3, [pc, #8]	@ (80025e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80025de:	681b      	ldr	r3, [r3, #0]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr
 80025e8:	20000cc0 	.word	0x20000cc0

080025ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025f0:	f7ff fff2 	bl	80025d8 <HAL_RCC_GetHCLKFreq>
 80025f4:	4602      	mov	r2, r0
 80025f6:	4b05      	ldr	r3, [pc, #20]	@ (800260c <HAL_RCC_GetPCLK1Freq+0x20>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	0a1b      	lsrs	r3, r3, #8
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	4903      	ldr	r1, [pc, #12]	@ (8002610 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002602:	5ccb      	ldrb	r3, [r1, r3]
 8002604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002608:	4618      	mov	r0, r3
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40021000 	.word	0x40021000
 8002610:	08004878 	.word	0x08004878

08002614 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002618:	f7ff ffde 	bl	80025d8 <HAL_RCC_GetHCLKFreq>
 800261c:	4602      	mov	r2, r0
 800261e:	4b05      	ldr	r3, [pc, #20]	@ (8002634 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	0adb      	lsrs	r3, r3, #11
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	4903      	ldr	r1, [pc, #12]	@ (8002638 <HAL_RCC_GetPCLK2Freq+0x24>)
 800262a:	5ccb      	ldrb	r3, [r1, r3]
 800262c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002630:	4618      	mov	r0, r3
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40021000 	.word	0x40021000
 8002638:	08004878 	.word	0x08004878

0800263c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002644:	4b0a      	ldr	r3, [pc, #40]	@ (8002670 <RCC_Delay+0x34>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a0a      	ldr	r2, [pc, #40]	@ (8002674 <RCC_Delay+0x38>)
 800264a:	fba2 2303 	umull	r2, r3, r2, r3
 800264e:	0a5b      	lsrs	r3, r3, #9
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	fb02 f303 	mul.w	r3, r2, r3
 8002656:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002658:	bf00      	nop
  }
  while (Delay --);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	1e5a      	subs	r2, r3, #1
 800265e:	60fa      	str	r2, [r7, #12]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1f9      	bne.n	8002658 <RCC_Delay+0x1c>
}
 8002664:	bf00      	nop
 8002666:	bf00      	nop
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr
 8002670:	20000cc0 	.word	0x20000cc0
 8002674:	10624dd3 	.word	0x10624dd3

08002678 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b088      	sub	sp, #32
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]
 8002684:	2300      	movs	r3, #0
 8002686:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b00      	cmp	r3, #0
 8002696:	d07d      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8002698:	2300      	movs	r3, #0
 800269a:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800269c:	4b8b      	ldr	r3, [pc, #556]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10d      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a8:	4b88      	ldr	r3, [pc, #544]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	4a87      	ldr	r2, [pc, #540]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80026ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026b2:	61d3      	str	r3, [r2, #28]
 80026b4:	4b85      	ldr	r3, [pc, #532]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80026c0:	2301      	movs	r3, #1
 80026c2:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c4:	4b82      	ldr	r3, [pc, #520]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d118      	bne.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026d0:	4b7f      	ldr	r3, [pc, #508]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a7e      	ldr	r2, [pc, #504]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026dc:	f7fe fdc8 	bl	8001270 <HAL_GetTick>
 80026e0:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e2:	e008      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e4:	f7fe fdc4 	bl	8001270 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b64      	cmp	r3, #100	@ 0x64
 80026f0:	d901      	bls.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e0e5      	b.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f6:	4b76      	ldr	r3, [pc, #472]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0f0      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002702:	4b72      	ldr	r3, [pc, #456]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800270a:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d02e      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	429a      	cmp	r2, r3
 800271e:	d027      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002720:	4b6a      	ldr	r3, [pc, #424]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002728:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800272a:	4b6a      	ldr	r3, [pc, #424]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800272c:	2201      	movs	r2, #1
 800272e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002730:	4b68      	ldr	r3, [pc, #416]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002736:	4a65      	ldr	r2, [pc, #404]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d014      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002746:	f7fe fd93 	bl	8001270 <HAL_GetTick>
 800274a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274c:	e00a      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800274e:	f7fe fd8f 	bl	8001270 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	f241 3288 	movw	r2, #5000	@ 0x1388
 800275c:	4293      	cmp	r3, r2
 800275e:	d901      	bls.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e0ae      	b.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002764:	4b59      	ldr	r3, [pc, #356]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0ee      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002770:	4b56      	ldr	r3, [pc, #344]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	4953      	ldr	r1, [pc, #332]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800277e:	4313      	orrs	r3, r2
 8002780:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002782:	7efb      	ldrb	r3, [r7, #27]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d105      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002788:	4b50      	ldr	r3, [pc, #320]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	4a4f      	ldr	r2, [pc, #316]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800278e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002792:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d008      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027a0:	4b4a      	ldr	r3, [pc, #296]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	4947      	ldr	r1, [pc, #284]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0304 	and.w	r3, r3, #4
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d008      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80027be:	4b43      	ldr	r3, [pc, #268]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80027c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	4940      	ldr	r1, [pc, #256]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d008      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 80027dc:	4b3b      	ldr	r3, [pc, #236]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80027de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e0:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	4938      	ldr	r1, [pc, #224]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 80027ee:	4b37      	ldr	r3, [pc, #220]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80027f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d105      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 80027fa:	4b34      	ldr	r3, [pc, #208]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80027fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8002806:	2301      	movs	r3, #1
 8002808:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d148      	bne.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8002810:	4b2e      	ldr	r3, [pc, #184]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d138      	bne.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 800281c:	4b2b      	ldr	r3, [pc, #172]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d009      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8002828:	4b28      	ldr	r3, [pc, #160]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800282a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800282c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8002834:	429a      	cmp	r2, r3
 8002836:	d001      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e042      	b.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 800283c:	4b23      	ldr	r3, [pc, #140]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800283e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002840:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	4920      	ldr	r1, [pc, #128]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800284a:	4313      	orrs	r3, r2
 800284c:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 800284e:	4b1f      	ldr	r3, [pc, #124]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002852:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	491c      	ldr	r1, [pc, #112]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800285c:	4313      	orrs	r3, r2
 800285e:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8002860:	4b1d      	ldr	r3, [pc, #116]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002862:	2201      	movs	r2, #1
 8002864:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002866:	f7fe fd03 	bl	8001270 <HAL_GetTick>
 800286a:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800286c:	e008      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800286e:	f7fe fcff 	bl	8001270 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b64      	cmp	r3, #100	@ 0x64
 800287a:	d901      	bls.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e020      	b.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002880:	4b12      	ldr	r3, [pc, #72]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0f0      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800288c:	e009      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 800288e:	4b0f      	ldr	r3, [pc, #60]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002892:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	429a      	cmp	r2, r3
 800289c:	d001      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e00f      	b.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0310 	and.w	r3, r3, #16
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d008      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028ae:	4b07      	ldr	r3, [pc, #28]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	4904      	ldr	r1, [pc, #16]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3720      	adds	r7, #32
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40021000 	.word	0x40021000
 80028d0:	40007000 	.word	0x40007000
 80028d4:	42420440 	.word	0x42420440
 80028d8:	42420070 	.word	0x42420070

080028dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e042      	b.n	8002974 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d106      	bne.n	8002908 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7fe faae 	bl	8000e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2224      	movs	r2, #36	@ 0x24
 800290c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800291e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f971 	bl	8002c08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002934:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	695a      	ldr	r2, [r3, #20]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002944:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002954:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2220      	movs	r2, #32
 8002960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2220      	movs	r2, #32
 8002968:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b08a      	sub	sp, #40	@ 0x28
 8002980:	af02      	add	r7, sp, #8
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	603b      	str	r3, [r7, #0]
 8002988:	4613      	mov	r3, r2
 800298a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b20      	cmp	r3, #32
 800299a:	d175      	bne.n	8002a88 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d002      	beq.n	80029a8 <HAL_UART_Transmit+0x2c>
 80029a2:	88fb      	ldrh	r3, [r7, #6]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e06e      	b.n	8002a8a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2221      	movs	r2, #33	@ 0x21
 80029b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029ba:	f7fe fc59 	bl	8001270 <HAL_GetTick>
 80029be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	88fa      	ldrh	r2, [r7, #6]
 80029c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	88fa      	ldrh	r2, [r7, #6]
 80029ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029d4:	d108      	bne.n	80029e8 <HAL_UART_Transmit+0x6c>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d104      	bne.n	80029e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	61bb      	str	r3, [r7, #24]
 80029e6:	e003      	b.n	80029f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029f0:	e02e      	b.n	8002a50 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2200      	movs	r2, #0
 80029fa:	2180      	movs	r1, #128	@ 0x80
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f000 f848 	bl	8002a92 <UART_WaitOnFlagUntilTimeout>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d005      	beq.n	8002a14 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e03a      	b.n	8002a8a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10b      	bne.n	8002a32 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	3302      	adds	r3, #2
 8002a2e:	61bb      	str	r3, [r7, #24]
 8002a30:	e007      	b.n	8002a42 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	781a      	ldrb	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1cb      	bne.n	80029f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	2200      	movs	r2, #0
 8002a62:	2140      	movs	r1, #64	@ 0x40
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 f814 	bl	8002a92 <UART_WaitOnFlagUntilTimeout>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2220      	movs	r2, #32
 8002a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e006      	b.n	8002a8a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002a84:	2300      	movs	r3, #0
 8002a86:	e000      	b.n	8002a8a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002a88:	2302      	movs	r3, #2
  }
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3720      	adds	r7, #32
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b086      	sub	sp, #24
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	603b      	str	r3, [r7, #0]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aa2:	e03b      	b.n	8002b1c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aaa:	d037      	beq.n	8002b1c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aac:	f7fe fbe0 	bl	8001270 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	6a3a      	ldr	r2, [r7, #32]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d302      	bcc.n	8002ac2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e03a      	b.n	8002b3c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d023      	beq.n	8002b1c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2b80      	cmp	r3, #128	@ 0x80
 8002ad8:	d020      	beq.n	8002b1c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2b40      	cmp	r3, #64	@ 0x40
 8002ade:	d01d      	beq.n	8002b1c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d116      	bne.n	8002b1c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002aee:	2300      	movs	r3, #0
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	617b      	str	r3, [r7, #20]
 8002b02:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 f81d 	bl	8002b44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2208      	movs	r2, #8
 8002b0e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e00f      	b.n	8002b3c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	4013      	ands	r3, r2
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	bf0c      	ite	eq
 8002b2c:	2301      	moveq	r3, #1
 8002b2e:	2300      	movne	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	461a      	mov	r2, r3
 8002b34:	79fb      	ldrb	r3, [r7, #7]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d0b4      	beq.n	8002aa4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b095      	sub	sp, #84	@ 0x54
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	330c      	adds	r3, #12
 8002b52:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b56:	e853 3f00 	ldrex	r3, [r3]
 8002b5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	330c      	adds	r3, #12
 8002b6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b6c:	643a      	str	r2, [r7, #64]	@ 0x40
 8002b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002b72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b74:	e841 2300 	strex	r3, r2, [r1]
 8002b78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1e5      	bne.n	8002b4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	3314      	adds	r3, #20
 8002b86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	e853 3f00 	ldrex	r3, [r3]
 8002b8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f023 0301 	bic.w	r3, r3, #1
 8002b96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	3314      	adds	r3, #20
 8002b9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ba0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ba6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ba8:	e841 2300 	strex	r3, r2, [r1]
 8002bac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1e5      	bne.n	8002b80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d119      	bne.n	8002bf0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	330c      	adds	r3, #12
 8002bc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	e853 3f00 	ldrex	r3, [r3]
 8002bca:	60bb      	str	r3, [r7, #8]
   return(result);
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	f023 0310 	bic.w	r3, r3, #16
 8002bd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	330c      	adds	r3, #12
 8002bda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002bdc:	61ba      	str	r2, [r7, #24]
 8002bde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be0:	6979      	ldr	r1, [r7, #20]
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	e841 2300 	strex	r3, r2, [r1]
 8002be8:	613b      	str	r3, [r7, #16]
   return(result);
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1e5      	bne.n	8002bbc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002bfe:	bf00      	nop
 8002c00:	3754      	adds	r7, #84	@ 0x54
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr

08002c08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002c42:	f023 030c 	bic.w	r3, r3, #12
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	68b9      	ldr	r1, [r7, #8]
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699a      	ldr	r2, [r3, #24]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a2c      	ldr	r2, [pc, #176]	@ (8002d1c <UART_SetConfig+0x114>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d103      	bne.n	8002c78 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c70:	f7ff fcd0 	bl	8002614 <HAL_RCC_GetPCLK2Freq>
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	e002      	b.n	8002c7e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c78:	f7ff fcb8 	bl	80025ec <HAL_RCC_GetPCLK1Freq>
 8002c7c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	4613      	mov	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	009a      	lsls	r2, r3, #2
 8002c88:	441a      	add	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c94:	4a22      	ldr	r2, [pc, #136]	@ (8002d20 <UART_SetConfig+0x118>)
 8002c96:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9a:	095b      	lsrs	r3, r3, #5
 8002c9c:	0119      	lsls	r1, r3, #4
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	009a      	lsls	r2, r3, #2
 8002ca8:	441a      	add	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d20 <UART_SetConfig+0x118>)
 8002cb6:	fba3 0302 	umull	r0, r3, r3, r2
 8002cba:	095b      	lsrs	r3, r3, #5
 8002cbc:	2064      	movs	r0, #100	@ 0x64
 8002cbe:	fb00 f303 	mul.w	r3, r0, r3
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	3332      	adds	r3, #50	@ 0x32
 8002cc8:	4a15      	ldr	r2, [pc, #84]	@ (8002d20 <UART_SetConfig+0x118>)
 8002cca:	fba2 2303 	umull	r2, r3, r2, r3
 8002cce:	095b      	lsrs	r3, r3, #5
 8002cd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cd4:	4419      	add	r1, r3
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	009a      	lsls	r2, r3, #2
 8002ce0:	441a      	add	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cec:	4b0c      	ldr	r3, [pc, #48]	@ (8002d20 <UART_SetConfig+0x118>)
 8002cee:	fba3 0302 	umull	r0, r3, r3, r2
 8002cf2:	095b      	lsrs	r3, r3, #5
 8002cf4:	2064      	movs	r0, #100	@ 0x64
 8002cf6:	fb00 f303 	mul.w	r3, r0, r3
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	011b      	lsls	r3, r3, #4
 8002cfe:	3332      	adds	r3, #50	@ 0x32
 8002d00:	4a07      	ldr	r2, [pc, #28]	@ (8002d20 <UART_SetConfig+0x118>)
 8002d02:	fba2 2303 	umull	r2, r3, r2, r3
 8002d06:	095b      	lsrs	r3, r3, #5
 8002d08:	f003 020f 	and.w	r2, r3, #15
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	440a      	add	r2, r1
 8002d12:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d14:	bf00      	nop
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40013800 	.word	0x40013800
 8002d20:	51eb851f 	.word	0x51eb851f

08002d24 <__sflush_r>:
 8002d24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d2a:	0716      	lsls	r6, r2, #28
 8002d2c:	4605      	mov	r5, r0
 8002d2e:	460c      	mov	r4, r1
 8002d30:	d454      	bmi.n	8002ddc <__sflush_r+0xb8>
 8002d32:	684b      	ldr	r3, [r1, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	dc02      	bgt.n	8002d3e <__sflush_r+0x1a>
 8002d38:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	dd48      	ble.n	8002dd0 <__sflush_r+0xac>
 8002d3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002d40:	2e00      	cmp	r6, #0
 8002d42:	d045      	beq.n	8002dd0 <__sflush_r+0xac>
 8002d44:	2300      	movs	r3, #0
 8002d46:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002d4a:	682f      	ldr	r7, [r5, #0]
 8002d4c:	6a21      	ldr	r1, [r4, #32]
 8002d4e:	602b      	str	r3, [r5, #0]
 8002d50:	d030      	beq.n	8002db4 <__sflush_r+0x90>
 8002d52:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002d54:	89a3      	ldrh	r3, [r4, #12]
 8002d56:	0759      	lsls	r1, r3, #29
 8002d58:	d505      	bpl.n	8002d66 <__sflush_r+0x42>
 8002d5a:	6863      	ldr	r3, [r4, #4]
 8002d5c:	1ad2      	subs	r2, r2, r3
 8002d5e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002d60:	b10b      	cbz	r3, 8002d66 <__sflush_r+0x42>
 8002d62:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002d64:	1ad2      	subs	r2, r2, r3
 8002d66:	2300      	movs	r3, #0
 8002d68:	4628      	mov	r0, r5
 8002d6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002d6c:	6a21      	ldr	r1, [r4, #32]
 8002d6e:	47b0      	blx	r6
 8002d70:	1c43      	adds	r3, r0, #1
 8002d72:	89a3      	ldrh	r3, [r4, #12]
 8002d74:	d106      	bne.n	8002d84 <__sflush_r+0x60>
 8002d76:	6829      	ldr	r1, [r5, #0]
 8002d78:	291d      	cmp	r1, #29
 8002d7a:	d82b      	bhi.n	8002dd4 <__sflush_r+0xb0>
 8002d7c:	4a28      	ldr	r2, [pc, #160]	@ (8002e20 <__sflush_r+0xfc>)
 8002d7e:	410a      	asrs	r2, r1
 8002d80:	07d6      	lsls	r6, r2, #31
 8002d82:	d427      	bmi.n	8002dd4 <__sflush_r+0xb0>
 8002d84:	2200      	movs	r2, #0
 8002d86:	6062      	str	r2, [r4, #4]
 8002d88:	6922      	ldr	r2, [r4, #16]
 8002d8a:	04d9      	lsls	r1, r3, #19
 8002d8c:	6022      	str	r2, [r4, #0]
 8002d8e:	d504      	bpl.n	8002d9a <__sflush_r+0x76>
 8002d90:	1c42      	adds	r2, r0, #1
 8002d92:	d101      	bne.n	8002d98 <__sflush_r+0x74>
 8002d94:	682b      	ldr	r3, [r5, #0]
 8002d96:	b903      	cbnz	r3, 8002d9a <__sflush_r+0x76>
 8002d98:	6560      	str	r0, [r4, #84]	@ 0x54
 8002d9a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002d9c:	602f      	str	r7, [r5, #0]
 8002d9e:	b1b9      	cbz	r1, 8002dd0 <__sflush_r+0xac>
 8002da0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002da4:	4299      	cmp	r1, r3
 8002da6:	d002      	beq.n	8002dae <__sflush_r+0x8a>
 8002da8:	4628      	mov	r0, r5
 8002daa:	f000 fb31 	bl	8003410 <_free_r>
 8002dae:	2300      	movs	r3, #0
 8002db0:	6363      	str	r3, [r4, #52]	@ 0x34
 8002db2:	e00d      	b.n	8002dd0 <__sflush_r+0xac>
 8002db4:	2301      	movs	r3, #1
 8002db6:	4628      	mov	r0, r5
 8002db8:	47b0      	blx	r6
 8002dba:	4602      	mov	r2, r0
 8002dbc:	1c50      	adds	r0, r2, #1
 8002dbe:	d1c9      	bne.n	8002d54 <__sflush_r+0x30>
 8002dc0:	682b      	ldr	r3, [r5, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0c6      	beq.n	8002d54 <__sflush_r+0x30>
 8002dc6:	2b1d      	cmp	r3, #29
 8002dc8:	d001      	beq.n	8002dce <__sflush_r+0xaa>
 8002dca:	2b16      	cmp	r3, #22
 8002dcc:	d11d      	bne.n	8002e0a <__sflush_r+0xe6>
 8002dce:	602f      	str	r7, [r5, #0]
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	e021      	b.n	8002e18 <__sflush_r+0xf4>
 8002dd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dd8:	b21b      	sxth	r3, r3
 8002dda:	e01a      	b.n	8002e12 <__sflush_r+0xee>
 8002ddc:	690f      	ldr	r7, [r1, #16]
 8002dde:	2f00      	cmp	r7, #0
 8002de0:	d0f6      	beq.n	8002dd0 <__sflush_r+0xac>
 8002de2:	0793      	lsls	r3, r2, #30
 8002de4:	bf18      	it	ne
 8002de6:	2300      	movne	r3, #0
 8002de8:	680e      	ldr	r6, [r1, #0]
 8002dea:	bf08      	it	eq
 8002dec:	694b      	ldreq	r3, [r1, #20]
 8002dee:	1bf6      	subs	r6, r6, r7
 8002df0:	600f      	str	r7, [r1, #0]
 8002df2:	608b      	str	r3, [r1, #8]
 8002df4:	2e00      	cmp	r6, #0
 8002df6:	ddeb      	ble.n	8002dd0 <__sflush_r+0xac>
 8002df8:	4633      	mov	r3, r6
 8002dfa:	463a      	mov	r2, r7
 8002dfc:	4628      	mov	r0, r5
 8002dfe:	6a21      	ldr	r1, [r4, #32]
 8002e00:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002e04:	47e0      	blx	ip
 8002e06:	2800      	cmp	r0, #0
 8002e08:	dc07      	bgt.n	8002e1a <__sflush_r+0xf6>
 8002e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e12:	f04f 30ff 	mov.w	r0, #4294967295
 8002e16:	81a3      	strh	r3, [r4, #12]
 8002e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e1a:	4407      	add	r7, r0
 8002e1c:	1a36      	subs	r6, r6, r0
 8002e1e:	e7e9      	b.n	8002df4 <__sflush_r+0xd0>
 8002e20:	dfbffffe 	.word	0xdfbffffe

08002e24 <_fflush_r>:
 8002e24:	b538      	push	{r3, r4, r5, lr}
 8002e26:	690b      	ldr	r3, [r1, #16]
 8002e28:	4605      	mov	r5, r0
 8002e2a:	460c      	mov	r4, r1
 8002e2c:	b913      	cbnz	r3, 8002e34 <_fflush_r+0x10>
 8002e2e:	2500      	movs	r5, #0
 8002e30:	4628      	mov	r0, r5
 8002e32:	bd38      	pop	{r3, r4, r5, pc}
 8002e34:	b118      	cbz	r0, 8002e3e <_fflush_r+0x1a>
 8002e36:	6a03      	ldr	r3, [r0, #32]
 8002e38:	b90b      	cbnz	r3, 8002e3e <_fflush_r+0x1a>
 8002e3a:	f000 f8bb 	bl	8002fb4 <__sinit>
 8002e3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f3      	beq.n	8002e2e <_fflush_r+0xa>
 8002e46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002e48:	07d0      	lsls	r0, r2, #31
 8002e4a:	d404      	bmi.n	8002e56 <_fflush_r+0x32>
 8002e4c:	0599      	lsls	r1, r3, #22
 8002e4e:	d402      	bmi.n	8002e56 <_fflush_r+0x32>
 8002e50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e52:	f000 fada 	bl	800340a <__retarget_lock_acquire_recursive>
 8002e56:	4628      	mov	r0, r5
 8002e58:	4621      	mov	r1, r4
 8002e5a:	f7ff ff63 	bl	8002d24 <__sflush_r>
 8002e5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002e60:	4605      	mov	r5, r0
 8002e62:	07da      	lsls	r2, r3, #31
 8002e64:	d4e4      	bmi.n	8002e30 <_fflush_r+0xc>
 8002e66:	89a3      	ldrh	r3, [r4, #12]
 8002e68:	059b      	lsls	r3, r3, #22
 8002e6a:	d4e1      	bmi.n	8002e30 <_fflush_r+0xc>
 8002e6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e6e:	f000 facd 	bl	800340c <__retarget_lock_release_recursive>
 8002e72:	e7dd      	b.n	8002e30 <_fflush_r+0xc>

08002e74 <fflush>:
 8002e74:	4601      	mov	r1, r0
 8002e76:	b920      	cbnz	r0, 8002e82 <fflush+0xe>
 8002e78:	4a04      	ldr	r2, [pc, #16]	@ (8002e8c <fflush+0x18>)
 8002e7a:	4905      	ldr	r1, [pc, #20]	@ (8002e90 <fflush+0x1c>)
 8002e7c:	4805      	ldr	r0, [pc, #20]	@ (8002e94 <fflush+0x20>)
 8002e7e:	f000 b8b1 	b.w	8002fe4 <_fwalk_sglue>
 8002e82:	4b05      	ldr	r3, [pc, #20]	@ (8002e98 <fflush+0x24>)
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	f7ff bfcd 	b.w	8002e24 <_fflush_r>
 8002e8a:	bf00      	nop
 8002e8c:	20000ccc 	.word	0x20000ccc
 8002e90:	08002e25 	.word	0x08002e25
 8002e94:	20000cdc 	.word	0x20000cdc
 8002e98:	20000cd8 	.word	0x20000cd8

08002e9c <std>:
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	b510      	push	{r4, lr}
 8002ea0:	4604      	mov	r4, r0
 8002ea2:	e9c0 3300 	strd	r3, r3, [r0]
 8002ea6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002eaa:	6083      	str	r3, [r0, #8]
 8002eac:	8181      	strh	r1, [r0, #12]
 8002eae:	6643      	str	r3, [r0, #100]	@ 0x64
 8002eb0:	81c2      	strh	r2, [r0, #14]
 8002eb2:	6183      	str	r3, [r0, #24]
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	2208      	movs	r2, #8
 8002eb8:	305c      	adds	r0, #92	@ 0x5c
 8002eba:	f000 fa2d 	bl	8003318 <memset>
 8002ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8002ef4 <std+0x58>)
 8002ec0:	6224      	str	r4, [r4, #32]
 8002ec2:	6263      	str	r3, [r4, #36]	@ 0x24
 8002ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef8 <std+0x5c>)
 8002ec6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8002efc <std+0x60>)
 8002eca:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8002f00 <std+0x64>)
 8002ece:	6323      	str	r3, [r4, #48]	@ 0x30
 8002ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f04 <std+0x68>)
 8002ed2:	429c      	cmp	r4, r3
 8002ed4:	d006      	beq.n	8002ee4 <std+0x48>
 8002ed6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002eda:	4294      	cmp	r4, r2
 8002edc:	d002      	beq.n	8002ee4 <std+0x48>
 8002ede:	33d0      	adds	r3, #208	@ 0xd0
 8002ee0:	429c      	cmp	r4, r3
 8002ee2:	d105      	bne.n	8002ef0 <std+0x54>
 8002ee4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002eec:	f000 ba8c 	b.w	8003408 <__retarget_lock_init_recursive>
 8002ef0:	bd10      	pop	{r4, pc}
 8002ef2:	bf00      	nop
 8002ef4:	08003169 	.word	0x08003169
 8002ef8:	0800318b 	.word	0x0800318b
 8002efc:	080031c3 	.word	0x080031c3
 8002f00:	080031e7 	.word	0x080031e7
 8002f04:	20000fd4 	.word	0x20000fd4

08002f08 <stdio_exit_handler>:
 8002f08:	4a02      	ldr	r2, [pc, #8]	@ (8002f14 <stdio_exit_handler+0xc>)
 8002f0a:	4903      	ldr	r1, [pc, #12]	@ (8002f18 <stdio_exit_handler+0x10>)
 8002f0c:	4803      	ldr	r0, [pc, #12]	@ (8002f1c <stdio_exit_handler+0x14>)
 8002f0e:	f000 b869 	b.w	8002fe4 <_fwalk_sglue>
 8002f12:	bf00      	nop
 8002f14:	20000ccc 	.word	0x20000ccc
 8002f18:	08002e25 	.word	0x08002e25
 8002f1c:	20000cdc 	.word	0x20000cdc

08002f20 <cleanup_stdio>:
 8002f20:	6841      	ldr	r1, [r0, #4]
 8002f22:	4b0c      	ldr	r3, [pc, #48]	@ (8002f54 <cleanup_stdio+0x34>)
 8002f24:	b510      	push	{r4, lr}
 8002f26:	4299      	cmp	r1, r3
 8002f28:	4604      	mov	r4, r0
 8002f2a:	d001      	beq.n	8002f30 <cleanup_stdio+0x10>
 8002f2c:	f7ff ff7a 	bl	8002e24 <_fflush_r>
 8002f30:	68a1      	ldr	r1, [r4, #8]
 8002f32:	4b09      	ldr	r3, [pc, #36]	@ (8002f58 <cleanup_stdio+0x38>)
 8002f34:	4299      	cmp	r1, r3
 8002f36:	d002      	beq.n	8002f3e <cleanup_stdio+0x1e>
 8002f38:	4620      	mov	r0, r4
 8002f3a:	f7ff ff73 	bl	8002e24 <_fflush_r>
 8002f3e:	68e1      	ldr	r1, [r4, #12]
 8002f40:	4b06      	ldr	r3, [pc, #24]	@ (8002f5c <cleanup_stdio+0x3c>)
 8002f42:	4299      	cmp	r1, r3
 8002f44:	d004      	beq.n	8002f50 <cleanup_stdio+0x30>
 8002f46:	4620      	mov	r0, r4
 8002f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f4c:	f7ff bf6a 	b.w	8002e24 <_fflush_r>
 8002f50:	bd10      	pop	{r4, pc}
 8002f52:	bf00      	nop
 8002f54:	20000fd4 	.word	0x20000fd4
 8002f58:	2000103c 	.word	0x2000103c
 8002f5c:	200010a4 	.word	0x200010a4

08002f60 <global_stdio_init.part.0>:
 8002f60:	b510      	push	{r4, lr}
 8002f62:	4b0b      	ldr	r3, [pc, #44]	@ (8002f90 <global_stdio_init.part.0+0x30>)
 8002f64:	4c0b      	ldr	r4, [pc, #44]	@ (8002f94 <global_stdio_init.part.0+0x34>)
 8002f66:	4a0c      	ldr	r2, [pc, #48]	@ (8002f98 <global_stdio_init.part.0+0x38>)
 8002f68:	4620      	mov	r0, r4
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	2104      	movs	r1, #4
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f7ff ff94 	bl	8002e9c <std>
 8002f74:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002f78:	2201      	movs	r2, #1
 8002f7a:	2109      	movs	r1, #9
 8002f7c:	f7ff ff8e 	bl	8002e9c <std>
 8002f80:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002f84:	2202      	movs	r2, #2
 8002f86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f8a:	2112      	movs	r1, #18
 8002f8c:	f7ff bf86 	b.w	8002e9c <std>
 8002f90:	2000110c 	.word	0x2000110c
 8002f94:	20000fd4 	.word	0x20000fd4
 8002f98:	08002f09 	.word	0x08002f09

08002f9c <__sfp_lock_acquire>:
 8002f9c:	4801      	ldr	r0, [pc, #4]	@ (8002fa4 <__sfp_lock_acquire+0x8>)
 8002f9e:	f000 ba34 	b.w	800340a <__retarget_lock_acquire_recursive>
 8002fa2:	bf00      	nop
 8002fa4:	20001115 	.word	0x20001115

08002fa8 <__sfp_lock_release>:
 8002fa8:	4801      	ldr	r0, [pc, #4]	@ (8002fb0 <__sfp_lock_release+0x8>)
 8002faa:	f000 ba2f 	b.w	800340c <__retarget_lock_release_recursive>
 8002fae:	bf00      	nop
 8002fb0:	20001115 	.word	0x20001115

08002fb4 <__sinit>:
 8002fb4:	b510      	push	{r4, lr}
 8002fb6:	4604      	mov	r4, r0
 8002fb8:	f7ff fff0 	bl	8002f9c <__sfp_lock_acquire>
 8002fbc:	6a23      	ldr	r3, [r4, #32]
 8002fbe:	b11b      	cbz	r3, 8002fc8 <__sinit+0x14>
 8002fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fc4:	f7ff bff0 	b.w	8002fa8 <__sfp_lock_release>
 8002fc8:	4b04      	ldr	r3, [pc, #16]	@ (8002fdc <__sinit+0x28>)
 8002fca:	6223      	str	r3, [r4, #32]
 8002fcc:	4b04      	ldr	r3, [pc, #16]	@ (8002fe0 <__sinit+0x2c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1f5      	bne.n	8002fc0 <__sinit+0xc>
 8002fd4:	f7ff ffc4 	bl	8002f60 <global_stdio_init.part.0>
 8002fd8:	e7f2      	b.n	8002fc0 <__sinit+0xc>
 8002fda:	bf00      	nop
 8002fdc:	08002f21 	.word	0x08002f21
 8002fe0:	2000110c 	.word	0x2000110c

08002fe4 <_fwalk_sglue>:
 8002fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fe8:	4607      	mov	r7, r0
 8002fea:	4688      	mov	r8, r1
 8002fec:	4614      	mov	r4, r2
 8002fee:	2600      	movs	r6, #0
 8002ff0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002ff4:	f1b9 0901 	subs.w	r9, r9, #1
 8002ff8:	d505      	bpl.n	8003006 <_fwalk_sglue+0x22>
 8002ffa:	6824      	ldr	r4, [r4, #0]
 8002ffc:	2c00      	cmp	r4, #0
 8002ffe:	d1f7      	bne.n	8002ff0 <_fwalk_sglue+0xc>
 8003000:	4630      	mov	r0, r6
 8003002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003006:	89ab      	ldrh	r3, [r5, #12]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d907      	bls.n	800301c <_fwalk_sglue+0x38>
 800300c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003010:	3301      	adds	r3, #1
 8003012:	d003      	beq.n	800301c <_fwalk_sglue+0x38>
 8003014:	4629      	mov	r1, r5
 8003016:	4638      	mov	r0, r7
 8003018:	47c0      	blx	r8
 800301a:	4306      	orrs	r6, r0
 800301c:	3568      	adds	r5, #104	@ 0x68
 800301e:	e7e9      	b.n	8002ff4 <_fwalk_sglue+0x10>

08003020 <iprintf>:
 8003020:	b40f      	push	{r0, r1, r2, r3}
 8003022:	b507      	push	{r0, r1, r2, lr}
 8003024:	4906      	ldr	r1, [pc, #24]	@ (8003040 <iprintf+0x20>)
 8003026:	ab04      	add	r3, sp, #16
 8003028:	6808      	ldr	r0, [r1, #0]
 800302a:	f853 2b04 	ldr.w	r2, [r3], #4
 800302e:	6881      	ldr	r1, [r0, #8]
 8003030:	9301      	str	r3, [sp, #4]
 8003032:	f000 fc63 	bl	80038fc <_vfiprintf_r>
 8003036:	b003      	add	sp, #12
 8003038:	f85d eb04 	ldr.w	lr, [sp], #4
 800303c:	b004      	add	sp, #16
 800303e:	4770      	bx	lr
 8003040:	20000cd8 	.word	0x20000cd8

08003044 <_puts_r>:
 8003044:	6a03      	ldr	r3, [r0, #32]
 8003046:	b570      	push	{r4, r5, r6, lr}
 8003048:	4605      	mov	r5, r0
 800304a:	460e      	mov	r6, r1
 800304c:	6884      	ldr	r4, [r0, #8]
 800304e:	b90b      	cbnz	r3, 8003054 <_puts_r+0x10>
 8003050:	f7ff ffb0 	bl	8002fb4 <__sinit>
 8003054:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003056:	07db      	lsls	r3, r3, #31
 8003058:	d405      	bmi.n	8003066 <_puts_r+0x22>
 800305a:	89a3      	ldrh	r3, [r4, #12]
 800305c:	0598      	lsls	r0, r3, #22
 800305e:	d402      	bmi.n	8003066 <_puts_r+0x22>
 8003060:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003062:	f000 f9d2 	bl	800340a <__retarget_lock_acquire_recursive>
 8003066:	89a3      	ldrh	r3, [r4, #12]
 8003068:	0719      	lsls	r1, r3, #28
 800306a:	d502      	bpl.n	8003072 <_puts_r+0x2e>
 800306c:	6923      	ldr	r3, [r4, #16]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d135      	bne.n	80030de <_puts_r+0x9a>
 8003072:	4621      	mov	r1, r4
 8003074:	4628      	mov	r0, r5
 8003076:	f000 f8f9 	bl	800326c <__swsetup_r>
 800307a:	b380      	cbz	r0, 80030de <_puts_r+0x9a>
 800307c:	f04f 35ff 	mov.w	r5, #4294967295
 8003080:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003082:	07da      	lsls	r2, r3, #31
 8003084:	d405      	bmi.n	8003092 <_puts_r+0x4e>
 8003086:	89a3      	ldrh	r3, [r4, #12]
 8003088:	059b      	lsls	r3, r3, #22
 800308a:	d402      	bmi.n	8003092 <_puts_r+0x4e>
 800308c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800308e:	f000 f9bd 	bl	800340c <__retarget_lock_release_recursive>
 8003092:	4628      	mov	r0, r5
 8003094:	bd70      	pop	{r4, r5, r6, pc}
 8003096:	2b00      	cmp	r3, #0
 8003098:	da04      	bge.n	80030a4 <_puts_r+0x60>
 800309a:	69a2      	ldr	r2, [r4, #24]
 800309c:	429a      	cmp	r2, r3
 800309e:	dc17      	bgt.n	80030d0 <_puts_r+0x8c>
 80030a0:	290a      	cmp	r1, #10
 80030a2:	d015      	beq.n	80030d0 <_puts_r+0x8c>
 80030a4:	6823      	ldr	r3, [r4, #0]
 80030a6:	1c5a      	adds	r2, r3, #1
 80030a8:	6022      	str	r2, [r4, #0]
 80030aa:	7019      	strb	r1, [r3, #0]
 80030ac:	68a3      	ldr	r3, [r4, #8]
 80030ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80030b2:	3b01      	subs	r3, #1
 80030b4:	60a3      	str	r3, [r4, #8]
 80030b6:	2900      	cmp	r1, #0
 80030b8:	d1ed      	bne.n	8003096 <_puts_r+0x52>
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	da11      	bge.n	80030e2 <_puts_r+0x9e>
 80030be:	4622      	mov	r2, r4
 80030c0:	210a      	movs	r1, #10
 80030c2:	4628      	mov	r0, r5
 80030c4:	f000 f893 	bl	80031ee <__swbuf_r>
 80030c8:	3001      	adds	r0, #1
 80030ca:	d0d7      	beq.n	800307c <_puts_r+0x38>
 80030cc:	250a      	movs	r5, #10
 80030ce:	e7d7      	b.n	8003080 <_puts_r+0x3c>
 80030d0:	4622      	mov	r2, r4
 80030d2:	4628      	mov	r0, r5
 80030d4:	f000 f88b 	bl	80031ee <__swbuf_r>
 80030d8:	3001      	adds	r0, #1
 80030da:	d1e7      	bne.n	80030ac <_puts_r+0x68>
 80030dc:	e7ce      	b.n	800307c <_puts_r+0x38>
 80030de:	3e01      	subs	r6, #1
 80030e0:	e7e4      	b.n	80030ac <_puts_r+0x68>
 80030e2:	6823      	ldr	r3, [r4, #0]
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	6022      	str	r2, [r4, #0]
 80030e8:	220a      	movs	r2, #10
 80030ea:	701a      	strb	r2, [r3, #0]
 80030ec:	e7ee      	b.n	80030cc <_puts_r+0x88>
	...

080030f0 <puts>:
 80030f0:	4b02      	ldr	r3, [pc, #8]	@ (80030fc <puts+0xc>)
 80030f2:	4601      	mov	r1, r0
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	f7ff bfa5 	b.w	8003044 <_puts_r>
 80030fa:	bf00      	nop
 80030fc:	20000cd8 	.word	0x20000cd8

08003100 <sniprintf>:
 8003100:	b40c      	push	{r2, r3}
 8003102:	b530      	push	{r4, r5, lr}
 8003104:	4b17      	ldr	r3, [pc, #92]	@ (8003164 <sniprintf+0x64>)
 8003106:	1e0c      	subs	r4, r1, #0
 8003108:	681d      	ldr	r5, [r3, #0]
 800310a:	b09d      	sub	sp, #116	@ 0x74
 800310c:	da08      	bge.n	8003120 <sniprintf+0x20>
 800310e:	238b      	movs	r3, #139	@ 0x8b
 8003110:	f04f 30ff 	mov.w	r0, #4294967295
 8003114:	602b      	str	r3, [r5, #0]
 8003116:	b01d      	add	sp, #116	@ 0x74
 8003118:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800311c:	b002      	add	sp, #8
 800311e:	4770      	bx	lr
 8003120:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003124:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003128:	bf0c      	ite	eq
 800312a:	4623      	moveq	r3, r4
 800312c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003130:	9304      	str	r3, [sp, #16]
 8003132:	9307      	str	r3, [sp, #28]
 8003134:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003138:	9002      	str	r0, [sp, #8]
 800313a:	9006      	str	r0, [sp, #24]
 800313c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003140:	4628      	mov	r0, r5
 8003142:	ab21      	add	r3, sp, #132	@ 0x84
 8003144:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003146:	a902      	add	r1, sp, #8
 8003148:	9301      	str	r3, [sp, #4]
 800314a:	f000 fab3 	bl	80036b4 <_svfiprintf_r>
 800314e:	1c43      	adds	r3, r0, #1
 8003150:	bfbc      	itt	lt
 8003152:	238b      	movlt	r3, #139	@ 0x8b
 8003154:	602b      	strlt	r3, [r5, #0]
 8003156:	2c00      	cmp	r4, #0
 8003158:	d0dd      	beq.n	8003116 <sniprintf+0x16>
 800315a:	2200      	movs	r2, #0
 800315c:	9b02      	ldr	r3, [sp, #8]
 800315e:	701a      	strb	r2, [r3, #0]
 8003160:	e7d9      	b.n	8003116 <sniprintf+0x16>
 8003162:	bf00      	nop
 8003164:	20000cd8 	.word	0x20000cd8

08003168 <__sread>:
 8003168:	b510      	push	{r4, lr}
 800316a:	460c      	mov	r4, r1
 800316c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003170:	f000 f8fc 	bl	800336c <_read_r>
 8003174:	2800      	cmp	r0, #0
 8003176:	bfab      	itete	ge
 8003178:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800317a:	89a3      	ldrhlt	r3, [r4, #12]
 800317c:	181b      	addge	r3, r3, r0
 800317e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003182:	bfac      	ite	ge
 8003184:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003186:	81a3      	strhlt	r3, [r4, #12]
 8003188:	bd10      	pop	{r4, pc}

0800318a <__swrite>:
 800318a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800318e:	461f      	mov	r7, r3
 8003190:	898b      	ldrh	r3, [r1, #12]
 8003192:	4605      	mov	r5, r0
 8003194:	05db      	lsls	r3, r3, #23
 8003196:	460c      	mov	r4, r1
 8003198:	4616      	mov	r6, r2
 800319a:	d505      	bpl.n	80031a8 <__swrite+0x1e>
 800319c:	2302      	movs	r3, #2
 800319e:	2200      	movs	r2, #0
 80031a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031a4:	f000 f8d0 	bl	8003348 <_lseek_r>
 80031a8:	89a3      	ldrh	r3, [r4, #12]
 80031aa:	4632      	mov	r2, r6
 80031ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80031b0:	81a3      	strh	r3, [r4, #12]
 80031b2:	4628      	mov	r0, r5
 80031b4:	463b      	mov	r3, r7
 80031b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031be:	f000 b8e7 	b.w	8003390 <_write_r>

080031c2 <__sseek>:
 80031c2:	b510      	push	{r4, lr}
 80031c4:	460c      	mov	r4, r1
 80031c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031ca:	f000 f8bd 	bl	8003348 <_lseek_r>
 80031ce:	1c43      	adds	r3, r0, #1
 80031d0:	89a3      	ldrh	r3, [r4, #12]
 80031d2:	bf15      	itete	ne
 80031d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80031d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80031da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80031de:	81a3      	strheq	r3, [r4, #12]
 80031e0:	bf18      	it	ne
 80031e2:	81a3      	strhne	r3, [r4, #12]
 80031e4:	bd10      	pop	{r4, pc}

080031e6 <__sclose>:
 80031e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031ea:	f000 b89d 	b.w	8003328 <_close_r>

080031ee <__swbuf_r>:
 80031ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031f0:	460e      	mov	r6, r1
 80031f2:	4614      	mov	r4, r2
 80031f4:	4605      	mov	r5, r0
 80031f6:	b118      	cbz	r0, 8003200 <__swbuf_r+0x12>
 80031f8:	6a03      	ldr	r3, [r0, #32]
 80031fa:	b90b      	cbnz	r3, 8003200 <__swbuf_r+0x12>
 80031fc:	f7ff feda 	bl	8002fb4 <__sinit>
 8003200:	69a3      	ldr	r3, [r4, #24]
 8003202:	60a3      	str	r3, [r4, #8]
 8003204:	89a3      	ldrh	r3, [r4, #12]
 8003206:	071a      	lsls	r2, r3, #28
 8003208:	d501      	bpl.n	800320e <__swbuf_r+0x20>
 800320a:	6923      	ldr	r3, [r4, #16]
 800320c:	b943      	cbnz	r3, 8003220 <__swbuf_r+0x32>
 800320e:	4621      	mov	r1, r4
 8003210:	4628      	mov	r0, r5
 8003212:	f000 f82b 	bl	800326c <__swsetup_r>
 8003216:	b118      	cbz	r0, 8003220 <__swbuf_r+0x32>
 8003218:	f04f 37ff 	mov.w	r7, #4294967295
 800321c:	4638      	mov	r0, r7
 800321e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003220:	6823      	ldr	r3, [r4, #0]
 8003222:	6922      	ldr	r2, [r4, #16]
 8003224:	b2f6      	uxtb	r6, r6
 8003226:	1a98      	subs	r0, r3, r2
 8003228:	6963      	ldr	r3, [r4, #20]
 800322a:	4637      	mov	r7, r6
 800322c:	4283      	cmp	r3, r0
 800322e:	dc05      	bgt.n	800323c <__swbuf_r+0x4e>
 8003230:	4621      	mov	r1, r4
 8003232:	4628      	mov	r0, r5
 8003234:	f7ff fdf6 	bl	8002e24 <_fflush_r>
 8003238:	2800      	cmp	r0, #0
 800323a:	d1ed      	bne.n	8003218 <__swbuf_r+0x2a>
 800323c:	68a3      	ldr	r3, [r4, #8]
 800323e:	3b01      	subs	r3, #1
 8003240:	60a3      	str	r3, [r4, #8]
 8003242:	6823      	ldr	r3, [r4, #0]
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	6022      	str	r2, [r4, #0]
 8003248:	701e      	strb	r6, [r3, #0]
 800324a:	6962      	ldr	r2, [r4, #20]
 800324c:	1c43      	adds	r3, r0, #1
 800324e:	429a      	cmp	r2, r3
 8003250:	d004      	beq.n	800325c <__swbuf_r+0x6e>
 8003252:	89a3      	ldrh	r3, [r4, #12]
 8003254:	07db      	lsls	r3, r3, #31
 8003256:	d5e1      	bpl.n	800321c <__swbuf_r+0x2e>
 8003258:	2e0a      	cmp	r6, #10
 800325a:	d1df      	bne.n	800321c <__swbuf_r+0x2e>
 800325c:	4621      	mov	r1, r4
 800325e:	4628      	mov	r0, r5
 8003260:	f7ff fde0 	bl	8002e24 <_fflush_r>
 8003264:	2800      	cmp	r0, #0
 8003266:	d0d9      	beq.n	800321c <__swbuf_r+0x2e>
 8003268:	e7d6      	b.n	8003218 <__swbuf_r+0x2a>
	...

0800326c <__swsetup_r>:
 800326c:	b538      	push	{r3, r4, r5, lr}
 800326e:	4b29      	ldr	r3, [pc, #164]	@ (8003314 <__swsetup_r+0xa8>)
 8003270:	4605      	mov	r5, r0
 8003272:	6818      	ldr	r0, [r3, #0]
 8003274:	460c      	mov	r4, r1
 8003276:	b118      	cbz	r0, 8003280 <__swsetup_r+0x14>
 8003278:	6a03      	ldr	r3, [r0, #32]
 800327a:	b90b      	cbnz	r3, 8003280 <__swsetup_r+0x14>
 800327c:	f7ff fe9a 	bl	8002fb4 <__sinit>
 8003280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003284:	0719      	lsls	r1, r3, #28
 8003286:	d422      	bmi.n	80032ce <__swsetup_r+0x62>
 8003288:	06da      	lsls	r2, r3, #27
 800328a:	d407      	bmi.n	800329c <__swsetup_r+0x30>
 800328c:	2209      	movs	r2, #9
 800328e:	602a      	str	r2, [r5, #0]
 8003290:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003294:	f04f 30ff 	mov.w	r0, #4294967295
 8003298:	81a3      	strh	r3, [r4, #12]
 800329a:	e033      	b.n	8003304 <__swsetup_r+0x98>
 800329c:	0758      	lsls	r0, r3, #29
 800329e:	d512      	bpl.n	80032c6 <__swsetup_r+0x5a>
 80032a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80032a2:	b141      	cbz	r1, 80032b6 <__swsetup_r+0x4a>
 80032a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80032a8:	4299      	cmp	r1, r3
 80032aa:	d002      	beq.n	80032b2 <__swsetup_r+0x46>
 80032ac:	4628      	mov	r0, r5
 80032ae:	f000 f8af 	bl	8003410 <_free_r>
 80032b2:	2300      	movs	r3, #0
 80032b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80032b6:	89a3      	ldrh	r3, [r4, #12]
 80032b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80032bc:	81a3      	strh	r3, [r4, #12]
 80032be:	2300      	movs	r3, #0
 80032c0:	6063      	str	r3, [r4, #4]
 80032c2:	6923      	ldr	r3, [r4, #16]
 80032c4:	6023      	str	r3, [r4, #0]
 80032c6:	89a3      	ldrh	r3, [r4, #12]
 80032c8:	f043 0308 	orr.w	r3, r3, #8
 80032cc:	81a3      	strh	r3, [r4, #12]
 80032ce:	6923      	ldr	r3, [r4, #16]
 80032d0:	b94b      	cbnz	r3, 80032e6 <__swsetup_r+0x7a>
 80032d2:	89a3      	ldrh	r3, [r4, #12]
 80032d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80032d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032dc:	d003      	beq.n	80032e6 <__swsetup_r+0x7a>
 80032de:	4621      	mov	r1, r4
 80032e0:	4628      	mov	r0, r5
 80032e2:	f000 fdda 	bl	8003e9a <__smakebuf_r>
 80032e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032ea:	f013 0201 	ands.w	r2, r3, #1
 80032ee:	d00a      	beq.n	8003306 <__swsetup_r+0x9a>
 80032f0:	2200      	movs	r2, #0
 80032f2:	60a2      	str	r2, [r4, #8]
 80032f4:	6962      	ldr	r2, [r4, #20]
 80032f6:	4252      	negs	r2, r2
 80032f8:	61a2      	str	r2, [r4, #24]
 80032fa:	6922      	ldr	r2, [r4, #16]
 80032fc:	b942      	cbnz	r2, 8003310 <__swsetup_r+0xa4>
 80032fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003302:	d1c5      	bne.n	8003290 <__swsetup_r+0x24>
 8003304:	bd38      	pop	{r3, r4, r5, pc}
 8003306:	0799      	lsls	r1, r3, #30
 8003308:	bf58      	it	pl
 800330a:	6962      	ldrpl	r2, [r4, #20]
 800330c:	60a2      	str	r2, [r4, #8]
 800330e:	e7f4      	b.n	80032fa <__swsetup_r+0x8e>
 8003310:	2000      	movs	r0, #0
 8003312:	e7f7      	b.n	8003304 <__swsetup_r+0x98>
 8003314:	20000cd8 	.word	0x20000cd8

08003318 <memset>:
 8003318:	4603      	mov	r3, r0
 800331a:	4402      	add	r2, r0
 800331c:	4293      	cmp	r3, r2
 800331e:	d100      	bne.n	8003322 <memset+0xa>
 8003320:	4770      	bx	lr
 8003322:	f803 1b01 	strb.w	r1, [r3], #1
 8003326:	e7f9      	b.n	800331c <memset+0x4>

08003328 <_close_r>:
 8003328:	b538      	push	{r3, r4, r5, lr}
 800332a:	2300      	movs	r3, #0
 800332c:	4d05      	ldr	r5, [pc, #20]	@ (8003344 <_close_r+0x1c>)
 800332e:	4604      	mov	r4, r0
 8003330:	4608      	mov	r0, r1
 8003332:	602b      	str	r3, [r5, #0]
 8003334:	f7fd feb1 	bl	800109a <_close>
 8003338:	1c43      	adds	r3, r0, #1
 800333a:	d102      	bne.n	8003342 <_close_r+0x1a>
 800333c:	682b      	ldr	r3, [r5, #0]
 800333e:	b103      	cbz	r3, 8003342 <_close_r+0x1a>
 8003340:	6023      	str	r3, [r4, #0]
 8003342:	bd38      	pop	{r3, r4, r5, pc}
 8003344:	20001110 	.word	0x20001110

08003348 <_lseek_r>:
 8003348:	b538      	push	{r3, r4, r5, lr}
 800334a:	4604      	mov	r4, r0
 800334c:	4608      	mov	r0, r1
 800334e:	4611      	mov	r1, r2
 8003350:	2200      	movs	r2, #0
 8003352:	4d05      	ldr	r5, [pc, #20]	@ (8003368 <_lseek_r+0x20>)
 8003354:	602a      	str	r2, [r5, #0]
 8003356:	461a      	mov	r2, r3
 8003358:	f7fd fec3 	bl	80010e2 <_lseek>
 800335c:	1c43      	adds	r3, r0, #1
 800335e:	d102      	bne.n	8003366 <_lseek_r+0x1e>
 8003360:	682b      	ldr	r3, [r5, #0]
 8003362:	b103      	cbz	r3, 8003366 <_lseek_r+0x1e>
 8003364:	6023      	str	r3, [r4, #0]
 8003366:	bd38      	pop	{r3, r4, r5, pc}
 8003368:	20001110 	.word	0x20001110

0800336c <_read_r>:
 800336c:	b538      	push	{r3, r4, r5, lr}
 800336e:	4604      	mov	r4, r0
 8003370:	4608      	mov	r0, r1
 8003372:	4611      	mov	r1, r2
 8003374:	2200      	movs	r2, #0
 8003376:	4d05      	ldr	r5, [pc, #20]	@ (800338c <_read_r+0x20>)
 8003378:	602a      	str	r2, [r5, #0]
 800337a:	461a      	mov	r2, r3
 800337c:	f7fd fe70 	bl	8001060 <_read>
 8003380:	1c43      	adds	r3, r0, #1
 8003382:	d102      	bne.n	800338a <_read_r+0x1e>
 8003384:	682b      	ldr	r3, [r5, #0]
 8003386:	b103      	cbz	r3, 800338a <_read_r+0x1e>
 8003388:	6023      	str	r3, [r4, #0]
 800338a:	bd38      	pop	{r3, r4, r5, pc}
 800338c:	20001110 	.word	0x20001110

08003390 <_write_r>:
 8003390:	b538      	push	{r3, r4, r5, lr}
 8003392:	4604      	mov	r4, r0
 8003394:	4608      	mov	r0, r1
 8003396:	4611      	mov	r1, r2
 8003398:	2200      	movs	r2, #0
 800339a:	4d05      	ldr	r5, [pc, #20]	@ (80033b0 <_write_r+0x20>)
 800339c:	602a      	str	r2, [r5, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	f7fd f8c0 	bl	8000524 <_write>
 80033a4:	1c43      	adds	r3, r0, #1
 80033a6:	d102      	bne.n	80033ae <_write_r+0x1e>
 80033a8:	682b      	ldr	r3, [r5, #0]
 80033aa:	b103      	cbz	r3, 80033ae <_write_r+0x1e>
 80033ac:	6023      	str	r3, [r4, #0]
 80033ae:	bd38      	pop	{r3, r4, r5, pc}
 80033b0:	20001110 	.word	0x20001110

080033b4 <__errno>:
 80033b4:	4b01      	ldr	r3, [pc, #4]	@ (80033bc <__errno+0x8>)
 80033b6:	6818      	ldr	r0, [r3, #0]
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	20000cd8 	.word	0x20000cd8

080033c0 <__libc_init_array>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2600      	movs	r6, #0
 80033c4:	4d0c      	ldr	r5, [pc, #48]	@ (80033f8 <__libc_init_array+0x38>)
 80033c6:	4c0d      	ldr	r4, [pc, #52]	@ (80033fc <__libc_init_array+0x3c>)
 80033c8:	1b64      	subs	r4, r4, r5
 80033ca:	10a4      	asrs	r4, r4, #2
 80033cc:	42a6      	cmp	r6, r4
 80033ce:	d109      	bne.n	80033e4 <__libc_init_array+0x24>
 80033d0:	f000 fe3e 	bl	8004050 <_init>
 80033d4:	2600      	movs	r6, #0
 80033d6:	4d0a      	ldr	r5, [pc, #40]	@ (8003400 <__libc_init_array+0x40>)
 80033d8:	4c0a      	ldr	r4, [pc, #40]	@ (8003404 <__libc_init_array+0x44>)
 80033da:	1b64      	subs	r4, r4, r5
 80033dc:	10a4      	asrs	r4, r4, #2
 80033de:	42a6      	cmp	r6, r4
 80033e0:	d105      	bne.n	80033ee <__libc_init_array+0x2e>
 80033e2:	bd70      	pop	{r4, r5, r6, pc}
 80033e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80033e8:	4798      	blx	r3
 80033ea:	3601      	adds	r6, #1
 80033ec:	e7ee      	b.n	80033cc <__libc_init_array+0xc>
 80033ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80033f2:	4798      	blx	r3
 80033f4:	3601      	adds	r6, #1
 80033f6:	e7f2      	b.n	80033de <__libc_init_array+0x1e>
 80033f8:	080048dc 	.word	0x080048dc
 80033fc:	080048dc 	.word	0x080048dc
 8003400:	080048dc 	.word	0x080048dc
 8003404:	080048e0 	.word	0x080048e0

08003408 <__retarget_lock_init_recursive>:
 8003408:	4770      	bx	lr

0800340a <__retarget_lock_acquire_recursive>:
 800340a:	4770      	bx	lr

0800340c <__retarget_lock_release_recursive>:
 800340c:	4770      	bx	lr
	...

08003410 <_free_r>:
 8003410:	b538      	push	{r3, r4, r5, lr}
 8003412:	4605      	mov	r5, r0
 8003414:	2900      	cmp	r1, #0
 8003416:	d040      	beq.n	800349a <_free_r+0x8a>
 8003418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800341c:	1f0c      	subs	r4, r1, #4
 800341e:	2b00      	cmp	r3, #0
 8003420:	bfb8      	it	lt
 8003422:	18e4      	addlt	r4, r4, r3
 8003424:	f000 f8de 	bl	80035e4 <__malloc_lock>
 8003428:	4a1c      	ldr	r2, [pc, #112]	@ (800349c <_free_r+0x8c>)
 800342a:	6813      	ldr	r3, [r2, #0]
 800342c:	b933      	cbnz	r3, 800343c <_free_r+0x2c>
 800342e:	6063      	str	r3, [r4, #4]
 8003430:	6014      	str	r4, [r2, #0]
 8003432:	4628      	mov	r0, r5
 8003434:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003438:	f000 b8da 	b.w	80035f0 <__malloc_unlock>
 800343c:	42a3      	cmp	r3, r4
 800343e:	d908      	bls.n	8003452 <_free_r+0x42>
 8003440:	6820      	ldr	r0, [r4, #0]
 8003442:	1821      	adds	r1, r4, r0
 8003444:	428b      	cmp	r3, r1
 8003446:	bf01      	itttt	eq
 8003448:	6819      	ldreq	r1, [r3, #0]
 800344a:	685b      	ldreq	r3, [r3, #4]
 800344c:	1809      	addeq	r1, r1, r0
 800344e:	6021      	streq	r1, [r4, #0]
 8003450:	e7ed      	b.n	800342e <_free_r+0x1e>
 8003452:	461a      	mov	r2, r3
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	b10b      	cbz	r3, 800345c <_free_r+0x4c>
 8003458:	42a3      	cmp	r3, r4
 800345a:	d9fa      	bls.n	8003452 <_free_r+0x42>
 800345c:	6811      	ldr	r1, [r2, #0]
 800345e:	1850      	adds	r0, r2, r1
 8003460:	42a0      	cmp	r0, r4
 8003462:	d10b      	bne.n	800347c <_free_r+0x6c>
 8003464:	6820      	ldr	r0, [r4, #0]
 8003466:	4401      	add	r1, r0
 8003468:	1850      	adds	r0, r2, r1
 800346a:	4283      	cmp	r3, r0
 800346c:	6011      	str	r1, [r2, #0]
 800346e:	d1e0      	bne.n	8003432 <_free_r+0x22>
 8003470:	6818      	ldr	r0, [r3, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	4408      	add	r0, r1
 8003476:	6010      	str	r0, [r2, #0]
 8003478:	6053      	str	r3, [r2, #4]
 800347a:	e7da      	b.n	8003432 <_free_r+0x22>
 800347c:	d902      	bls.n	8003484 <_free_r+0x74>
 800347e:	230c      	movs	r3, #12
 8003480:	602b      	str	r3, [r5, #0]
 8003482:	e7d6      	b.n	8003432 <_free_r+0x22>
 8003484:	6820      	ldr	r0, [r4, #0]
 8003486:	1821      	adds	r1, r4, r0
 8003488:	428b      	cmp	r3, r1
 800348a:	bf01      	itttt	eq
 800348c:	6819      	ldreq	r1, [r3, #0]
 800348e:	685b      	ldreq	r3, [r3, #4]
 8003490:	1809      	addeq	r1, r1, r0
 8003492:	6021      	streq	r1, [r4, #0]
 8003494:	6063      	str	r3, [r4, #4]
 8003496:	6054      	str	r4, [r2, #4]
 8003498:	e7cb      	b.n	8003432 <_free_r+0x22>
 800349a:	bd38      	pop	{r3, r4, r5, pc}
 800349c:	2000111c 	.word	0x2000111c

080034a0 <sbrk_aligned>:
 80034a0:	b570      	push	{r4, r5, r6, lr}
 80034a2:	4e0f      	ldr	r6, [pc, #60]	@ (80034e0 <sbrk_aligned+0x40>)
 80034a4:	460c      	mov	r4, r1
 80034a6:	6831      	ldr	r1, [r6, #0]
 80034a8:	4605      	mov	r5, r0
 80034aa:	b911      	cbnz	r1, 80034b2 <sbrk_aligned+0x12>
 80034ac:	f000 fd6e 	bl	8003f8c <_sbrk_r>
 80034b0:	6030      	str	r0, [r6, #0]
 80034b2:	4621      	mov	r1, r4
 80034b4:	4628      	mov	r0, r5
 80034b6:	f000 fd69 	bl	8003f8c <_sbrk_r>
 80034ba:	1c43      	adds	r3, r0, #1
 80034bc:	d103      	bne.n	80034c6 <sbrk_aligned+0x26>
 80034be:	f04f 34ff 	mov.w	r4, #4294967295
 80034c2:	4620      	mov	r0, r4
 80034c4:	bd70      	pop	{r4, r5, r6, pc}
 80034c6:	1cc4      	adds	r4, r0, #3
 80034c8:	f024 0403 	bic.w	r4, r4, #3
 80034cc:	42a0      	cmp	r0, r4
 80034ce:	d0f8      	beq.n	80034c2 <sbrk_aligned+0x22>
 80034d0:	1a21      	subs	r1, r4, r0
 80034d2:	4628      	mov	r0, r5
 80034d4:	f000 fd5a 	bl	8003f8c <_sbrk_r>
 80034d8:	3001      	adds	r0, #1
 80034da:	d1f2      	bne.n	80034c2 <sbrk_aligned+0x22>
 80034dc:	e7ef      	b.n	80034be <sbrk_aligned+0x1e>
 80034de:	bf00      	nop
 80034e0:	20001118 	.word	0x20001118

080034e4 <_malloc_r>:
 80034e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034e8:	1ccd      	adds	r5, r1, #3
 80034ea:	f025 0503 	bic.w	r5, r5, #3
 80034ee:	3508      	adds	r5, #8
 80034f0:	2d0c      	cmp	r5, #12
 80034f2:	bf38      	it	cc
 80034f4:	250c      	movcc	r5, #12
 80034f6:	2d00      	cmp	r5, #0
 80034f8:	4606      	mov	r6, r0
 80034fa:	db01      	blt.n	8003500 <_malloc_r+0x1c>
 80034fc:	42a9      	cmp	r1, r5
 80034fe:	d904      	bls.n	800350a <_malloc_r+0x26>
 8003500:	230c      	movs	r3, #12
 8003502:	6033      	str	r3, [r6, #0]
 8003504:	2000      	movs	r0, #0
 8003506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800350a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80035e0 <_malloc_r+0xfc>
 800350e:	f000 f869 	bl	80035e4 <__malloc_lock>
 8003512:	f8d8 3000 	ldr.w	r3, [r8]
 8003516:	461c      	mov	r4, r3
 8003518:	bb44      	cbnz	r4, 800356c <_malloc_r+0x88>
 800351a:	4629      	mov	r1, r5
 800351c:	4630      	mov	r0, r6
 800351e:	f7ff ffbf 	bl	80034a0 <sbrk_aligned>
 8003522:	1c43      	adds	r3, r0, #1
 8003524:	4604      	mov	r4, r0
 8003526:	d158      	bne.n	80035da <_malloc_r+0xf6>
 8003528:	f8d8 4000 	ldr.w	r4, [r8]
 800352c:	4627      	mov	r7, r4
 800352e:	2f00      	cmp	r7, #0
 8003530:	d143      	bne.n	80035ba <_malloc_r+0xd6>
 8003532:	2c00      	cmp	r4, #0
 8003534:	d04b      	beq.n	80035ce <_malloc_r+0xea>
 8003536:	6823      	ldr	r3, [r4, #0]
 8003538:	4639      	mov	r1, r7
 800353a:	4630      	mov	r0, r6
 800353c:	eb04 0903 	add.w	r9, r4, r3
 8003540:	f000 fd24 	bl	8003f8c <_sbrk_r>
 8003544:	4581      	cmp	r9, r0
 8003546:	d142      	bne.n	80035ce <_malloc_r+0xea>
 8003548:	6821      	ldr	r1, [r4, #0]
 800354a:	4630      	mov	r0, r6
 800354c:	1a6d      	subs	r5, r5, r1
 800354e:	4629      	mov	r1, r5
 8003550:	f7ff ffa6 	bl	80034a0 <sbrk_aligned>
 8003554:	3001      	adds	r0, #1
 8003556:	d03a      	beq.n	80035ce <_malloc_r+0xea>
 8003558:	6823      	ldr	r3, [r4, #0]
 800355a:	442b      	add	r3, r5
 800355c:	6023      	str	r3, [r4, #0]
 800355e:	f8d8 3000 	ldr.w	r3, [r8]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	bb62      	cbnz	r2, 80035c0 <_malloc_r+0xdc>
 8003566:	f8c8 7000 	str.w	r7, [r8]
 800356a:	e00f      	b.n	800358c <_malloc_r+0xa8>
 800356c:	6822      	ldr	r2, [r4, #0]
 800356e:	1b52      	subs	r2, r2, r5
 8003570:	d420      	bmi.n	80035b4 <_malloc_r+0xd0>
 8003572:	2a0b      	cmp	r2, #11
 8003574:	d917      	bls.n	80035a6 <_malloc_r+0xc2>
 8003576:	1961      	adds	r1, r4, r5
 8003578:	42a3      	cmp	r3, r4
 800357a:	6025      	str	r5, [r4, #0]
 800357c:	bf18      	it	ne
 800357e:	6059      	strne	r1, [r3, #4]
 8003580:	6863      	ldr	r3, [r4, #4]
 8003582:	bf08      	it	eq
 8003584:	f8c8 1000 	streq.w	r1, [r8]
 8003588:	5162      	str	r2, [r4, r5]
 800358a:	604b      	str	r3, [r1, #4]
 800358c:	4630      	mov	r0, r6
 800358e:	f000 f82f 	bl	80035f0 <__malloc_unlock>
 8003592:	f104 000b 	add.w	r0, r4, #11
 8003596:	1d23      	adds	r3, r4, #4
 8003598:	f020 0007 	bic.w	r0, r0, #7
 800359c:	1ac2      	subs	r2, r0, r3
 800359e:	bf1c      	itt	ne
 80035a0:	1a1b      	subne	r3, r3, r0
 80035a2:	50a3      	strne	r3, [r4, r2]
 80035a4:	e7af      	b.n	8003506 <_malloc_r+0x22>
 80035a6:	6862      	ldr	r2, [r4, #4]
 80035a8:	42a3      	cmp	r3, r4
 80035aa:	bf0c      	ite	eq
 80035ac:	f8c8 2000 	streq.w	r2, [r8]
 80035b0:	605a      	strne	r2, [r3, #4]
 80035b2:	e7eb      	b.n	800358c <_malloc_r+0xa8>
 80035b4:	4623      	mov	r3, r4
 80035b6:	6864      	ldr	r4, [r4, #4]
 80035b8:	e7ae      	b.n	8003518 <_malloc_r+0x34>
 80035ba:	463c      	mov	r4, r7
 80035bc:	687f      	ldr	r7, [r7, #4]
 80035be:	e7b6      	b.n	800352e <_malloc_r+0x4a>
 80035c0:	461a      	mov	r2, r3
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	42a3      	cmp	r3, r4
 80035c6:	d1fb      	bne.n	80035c0 <_malloc_r+0xdc>
 80035c8:	2300      	movs	r3, #0
 80035ca:	6053      	str	r3, [r2, #4]
 80035cc:	e7de      	b.n	800358c <_malloc_r+0xa8>
 80035ce:	230c      	movs	r3, #12
 80035d0:	4630      	mov	r0, r6
 80035d2:	6033      	str	r3, [r6, #0]
 80035d4:	f000 f80c 	bl	80035f0 <__malloc_unlock>
 80035d8:	e794      	b.n	8003504 <_malloc_r+0x20>
 80035da:	6005      	str	r5, [r0, #0]
 80035dc:	e7d6      	b.n	800358c <_malloc_r+0xa8>
 80035de:	bf00      	nop
 80035e0:	2000111c 	.word	0x2000111c

080035e4 <__malloc_lock>:
 80035e4:	4801      	ldr	r0, [pc, #4]	@ (80035ec <__malloc_lock+0x8>)
 80035e6:	f7ff bf10 	b.w	800340a <__retarget_lock_acquire_recursive>
 80035ea:	bf00      	nop
 80035ec:	20001114 	.word	0x20001114

080035f0 <__malloc_unlock>:
 80035f0:	4801      	ldr	r0, [pc, #4]	@ (80035f8 <__malloc_unlock+0x8>)
 80035f2:	f7ff bf0b 	b.w	800340c <__retarget_lock_release_recursive>
 80035f6:	bf00      	nop
 80035f8:	20001114 	.word	0x20001114

080035fc <__ssputs_r>:
 80035fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003600:	461f      	mov	r7, r3
 8003602:	688e      	ldr	r6, [r1, #8]
 8003604:	4682      	mov	sl, r0
 8003606:	42be      	cmp	r6, r7
 8003608:	460c      	mov	r4, r1
 800360a:	4690      	mov	r8, r2
 800360c:	680b      	ldr	r3, [r1, #0]
 800360e:	d82d      	bhi.n	800366c <__ssputs_r+0x70>
 8003610:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003614:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003618:	d026      	beq.n	8003668 <__ssputs_r+0x6c>
 800361a:	6965      	ldr	r5, [r4, #20]
 800361c:	6909      	ldr	r1, [r1, #16]
 800361e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003622:	eba3 0901 	sub.w	r9, r3, r1
 8003626:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800362a:	1c7b      	adds	r3, r7, #1
 800362c:	444b      	add	r3, r9
 800362e:	106d      	asrs	r5, r5, #1
 8003630:	429d      	cmp	r5, r3
 8003632:	bf38      	it	cc
 8003634:	461d      	movcc	r5, r3
 8003636:	0553      	lsls	r3, r2, #21
 8003638:	d527      	bpl.n	800368a <__ssputs_r+0x8e>
 800363a:	4629      	mov	r1, r5
 800363c:	f7ff ff52 	bl	80034e4 <_malloc_r>
 8003640:	4606      	mov	r6, r0
 8003642:	b360      	cbz	r0, 800369e <__ssputs_r+0xa2>
 8003644:	464a      	mov	r2, r9
 8003646:	6921      	ldr	r1, [r4, #16]
 8003648:	f000 fcbe 	bl	8003fc8 <memcpy>
 800364c:	89a3      	ldrh	r3, [r4, #12]
 800364e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003652:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003656:	81a3      	strh	r3, [r4, #12]
 8003658:	6126      	str	r6, [r4, #16]
 800365a:	444e      	add	r6, r9
 800365c:	6026      	str	r6, [r4, #0]
 800365e:	463e      	mov	r6, r7
 8003660:	6165      	str	r5, [r4, #20]
 8003662:	eba5 0509 	sub.w	r5, r5, r9
 8003666:	60a5      	str	r5, [r4, #8]
 8003668:	42be      	cmp	r6, r7
 800366a:	d900      	bls.n	800366e <__ssputs_r+0x72>
 800366c:	463e      	mov	r6, r7
 800366e:	4632      	mov	r2, r6
 8003670:	4641      	mov	r1, r8
 8003672:	6820      	ldr	r0, [r4, #0]
 8003674:	f000 fc4d 	bl	8003f12 <memmove>
 8003678:	2000      	movs	r0, #0
 800367a:	68a3      	ldr	r3, [r4, #8]
 800367c:	1b9b      	subs	r3, r3, r6
 800367e:	60a3      	str	r3, [r4, #8]
 8003680:	6823      	ldr	r3, [r4, #0]
 8003682:	4433      	add	r3, r6
 8003684:	6023      	str	r3, [r4, #0]
 8003686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800368a:	462a      	mov	r2, r5
 800368c:	f000 fcaa 	bl	8003fe4 <_realloc_r>
 8003690:	4606      	mov	r6, r0
 8003692:	2800      	cmp	r0, #0
 8003694:	d1e0      	bne.n	8003658 <__ssputs_r+0x5c>
 8003696:	4650      	mov	r0, sl
 8003698:	6921      	ldr	r1, [r4, #16]
 800369a:	f7ff feb9 	bl	8003410 <_free_r>
 800369e:	230c      	movs	r3, #12
 80036a0:	f8ca 3000 	str.w	r3, [sl]
 80036a4:	89a3      	ldrh	r3, [r4, #12]
 80036a6:	f04f 30ff 	mov.w	r0, #4294967295
 80036aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036ae:	81a3      	strh	r3, [r4, #12]
 80036b0:	e7e9      	b.n	8003686 <__ssputs_r+0x8a>
	...

080036b4 <_svfiprintf_r>:
 80036b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036b8:	4698      	mov	r8, r3
 80036ba:	898b      	ldrh	r3, [r1, #12]
 80036bc:	4607      	mov	r7, r0
 80036be:	061b      	lsls	r3, r3, #24
 80036c0:	460d      	mov	r5, r1
 80036c2:	4614      	mov	r4, r2
 80036c4:	b09d      	sub	sp, #116	@ 0x74
 80036c6:	d510      	bpl.n	80036ea <_svfiprintf_r+0x36>
 80036c8:	690b      	ldr	r3, [r1, #16]
 80036ca:	b973      	cbnz	r3, 80036ea <_svfiprintf_r+0x36>
 80036cc:	2140      	movs	r1, #64	@ 0x40
 80036ce:	f7ff ff09 	bl	80034e4 <_malloc_r>
 80036d2:	6028      	str	r0, [r5, #0]
 80036d4:	6128      	str	r0, [r5, #16]
 80036d6:	b930      	cbnz	r0, 80036e6 <_svfiprintf_r+0x32>
 80036d8:	230c      	movs	r3, #12
 80036da:	603b      	str	r3, [r7, #0]
 80036dc:	f04f 30ff 	mov.w	r0, #4294967295
 80036e0:	b01d      	add	sp, #116	@ 0x74
 80036e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036e6:	2340      	movs	r3, #64	@ 0x40
 80036e8:	616b      	str	r3, [r5, #20]
 80036ea:	2300      	movs	r3, #0
 80036ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80036ee:	2320      	movs	r3, #32
 80036f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80036f4:	2330      	movs	r3, #48	@ 0x30
 80036f6:	f04f 0901 	mov.w	r9, #1
 80036fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80036fe:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003898 <_svfiprintf_r+0x1e4>
 8003702:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003706:	4623      	mov	r3, r4
 8003708:	469a      	mov	sl, r3
 800370a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800370e:	b10a      	cbz	r2, 8003714 <_svfiprintf_r+0x60>
 8003710:	2a25      	cmp	r2, #37	@ 0x25
 8003712:	d1f9      	bne.n	8003708 <_svfiprintf_r+0x54>
 8003714:	ebba 0b04 	subs.w	fp, sl, r4
 8003718:	d00b      	beq.n	8003732 <_svfiprintf_r+0x7e>
 800371a:	465b      	mov	r3, fp
 800371c:	4622      	mov	r2, r4
 800371e:	4629      	mov	r1, r5
 8003720:	4638      	mov	r0, r7
 8003722:	f7ff ff6b 	bl	80035fc <__ssputs_r>
 8003726:	3001      	adds	r0, #1
 8003728:	f000 80a7 	beq.w	800387a <_svfiprintf_r+0x1c6>
 800372c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800372e:	445a      	add	r2, fp
 8003730:	9209      	str	r2, [sp, #36]	@ 0x24
 8003732:	f89a 3000 	ldrb.w	r3, [sl]
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 809f 	beq.w	800387a <_svfiprintf_r+0x1c6>
 800373c:	2300      	movs	r3, #0
 800373e:	f04f 32ff 	mov.w	r2, #4294967295
 8003742:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003746:	f10a 0a01 	add.w	sl, sl, #1
 800374a:	9304      	str	r3, [sp, #16]
 800374c:	9307      	str	r3, [sp, #28]
 800374e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003752:	931a      	str	r3, [sp, #104]	@ 0x68
 8003754:	4654      	mov	r4, sl
 8003756:	2205      	movs	r2, #5
 8003758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800375c:	484e      	ldr	r0, [pc, #312]	@ (8003898 <_svfiprintf_r+0x1e4>)
 800375e:	f000 fc25 	bl	8003fac <memchr>
 8003762:	9a04      	ldr	r2, [sp, #16]
 8003764:	b9d8      	cbnz	r0, 800379e <_svfiprintf_r+0xea>
 8003766:	06d0      	lsls	r0, r2, #27
 8003768:	bf44      	itt	mi
 800376a:	2320      	movmi	r3, #32
 800376c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003770:	0711      	lsls	r1, r2, #28
 8003772:	bf44      	itt	mi
 8003774:	232b      	movmi	r3, #43	@ 0x2b
 8003776:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800377a:	f89a 3000 	ldrb.w	r3, [sl]
 800377e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003780:	d015      	beq.n	80037ae <_svfiprintf_r+0xfa>
 8003782:	4654      	mov	r4, sl
 8003784:	2000      	movs	r0, #0
 8003786:	f04f 0c0a 	mov.w	ip, #10
 800378a:	9a07      	ldr	r2, [sp, #28]
 800378c:	4621      	mov	r1, r4
 800378e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003792:	3b30      	subs	r3, #48	@ 0x30
 8003794:	2b09      	cmp	r3, #9
 8003796:	d94b      	bls.n	8003830 <_svfiprintf_r+0x17c>
 8003798:	b1b0      	cbz	r0, 80037c8 <_svfiprintf_r+0x114>
 800379a:	9207      	str	r2, [sp, #28]
 800379c:	e014      	b.n	80037c8 <_svfiprintf_r+0x114>
 800379e:	eba0 0308 	sub.w	r3, r0, r8
 80037a2:	fa09 f303 	lsl.w	r3, r9, r3
 80037a6:	4313      	orrs	r3, r2
 80037a8:	46a2      	mov	sl, r4
 80037aa:	9304      	str	r3, [sp, #16]
 80037ac:	e7d2      	b.n	8003754 <_svfiprintf_r+0xa0>
 80037ae:	9b03      	ldr	r3, [sp, #12]
 80037b0:	1d19      	adds	r1, r3, #4
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	9103      	str	r1, [sp, #12]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	bfbb      	ittet	lt
 80037ba:	425b      	neglt	r3, r3
 80037bc:	f042 0202 	orrlt.w	r2, r2, #2
 80037c0:	9307      	strge	r3, [sp, #28]
 80037c2:	9307      	strlt	r3, [sp, #28]
 80037c4:	bfb8      	it	lt
 80037c6:	9204      	strlt	r2, [sp, #16]
 80037c8:	7823      	ldrb	r3, [r4, #0]
 80037ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80037cc:	d10a      	bne.n	80037e4 <_svfiprintf_r+0x130>
 80037ce:	7863      	ldrb	r3, [r4, #1]
 80037d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80037d2:	d132      	bne.n	800383a <_svfiprintf_r+0x186>
 80037d4:	9b03      	ldr	r3, [sp, #12]
 80037d6:	3402      	adds	r4, #2
 80037d8:	1d1a      	adds	r2, r3, #4
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	9203      	str	r2, [sp, #12]
 80037de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80037e2:	9305      	str	r3, [sp, #20]
 80037e4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800389c <_svfiprintf_r+0x1e8>
 80037e8:	2203      	movs	r2, #3
 80037ea:	4650      	mov	r0, sl
 80037ec:	7821      	ldrb	r1, [r4, #0]
 80037ee:	f000 fbdd 	bl	8003fac <memchr>
 80037f2:	b138      	cbz	r0, 8003804 <_svfiprintf_r+0x150>
 80037f4:	2240      	movs	r2, #64	@ 0x40
 80037f6:	9b04      	ldr	r3, [sp, #16]
 80037f8:	eba0 000a 	sub.w	r0, r0, sl
 80037fc:	4082      	lsls	r2, r0
 80037fe:	4313      	orrs	r3, r2
 8003800:	3401      	adds	r4, #1
 8003802:	9304      	str	r3, [sp, #16]
 8003804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003808:	2206      	movs	r2, #6
 800380a:	4825      	ldr	r0, [pc, #148]	@ (80038a0 <_svfiprintf_r+0x1ec>)
 800380c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003810:	f000 fbcc 	bl	8003fac <memchr>
 8003814:	2800      	cmp	r0, #0
 8003816:	d036      	beq.n	8003886 <_svfiprintf_r+0x1d2>
 8003818:	4b22      	ldr	r3, [pc, #136]	@ (80038a4 <_svfiprintf_r+0x1f0>)
 800381a:	bb1b      	cbnz	r3, 8003864 <_svfiprintf_r+0x1b0>
 800381c:	9b03      	ldr	r3, [sp, #12]
 800381e:	3307      	adds	r3, #7
 8003820:	f023 0307 	bic.w	r3, r3, #7
 8003824:	3308      	adds	r3, #8
 8003826:	9303      	str	r3, [sp, #12]
 8003828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800382a:	4433      	add	r3, r6
 800382c:	9309      	str	r3, [sp, #36]	@ 0x24
 800382e:	e76a      	b.n	8003706 <_svfiprintf_r+0x52>
 8003830:	460c      	mov	r4, r1
 8003832:	2001      	movs	r0, #1
 8003834:	fb0c 3202 	mla	r2, ip, r2, r3
 8003838:	e7a8      	b.n	800378c <_svfiprintf_r+0xd8>
 800383a:	2300      	movs	r3, #0
 800383c:	f04f 0c0a 	mov.w	ip, #10
 8003840:	4619      	mov	r1, r3
 8003842:	3401      	adds	r4, #1
 8003844:	9305      	str	r3, [sp, #20]
 8003846:	4620      	mov	r0, r4
 8003848:	f810 2b01 	ldrb.w	r2, [r0], #1
 800384c:	3a30      	subs	r2, #48	@ 0x30
 800384e:	2a09      	cmp	r2, #9
 8003850:	d903      	bls.n	800385a <_svfiprintf_r+0x1a6>
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0c6      	beq.n	80037e4 <_svfiprintf_r+0x130>
 8003856:	9105      	str	r1, [sp, #20]
 8003858:	e7c4      	b.n	80037e4 <_svfiprintf_r+0x130>
 800385a:	4604      	mov	r4, r0
 800385c:	2301      	movs	r3, #1
 800385e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003862:	e7f0      	b.n	8003846 <_svfiprintf_r+0x192>
 8003864:	ab03      	add	r3, sp, #12
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	462a      	mov	r2, r5
 800386a:	4638      	mov	r0, r7
 800386c:	4b0e      	ldr	r3, [pc, #56]	@ (80038a8 <_svfiprintf_r+0x1f4>)
 800386e:	a904      	add	r1, sp, #16
 8003870:	f3af 8000 	nop.w
 8003874:	1c42      	adds	r2, r0, #1
 8003876:	4606      	mov	r6, r0
 8003878:	d1d6      	bne.n	8003828 <_svfiprintf_r+0x174>
 800387a:	89ab      	ldrh	r3, [r5, #12]
 800387c:	065b      	lsls	r3, r3, #25
 800387e:	f53f af2d 	bmi.w	80036dc <_svfiprintf_r+0x28>
 8003882:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003884:	e72c      	b.n	80036e0 <_svfiprintf_r+0x2c>
 8003886:	ab03      	add	r3, sp, #12
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	462a      	mov	r2, r5
 800388c:	4638      	mov	r0, r7
 800388e:	4b06      	ldr	r3, [pc, #24]	@ (80038a8 <_svfiprintf_r+0x1f4>)
 8003890:	a904      	add	r1, sp, #16
 8003892:	f000 f9bd 	bl	8003c10 <_printf_i>
 8003896:	e7ed      	b.n	8003874 <_svfiprintf_r+0x1c0>
 8003898:	080048a0 	.word	0x080048a0
 800389c:	080048a6 	.word	0x080048a6
 80038a0:	080048aa 	.word	0x080048aa
 80038a4:	00000000 	.word	0x00000000
 80038a8:	080035fd 	.word	0x080035fd

080038ac <__sfputc_r>:
 80038ac:	6893      	ldr	r3, [r2, #8]
 80038ae:	b410      	push	{r4}
 80038b0:	3b01      	subs	r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	6093      	str	r3, [r2, #8]
 80038b6:	da07      	bge.n	80038c8 <__sfputc_r+0x1c>
 80038b8:	6994      	ldr	r4, [r2, #24]
 80038ba:	42a3      	cmp	r3, r4
 80038bc:	db01      	blt.n	80038c2 <__sfputc_r+0x16>
 80038be:	290a      	cmp	r1, #10
 80038c0:	d102      	bne.n	80038c8 <__sfputc_r+0x1c>
 80038c2:	bc10      	pop	{r4}
 80038c4:	f7ff bc93 	b.w	80031ee <__swbuf_r>
 80038c8:	6813      	ldr	r3, [r2, #0]
 80038ca:	1c58      	adds	r0, r3, #1
 80038cc:	6010      	str	r0, [r2, #0]
 80038ce:	7019      	strb	r1, [r3, #0]
 80038d0:	4608      	mov	r0, r1
 80038d2:	bc10      	pop	{r4}
 80038d4:	4770      	bx	lr

080038d6 <__sfputs_r>:
 80038d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d8:	4606      	mov	r6, r0
 80038da:	460f      	mov	r7, r1
 80038dc:	4614      	mov	r4, r2
 80038de:	18d5      	adds	r5, r2, r3
 80038e0:	42ac      	cmp	r4, r5
 80038e2:	d101      	bne.n	80038e8 <__sfputs_r+0x12>
 80038e4:	2000      	movs	r0, #0
 80038e6:	e007      	b.n	80038f8 <__sfputs_r+0x22>
 80038e8:	463a      	mov	r2, r7
 80038ea:	4630      	mov	r0, r6
 80038ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038f0:	f7ff ffdc 	bl	80038ac <__sfputc_r>
 80038f4:	1c43      	adds	r3, r0, #1
 80038f6:	d1f3      	bne.n	80038e0 <__sfputs_r+0xa>
 80038f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080038fc <_vfiprintf_r>:
 80038fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003900:	460d      	mov	r5, r1
 8003902:	4614      	mov	r4, r2
 8003904:	4698      	mov	r8, r3
 8003906:	4606      	mov	r6, r0
 8003908:	b09d      	sub	sp, #116	@ 0x74
 800390a:	b118      	cbz	r0, 8003914 <_vfiprintf_r+0x18>
 800390c:	6a03      	ldr	r3, [r0, #32]
 800390e:	b90b      	cbnz	r3, 8003914 <_vfiprintf_r+0x18>
 8003910:	f7ff fb50 	bl	8002fb4 <__sinit>
 8003914:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003916:	07d9      	lsls	r1, r3, #31
 8003918:	d405      	bmi.n	8003926 <_vfiprintf_r+0x2a>
 800391a:	89ab      	ldrh	r3, [r5, #12]
 800391c:	059a      	lsls	r2, r3, #22
 800391e:	d402      	bmi.n	8003926 <_vfiprintf_r+0x2a>
 8003920:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003922:	f7ff fd72 	bl	800340a <__retarget_lock_acquire_recursive>
 8003926:	89ab      	ldrh	r3, [r5, #12]
 8003928:	071b      	lsls	r3, r3, #28
 800392a:	d501      	bpl.n	8003930 <_vfiprintf_r+0x34>
 800392c:	692b      	ldr	r3, [r5, #16]
 800392e:	b99b      	cbnz	r3, 8003958 <_vfiprintf_r+0x5c>
 8003930:	4629      	mov	r1, r5
 8003932:	4630      	mov	r0, r6
 8003934:	f7ff fc9a 	bl	800326c <__swsetup_r>
 8003938:	b170      	cbz	r0, 8003958 <_vfiprintf_r+0x5c>
 800393a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800393c:	07dc      	lsls	r4, r3, #31
 800393e:	d504      	bpl.n	800394a <_vfiprintf_r+0x4e>
 8003940:	f04f 30ff 	mov.w	r0, #4294967295
 8003944:	b01d      	add	sp, #116	@ 0x74
 8003946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800394a:	89ab      	ldrh	r3, [r5, #12]
 800394c:	0598      	lsls	r0, r3, #22
 800394e:	d4f7      	bmi.n	8003940 <_vfiprintf_r+0x44>
 8003950:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003952:	f7ff fd5b 	bl	800340c <__retarget_lock_release_recursive>
 8003956:	e7f3      	b.n	8003940 <_vfiprintf_r+0x44>
 8003958:	2300      	movs	r3, #0
 800395a:	9309      	str	r3, [sp, #36]	@ 0x24
 800395c:	2320      	movs	r3, #32
 800395e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003962:	2330      	movs	r3, #48	@ 0x30
 8003964:	f04f 0901 	mov.w	r9, #1
 8003968:	f8cd 800c 	str.w	r8, [sp, #12]
 800396c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003b18 <_vfiprintf_r+0x21c>
 8003970:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003974:	4623      	mov	r3, r4
 8003976:	469a      	mov	sl, r3
 8003978:	f813 2b01 	ldrb.w	r2, [r3], #1
 800397c:	b10a      	cbz	r2, 8003982 <_vfiprintf_r+0x86>
 800397e:	2a25      	cmp	r2, #37	@ 0x25
 8003980:	d1f9      	bne.n	8003976 <_vfiprintf_r+0x7a>
 8003982:	ebba 0b04 	subs.w	fp, sl, r4
 8003986:	d00b      	beq.n	80039a0 <_vfiprintf_r+0xa4>
 8003988:	465b      	mov	r3, fp
 800398a:	4622      	mov	r2, r4
 800398c:	4629      	mov	r1, r5
 800398e:	4630      	mov	r0, r6
 8003990:	f7ff ffa1 	bl	80038d6 <__sfputs_r>
 8003994:	3001      	adds	r0, #1
 8003996:	f000 80a7 	beq.w	8003ae8 <_vfiprintf_r+0x1ec>
 800399a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800399c:	445a      	add	r2, fp
 800399e:	9209      	str	r2, [sp, #36]	@ 0x24
 80039a0:	f89a 3000 	ldrb.w	r3, [sl]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 809f 	beq.w	8003ae8 <_vfiprintf_r+0x1ec>
 80039aa:	2300      	movs	r3, #0
 80039ac:	f04f 32ff 	mov.w	r2, #4294967295
 80039b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039b4:	f10a 0a01 	add.w	sl, sl, #1
 80039b8:	9304      	str	r3, [sp, #16]
 80039ba:	9307      	str	r3, [sp, #28]
 80039bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80039c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80039c2:	4654      	mov	r4, sl
 80039c4:	2205      	movs	r2, #5
 80039c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039ca:	4853      	ldr	r0, [pc, #332]	@ (8003b18 <_vfiprintf_r+0x21c>)
 80039cc:	f000 faee 	bl	8003fac <memchr>
 80039d0:	9a04      	ldr	r2, [sp, #16]
 80039d2:	b9d8      	cbnz	r0, 8003a0c <_vfiprintf_r+0x110>
 80039d4:	06d1      	lsls	r1, r2, #27
 80039d6:	bf44      	itt	mi
 80039d8:	2320      	movmi	r3, #32
 80039da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80039de:	0713      	lsls	r3, r2, #28
 80039e0:	bf44      	itt	mi
 80039e2:	232b      	movmi	r3, #43	@ 0x2b
 80039e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80039e8:	f89a 3000 	ldrb.w	r3, [sl]
 80039ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80039ee:	d015      	beq.n	8003a1c <_vfiprintf_r+0x120>
 80039f0:	4654      	mov	r4, sl
 80039f2:	2000      	movs	r0, #0
 80039f4:	f04f 0c0a 	mov.w	ip, #10
 80039f8:	9a07      	ldr	r2, [sp, #28]
 80039fa:	4621      	mov	r1, r4
 80039fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a00:	3b30      	subs	r3, #48	@ 0x30
 8003a02:	2b09      	cmp	r3, #9
 8003a04:	d94b      	bls.n	8003a9e <_vfiprintf_r+0x1a2>
 8003a06:	b1b0      	cbz	r0, 8003a36 <_vfiprintf_r+0x13a>
 8003a08:	9207      	str	r2, [sp, #28]
 8003a0a:	e014      	b.n	8003a36 <_vfiprintf_r+0x13a>
 8003a0c:	eba0 0308 	sub.w	r3, r0, r8
 8003a10:	fa09 f303 	lsl.w	r3, r9, r3
 8003a14:	4313      	orrs	r3, r2
 8003a16:	46a2      	mov	sl, r4
 8003a18:	9304      	str	r3, [sp, #16]
 8003a1a:	e7d2      	b.n	80039c2 <_vfiprintf_r+0xc6>
 8003a1c:	9b03      	ldr	r3, [sp, #12]
 8003a1e:	1d19      	adds	r1, r3, #4
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	9103      	str	r1, [sp, #12]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	bfbb      	ittet	lt
 8003a28:	425b      	neglt	r3, r3
 8003a2a:	f042 0202 	orrlt.w	r2, r2, #2
 8003a2e:	9307      	strge	r3, [sp, #28]
 8003a30:	9307      	strlt	r3, [sp, #28]
 8003a32:	bfb8      	it	lt
 8003a34:	9204      	strlt	r2, [sp, #16]
 8003a36:	7823      	ldrb	r3, [r4, #0]
 8003a38:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a3a:	d10a      	bne.n	8003a52 <_vfiprintf_r+0x156>
 8003a3c:	7863      	ldrb	r3, [r4, #1]
 8003a3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a40:	d132      	bne.n	8003aa8 <_vfiprintf_r+0x1ac>
 8003a42:	9b03      	ldr	r3, [sp, #12]
 8003a44:	3402      	adds	r4, #2
 8003a46:	1d1a      	adds	r2, r3, #4
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	9203      	str	r2, [sp, #12]
 8003a4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003a50:	9305      	str	r3, [sp, #20]
 8003a52:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003b1c <_vfiprintf_r+0x220>
 8003a56:	2203      	movs	r2, #3
 8003a58:	4650      	mov	r0, sl
 8003a5a:	7821      	ldrb	r1, [r4, #0]
 8003a5c:	f000 faa6 	bl	8003fac <memchr>
 8003a60:	b138      	cbz	r0, 8003a72 <_vfiprintf_r+0x176>
 8003a62:	2240      	movs	r2, #64	@ 0x40
 8003a64:	9b04      	ldr	r3, [sp, #16]
 8003a66:	eba0 000a 	sub.w	r0, r0, sl
 8003a6a:	4082      	lsls	r2, r0
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	3401      	adds	r4, #1
 8003a70:	9304      	str	r3, [sp, #16]
 8003a72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a76:	2206      	movs	r2, #6
 8003a78:	4829      	ldr	r0, [pc, #164]	@ (8003b20 <_vfiprintf_r+0x224>)
 8003a7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003a7e:	f000 fa95 	bl	8003fac <memchr>
 8003a82:	2800      	cmp	r0, #0
 8003a84:	d03f      	beq.n	8003b06 <_vfiprintf_r+0x20a>
 8003a86:	4b27      	ldr	r3, [pc, #156]	@ (8003b24 <_vfiprintf_r+0x228>)
 8003a88:	bb1b      	cbnz	r3, 8003ad2 <_vfiprintf_r+0x1d6>
 8003a8a:	9b03      	ldr	r3, [sp, #12]
 8003a8c:	3307      	adds	r3, #7
 8003a8e:	f023 0307 	bic.w	r3, r3, #7
 8003a92:	3308      	adds	r3, #8
 8003a94:	9303      	str	r3, [sp, #12]
 8003a96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a98:	443b      	add	r3, r7
 8003a9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a9c:	e76a      	b.n	8003974 <_vfiprintf_r+0x78>
 8003a9e:	460c      	mov	r4, r1
 8003aa0:	2001      	movs	r0, #1
 8003aa2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003aa6:	e7a8      	b.n	80039fa <_vfiprintf_r+0xfe>
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f04f 0c0a 	mov.w	ip, #10
 8003aae:	4619      	mov	r1, r3
 8003ab0:	3401      	adds	r4, #1
 8003ab2:	9305      	str	r3, [sp, #20]
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003aba:	3a30      	subs	r2, #48	@ 0x30
 8003abc:	2a09      	cmp	r2, #9
 8003abe:	d903      	bls.n	8003ac8 <_vfiprintf_r+0x1cc>
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0c6      	beq.n	8003a52 <_vfiprintf_r+0x156>
 8003ac4:	9105      	str	r1, [sp, #20]
 8003ac6:	e7c4      	b.n	8003a52 <_vfiprintf_r+0x156>
 8003ac8:	4604      	mov	r4, r0
 8003aca:	2301      	movs	r3, #1
 8003acc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ad0:	e7f0      	b.n	8003ab4 <_vfiprintf_r+0x1b8>
 8003ad2:	ab03      	add	r3, sp, #12
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	462a      	mov	r2, r5
 8003ad8:	4630      	mov	r0, r6
 8003ada:	4b13      	ldr	r3, [pc, #76]	@ (8003b28 <_vfiprintf_r+0x22c>)
 8003adc:	a904      	add	r1, sp, #16
 8003ade:	f3af 8000 	nop.w
 8003ae2:	4607      	mov	r7, r0
 8003ae4:	1c78      	adds	r0, r7, #1
 8003ae6:	d1d6      	bne.n	8003a96 <_vfiprintf_r+0x19a>
 8003ae8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003aea:	07d9      	lsls	r1, r3, #31
 8003aec:	d405      	bmi.n	8003afa <_vfiprintf_r+0x1fe>
 8003aee:	89ab      	ldrh	r3, [r5, #12]
 8003af0:	059a      	lsls	r2, r3, #22
 8003af2:	d402      	bmi.n	8003afa <_vfiprintf_r+0x1fe>
 8003af4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003af6:	f7ff fc89 	bl	800340c <__retarget_lock_release_recursive>
 8003afa:	89ab      	ldrh	r3, [r5, #12]
 8003afc:	065b      	lsls	r3, r3, #25
 8003afe:	f53f af1f 	bmi.w	8003940 <_vfiprintf_r+0x44>
 8003b02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003b04:	e71e      	b.n	8003944 <_vfiprintf_r+0x48>
 8003b06:	ab03      	add	r3, sp, #12
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	462a      	mov	r2, r5
 8003b0c:	4630      	mov	r0, r6
 8003b0e:	4b06      	ldr	r3, [pc, #24]	@ (8003b28 <_vfiprintf_r+0x22c>)
 8003b10:	a904      	add	r1, sp, #16
 8003b12:	f000 f87d 	bl	8003c10 <_printf_i>
 8003b16:	e7e4      	b.n	8003ae2 <_vfiprintf_r+0x1e6>
 8003b18:	080048a0 	.word	0x080048a0
 8003b1c:	080048a6 	.word	0x080048a6
 8003b20:	080048aa 	.word	0x080048aa
 8003b24:	00000000 	.word	0x00000000
 8003b28:	080038d7 	.word	0x080038d7

08003b2c <_printf_common>:
 8003b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b30:	4616      	mov	r6, r2
 8003b32:	4698      	mov	r8, r3
 8003b34:	688a      	ldr	r2, [r1, #8]
 8003b36:	690b      	ldr	r3, [r1, #16]
 8003b38:	4607      	mov	r7, r0
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	bfb8      	it	lt
 8003b3e:	4613      	movlt	r3, r2
 8003b40:	6033      	str	r3, [r6, #0]
 8003b42:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b46:	460c      	mov	r4, r1
 8003b48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b4c:	b10a      	cbz	r2, 8003b52 <_printf_common+0x26>
 8003b4e:	3301      	adds	r3, #1
 8003b50:	6033      	str	r3, [r6, #0]
 8003b52:	6823      	ldr	r3, [r4, #0]
 8003b54:	0699      	lsls	r1, r3, #26
 8003b56:	bf42      	ittt	mi
 8003b58:	6833      	ldrmi	r3, [r6, #0]
 8003b5a:	3302      	addmi	r3, #2
 8003b5c:	6033      	strmi	r3, [r6, #0]
 8003b5e:	6825      	ldr	r5, [r4, #0]
 8003b60:	f015 0506 	ands.w	r5, r5, #6
 8003b64:	d106      	bne.n	8003b74 <_printf_common+0x48>
 8003b66:	f104 0a19 	add.w	sl, r4, #25
 8003b6a:	68e3      	ldr	r3, [r4, #12]
 8003b6c:	6832      	ldr	r2, [r6, #0]
 8003b6e:	1a9b      	subs	r3, r3, r2
 8003b70:	42ab      	cmp	r3, r5
 8003b72:	dc2b      	bgt.n	8003bcc <_printf_common+0xa0>
 8003b74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003b78:	6822      	ldr	r2, [r4, #0]
 8003b7a:	3b00      	subs	r3, #0
 8003b7c:	bf18      	it	ne
 8003b7e:	2301      	movne	r3, #1
 8003b80:	0692      	lsls	r2, r2, #26
 8003b82:	d430      	bmi.n	8003be6 <_printf_common+0xba>
 8003b84:	4641      	mov	r1, r8
 8003b86:	4638      	mov	r0, r7
 8003b88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003b8c:	47c8      	blx	r9
 8003b8e:	3001      	adds	r0, #1
 8003b90:	d023      	beq.n	8003bda <_printf_common+0xae>
 8003b92:	6823      	ldr	r3, [r4, #0]
 8003b94:	6922      	ldr	r2, [r4, #16]
 8003b96:	f003 0306 	and.w	r3, r3, #6
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	bf14      	ite	ne
 8003b9e:	2500      	movne	r5, #0
 8003ba0:	6833      	ldreq	r3, [r6, #0]
 8003ba2:	f04f 0600 	mov.w	r6, #0
 8003ba6:	bf08      	it	eq
 8003ba8:	68e5      	ldreq	r5, [r4, #12]
 8003baa:	f104 041a 	add.w	r4, r4, #26
 8003bae:	bf08      	it	eq
 8003bb0:	1aed      	subeq	r5, r5, r3
 8003bb2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003bb6:	bf08      	it	eq
 8003bb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	bfc4      	itt	gt
 8003bc0:	1a9b      	subgt	r3, r3, r2
 8003bc2:	18ed      	addgt	r5, r5, r3
 8003bc4:	42b5      	cmp	r5, r6
 8003bc6:	d11a      	bne.n	8003bfe <_printf_common+0xd2>
 8003bc8:	2000      	movs	r0, #0
 8003bca:	e008      	b.n	8003bde <_printf_common+0xb2>
 8003bcc:	2301      	movs	r3, #1
 8003bce:	4652      	mov	r2, sl
 8003bd0:	4641      	mov	r1, r8
 8003bd2:	4638      	mov	r0, r7
 8003bd4:	47c8      	blx	r9
 8003bd6:	3001      	adds	r0, #1
 8003bd8:	d103      	bne.n	8003be2 <_printf_common+0xb6>
 8003bda:	f04f 30ff 	mov.w	r0, #4294967295
 8003bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003be2:	3501      	adds	r5, #1
 8003be4:	e7c1      	b.n	8003b6a <_printf_common+0x3e>
 8003be6:	2030      	movs	r0, #48	@ 0x30
 8003be8:	18e1      	adds	r1, r4, r3
 8003bea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003bee:	1c5a      	adds	r2, r3, #1
 8003bf0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003bf4:	4422      	add	r2, r4
 8003bf6:	3302      	adds	r3, #2
 8003bf8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003bfc:	e7c2      	b.n	8003b84 <_printf_common+0x58>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	4622      	mov	r2, r4
 8003c02:	4641      	mov	r1, r8
 8003c04:	4638      	mov	r0, r7
 8003c06:	47c8      	blx	r9
 8003c08:	3001      	adds	r0, #1
 8003c0a:	d0e6      	beq.n	8003bda <_printf_common+0xae>
 8003c0c:	3601      	adds	r6, #1
 8003c0e:	e7d9      	b.n	8003bc4 <_printf_common+0x98>

08003c10 <_printf_i>:
 8003c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c14:	7e0f      	ldrb	r7, [r1, #24]
 8003c16:	4691      	mov	r9, r2
 8003c18:	2f78      	cmp	r7, #120	@ 0x78
 8003c1a:	4680      	mov	r8, r0
 8003c1c:	460c      	mov	r4, r1
 8003c1e:	469a      	mov	sl, r3
 8003c20:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003c22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003c26:	d807      	bhi.n	8003c38 <_printf_i+0x28>
 8003c28:	2f62      	cmp	r7, #98	@ 0x62
 8003c2a:	d80a      	bhi.n	8003c42 <_printf_i+0x32>
 8003c2c:	2f00      	cmp	r7, #0
 8003c2e:	f000 80d3 	beq.w	8003dd8 <_printf_i+0x1c8>
 8003c32:	2f58      	cmp	r7, #88	@ 0x58
 8003c34:	f000 80ba 	beq.w	8003dac <_printf_i+0x19c>
 8003c38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003c40:	e03a      	b.n	8003cb8 <_printf_i+0xa8>
 8003c42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003c46:	2b15      	cmp	r3, #21
 8003c48:	d8f6      	bhi.n	8003c38 <_printf_i+0x28>
 8003c4a:	a101      	add	r1, pc, #4	@ (adr r1, 8003c50 <_printf_i+0x40>)
 8003c4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c50:	08003ca9 	.word	0x08003ca9
 8003c54:	08003cbd 	.word	0x08003cbd
 8003c58:	08003c39 	.word	0x08003c39
 8003c5c:	08003c39 	.word	0x08003c39
 8003c60:	08003c39 	.word	0x08003c39
 8003c64:	08003c39 	.word	0x08003c39
 8003c68:	08003cbd 	.word	0x08003cbd
 8003c6c:	08003c39 	.word	0x08003c39
 8003c70:	08003c39 	.word	0x08003c39
 8003c74:	08003c39 	.word	0x08003c39
 8003c78:	08003c39 	.word	0x08003c39
 8003c7c:	08003dbf 	.word	0x08003dbf
 8003c80:	08003ce7 	.word	0x08003ce7
 8003c84:	08003d79 	.word	0x08003d79
 8003c88:	08003c39 	.word	0x08003c39
 8003c8c:	08003c39 	.word	0x08003c39
 8003c90:	08003de1 	.word	0x08003de1
 8003c94:	08003c39 	.word	0x08003c39
 8003c98:	08003ce7 	.word	0x08003ce7
 8003c9c:	08003c39 	.word	0x08003c39
 8003ca0:	08003c39 	.word	0x08003c39
 8003ca4:	08003d81 	.word	0x08003d81
 8003ca8:	6833      	ldr	r3, [r6, #0]
 8003caa:	1d1a      	adds	r2, r3, #4
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6032      	str	r2, [r6, #0]
 8003cb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003cb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e09e      	b.n	8003dfa <_printf_i+0x1ea>
 8003cbc:	6833      	ldr	r3, [r6, #0]
 8003cbe:	6820      	ldr	r0, [r4, #0]
 8003cc0:	1d19      	adds	r1, r3, #4
 8003cc2:	6031      	str	r1, [r6, #0]
 8003cc4:	0606      	lsls	r6, r0, #24
 8003cc6:	d501      	bpl.n	8003ccc <_printf_i+0xbc>
 8003cc8:	681d      	ldr	r5, [r3, #0]
 8003cca:	e003      	b.n	8003cd4 <_printf_i+0xc4>
 8003ccc:	0645      	lsls	r5, r0, #25
 8003cce:	d5fb      	bpl.n	8003cc8 <_printf_i+0xb8>
 8003cd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003cd4:	2d00      	cmp	r5, #0
 8003cd6:	da03      	bge.n	8003ce0 <_printf_i+0xd0>
 8003cd8:	232d      	movs	r3, #45	@ 0x2d
 8003cda:	426d      	negs	r5, r5
 8003cdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ce0:	230a      	movs	r3, #10
 8003ce2:	4859      	ldr	r0, [pc, #356]	@ (8003e48 <_printf_i+0x238>)
 8003ce4:	e011      	b.n	8003d0a <_printf_i+0xfa>
 8003ce6:	6821      	ldr	r1, [r4, #0]
 8003ce8:	6833      	ldr	r3, [r6, #0]
 8003cea:	0608      	lsls	r0, r1, #24
 8003cec:	f853 5b04 	ldr.w	r5, [r3], #4
 8003cf0:	d402      	bmi.n	8003cf8 <_printf_i+0xe8>
 8003cf2:	0649      	lsls	r1, r1, #25
 8003cf4:	bf48      	it	mi
 8003cf6:	b2ad      	uxthmi	r5, r5
 8003cf8:	2f6f      	cmp	r7, #111	@ 0x6f
 8003cfa:	6033      	str	r3, [r6, #0]
 8003cfc:	bf14      	ite	ne
 8003cfe:	230a      	movne	r3, #10
 8003d00:	2308      	moveq	r3, #8
 8003d02:	4851      	ldr	r0, [pc, #324]	@ (8003e48 <_printf_i+0x238>)
 8003d04:	2100      	movs	r1, #0
 8003d06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003d0a:	6866      	ldr	r6, [r4, #4]
 8003d0c:	2e00      	cmp	r6, #0
 8003d0e:	bfa8      	it	ge
 8003d10:	6821      	ldrge	r1, [r4, #0]
 8003d12:	60a6      	str	r6, [r4, #8]
 8003d14:	bfa4      	itt	ge
 8003d16:	f021 0104 	bicge.w	r1, r1, #4
 8003d1a:	6021      	strge	r1, [r4, #0]
 8003d1c:	b90d      	cbnz	r5, 8003d22 <_printf_i+0x112>
 8003d1e:	2e00      	cmp	r6, #0
 8003d20:	d04b      	beq.n	8003dba <_printf_i+0x1aa>
 8003d22:	4616      	mov	r6, r2
 8003d24:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d28:	fb03 5711 	mls	r7, r3, r1, r5
 8003d2c:	5dc7      	ldrb	r7, [r0, r7]
 8003d2e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d32:	462f      	mov	r7, r5
 8003d34:	42bb      	cmp	r3, r7
 8003d36:	460d      	mov	r5, r1
 8003d38:	d9f4      	bls.n	8003d24 <_printf_i+0x114>
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d10b      	bne.n	8003d56 <_printf_i+0x146>
 8003d3e:	6823      	ldr	r3, [r4, #0]
 8003d40:	07df      	lsls	r7, r3, #31
 8003d42:	d508      	bpl.n	8003d56 <_printf_i+0x146>
 8003d44:	6923      	ldr	r3, [r4, #16]
 8003d46:	6861      	ldr	r1, [r4, #4]
 8003d48:	4299      	cmp	r1, r3
 8003d4a:	bfde      	ittt	le
 8003d4c:	2330      	movle	r3, #48	@ 0x30
 8003d4e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d52:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d56:	1b92      	subs	r2, r2, r6
 8003d58:	6122      	str	r2, [r4, #16]
 8003d5a:	464b      	mov	r3, r9
 8003d5c:	4621      	mov	r1, r4
 8003d5e:	4640      	mov	r0, r8
 8003d60:	f8cd a000 	str.w	sl, [sp]
 8003d64:	aa03      	add	r2, sp, #12
 8003d66:	f7ff fee1 	bl	8003b2c <_printf_common>
 8003d6a:	3001      	adds	r0, #1
 8003d6c:	d14a      	bne.n	8003e04 <_printf_i+0x1f4>
 8003d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d72:	b004      	add	sp, #16
 8003d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d78:	6823      	ldr	r3, [r4, #0]
 8003d7a:	f043 0320 	orr.w	r3, r3, #32
 8003d7e:	6023      	str	r3, [r4, #0]
 8003d80:	2778      	movs	r7, #120	@ 0x78
 8003d82:	4832      	ldr	r0, [pc, #200]	@ (8003e4c <_printf_i+0x23c>)
 8003d84:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003d88:	6823      	ldr	r3, [r4, #0]
 8003d8a:	6831      	ldr	r1, [r6, #0]
 8003d8c:	061f      	lsls	r7, r3, #24
 8003d8e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003d92:	d402      	bmi.n	8003d9a <_printf_i+0x18a>
 8003d94:	065f      	lsls	r7, r3, #25
 8003d96:	bf48      	it	mi
 8003d98:	b2ad      	uxthmi	r5, r5
 8003d9a:	6031      	str	r1, [r6, #0]
 8003d9c:	07d9      	lsls	r1, r3, #31
 8003d9e:	bf44      	itt	mi
 8003da0:	f043 0320 	orrmi.w	r3, r3, #32
 8003da4:	6023      	strmi	r3, [r4, #0]
 8003da6:	b11d      	cbz	r5, 8003db0 <_printf_i+0x1a0>
 8003da8:	2310      	movs	r3, #16
 8003daa:	e7ab      	b.n	8003d04 <_printf_i+0xf4>
 8003dac:	4826      	ldr	r0, [pc, #152]	@ (8003e48 <_printf_i+0x238>)
 8003dae:	e7e9      	b.n	8003d84 <_printf_i+0x174>
 8003db0:	6823      	ldr	r3, [r4, #0]
 8003db2:	f023 0320 	bic.w	r3, r3, #32
 8003db6:	6023      	str	r3, [r4, #0]
 8003db8:	e7f6      	b.n	8003da8 <_printf_i+0x198>
 8003dba:	4616      	mov	r6, r2
 8003dbc:	e7bd      	b.n	8003d3a <_printf_i+0x12a>
 8003dbe:	6833      	ldr	r3, [r6, #0]
 8003dc0:	6825      	ldr	r5, [r4, #0]
 8003dc2:	1d18      	adds	r0, r3, #4
 8003dc4:	6961      	ldr	r1, [r4, #20]
 8003dc6:	6030      	str	r0, [r6, #0]
 8003dc8:	062e      	lsls	r6, r5, #24
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	d501      	bpl.n	8003dd2 <_printf_i+0x1c2>
 8003dce:	6019      	str	r1, [r3, #0]
 8003dd0:	e002      	b.n	8003dd8 <_printf_i+0x1c8>
 8003dd2:	0668      	lsls	r0, r5, #25
 8003dd4:	d5fb      	bpl.n	8003dce <_printf_i+0x1be>
 8003dd6:	8019      	strh	r1, [r3, #0]
 8003dd8:	2300      	movs	r3, #0
 8003dda:	4616      	mov	r6, r2
 8003ddc:	6123      	str	r3, [r4, #16]
 8003dde:	e7bc      	b.n	8003d5a <_printf_i+0x14a>
 8003de0:	6833      	ldr	r3, [r6, #0]
 8003de2:	2100      	movs	r1, #0
 8003de4:	1d1a      	adds	r2, r3, #4
 8003de6:	6032      	str	r2, [r6, #0]
 8003de8:	681e      	ldr	r6, [r3, #0]
 8003dea:	6862      	ldr	r2, [r4, #4]
 8003dec:	4630      	mov	r0, r6
 8003dee:	f000 f8dd 	bl	8003fac <memchr>
 8003df2:	b108      	cbz	r0, 8003df8 <_printf_i+0x1e8>
 8003df4:	1b80      	subs	r0, r0, r6
 8003df6:	6060      	str	r0, [r4, #4]
 8003df8:	6863      	ldr	r3, [r4, #4]
 8003dfa:	6123      	str	r3, [r4, #16]
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e02:	e7aa      	b.n	8003d5a <_printf_i+0x14a>
 8003e04:	4632      	mov	r2, r6
 8003e06:	4649      	mov	r1, r9
 8003e08:	4640      	mov	r0, r8
 8003e0a:	6923      	ldr	r3, [r4, #16]
 8003e0c:	47d0      	blx	sl
 8003e0e:	3001      	adds	r0, #1
 8003e10:	d0ad      	beq.n	8003d6e <_printf_i+0x15e>
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	079b      	lsls	r3, r3, #30
 8003e16:	d413      	bmi.n	8003e40 <_printf_i+0x230>
 8003e18:	68e0      	ldr	r0, [r4, #12]
 8003e1a:	9b03      	ldr	r3, [sp, #12]
 8003e1c:	4298      	cmp	r0, r3
 8003e1e:	bfb8      	it	lt
 8003e20:	4618      	movlt	r0, r3
 8003e22:	e7a6      	b.n	8003d72 <_printf_i+0x162>
 8003e24:	2301      	movs	r3, #1
 8003e26:	4632      	mov	r2, r6
 8003e28:	4649      	mov	r1, r9
 8003e2a:	4640      	mov	r0, r8
 8003e2c:	47d0      	blx	sl
 8003e2e:	3001      	adds	r0, #1
 8003e30:	d09d      	beq.n	8003d6e <_printf_i+0x15e>
 8003e32:	3501      	adds	r5, #1
 8003e34:	68e3      	ldr	r3, [r4, #12]
 8003e36:	9903      	ldr	r1, [sp, #12]
 8003e38:	1a5b      	subs	r3, r3, r1
 8003e3a:	42ab      	cmp	r3, r5
 8003e3c:	dcf2      	bgt.n	8003e24 <_printf_i+0x214>
 8003e3e:	e7eb      	b.n	8003e18 <_printf_i+0x208>
 8003e40:	2500      	movs	r5, #0
 8003e42:	f104 0619 	add.w	r6, r4, #25
 8003e46:	e7f5      	b.n	8003e34 <_printf_i+0x224>
 8003e48:	080048b1 	.word	0x080048b1
 8003e4c:	080048c2 	.word	0x080048c2

08003e50 <__swhatbuf_r>:
 8003e50:	b570      	push	{r4, r5, r6, lr}
 8003e52:	460c      	mov	r4, r1
 8003e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e58:	4615      	mov	r5, r2
 8003e5a:	2900      	cmp	r1, #0
 8003e5c:	461e      	mov	r6, r3
 8003e5e:	b096      	sub	sp, #88	@ 0x58
 8003e60:	da0c      	bge.n	8003e7c <__swhatbuf_r+0x2c>
 8003e62:	89a3      	ldrh	r3, [r4, #12]
 8003e64:	2100      	movs	r1, #0
 8003e66:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003e6a:	bf14      	ite	ne
 8003e6c:	2340      	movne	r3, #64	@ 0x40
 8003e6e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003e72:	2000      	movs	r0, #0
 8003e74:	6031      	str	r1, [r6, #0]
 8003e76:	602b      	str	r3, [r5, #0]
 8003e78:	b016      	add	sp, #88	@ 0x58
 8003e7a:	bd70      	pop	{r4, r5, r6, pc}
 8003e7c:	466a      	mov	r2, sp
 8003e7e:	f000 f863 	bl	8003f48 <_fstat_r>
 8003e82:	2800      	cmp	r0, #0
 8003e84:	dbed      	blt.n	8003e62 <__swhatbuf_r+0x12>
 8003e86:	9901      	ldr	r1, [sp, #4]
 8003e88:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003e8c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003e90:	4259      	negs	r1, r3
 8003e92:	4159      	adcs	r1, r3
 8003e94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e98:	e7eb      	b.n	8003e72 <__swhatbuf_r+0x22>

08003e9a <__smakebuf_r>:
 8003e9a:	898b      	ldrh	r3, [r1, #12]
 8003e9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e9e:	079d      	lsls	r5, r3, #30
 8003ea0:	4606      	mov	r6, r0
 8003ea2:	460c      	mov	r4, r1
 8003ea4:	d507      	bpl.n	8003eb6 <__smakebuf_r+0x1c>
 8003ea6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003eaa:	6023      	str	r3, [r4, #0]
 8003eac:	6123      	str	r3, [r4, #16]
 8003eae:	2301      	movs	r3, #1
 8003eb0:	6163      	str	r3, [r4, #20]
 8003eb2:	b003      	add	sp, #12
 8003eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eb6:	466a      	mov	r2, sp
 8003eb8:	ab01      	add	r3, sp, #4
 8003eba:	f7ff ffc9 	bl	8003e50 <__swhatbuf_r>
 8003ebe:	9f00      	ldr	r7, [sp, #0]
 8003ec0:	4605      	mov	r5, r0
 8003ec2:	4639      	mov	r1, r7
 8003ec4:	4630      	mov	r0, r6
 8003ec6:	f7ff fb0d 	bl	80034e4 <_malloc_r>
 8003eca:	b948      	cbnz	r0, 8003ee0 <__smakebuf_r+0x46>
 8003ecc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ed0:	059a      	lsls	r2, r3, #22
 8003ed2:	d4ee      	bmi.n	8003eb2 <__smakebuf_r+0x18>
 8003ed4:	f023 0303 	bic.w	r3, r3, #3
 8003ed8:	f043 0302 	orr.w	r3, r3, #2
 8003edc:	81a3      	strh	r3, [r4, #12]
 8003ede:	e7e2      	b.n	8003ea6 <__smakebuf_r+0xc>
 8003ee0:	89a3      	ldrh	r3, [r4, #12]
 8003ee2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003ee6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003eea:	81a3      	strh	r3, [r4, #12]
 8003eec:	9b01      	ldr	r3, [sp, #4]
 8003eee:	6020      	str	r0, [r4, #0]
 8003ef0:	b15b      	cbz	r3, 8003f0a <__smakebuf_r+0x70>
 8003ef2:	4630      	mov	r0, r6
 8003ef4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ef8:	f000 f838 	bl	8003f6c <_isatty_r>
 8003efc:	b128      	cbz	r0, 8003f0a <__smakebuf_r+0x70>
 8003efe:	89a3      	ldrh	r3, [r4, #12]
 8003f00:	f023 0303 	bic.w	r3, r3, #3
 8003f04:	f043 0301 	orr.w	r3, r3, #1
 8003f08:	81a3      	strh	r3, [r4, #12]
 8003f0a:	89a3      	ldrh	r3, [r4, #12]
 8003f0c:	431d      	orrs	r5, r3
 8003f0e:	81a5      	strh	r5, [r4, #12]
 8003f10:	e7cf      	b.n	8003eb2 <__smakebuf_r+0x18>

08003f12 <memmove>:
 8003f12:	4288      	cmp	r0, r1
 8003f14:	b510      	push	{r4, lr}
 8003f16:	eb01 0402 	add.w	r4, r1, r2
 8003f1a:	d902      	bls.n	8003f22 <memmove+0x10>
 8003f1c:	4284      	cmp	r4, r0
 8003f1e:	4623      	mov	r3, r4
 8003f20:	d807      	bhi.n	8003f32 <memmove+0x20>
 8003f22:	1e43      	subs	r3, r0, #1
 8003f24:	42a1      	cmp	r1, r4
 8003f26:	d008      	beq.n	8003f3a <memmove+0x28>
 8003f28:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f2c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f30:	e7f8      	b.n	8003f24 <memmove+0x12>
 8003f32:	4601      	mov	r1, r0
 8003f34:	4402      	add	r2, r0
 8003f36:	428a      	cmp	r2, r1
 8003f38:	d100      	bne.n	8003f3c <memmove+0x2a>
 8003f3a:	bd10      	pop	{r4, pc}
 8003f3c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f40:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f44:	e7f7      	b.n	8003f36 <memmove+0x24>
	...

08003f48 <_fstat_r>:
 8003f48:	b538      	push	{r3, r4, r5, lr}
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	4d06      	ldr	r5, [pc, #24]	@ (8003f68 <_fstat_r+0x20>)
 8003f4e:	4604      	mov	r4, r0
 8003f50:	4608      	mov	r0, r1
 8003f52:	4611      	mov	r1, r2
 8003f54:	602b      	str	r3, [r5, #0]
 8003f56:	f7fd f8ab 	bl	80010b0 <_fstat>
 8003f5a:	1c43      	adds	r3, r0, #1
 8003f5c:	d102      	bne.n	8003f64 <_fstat_r+0x1c>
 8003f5e:	682b      	ldr	r3, [r5, #0]
 8003f60:	b103      	cbz	r3, 8003f64 <_fstat_r+0x1c>
 8003f62:	6023      	str	r3, [r4, #0]
 8003f64:	bd38      	pop	{r3, r4, r5, pc}
 8003f66:	bf00      	nop
 8003f68:	20001110 	.word	0x20001110

08003f6c <_isatty_r>:
 8003f6c:	b538      	push	{r3, r4, r5, lr}
 8003f6e:	2300      	movs	r3, #0
 8003f70:	4d05      	ldr	r5, [pc, #20]	@ (8003f88 <_isatty_r+0x1c>)
 8003f72:	4604      	mov	r4, r0
 8003f74:	4608      	mov	r0, r1
 8003f76:	602b      	str	r3, [r5, #0]
 8003f78:	f7fd f8a9 	bl	80010ce <_isatty>
 8003f7c:	1c43      	adds	r3, r0, #1
 8003f7e:	d102      	bne.n	8003f86 <_isatty_r+0x1a>
 8003f80:	682b      	ldr	r3, [r5, #0]
 8003f82:	b103      	cbz	r3, 8003f86 <_isatty_r+0x1a>
 8003f84:	6023      	str	r3, [r4, #0]
 8003f86:	bd38      	pop	{r3, r4, r5, pc}
 8003f88:	20001110 	.word	0x20001110

08003f8c <_sbrk_r>:
 8003f8c:	b538      	push	{r3, r4, r5, lr}
 8003f8e:	2300      	movs	r3, #0
 8003f90:	4d05      	ldr	r5, [pc, #20]	@ (8003fa8 <_sbrk_r+0x1c>)
 8003f92:	4604      	mov	r4, r0
 8003f94:	4608      	mov	r0, r1
 8003f96:	602b      	str	r3, [r5, #0]
 8003f98:	f7fd f8b0 	bl	80010fc <_sbrk>
 8003f9c:	1c43      	adds	r3, r0, #1
 8003f9e:	d102      	bne.n	8003fa6 <_sbrk_r+0x1a>
 8003fa0:	682b      	ldr	r3, [r5, #0]
 8003fa2:	b103      	cbz	r3, 8003fa6 <_sbrk_r+0x1a>
 8003fa4:	6023      	str	r3, [r4, #0]
 8003fa6:	bd38      	pop	{r3, r4, r5, pc}
 8003fa8:	20001110 	.word	0x20001110

08003fac <memchr>:
 8003fac:	4603      	mov	r3, r0
 8003fae:	b510      	push	{r4, lr}
 8003fb0:	b2c9      	uxtb	r1, r1
 8003fb2:	4402      	add	r2, r0
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	d101      	bne.n	8003fbe <memchr+0x12>
 8003fba:	2000      	movs	r0, #0
 8003fbc:	e003      	b.n	8003fc6 <memchr+0x1a>
 8003fbe:	7804      	ldrb	r4, [r0, #0]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	428c      	cmp	r4, r1
 8003fc4:	d1f6      	bne.n	8003fb4 <memchr+0x8>
 8003fc6:	bd10      	pop	{r4, pc}

08003fc8 <memcpy>:
 8003fc8:	440a      	add	r2, r1
 8003fca:	4291      	cmp	r1, r2
 8003fcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003fd0:	d100      	bne.n	8003fd4 <memcpy+0xc>
 8003fd2:	4770      	bx	lr
 8003fd4:	b510      	push	{r4, lr}
 8003fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fda:	4291      	cmp	r1, r2
 8003fdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fe0:	d1f9      	bne.n	8003fd6 <memcpy+0xe>
 8003fe2:	bd10      	pop	{r4, pc}

08003fe4 <_realloc_r>:
 8003fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fe8:	4680      	mov	r8, r0
 8003fea:	4615      	mov	r5, r2
 8003fec:	460c      	mov	r4, r1
 8003fee:	b921      	cbnz	r1, 8003ffa <_realloc_r+0x16>
 8003ff0:	4611      	mov	r1, r2
 8003ff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ff6:	f7ff ba75 	b.w	80034e4 <_malloc_r>
 8003ffa:	b92a      	cbnz	r2, 8004008 <_realloc_r+0x24>
 8003ffc:	f7ff fa08 	bl	8003410 <_free_r>
 8004000:	2400      	movs	r4, #0
 8004002:	4620      	mov	r0, r4
 8004004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004008:	f000 f81a 	bl	8004040 <_malloc_usable_size_r>
 800400c:	4285      	cmp	r5, r0
 800400e:	4606      	mov	r6, r0
 8004010:	d802      	bhi.n	8004018 <_realloc_r+0x34>
 8004012:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004016:	d8f4      	bhi.n	8004002 <_realloc_r+0x1e>
 8004018:	4629      	mov	r1, r5
 800401a:	4640      	mov	r0, r8
 800401c:	f7ff fa62 	bl	80034e4 <_malloc_r>
 8004020:	4607      	mov	r7, r0
 8004022:	2800      	cmp	r0, #0
 8004024:	d0ec      	beq.n	8004000 <_realloc_r+0x1c>
 8004026:	42b5      	cmp	r5, r6
 8004028:	462a      	mov	r2, r5
 800402a:	4621      	mov	r1, r4
 800402c:	bf28      	it	cs
 800402e:	4632      	movcs	r2, r6
 8004030:	f7ff ffca 	bl	8003fc8 <memcpy>
 8004034:	4621      	mov	r1, r4
 8004036:	4640      	mov	r0, r8
 8004038:	f7ff f9ea 	bl	8003410 <_free_r>
 800403c:	463c      	mov	r4, r7
 800403e:	e7e0      	b.n	8004002 <_realloc_r+0x1e>

08004040 <_malloc_usable_size_r>:
 8004040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004044:	1f18      	subs	r0, r3, #4
 8004046:	2b00      	cmp	r3, #0
 8004048:	bfbc      	itt	lt
 800404a:	580b      	ldrlt	r3, [r1, r0]
 800404c:	18c0      	addlt	r0, r0, r3
 800404e:	4770      	bx	lr

08004050 <_init>:
 8004050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004052:	bf00      	nop
 8004054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004056:	bc08      	pop	{r3}
 8004058:	469e      	mov	lr, r3
 800405a:	4770      	bx	lr

0800405c <_fini>:
 800405c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405e:	bf00      	nop
 8004060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004062:	bc08      	pop	{r3}
 8004064:	469e      	mov	lr, r3
 8004066:	4770      	bx	lr
